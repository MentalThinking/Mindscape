<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Sunder</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Core</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>prompt</name>
					<script>cecho(" &lt;red&gt;[&lt;white&gt;" .. snd.target .. "&lt;red&gt;]")
snd.illusion_found = false
if snd.offense_loaded then
  local msg
  snd.battle_aff = "none"
  snd.chasten_aff = "none"
  snd.last_cured = ""
  snd.rebounded = false
  if snd.toggles.alerts then
    snd.run_alerts()
  end
  if #snd.alertness &gt;= 1 and snd.toggles.affcalling then
    dir = snd.parseDir(snd.alertnessDir)
    msg = "wt [" .. string.upper(snd.alertType) .. "] -" .. string.upper(dir) .. "- "
    for i in pairs(snd.alertness) do
      msg = msg .. snd.alertness[i] .. " "
    end
    snd.send(msg)
  end
  snd.alertness = {}
  snd.alertnessDir = "none"
end

snd.defended = false

disableTrigger("Sunder Dodge")
disableTrigger("Sunder Parry")
disableTrigger("Sunder Rebounding")

snd.core()

if snd.delete_prompt then
  deleteLine()
  snd.delete_prompt = false
end

if snd.bashing_loaded or snd.toggles.fastwalk then

  if snd.new.area then
    if gmcp.Room.Info.area == "the Shattered Vortex" then
      x, y = string.match(gmcp.Char.Status.level, "(.*) (.*)")
      level = tonumber(x)
      if level &lt; 100 then
        area = "the Shattered Vortex (Low Level)"
      elseif snd.faction == "spirit" then
        area = "the Shattered Vortex (Spirit)"
      elseif snd.faction == "shadow" then
        area = "the Shattered Vortex (Shadow)"
      end
      if area ~= snd.my.area then
        cecho("\n&lt;green&gt;Entering: " .. area)
        snd.load_targets(area)
        send(" ")
      end
    else
      cecho("\n&lt;green&gt;Entering: " .. gmcp.Room.Info.area)
      snd.load_targets(gmcp.Room.Info.area)
      send(" ")
    end
    snd.new.area = false
  end

  if snd.new.room and (snd.toggles.fasthunt or snd.toggles.fastwalk) then
    snd.ylem_check = false
    if bot.going and (snd.pathing or (mmp.speedWalkCounter and mmp.speedWalkCounter or speedWalkCounter) ~= 0) then
      return
    end

    if snd.toggles.fasthunt and snd.are_we_with_grouped() then
      snd.toggles.bashing = true
      snd.waiting.balance = false
      snd.room_clear = true
      snd.runBasher()
      snd.core()
    elseif bot.going then
      expandAlias("move")
    end
  end
end
if snd.class == "Monk" then
  snd.stance = gmcp.Char.Vitals.stance
end
snd.new.room = false</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>1</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#00b300</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string></string>
						<string>^.+</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>7</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Tracking</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Defenses</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>def start</name>
							<script>for i in pairs(snd.defenses) do
 snd.def_remove(i)
end
snd.runemarkMajor, snd.runemarkMinor = "none", "none"
snd.parrying = "none"</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>99</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have the following active defences:</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>def end</name>
								<script>setTriggerStayOpen("def start", 0)</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You are protected by (\d+) defences\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Cruelty/Homage have</name>
								<script>if snd.class == "Carnifex" then
  snd.def_def("cruelty")
else
  snd.def_def("homage")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your strength has been bolstered.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>chameleon</name>
								<script>snd.def_def("chameleon")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You have assumed the identity of \w+.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>ylem orbs</name>
								<script>local color = {
  ["white"] = "white",
  ["blue"] = "cerulean",
  ["red"] = "crimson",
  ["yellow"] = "amber",  
  ["green"] = "green",}
  
 snd.def_def(color[matches[2]].."_orb")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You are diffused by a (\w+) mist\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>alacrity def</name>
								<script>alacritycount = tonumber(matches[2])
snd.def_def("alacrity")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your fingers are energized and ready to act (3|2|1) more times.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>catchall</name>
								<script>if snd.defenses_list[matches[2]] then
  snd.def_def(snd.defenses_list[matches[2]])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(.+)$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Manifestation Phantasms</name>
								<script>snd.def_def(matches[2].."_phantasm")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You are surrounded by phantasms of (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Manifestation Chimeras</name>
								<script>local chimeras = matches[2]:split(" and ")
for _, chimera in pairs(chimeras) do
  snd.def_def(chimera.."_chimera")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You have consumed and chimerized the following: (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Righteousness Aura</name>
								<script>snd.def_def(matches[2].."_aura")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You are protected by an aura of (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Righteousness Blessings</name>
								<script>local blessings = matches[2]:split(" and ")
for _, blessing in pairs(blessings) do
  snd.def_def(blessing.."_blessing")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You are benefiting from the blessings of (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>defline gain</name>
							<script>for i in pairs(snd.defenses) do
 if snd.defenses[i].defense == multimatches[2][2] then
  if snd.toggles.gags then
    deleteLine()
  end
  snd.def_gain(i)
 end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#008080</colorTriggerFgColor>
							<colorTriggerBgColor>#008080</colorTriggerBgColor>
							<regexCodeList>
								<string>FG14BG2</string>
								<string>^You have gained the ([a-z_]+) defence\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>6</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>defline strip</name>
							<script>for i in pairs(snd.defenses) do
 if snd.defenses[i].defense == multimatches[2][2] then
  if snd.toggles.gags then
    deleteLine()
  end
  snd.def_take(i)
 end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#008080</colorTriggerBgColor>
							<regexCodeList>
								<string>FG14BG2</string>
								<string>^Your ([a-z_]+) defence has been stripped\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>6</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Others</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>divert melee gain</name>
								<script>snd.def_gain("divert_melee")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You begin to focus your efforts on diverting damage from melee attacks.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>dodge melee gain</name>
								<script>snd.def_gain("dodge_melee")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You begin to focus your efforts on dodging melee attacks.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>rebounding lose</name>
								<script>snd.def_take("rebounding")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your aura of weapons rebounding disappears.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>soul embed body</name>
								<script>snd.def_gain("soul_body")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Eldritch glyphs coruscate in flickering patterns of crimson across the surface of a soulstone as you press it against your forehead. Melding seamlessly with your skin, a dark sheen of red ripples over your body as it hardens against all weapons.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>not hiding</name>
								<script>snd.def_remove("hiding")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You must be hidden within the shadows to perform that act.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Spheres stop</name>
								<script>snd.toggles.active = true
send("firstaid on")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You are attuned to the music of the spheres.$</string>
									<string>^Finally, your heart stops racing as your soul cries in harmony with the heavens themselves.$</string>
									<string>You are already contemplating the music of the spheres.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Spheres start</name>
								<script>if snd.defenses.def_spheres.needit then
  snd.toggles.active = false
  send("firstaid off")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>1</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You use Numerology Spheres.</string>
									<string>You begin to channel the music of the spheres.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Spheres Inbetween</name>
								<script>if snd.defenses.def_spheres.needit then
  snd.toggles.active = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your body begins to sway as the incomprehensible</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Spheres Broke</name>
								<script>snd.toggles.active = true
send("firstaid on")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The music of the spheres fades, leaving you weak and unsteady.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Earthenform start</name>
								<script>if snd.defenses.def_permafrost.needit or snd.defenses.def_earthenform.needit then
  snd.toggles.active = false
  send("firstaid off")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You kneel, and place your hands upon the earth beneath you. As if on command, the earth shifts and begins to travel up your arms.</string>
									<string>The rise and fall of your chest mirrors the encroaching rhythm of brume's chill crawling across arm and leg and extremity. Blood freezes in place, its passage slowed by crystals of icy rime now coursing through your veins.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Earthenform/Permafrost interrupted.</name>
								<script>snd.toggles.active = true
send("firstaid on")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You cease your focus upon attaining the earthen form, your mass returning to normal as the earth falls from your body.</string>
									<string>Warmth returns to the air as your concentration falters, the aura of permafrost dispersing before it can fully form.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Earthenform finish</name>
								<script>snd.toggles.active = true
send("firstaid on")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You have gained the earthenform defence.$</string>
									<string>^You have gained the permafrost defence.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Vitality available</name>
								<script>snd.balance.vitality = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You are once again able to call upon your vitality.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Vitality unavailable</name>
								<script>snd.balance.vitality = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A surge of rejuvenating energy floods your system, healing your wounds.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Chameleon fade</name>
								<script>snd.def_remove("chameleon")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The effect of your chameleon fades, and you return to your own identity.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Raceskills</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Endgame skills add for defup purposes</name>
									<script>snd.skills.raceskills = {}
enableTrigger("Which endgame skills you got?")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You currently possess the following racial skills\:</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Which endgame skills you got?</name>
									<script>

local possible_skills = {
  "Selfishness",
  "Chameleon",
  "Gripping",
  "Nightsight",
  "Stalking",
  "Heatsight",
  "Pacing",
}

for _, v in pairs(possible_skills) do
  if string.find(matches[2], v) and not table.isMember(snd.skills.raceskills, v) then
   table.insert(snd.skills.raceskills, v)
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(.+)$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Turn off Endgame skills check</name>
									<script>disableTrigger("Which endgame skills you got?")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>1</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>+----------------------+----------------------+----------------------+</string>
										<string>^To learn more about a racial ability, type RACIAL HELP \&lt;ability\&gt;\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Tattoos</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Tattoos begin</name>
									<script>snd.skills.tattoos_on_me = {}
enableTrigger("What tattoos you rockin'?")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You have the following tattoos\:</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>What tattoos you rockin'?</name>
									<script>

local possible_skills = {
  "Cloak",
  "Chameleon",
  "Mindseye",
  "Firefly",
  "Flame",
  "Shield",
  "Hourglass",
  "Web",
}

for _, v in pairs(possible_skills) do
  if string.find(matches[2], v) and not table.isMember(snd.skills.tattoos_on_me, v.."Tattoo") then
   table.insert(snd.skills.tattoos_on_me, v.."Tattoo")
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(.+)$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Tattoos end</name>
									<script>disableTrigger("What tattoos you rockin'?")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string></string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>7</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Allsight-&gt; Mindseye</name>
								<script>if hasSkill("MindseyeTattoo") then snd.send("touch mindseye") end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You have no allsight.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>turn off stalk</name>
								<script>expandAlias("kd stalking")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your power to conceal your movement is ineffective during the day.</string>
									<string>You cannot muffle your footsteps during the day.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Lifevision gain extra capture</name>
								<script>snd.def_gain("lifevision")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You have gained the lifevision defence.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Lifevision strip extra capture</name>
								<script>snd.def_take("lifevision")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your lifevision defence has been stripped.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Manifestation</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Metabolize</name>
									<script>local defName = "def_"..multimatches[2][2]:lower().."_chimera"
if snd.toggles.gags then
  deleteLine()
end
snd.def_take(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>2</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Manifestation Metabolize.</string>
										<string>^Your (\w+) chimerized phantasm has been metabolized\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Quell - Main</name>
									<script>local defName = "def_"..matches[2]:lower().."_phantasm"
snd.def_take(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You destroy your (\w+) phantasm with a dismissive flick of your hand, absorbing its energy back into your body\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Quell - Chimerized</name>
									<script>local defName = "def_"..matches[2]:lower().."_chimera"
snd.def_take(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You grit your teeth, diffusing your chimerized (\w+) phantasm throughout your body\.$</string>
										<string>^You have not chimerized a (\w+) phantasm\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Quell - All</name>
									<script>local chimeras =
  {
    "def_influence_chimera",
    "def_congeal_chimera",
    "def_leech_chimera",
    "def_claw_chimera",
    "def_mire_chimera",
    "def_choke_chimera",
    "def_wail_chimera",
    "def_absorb_chimera",
    "def_siphon_chimera",
    "def_symbiosis_chimera",
  }
for _, def in pairs(chimeras) do
  snd.def_take(def)
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You release your chimerized phantasms, diffusing their essence throughout your body.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Main phantasm</name>
									<script>local defName = "def_"..multimatches[2][2]:lower().."_phantasm"
snd.def_gain(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>1</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Manifestation Phantasm.</string>
										<string>^Tendrils of shadowy essence slither out from your mouth, manifesting at your command into the (\w+) phantasm\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Chimerized Phantasm</name>
									<script>local defName = "def_"..multimatches[2][2]:lower().."_chimera"
snd.def_gain(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>1</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Manifestation Chimerization.</string>
										<string>^You open your mouth wide, vision going black momentarily as you utterly devour your (\w+) phantasm, chimerizing it deep beneath your flesh to amplify its effects\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Righteousness</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Aura</name>
									<script>local defName = "def_"..multimatches[2][2]:lower().."_aura"
snd.def_gain(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>1</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Righteousness Aura.</string>
										<string>^You focus momentarily as you envelop yourself in the righteous aura of (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Aura off</name>
									<script>local defName = "def_"..matches[2]:lower().."_aura"
snd.def_take(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You focus and the aura of (\w+) flickers and fades away\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Blessing</name>
									<script>local defName = "def_"..multimatches[2][2]:lower().."_blessing"
snd.def_gain(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>1</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Righteousness Blessing.</string>
										<string>^You focus on your (\w+) aura and draw its power into you, focusing it onto your body\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Blessing off</name>
									<script>local defName = "def_"..matches[2]:lower().."_blessing"
snd.def_take(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You focus and cleanse yourself of the (\w+) blessing\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>All blessings off</name>
									<script>local blessings =
  {
    "def_accuracy_blessing",
    "def_protection_blessing",
    "def_healing_blessing",
    "def_purity_blessing",
    "def_justice_blessing",
    "def_pestilence_blessing",
    "def_spellbane_blessing",
    "def_cleansing_blessing",
    "def_meditation_blessing",
    "def_redemption_blessing",
  }
for _, def in pairs(blessings) do
  snd.def_take(def)
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You have no blessings to turn off.</string>
										<string>You cleanse yourself of any active blessings.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Absorb</name>
									<script>local defName = "def_"..multimatches[3][2]:lower().."_blessing"
snd.def_take(defName)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>2</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Righteousness Absorb.</string>
										<string>You draw one of your blessings into yourself, using its power to heal your wounds.</string>
										<string>^Your (\w+) blessing has been absorbed\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>3</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>resurgence</name>
							<script>snd.def_def("resurgence")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your spirit will surge with power should it falter.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Afflictions</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Pipes</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>light pipes</name>
								<script>snd.pipes_lit = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You light your supply of pipes, igniting the herbs within.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>pipes out</name>
								<script>snd.pipes_lit = false
  if snd.toggles.gags then
    deleteLine()
  end
snd.delete_prompt = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your pipe has gone cold and dark.</string>
									<string>Your pipes have gone cold and dark.</string>
									<string>That pipe isn't lit.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>affline got</name>
							<script>if snd.toggles.gags then
  deleteLine()
end
snd.aff_gain(matches[2])
if matches[2] == "paresis" then
  if snd.class == "Zealot" and not snd.swaggered then
    if snd.swagger &lt; 2 then
      snd.send("qeb swagger")
      snd.swaggered = true
      tempTimer(5, [[snd.swaggered = false]])
    end
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You are afflicted with ([a-z_-]+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>affline cure</name>
							<script>  if snd.toggles.gags then
    deleteLine()
  end
snd.aff_cure(matches[2])
if matches[2] == "left_arm_crippled" or matches[2] == "right_arm_crippled" then
 snd.aff_remove("crippled_arm")
end
if matches[2] == "left_leg_crippled" or matches[2] == "right_leg_crippled" then
 snd.aff_remove("crippled_leg")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You have cured ([a-z_-]+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hidden affliction</name>
							<script>snd.hidden_afflictions = snd.hidden_afflictions + 1</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have been afflicted with a hidden affliction!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Other Lines</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>arms</name>
								<script>snd.aff_have("crippled_arm")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A serpentine blademistress spits onto her scimitar before slicing into you, and your arm wastes away beneath burning venom.</string>
									<string>Blood floats up through the water as a blackened, ravenous shark seizes your arm in its maw, nearly tearing it from your body and snapping bones in the process.</string>
									<string>The crone strokes your arm, withering it into uselessness.</string>
									<string>^Before you can avoid it, (\w+)('s|') hand brushes against your arm and it withers away\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>legs</name>
								<script>snd.aff_have("crippled_leg")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A tattered Bahkatu experiment tears into your knee with his rabid maw, snapping the bone easily beneath such immense pressure.</string>
									<string>A giant, rabid Syll seizes your leg in an iron grip, nearly pulling it clean from the socket.</string>
									<string>A chimera's black lion head seizes your leg in its grip, wrenching it painfully from its socket as it tosses you to the ground.</string>
									<string>A sharp-toothed gremlin's eyes gleam as it slams its head into your knee, shattering it and knocking you off-balance.</string>
									<string>^(\w+) reaches out and grabs your leg, which almost gives way underneath you as it shrivels feebly away\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>got adder</name>
								<script>snd.aff_have("adder_tarot")
--snd.send("qeb rip card from body")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) dips the Adder tarot in venom then flings it at you\. It hooks viciously into you flesh, a small trail of blood dripping from where it pierced the skin\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>cure adder</name>
								<script>snd.aff_cure("adder_tarot")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You rip the Adder tarot from your body, the sharp fangs tearing your flesh.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>diag start</name>
							<script>for i in pairs(snd.afflictions) do
 snd.aff_remove(i)
end
snd.hidden_afflictions = 0</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>99</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You are:</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>diag end</name>
								<script>setTriggerStayOpen("diag start", 0)</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string></string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>7</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>diag line</name>
								<script>snd.aff_diag(matches[2])</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^afflicted with ([a-z_-]+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Resets</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>salve</name>
								<script>--snd.last.salve = multimatches[1][2].." to "..multimatches[1][3]
snd.clear_afflictions("salve")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>1</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You press a (\w+) poultice against your skin, rubbing it into your flesh\.$</string>
									<string>1</string>
									<string>The poultice mashes uselessly against your body.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>5</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>herb</name>
								<script>for i in pairs(snd.pills) do
 if snd.pills[i] == multimatches[1][2] then
  snd.last.herb = i
  snd.clear_afflictions("herb")
 end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>1</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You swallow (.*)\.$</string>
									<string>1</string>
									<string>return isPrompt()</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>5</integer>
									<integer>4</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>cure insomnia</name>
								<script>snd.last.herb = "euphoriant"
snd.clear_afflictions("herb")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>1</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You swallow an euphoriant pill.</string>
									<string>1</string>
									<string>Your mind relaxes and you feel as if you could sleep.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>5</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>tree</name>
								<script>snd.last.tree = "send"
snd.clear_afflictions("tree")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>1</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You touch the tree of life tattoo.</string>
									<string>1</string>
									<string>return isPrompt()</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>5</integer>
									<integer>4</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>smoke</name>
								<script>snd.last.smoke = multimatches[1][2]
snd.clear_afflictions("smoke")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You take a long drag  off your pipe filled with (willow|yarrow)\.$</string>
									<string>1</string>
									<string>return isPrompt()</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>5</integer>
									<integer>4</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Limbs</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>got limb damage</name>
								<script>snd.my_limb_damage[multimatches[2][2]] = snd.my_limb_damage[multimatches[2][2]]+tonumber(multimatches[2][3])
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#008080</colorTriggerBgColor>
								<regexCodeList>
									<string>FG14BG2</string>
									<string>^Your (.*) has taken ((\d+)\.(\d+))\% damage\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>6</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>cured limb damage</name>
								<script>snd.my_limb_damage[multimatches[2][2]] = snd.my_limb_damage[multimatches[2][2]]-tonumber(multimatches[2][3])
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>FG14BG2</string>
									<string>^Your (.*) has recovered ((\d+)\.(\d+))\% damage\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>6</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>wounds start</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>200</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You take a moment to assess how damaged your limbs are:</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>wounds line</name>
									<script>snd.my_limb_damage[string.lower(matches[2])] = tonumber(matches[3])
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(.*):\s+((\d+)\.(\d+))\% \(no bruising\)$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>wounds end</name>
									<script>setTriggerStayOpen("wounds start", 0)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>return isPrompt()</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>4</integer>
									</regexCodePropertyList>
								</Trigger>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>parry</name>
								<script>snd.parrying = matches[2]</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You will now attempt to parry attacks to your ([a-z ]+)\.$</string>
									<string>^You will attempt to parry attacks to your ([a-z ]+)\.$</string>
									<string>^You will now attempt to intercept and counter attacks coming at your ([a-z ]+)\.$</string>
									<string>^You will attempt to throw those who attack your ([a-z ]+)\.$</string>
									<string>^You will now try and fend off attacks aimed at your ([a-z ]+)\.$</string>
									<string>^You will ruthlessly oppose attacks on your ([a-z ]+)\.$</string>
									<string>^With a predatory growl, you oppose the attack on your ([a-z ]+), denying it purchase\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>unparry</name>
								<script>snd.parrying = "none"</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A .+ golem lashes out as you parry the blow, rattling your defences\.$</string>
									<string>You cease your attempts at parrying.</string>
									<string>^You cease opposing attacks against a specific body part\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>3</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>loki</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You are confused as to the effects of the venom.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>illumination shadow</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You grimace, your parched throat and drying skin a constant, painful reminder of the Sun's curse.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>swelter</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your mind swims in confusion as the sweltering sands take their toll.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>sluggish</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You move sluggishly into action.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>affline have</name>
							<script>  if snd.toggles.gags then
    deleteLine()
  end
snd.aff_gain(matches[2])
snd.hidden_afflictions = math.max(0, snd.hidden_afflictions - 1)
if snd.class == "Zealot" and not snd.swaggered then
    if snd.swagger &lt; 2 then
      snd.send("qeb swagger")
      snd.swaggered = true
      tempTimer(3,[[snd.swaggered = false]])
    end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You have discovered ([a-z_]+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>stood</name>
							<script>snd.waiting.queue = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You stand up and stretch your arms out wide.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>angel sacrifice</name>
							<script>for i in pairs(snd.afflictions) do
 snd.aff_remove(i)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You use Spirituality Sacrifice.</string>
								<string>1</string>
								<string>A guardian angel begins to burn impossibly white as you feel your spirit tingle and twitch under its radiance. As the light fades away, your angel is no where to be seen, leaving you reborn.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>5</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>subjugation endoskeleton</name>
							<script>for i in pairs(snd.afflictions) do
 snd.aff_remove(i)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You use Subjugation Endoskeleton.</string>
								<string>1</string>
								<string>A swarm of bone fragments bursts in a calamitous display, shards of bone splintering to plunge deeply into your flesh. Your skin bulges and contorts as the fragments of your swarm eat ruthlessly away at every piece of bone in your body, replacing them with newer, stronger pieces of your own formation. As the pain subsides and you rise anew, naught remains of your fragments.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>5</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>subjugation endoskeleton 3p</name>
							<script>if multimatches[1][2] == snd.target then
 snd.reset_target()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses Subjugation Endoskeleton\.$</string>
								<string>1</string>
								<string>^A swarm of bone fragments bursts in a calamitous display, shards of bone splintering to plunge deeply into (\w+)'s flesh\. .+ skin bulges and contorts as the fragments disappear completely into .+ body, shifting and reforming until .+ rises anew\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>5</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>No arrows in ya</name>
							<script>snd.aff_remove("barbed_arrow")
snd.waiting.queue = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>There is not an arrow in your body to remove.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Pulled out an arrow</name>
							<script>snd.waiting.queue = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You shudder in pain as you wrench the bloody arrow from your flesh.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Death resets (personal affs)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>general deaths</name>
								<script>local reset_check = false
local triggertext = matches[1]

if triggertext:find("Underking") then
  local dead_rooms_check = {"109", "108", "110", "9278", "18524"}
  if table.contains(dead_rooms_check, tostring(gmcp.Room.Info.num)) then
    reset_check = true
    expandAlias("sndoff")
  end
elseif triggertext:find("Void") then
  local dead_rooms_check = {"62630", "18523", "66313", "66312", "64992"}
  if table.contains(dead_rooms_check, tostring(gmcp.Room.Info.num)) then
    reset_check = true
    expandAlias("sndoff")
  end
elseif triggertext:find("desolate mire") then
  if gmcp.Room.Info.num == 60044 then
    reset_check = true
    expandAlias("sndoff")
  end
end

if triggertext:find("Substitute") then
  for a in pairs(snd.afflictions) do
   snd.aff_remove(a)
  end
end
-- 
-- if triggertext:find("Starburst") then
   -- reset_check = true
-- end

if triggertext:find("Mirror") and gmcp.Room.Info.num == 1330 then
   reset_check = true
   expandAlias("sndoff")
elseif triggertext:find("Blackness") and gmcp.Room.Info.num == 31040 then
   reset_check = true
   expandAlias("sndoff")
end

if reset_check then
  snd.reset_me()

  snd.toggles.active = false
  
  for i in pairs(snd.my_limb_damage) do
   snd.my_limb_damage[i] = 0
  end

end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The Hall of the Underking.</string>
									<string>Before the Soul Mirror.</string>
									<string>Traversing the Void</string>
									<string>Blackness.</string>
									<string>A strange and desolate mire.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>2</integer>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Starburst</name>
								<script>for i in pairs(snd.defenses) do
  snd.defenses[i].needit = false
end

snd.reset_me()

snd.toggles.bashing = false
snd.toggles.attacking = false
snd.toggles.fasthunt = false

raiseEvent("sunder_update_toggles")

for i=1, 10 do cecho("\n&lt;gold&gt;You starbursted!") end

for i in pairs(snd.my_limb_damage) do
  snd.my_limb_damage[i] = 0
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>1</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You use Tattoos Starburst.</string>
									<string>return snd.illusionChecks.abilityGate()</string>
									<string>Your starburst tattoo flares as the world is momentarily tinted red.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>4</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Vampire/Akkari death</name>
								<script>if gmcp.Char.Vitals.hp == "1" then
  snd.reset_me()
  snd.toggles.active = false
  for i in pairs(snd.my_limb_damage) do
    snd.my_limb_damage[i] = 0
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Stricken, you collapse to the ground. Unable to maintain the composure of your physical form any longer, you feel your body shrivel and wither away as you revert to your mistform.</string>
									<string>Defeated, your physical form collapses like a dead weight upon the ground. Holy light</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Paresis</name>
							<script>snd.have_aff("paresis")
if snd.class == "Zealot" and not snd.swaggered then
    if snd.swagger &lt; 2 then
      snd.send("qeb swagger")
      snd.swaggered = true
      tempTimer(5,[[snd.swaggered = false]])
    end
  end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You fight against seizing muscles with reckless abandon.</string>
								<string>Your swagger recedes as you feel slightly numb.</string>
								<string>A prickly stinging overwhelms your body, fading away into numbness.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>smoked a pipe</name>
						<script>snd.smokedpipe = matches[2]</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>5</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You take a long drag off your pipe filled with (\w+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>empty pipe</name>
							<script>snd.emptypipes[snd.smokedpipe] = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your pipe is now empty.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>smoked end</name>
							<script>setTriggerStayOpen("smoked a pipe", 0)
snd.smokedpipe = "none"</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return isPrompt()</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pipes emptied by lumi/ec</name>
						<script> snd.emptypipes = {reishi = true, willow = true, yarrow = true}</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+ uses Tectonics Fossilise on you\.$</string>
							<string>^\w+ uses Illumination Flare on you\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>filled pipe</name>
						<script>local herbMap = {
  ["a reishi mushroom"] = "reishi",
  ["some willow bark"] = "willow",
  ["a yarrow root"] = "yarrow",
}
local herb = herbMap[matches[2]]
snd.emptypipes[herb] = false</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You fill your pipe with (.+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>no pipe</name>
						<script>if snd.emptypipes[matches[2]] then
 snd.emptypipes[matches[2]] = false
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^I don't see what you are trying to put \'(\w+)\' into\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>died</name>
						<script>for i in pairs(snd.afflictions) do
 snd.aff_remove(i)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#ff0000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>FG3BG2</string>
							<string>The essence streaming from the floor heals your wounds.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>6</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Balances</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Archivist</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Token Made</name>
							<script>send("ii token")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Breaking down the wood on hand, you quickly craft together a wooden (the )?\w+.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Token_Capture</name>
							<script>snd.my_token = matches[2]</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\"pyramid(\d+)\"\s+a wooden pyramid.*$</string>
								<string>^\"sphere(\d+)"\s+a wooden sphere.*$</string>
								<string>^\"cube(\d+)"\s+a wooden cube.*$</string>
								<string>^"sphere(\d+)"\s+a wooden sphere.*$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Geo Invert</name>
							<script>snd.geoinvert = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You use Geometrics Invert on .+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Geo Invert and Trace Off</name>
							<script>snd.geoinvert = false
snd.geotrace = false
snd.send("qeb incite lens")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You invert .+\, recovering it from its previously fixed position.$</string>
								<string>^You use Geometrics Invert \(end\) on .+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Geo Trace On</name>
							<script>snd.geotrace = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You use Geometrics Trace on .+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>No Token Down</name>
							<script>snd.send("qeb drop "..snd.my_token..snd.sep.."geo invert")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your (the )?\w+ must be placed upon the ground first.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Madness Available</name>
							<script>snd.balance.madness = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may inflict madness upon another once again.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Madness Used by You and Not Ready</name>
							<script>snd.balance.madness = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may not inflict madness upon another so soon.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Empower Ready</name>
							<script>snd.empowerready = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your mind is now capable of empowering a new number.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Empower Type</name>
							<script>snd.empowertype = matches[2]
snd.empowerready = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You empower the number (\w+) to act upon its sphere of influence.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>No Token</name>
							<script>snd.send("qeb incite lens")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You hold no "token".$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Slain</name>
							<script>if snd.geotrace == true then
	snd.empowerready = true
	snd.empowertype = "nil"
else
	snd.geotrace = false
	snd.geoinvert = false
	snd.empowerready = true
	snd.empowertype = "nil"
end

snd.fulcrum_call = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You have been slain by .*.$</string>
								<string>^You are dead and cannot do that.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>No Token 2.0</name>
							<script>if snd.my_token == matches[2] then
	snd.send("qeb incite lens")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You hold no \"(\d+)\".$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Ethereal</name>
							<script>snd.def_def("ethereal")
snd.balance.ethereal = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have gained the ethereal defence.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Ethereal Done</name>
							<script>snd.def_remove("ethereal")
snd.balance.ethereal = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your body loses its ethereal form as the essence wears off.</string>
								<string>Your ethereal defence has been stripped.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Knitting Start</name>
							<script>snd.knit = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You use Bioessence Knitting.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Knitting Done</name>
							<script>snd.knit = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your flesh twitches for a moment and then all is still.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ascendril / Bloodborn</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Enrich used</name>
							<script>snd.balance.enrich = false
snd.fulcrum_call = false
snd.fulcrum_exists = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your breath rising into the crackling potential of the wind and storm, you align your fulcrum's resonance with air.</string>
								<string>Your will sinking into the fluid continuity of rivers and the hammering pulse of the tide, you align your fulcrum's resonance with water.</string>
								<string>Drawing on the essence of hearth, forge, and the deep veins of the world, you align your fulcrum's resonance with fire.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>enrich back up</name>
							<script>snd.balance.enrich = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You can once more freely enrich your fulcrum.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Avoidance</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Nimbleness</name>
							<script>snd.balance.nimbleness = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Shifting your weight to the balls of your feet, you begin to feel capable of quicker movements.$</string>
								<string>You use Avoidance Nimbleness.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lost nimble</name>
							<script>snd.balance.nimbleness = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The constant exertion has worn you down, and you cease your nimble manuveurs, panting.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Can renimble</name>
							<script>snd.balance.nimbleness = true
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your muscles have recovered enough for you to be nimble once more.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bard</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bravado Up</name>
							<script>snd.balance.bravado = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your bravado swells with new-found strength.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Inspire Ready</name>
							<script>snd.balance.inspire = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You are able to inspire your allies once more.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bravado Down</name>
							<script>snd.balance.bravado = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You use Performance Bravado on</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Inspire Down</name>
							<script>snd.balance.inspire = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You hum a single note, infusing it with the energy to invoke inspiration.</string>
								<string>You cannot inspire your allies again so soon.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Carnifex / Warden</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>purged</name>
							<script>snd.balance.purge = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You purge your body of weakness, imbuing your soul with strength.</string>
								<string>You purge your body of weakness, but find nothing to cleanse.</string>
								<string>A sensation of warmth pulses through your ancestral mark as an ailment is annulled.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>can't purge</name>
							<script>snd.balance.purge = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your soul has not recovered enough to be purged once more.</string>
								<string>You cannot call upon the ancestors for annulment again so soon.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>purge up</name>
							<script>snd.balance.purge = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may once again purge your body.</string>
								<string>You may once again annul an ailment that plagues you.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Furor can use</name>
							<script>snd.balance.furor = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You may once again throw yourself into a furor.$</string>
								<string>You may once more focus yourself for a rigorous assault.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Furor not ready</name>
							<script>snd.balance.furor = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You cannot throw yourself into a furor again yet.$</string>
								<string>^You use Savagery Furor.$</string>
								<string>You use Warding Rigor.</string>
								<string>You cannot yet prepare yourself for arigorous assault.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>General Balances</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lose balance</name>
							<script>if snd.toggles.gags then
  if auto_fish then
    deleteFull()
  elseif snd.toggles.balecho then
    deleteLine()
    snd.message("Balance: "..matches[3].."s.")
  end
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(Balance|Left Hand Balance|Right Hand Balance) Used: (.*) seconds$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>queue</name>
							<script>if snd.toggles.gags then
  deleteFull()
    if not auto_fish then
    snd.message("Queue: "..matches[2])
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^When you can act: (.*)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>regain balance</name>
							<script>if snd.toggles.gags then
  if auto_fish then
    deleteFull()
  elseif snd.toggles.balecho then
    deleteLine()
    snd.message("REGAIN balance!", "balance")
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have recovered balance on all limbs.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>regain equilibrium</name>
							<script>if snd.toggles.balecho and snd.toggles.gags then
 deleteLine()
 snd.message("REGAIN equilibrium!", "balance")
-- send("wt ready")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have recovered equilibrium.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>regain arm balance</name>
							<script>if snd.toggles.balecho and snd.toggles.gags then
 deleteLine()
 snd.message("REGAIN "..matches[2].." balance!", "balance")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You have recovered balance on your (left|right) arm\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lose equilibrium</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Equilibrium Used: (.*) seconds$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Used Eq or Balance</name>
							<script>snd.track_eqbal(tonumber(matches[2]))</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(?:Balance|Left Hand Balance|Right Hand Balance) Used: (.+) seconds$</string>
								<string>^Time to recover: (.+) seconds$</string>
								<string>^Equilibrium Used: (.+) seconds$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>No cooldowns, add your cd to here if you want</name>
							<script>snd.balance.crystal = true
snd.balance.wand = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have nothing on cooldown right now.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Fitness</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>used</name>
							<script>snd.balance.fitness = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You inhale deeply, allowing the air to fill your mighty lungs.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>can use again</name>
							<script>snd.balance.fitness = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may once again use fitness to control your breathing.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Luminary/Earthcaller</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>cleansed</name>
							<script>snd.balance.cleanse = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You raise your hands to the sky, and call a tongue of fire down upon yourself.</string>
								<string>You use Tectonics Thermics.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>can't cleanse</name>
							<script>snd.balance.cleanse = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You cannot cleanse yourself again yet.</string>
								<string>You cannot boil away your afflictions so soon.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>cleanse up</name>
							<script>snd.balance.cleanse = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You can once again cleanse yourself with fire.</string>
								<string>You may once again boil away your afflictions.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Battle balance down</name>
							<script>snd.balance.battle = false
tempTimer(4.8, [[snd.balance.battle = true]])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You use (Spirituality Battle|Subjugation Spur) \(.+\) on .+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>battle balance back</name>
							<script>snd.balance.battle = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You can wrack the spirit of another once more.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Indorani/Oneiromancer</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Fool/Fire - Used</name>
							<script>snd.balance.fool = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You press the Fool tarot to your forehead.</string>
								<string>The Fool will have no effect for now.</string>
								<string>You quickly unfurl a crisply folded piece of paper evocative of fire, letting blazing orange salvo cascade over you in a cleansing manner.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Fool/Fire - Available</name>
							<script>snd.balance.fool = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may heal another affliction.</string>
								<string>You may once more invoke cleansing fire.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Aeon/Hourglass - Not ready</name>
							<script>snd.balance.aeon = false

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You cannot deliver the curse of Aeon again so soon.</string>
								<string>You cannot stretch the flow of time via an hourglass again so soon.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hourglass used</name>
							<script>snd.balance.aeon = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>1</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You unfurl an hourglass toward (\w+) amidst a shimmer of sleek silver\.$</string>
								<string>^The sleek silver shades distort around (\w+) to slow (her|his|their) innate sense of time\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Aeon used</name>
							<script>snd.balance.aeon = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>1</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Standing the Aeon on your open palm, you blow it lightly at \w+\.$</string>
								<string>^You watch as it seems to slow \w+'s? movement through the time stream\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Person aeoned.</name>
							<script>if matches[2] == snd.target then
  snd.target_got("aeon")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The sleek silver shades distort around (\w+) to slow (her|his|their) innate sense of time\.$</string>
								<string>^You watch as it seems to slow (\w+)'s? movement through the time stream\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Aeon/Hourglass - Ready</name>
							<script>snd.balance.aeon = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may induce the curse of Aeon once more.</string>
								<string>You may once more stretch the flow of time via a folded hourglass.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Soulcage Ready</name>
							<script>snd.balance.soulcage = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You feel that your soul is strong enough to be protected once more.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Soulcage Not Ready</name>
							<script>snd.balance.soulcage = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your soul has not recovered sufficiently for you to protect it from death.</string>
								<string>You use Necromancy Soulcage.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Monk</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Numbess Used on Self</name>
							<script>snd.balance.numbness = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You use Kaido Numbness\.$</string>
								<string>^You cannot make your body numb again so soon\.$</string>
								<string>You use Kaido Numbness.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Numbness available</name>
							<script>snd.balance.numbness = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your body can withstand full numbness once more\.$</string>
								<string>Your body can withstand full numbness once more.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Not enough mana transmute</name>
							<script>snd.transmutation = false
tempTimer(5,[[snd.transmutation = true]])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You do not have that much mana to transmute.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Transmutation</name>
							<script>snd.transmutation = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You call upon your Kai training and transmute your \w+ into pure \w+.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Sciomancer/Runecarver</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Shadowsphere/Woe Ready</name>
							<script>snd.balance.shadowsphere = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You can once again cast the shadowsphere.</string>
								<string>You may once more call upon the curse of woe.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sorc Transfix/ Wisp Rune ready</name>
							<script>snd.balance.sorcery_transfix = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may make use of Transfix once more.</string>
								<string>Instinct flares within your heart, the power of the bewitching wisp rune returning to you.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sorc Transfix/Wisp Rune not ready yet</name>
							<script>snd.balance.sorcery_transfix = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You cannot transfix again just yet.</string>
								<string>The wisp rune's bewitching power eludes you for now.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Syssin</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>shrugged</name>
							<script>snd.balance.shrug = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your immunity system boils as it shrugs off poisons from your body.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>can't shrug</name>
							<script>snd.balance.shrug = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You are unable to shrug off another affliction so soon.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>shrug up</name>
							<script>snd.balance.shrug = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You are able to shrug off another venom.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>backstab used</name>
							<script>snd.balance.backstab = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You use Assassination Backstab on </string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>backstab back up</name>
							<script>snd.balance.backstab = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You may backstab another once more\.$</string>
								<string>^You quietly step back and twirl .+ in your hand\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>backstab not back up</name>
							<script>snd.balance.backstab = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You cannot backstab another so soon\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Tattoos</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Crystal</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Crystal used</name>
								<script>snd.balance.crystal = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>As you touch the crystal tattoo, you feel your wounds melt away.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Crystal regained</name>
								<script>snd.balance.crystal = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your crystal tattoo tingles slightly.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Wand</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Wand used</name>
								<script>snd.balance.wand = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>As you touch the wand tattoo, you feel your mind refreshed and rejuvenated.</string>
									<string>You touch the wand tattoo, but nothing happens.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Wand recovered</name>
								<script>snd.balance.wand = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your wand tattoo tingles slightly.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Templar / Revenant</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>rage used</name>
							<script>snd.balance.rage = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You use Battlefury Rage.</string>
								<string>You use Riving Rage.</string>
								<string>As angry as you may be, you can not rage that much.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>rage available</name>
							<script>snd.balance.rage = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may rage once more.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Teradrim/Tidesage</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Momentum over</name>
							<script>snd.balance.momentum = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your momentum dies off.</string>
								<string>Your body is still recovering from its last boost of momentum.</string>
								<string>You bow your head, concentrating and matching your heartbeat to the vibrations of the earth beneath you. When you raise your eyes, you feel your body ready to strike.</string>
								<string>You use Wavebreaking Hightide.</string>
								<string>The benefits of the high tide ebb away.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Momentum able again</name>
							<script>snd.balance.momentum = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your body has recovered from its increased momentum.</string>
								<string>Your body is able to benefit from another high tide.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Absorb used</name>
							<script>snd.balance.absorb = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You are unable to absorb another affliction so soon.</string>
								<string>As you lift your arms overhead, the dust and earth around you rise up, collecting in a cloud about your person. The cloud thickens and cakes over your flesh, and when it falls away, you feel healthier.</string>
								<string>You use Wavebreaking Yearn.</string>
								<string>You use Terramancy Absorb.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Absorb ready</name>
							<script>snd.balance.absorb = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may once more absorb an affliction from your flesh.</string>
								<string>You may once again yearn for the sea to lend you its succour.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Earthenwill / Engulf True</name>
							<script>snd.balance.earthenwill = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may once again strengthen your will.</string>
								<string>You have already solidified your will with that of your golem.</string>
								<string>You may once again work in tandem with your elemental.</string>
								<string>You may once again strengthen your will.</string>
								<string>You have already solidified your will with that of your golem.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Earthenwill / Engulf False</name>
							<script>snd.balance.earthenwill = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(.*) roars as the attack launches it into a temporary frenzy.$</string>
								<string>You lock eyes with your golem, binding your wills together in preparation for a brutal strike.</string>
								<string>You convey an instruction to your elemental, ensuring its focus on act.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Golem Call</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You must be with your golem to do that.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Praenomen / Akkari</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Mending / Vivify False</name>
							<script>snd.balance.mend = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You utter a low hiss from exertion as you will the power of your blood to repair the wounds your undead body has sustained.$</string>
								<string>Blood cannot be called upon to repair your walking corpse again so soon.</string>
								<string>^Flushed with the bounty of purest, unadulterated life, you exert your will to expend your vitality in a surge which knits your flesh in an instant.$</string>
								<string>You may not invoke the vitality of your lifeforce again quite yet.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>3</integer>
								<integer>1</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Mending / Vivify True</name>
							<script>snd.balance.mend = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may mend your body once more.</string>
								<string>Your body thrums anew, the vitality inherent in your essence ready to once again knit your flesh.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Purify / Succour False</name>
							<script>snd.balance.purify = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your blood boils and you let out a mighty roar of defiance.</string>
								<string>A soothing glow surrounds you as you draw on spiritual succour, comforting warmth easing your ills.</string>
								<string>You cannot purify your blood again so quickly!</string>
								<string>The warmth of succour flares for a second time, continuing to soothe what ails you.</string>
								<string>You cannot call upon heavenly succour again so soon.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Purify / Succour True</name>
							<script>snd.balance.purify = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may purify your blood once more.</string>
								<string>You may draw upon spiritual succour once more.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Unbroken / Deluge True</name>
							<script>snd.balance.unbroken = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may defy the clutches of death once more.</string>
								<string>Your skin prickles as your blood regains its thickness.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Unbroken / Deluge False</name>
							<script>snd.balance.unbroken = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have not yet recovered from your previous last stand.</string>
								<string>You use Discipline Unbroken.</string>
								<string>You use Sanguis Deluge.</string>
								<string>Your blood reserves has not recovered just yet.</string>
								<string>Your deluge defence has been stripped.</string>
								<string>You have flooded your undead body with warm, pulsating lifeblood.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Akkari</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Attend True</name>
								<script>snd.can_attend = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You may demand their attendance once more.</string>
									<string>You can spew your blood once more.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Attend False</name>
								<script>snd.can_attend = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You may not force their attendance again quite yet.</string>
									<string>^You use Discipline Attend on \w+\.$</string>
									<string>^You use Sanguis Spew on \w+\.$</string>
									<string>You cannot spew forth your blood again so soon.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Inquisition false</name>
								<script>snd.can_inquisition = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You cannot yet undertake another holy inquisition.</string>
									<string>You use Discipline Inquisition on \w+.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>inquisition true</name>
								<script>snd.can_inquisition = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You may undertake another holy inquisition.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Proclaim True</name>
								<script>snd.can_proclaim = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your ability to make proclamations reasserts itself.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Proclaim False</name>
								<script>snd.can_proclaim = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You cannot yet carry out another proclamation.</string>
									<string>You use Dictum Proclamation.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Crusade False</name>
								<script>snd.can_crusade = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You use Ascendance Crusade on \w+.$</string>
									<string>You have not yet recovered from your last crusade.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Crusade True</name>
								<script>snd.can_crusade = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You may once again embark upon a crusade.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Unbroken False</name>
								<script>snd.balance.unbroken = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You use Discipline Unbroken.</string>
									<string>You have not yet recovered from your previous last stand.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Unbroken True</name>
								<script>snd.balance.unbroken = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You may defy the clutches of death once more.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Wayfarer</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Fury Expunge used</name>
							<script>snd.balance.expunge = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You use Fury Expunge.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Fury expunge ready</name>
							<script>snd.balance.expunge = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may once again expunge an affliction.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Fury used</name>
							<script>snd.balance.fury = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Fury Balance Used: .+ seconds$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Fury balance back</name>
							<script>snd.balance.fury = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You can bring forth your fury again.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Zealot / Ravager</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Pendulum / Bedevil Available</name>
							<script>snd.balance.pendulum = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You feel your spirit swell with renewed energy\.$</string>
								<string>^Your soul stirs with refreshed intensity\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Pendulum / Bedevil Used</name>
							<script>snd.balance.pendulum = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You use Purification Pendulum \((.+)\) on \w+\.$</string>
								<string>^You use Ravaging Bedevil \((.+)\) on (\w+)\.$</string>
								<string>Your soul is not yet ready to invoke that feat again yet.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Zealot</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Zenith / Delirium Gone</name>
								<script>snd.zenith = false
snd.zenith_coming = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your zenith of power fades and departs your body.</string>
									<string>The joy of agonising delirium fades from you.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Zenith / Delirium Coming</name>
								<script>snd.zenith_coming = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You are already reaching towards your zenith.</string>
									<string>^Your eyes flash with light as you hone your focus, sinking into the wellspring of spirit within you.$</string>
									<string>You use Purification Zenith.</string>
									<string>You use Ravaging Delirium.</string>
									<string>Soulfire burns in your veins, your thoughts consumed utterly by sweet, agonising delirium.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>1</integer>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Firefist / Ravage Used</name>
								<script>snd.def_def("firefist")
snd.firefist = true
snd.firefist_cooldown = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You use Purification Firefist.</string>
									<string>You use Ravaging Ravage.</string>
									<string>You cannot ravage an enemy again so soon.</string>
									<string>You cannot ignite your fists again so soon.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Firefist / Ravage Down</name>
								<script>snd.firefist = false
snd.firefist_cooldown = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The flames around your fists are extinguished as their life is spent.</string>
									<string>The crucious hellfire dissipates from your fists.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Firefist / Ravage On Cooldown</name>
								<script>snd.firefist_cooldown = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You may coat your fists in flames once more.</string>
									<string>You may ravage an enemy again; let the flames of Perdition ignite your fists.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Hackles Down</name>
								<script>snd.hackles = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your hackles are not primed to strike just yet.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Hackles Up</name>
								<script>snd.hackles = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your chains rise up like hackles, ready to strike.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Psi Recover Down</name>
								<script>snd.recover = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You use Psionics Recover.</string>
									<string>Your mind has not recovered enough to do that again.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Psi Recover Up</name>
								<script>snd.recover = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You can now recover from mental detriment once more.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Wrath / Predation Used</name>
								<script>snd.wrath = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You use Zeal Wrath.</string>
									<string>You are not quite ready to deliver your wrath.</string>
									<string>You use Brutality Predation.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Wrath Up</name>
								<script>snd.wrath = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You may call upon your wrath once more.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Sentinel</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>might used</name>
							<script>snd.balance.might = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your blood boils and you let out a mighty roar of defiance.</string>
								<string>You're not ready to call upon your might.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>might available</name>
							<script>snd.balance.might = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You can call upon your might once more.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Shaman / Alchemist</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Panacea Used</name>
							<script>snd.balance.panacea = false
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You drop to one knee and brace an open palm against the ground, drawing in the natural energies to ease your maladies.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Panacea off cd</name>
							<script>snd.balance.panacea = true</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You may once again purify your body of ailments.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Reconfigure / Familiar morph available</name>
							<script>snd.balance.morph = true
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your familiar is capable of morphing its form once more.</string>
								<string>You are able to reconfigure your experiment once again.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Reconfigure / Familiar morph used</name>
							<script>snd.shamanpet = matches[2]
snd.balance.morph = false
snd.loyalsattacking = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your spirit familiar morphs into the form of a (\w+) spirit\.$</string>
								<string>^You use Experimentation Reconfiguration on a (.*) experiment\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Experimentation / Familiar summon</name>
							<script>snd.shamanpet = matches[2]</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You use Shamanism Familiar on a (\w+) spirit\.$</string>
								<string>^You use Experimentation Requesting on a (.*) experiment\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Experiment / Familiar gone</name>
							<script>snd.familiar = false
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You must be with your familiar to do that.</string>
								<string>^.* experiment, your loyal companion, has been slain by misadventure\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Experiment / Familiar here</name>
							<script>snd.familiar = true
snd.send("eval")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your familiar is already here with you.</string>
								<string>You use Shamanism Recall.</string>
								<string>You tug upon the spiritual bond with your familiar.</string>
								<string>You use Experimentation Recall.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>OMG YOUR STAFF</name>
							<script>snd.set_queue("qeb wield quarterstaff")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You must be wielding a quarterstaff to do that.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Misc</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>timeout</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand>qw</mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You will TIMEOUT in 1 minute unless you do something.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>teach</name>
						<script>snd.send("ok "..matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\'OK (\w+)\' will begin the lesson\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>qq</name>
						<script>local stable_check = {
	Enorian = "enorianstable",
	Spinesreach = "spinesreachstable",
	Bloodloch = "bloodlochstable",
	Duiran = "duiranstable"
}

snd.send("qdmount"..snd.sep.."return mount "..stable_check[gmcp.Char.Status.city])
if sndNDB.highlightNames then expandAlias("sndb hl") end

snd_toggleSave(true)
sndNDB_saveSettings(true)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You grow still and begin to silently pray for preservation of your soul while you are out of the land.</string>
							<string>You use Log Out Phylactery.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>no target</name>
						<script>if snd.toggles.bashing then snd.runBasher() end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You can find no such target as \'(\d+)\'\.$</string>
							<string>You can find no such target as 'none'.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>path track</name>
						<script>snd.can_path = false
tempTimer(3, [[snd.can_path = true]])
tempTimer(3, [[send(" ")]])
snd.pathing = true</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You start speedwalking.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>path done</name>
						<script>snd.pathing = false</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have reached your destination.</string>
							<string>You cease speedwalking.</string>
							<string>You stop speedwalking.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>full queue</name>
						<script>snd.send("queue clear")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You may not perform more than 15 actions simultaneously.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Separator Check/Update</name>
						<script>snd.sep = matches[2]
disableTrigger("Separator Check/Update")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Current separator\: (.+)$</string>
							<string>^Your config separator will now be\: '(.+)'.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Attack re-queue</name>
						<script>snd.waiting.queue = false
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You catch your flying axe with your (the )?\w+ hand.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>People updating via following</name>
						<script>
local do_we_update = false
for name in string.gmatch(matches[2], '[^,%s]+') do
  if name ~= "and" then
		if not table.isMember(snd.players_here, name) then
	    table.insert(snd.players_here, name)
			do_we_update = true
		end
  end
end
if do_we_update then raiseEvent("sunder_people_update") end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.+) follows? you to the \w+.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Bashing</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>survey</name>
					<script>snd.bashing.target_type = "long"
if gmcp.Room.Info.area == "the Shattered Vortex" then
  x, y = string.match(gmcp.Char.Status.level, "(.*) (.*)")
  level = tonumber(x)
  if level &lt; 90 then
    area = "the Shattered Vortex (Low Level)"
  elseif snd.faction == "spirit" then
    area = "the Shattered Vortex (Spirit)"
  elseif snd.faction == "shadow" then
    area = "the Shattered Vortex (Shadow)"
  end
  snd.load_targets(area)
else
  snd.load_targets(matches[2])
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You discern that you are standing in (.*)\.$</string>
						<string>^You stand, brilliantly illuminated, within (.*)\.$</string>
						<string>^You are standing (.+)\.$</string>
						<string>^You are plumbing the depths of (.+)\.$</string>
						<string>^You discern that you are standing amidst the twisted expanse of (.+)\.$</string>
						<string>^You discern you are delving (.+)\.$</string>
						<string>^You stand within the destroyed remnants of (.+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>deathblow</name>
					<script>if snd.toggles.gags then 
  deleteLine()
end 
--snd.message("DEATH: "..matches[2], "death")
snd.untarget()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^The final blow proves too much for (.*), who expires, pitifully\.$</string>
						<string>^(.*) pales and then fall to the ground, a look of surprise etched on (the )?\w+ face\.$</string>
						<string>^(.*) gives a last, feeble gasp as (the )?\w+ windpipe is crushed\.$</string>
						<string>^(.*) stiffens and drops dead as the venom proves too much for (the )?\w+ system\.$</string>
						<string>^With so much force behind the final blow, (.*) expires in a brutalized mess\.$</string>
						<string>^The mighty blow utterly destroys (.*), splitting (the )?\w+ apart messily\.$</string>
						<string>^Having slain (.+), you retrieve the corpse.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>no ih</name>
					<script>if not snd.bashing.targeted then
 snd.toggles.bashing = false
 if bot.going then
  expandAlias("move", false)
--  tempTimer(1.5, [[expandAlias("move")]])
 end
end
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>There is nothing here.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>ylem</name>
					<script>--snd.set_queue("absorb ylem")
if snd.toggles.gags then 
  deleteLine()
  snd.message("&lt;yellow&gt;Ylem mist!")
end
if tonumber(snd.toggles.gauntlet_level) &lt;2 then 
  snd.send("qeb absorb ylem")
  snd.ylem_check = true
elseif not snd.toggles.bashing then
  snd.send("absorb ylem")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Your vision distorts briefly, light scattering subtly as ylem energy diffuses into the surrounding atmosphere.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>chaos worm</name>
					<script>snd.bashing.target = "worm"</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>A swirling portal of chaos opens, spits out a worm, then vanishes.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>reanimated dwarfs</name>
					<script>expandAlias("aa")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.*) shakes and stirs, (the )?\w+ decaying limbs rattling in a cacaphonous clatter as (the )?\w+ form is enveloped in a turgid green miasma\. Slowly but surely (the )?\w+ rises from the ground, a low snarl forming in the back of (the )?\w+ throat as (the )?\w+ prepares for another attack\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>amalgamation</name>
					<script>snd.bashing.target = "piece"
if snd.toggles.calling then
 snd.send("wt target: piece")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>An amalgamation of corpses's flesh writhes and wriggles as a piece of it falls off. The piece of flesh congeals into a single creature, regenerating at an alarming speed as it reforms into a miniature version of itself.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>amalgamation insta</name>
					<script>cecho("&lt;red&gt;\n ***********************************")
cecho("&lt;white&gt;\n   GET OUT GET OUT GET OUT GET OUT  ")
cecho("&lt;red&gt;\n ***********************************")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>An amalgamation of corpses's multiple eyes scan the area, finding singularity with you, and an unearthly scream echoes forth from within an amalgamation of corpses, the pain of the once-innocent lives used to create the abomination, now twisted into blind wrath. An amalgamation of corpses charges at you, determined to add a new victim!</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>elemental</name>
					<script>if snd.toggles.gags then 
  deleteLine()
  snd.message("Summoned: Elemental")
end
snd.bashing.target = "elemental"
snd.bashing.targeted = true
snd.toggles.bashing = true</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#00ff7f</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You concentrate on the raw elemental energy flowing about your body, coalescing some of its potential into a massive elemental.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>resummon</name>
					<script>if snd.toggles.fasthunt then
 snd.send("summon elemental")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Having slain a massive elemental, you retrieve the corpse.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>gorgon</name>
					<script>snd.toggles.bashing = false
snd.send("qeb avert")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>The gorgon is preparing to petrify you! AVERT your gaze.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>angel</name>
					<script>snd.bashing.target = "angel"
if snd.toggles.calling then
 snd.send("wt target: angel")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>A flower of white light blooms in the air beside a solemn luminary, and a shimmering figure emerges from within.</string>
						<string>Your attempt to attack a solemn luminary simply bounces off a guardian angel's protective shield, leaving him unscathed.</string>
						<string>A flower of white light blooms in the air beside Bright-eyed Amarane, and a shimmering figureemerges from within.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>3</integer>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>no mist</name>
					<script>  if snd.toggles.gags then
   deleteLine()
  end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>There is no ylem energy mist in this location to absorb.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>exp trigger</name>
					<script>snd.stats.max_xp = tonumber(gmcp.Char.Vitals.maxxp)

snd.stats.last_xp = string.gsub(matches[2],",","")
snd.stats.last_xp = tonumber(snd.stats.last_xp)

snd.stats.xp = string.gsub(matches[4],",","")
snd.stats.xp = tonumber(snd.stats.xp)

if snd.toggles.gags then 
  local mobs_to_level = (snd.stats.max_xp - snd.stats.xp) / snd.stats.last_xp
  local mobs_xp_percent = (tonumber(snd.stats.last_xp) / snd.stats.max_xp) * 100
  local xp_point_percent = (25 - (((snd.stats.xp / snd.stats.max_xp) * 100) % 25))
  local mobs_to_point = xp_point_percent / mobs_xp_percent

  deleteLine()
  snd.message("&lt;red&gt;Experience Gained&lt;white&gt;: " .. matches[2] .. " - from " .. matches[3] .. ". Total: " .. matches[4] .. ".")
  snd.message("&lt;white&gt;"..(snd.stats.max_xp - snd.stats.xp).."&lt;yellow&gt;xp [&lt;white&gt;"..round(mobs_to_level,0).."&lt;yellow&gt;] to level!")
   
  local x, y = string.match(gmcp.Char.Status.level, "(.*) (.*)")
  local level = tonumber(x)
  if level &gt; 99 then
    snd.message("&lt;white&gt;"..round(((xp_point_percent/100)*snd.stats.max_xp), 0).."&lt;yellow&gt;xp [&lt;white&gt;"..round(mobs_to_point,0).."&lt;yellow&gt;] to haven point!")
  end
end
   
 
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Experience Gained\: (.*) \((\w+)\) \[total\: (.*)\]$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Rubble Walk Delay</name>
					<script>mmp.customwalkdelay(2)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You slowly clamber over the rubble in your path.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Survivor auto attack</name>
					<script>if snd.toggles.fasthunt then
	snd.toggles.bashing = true
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(A|An) .+ enters the arena, looking for blood.$</string>
						<string>^A horde of aberrations and otherworldly entities escape from within the pustulent swarm!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Counterattack active</name>
					<script>snd.counterattack_active = true</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>braces and prepares to make a counterattack.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Push Devastating</name>
					<script>if snd.counterattack_active then
  snd.counterattack_active = false
end
snd.pushattack = true</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^An? (.+) readies to deliver a devastating blow!$</string>
						<string>^An? (.+) continues preparing to unleash a devastating blow!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Punisher</name>
					<script>snd.punisher = true
snd.probed = true</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>looks prepared to punish those who trifle with it.$</string>
						<string>charges suddenly into you, painfully shattering your defenses!$</string>
						<string>is battle-hardened.$</string>
						<string>looks prepared to punish those who trifle with him.$</string>
						<string>looks prepared to punish those who trifle with her.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Probed</name>
					<script>snd.probed = true</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(It|He|She|They) (weighs about|(is|are) strangely weightless\.)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Counterattack Off</name>
					<script>snd.counterattack_active = false</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>ceases preparing to counter.$</string>
						<string>^You knock .+ out of .+ countering preparation with raw power\!$</string>
						<string>lashes out with a sudden counter attack!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Got the mist</name>
					<script>snd.ylem_check = false
if snd.toggles.bashing or snd.toggles.fasthunt then
  snd.runBasher()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You raise your gauntlet, extending your fingers and allowing the latent ylem around you to absorb into the reserve chambers\.$</string>
						<string>^The light around you slowly ceases to refract as the ylem energy dissipates into your surroundings\.$</string>
						<string>^With a deliberate motion, \w+ extends \w+ gauntlet into the air, causing a ripple of distortion as the ylem energy surrounding you is harnessed\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Apothecary mob dead.</name>
					<script>snd.no_target()
snd.send("ql")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^The last \w+ has fallen! .+ has been wiped out!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>GUI</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Wield/unwield updating</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Quick unwield single</name>
						<script>snd.wielded[matches[2]] =  {name="", id=""}
raiseEvent("sunder_item_update")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You cease to wield .+ in your (\w+) hand, securing it conveniently on your weaponbelt.$</string>
							<string>^You cease wielding .+ in your (\w+) hand\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Quick unwield both</name>
						<script>snd.wielded = {left =  {name="", id=""}, right = {name="", id=""}}
raiseEvent("sunder_item_update")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You cease to wield .+ in your .+ hand and .+ in your .+ hand.</string>
							<string>^You cease to wield .+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Quickwield into both hands from belt</name>
						<script>if gmcp.Char.Vitals.wield_right ~= "empty" then
  snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
  snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
end
snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")

raiseEvent("sunder_item_update")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You pull .+ from your weaponbelt fluidly into both hands.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Quickwield from nothing</name>
						<script>snd.wielded[matches[2]].name = string.match(gmcp.Char.Vitals["wield_"..matches[2]], "%a+")
snd.wielded[matches[2]].id = string.match(gmcp.Char.Vitals["wield_"..matches[2]], "%d+")
raiseEvent("sunder_item_update")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You pull .+ from your weaponbelt fluidly in your (\w+) hand\.$</string>
							<string>^You start to wield .+ in your (left|right) hand\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>quickwield</name>
						<script>snd.wielded[matches[4]].name = string.match(gmcp.Char.Vitals["wield_"..matches[4]], "%a+")
snd.wielded[matches[4]].id = string.match(gmcp.Char.Vitals["wield_"..matches[4]], "%d+")
raiseEvent("sunder_item_update")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You fluidly swap (.+) with (.+) in your (\w+) hand\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Quickwield - missing from Sunder</name>
						<script>snd.wielded = {left =  {name="", id=""}, right = {name="", id=""}}
if gmcp.Char.Vitals.wield_right ~= "empty" then
  snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
  snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
end
snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")

raiseEvent("sunder_item_update")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You fluidly swap .+ with .+ in your .+ and .+ in your .+\.$</string>
							<string>^You fluidly swap .+ with .+ in both hands\.$</string>
							<string>^You are already wielding .+\.$</string>
							<string>^You pull .+ from your weaponbelt fluidly into both hands\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Healing</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>necromancy shrivel</name>
					<script>snd.send("firstaid predict firstaid_predict_"..matches[3])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>2</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) uses Necromancy Shrivel \((arms|legs)\) on you\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Offense</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>generic triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gate - Someone is using an ability</name>
						<script>if multimatches[1][2]~="You" then
  snd.hitting = multimatches[1][2]
  if snd.who_called_affs ~= snd.hitting then
    snd.maybe_affs = {}
  end
else
  snd.hitting = "You"
end

disableTrigger("Sunder Dodge")
disableTrigger("Sunder Parry")
disableTrigger("Sunder Rebounding")
disableTrigger("Monk Hit Tracking")
snd.last_affs = {}
snd.last_limb_dmg = 0
snd.last_hit_limb = "none"
snd.using_both_hands = 0
snd.skill_being_used = ""
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) uses? (\w+)</string>
							<string>return snd.illusionChecks.abilityGate()</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Basic attack</name>
							<script>
if snd.target == matches[5] and snd.all_class_attacks[matches[3]] ~= nil then
  if snd.all_class_attacks[matches[3]][matches[4]] ~= nil then
    snd.getting_hit = matches[5]
    snd.skill_being_used = matches[4]
    snd.all_class_attacks[matches[3]][matches[4]](matches[5])
  end
end

if matches[2] == snd.target and matches[5] == "You" then
  snd.used.rebounding = false
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses? (\w+) (\w+) on (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Attack w/conditional</name>
							<script>if snd.target == matches[6] and snd.all_class_attacks[matches[3]] ~= nil then
  if matches[4] == "Shadowprice" then
    if snd.all_class_attacks[matches[3]][matches[5]] ~= nil then
      snd.skill_being_used = matches[5]
      snd.all_class_attacks[matches[3]][matches[5]](matches[6], matches[4])
    end
   elseif matches[4] == "Spiritpact" then
    if snd.all_class_attacks[matches[3]][matches[5]] ~= nil then
      snd.skill_being_used = matches[5]
      snd.all_class_attacks[matches[3]][matches[5]](matches[6], matches[4])
    end  
  elseif snd.all_class_attacks[matches[3]][matches[4]] ~= nil then
      snd.skill_being_used = matches[4]
      snd.all_class_attacks[matches[3]][matches[4]](matches[6], matches[5])
  end
  snd.getting_hit = matches[6]
end

if matches[2] == snd.target and matches[6] == "You" then
  snd.used.rebounding = false
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses? (\w+) (\w+)[ -](\w+) on (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Some attacks contain conditional in ()</name>
							<script>if snd.target == matches[6] and snd.all_class_attacks[matches[3]] ~= nil then
  if snd.all_class_attacks[matches[3]][matches[4]] ~= nil then
    snd.all_class_attacks[matches[3]][matches[4]](matches[6], matches[5])
    snd.getting_hit = matches[6]
    snd.skill_being_used = matches[4]
  end
end

if matches[2] == snd.target and matches[6] == "You" then
  snd.used.rebounding = false
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses? (\w+) (\w+) \((.+)\) on (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Conditional w/shadowprice</name>
							<script>if snd.target == matches[6] and snd.all_class_attacks[matches[3]] ~= nil then
  if snd.all_class_attacks[matches[3]][matches[4]] ~= nil then
    snd.getting_hit = matches[6]
    snd.skill_being_used = matches[4]
    snd.all_class_attacks[matches[3]][matches[4]](matches[6], matches[5])
  end
end
-- This might be only Hew and if so it's a pain in the ass.

if matches[2] == snd.target and matches[6] == "You" then
  snd.used.rebounding = false
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses? (\w+) Shadowprice (\w+) \((.+)\) on (\w+)\.$</string>
								<string>^(\w+) uses? (\w+) Spiritpact (\w+) \((.+)\) on (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Self skills (heals, shields, etc)</name>
							<script>if snd.target == matches[2] and snd.all_class_attacks[matches[3]] ~= nil then
  if snd.all_class_attacks[matches[3]][matches[4]] ~= nil then
    snd.skill_being_used = matches[4]
    snd.all_class_attacks[matches[3]][matches[4]]()
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses? (\w+) (\w+).$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Self skills (heals, shields, etc) with conditional</name>
							<script>if snd.target == matches[2] and snd.all_class_attacks[matches[3]] ~= nil then
  if snd.all_class_attacks[matches[3]][matches[4]] ~= nil then
    snd.skill_being_used = matches[4]
    snd.all_class_attacks[matches[3]][matches[4]](matches[2], matches[5])
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses? (\w+) (\w+) \((.+)\).$</string>
								<string>^(\w+) uses? (\w+) (\w+) (\w+).$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Attack w/double conditional</name>
							<script>if snd.target == matches[7] and snd.all_class_attacks[matches[3]] ~= nil then
  if snd.all_class_attacks[matches[3]][matches[4]] ~= nil then
    snd.getting_hit = matches[7]
    snd.skill_being_used = matches[4]
    snd.all_class_attacks[matches[3]][matches[4]](matches[7], matches[5], matches[6])
  end
end

if matches[2] == snd.target and matches[7] == "You" then
  snd.used.rebounding = false
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses? (\w+) (\w+)[- ](\w+) \(?([A-Za-z ]+)\)? on (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Synthesis/Animation gate.</name>
						<script>snd.hitting = matches[2]
snd.maybe_affs = {}
disableTrigger("Sunder Dodge")
disableTrigger("Sunder Parry")
disableTrigger("Sunder Rebounding")
disableTrigger("Monk Hit Tracking")
snd.last_affs = {}
snd.last_limb_dmg = 0
snd.last_hit_limb = "none"
snd.using_both_hands = 0
snd.skill_being_used = ""

if snd.target == matches[6] and snd.all_class_attacks[matches[3]] ~= nil then
  if snd.all_class_attacks[matches[3]][matches[4]] ~= nil then
    snd.getting_hit = matches[6]
    snd.skill_being_used = matches[4]
    snd.all_class_attacks[matches[3]][matches[4]](matches[6],matches[5])
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+ .+) uses (Animation|Synthesis) (\w+)(?: \((.+)\))? on (\w+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Razing</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gain</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>rebounding</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>gained rebounding</name>
								<script>if matches[2] == snd.target then
  snd.used.rebounding = true
  snd.waiting.queue = false
  if matches[2]:find("suddenly per") then snd.track_rebounding_up(snd.target) end
end

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You suddenly perceive the vague outline of an aura of rebounding around (\w+)\.$</string>
									<string>^(\w+) uses Purification Rejection\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>hit rebounding</name>
								<script>snd.used.rebounding = true
snd.waiting.queue = false
snd.getting_hit = "You"

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The attack rebounds back onto you!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>smoked reishi</name>
								<script>if matches[2] == snd.target then
  if snd.checkAff("besilence") then
    snd.target_cured("besilence")
  else 
  snd.track_rebounding(snd.target)
  snd.reboundingTimer = tempTimer(6, [[
                snd.used.rebounding = true;
                snd.waiting_queue = false;
                if snd.toggles.attacking then snd.attack_function() end
              ]])
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) takes a long drag off (the )?\w+ pipe filled with reishi\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>shield</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>gained shield</name>
								<script>if matches[2] == snd.target then
 snd.used.shield = true
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A howling blizzard coalesces about (\w+), holding (the )?\w+ attackers at bay\.$</string>
									<string>^(\w+) is protected by a glittering, magical shield\.$</string>
									<string>^A nearly invisible magical shield forms around (\w+).$</string>
									<string>^An incandescent sphere of fire forms around (\w+), warding off attacks\.$</string>
									<string>^A gentle hum arises from (\w+)('s|') angel, as it raises a shield to protect (the )?\w+\.$</string>
									<string>^The dewdrops evaporate into tiny motes of energy that cohere around (\w+) in a translucent shield\.$</string>
									<string>^(\w+) uses (Tattoos Shield)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>hit shield</name>
								<script>if matches[2] == snd.target then
 snd.used.shield = true
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A dizzying beam of energy strikes you as your attack rebounds off of (\w+)('s|') shield\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>misc</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>gained reflection</name>
								<script>if matches[2] == snd.target then
 snd.used.reflection = true
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) weaves a fiery canvas before (the )?\w+, and it quickly dissolves into a mirror image reflection of (the )?\w+!$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>paste up</name>
								<script>if snd.target == matches[2] then
 snd.used.paste = true
 snd.waiting.queue = false
 snd.target_cured("no_paste")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A thick, hardened shell of paste has formed around (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>has paste</name>
								<script>snd.used.paste = true
snd.target_cured("no_paste")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your fangs won't penetrate the odd waxy coating protecting them.</string>
									<string>Your victim is protected by a hard coating.</string>
									<string>^Your fangs won't penetrate the odd waxy coating protecting (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>lyre</name>
								<script>if snd.target == matches[2] then
  snd.target_got("barrier")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) strums a few notes on an Iosai lyre, and a prismatic barrier forms around (the )?\w+\.$</string>
									<string>^Your attack is repelled by the prismatic barrier surrounding (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>dome secondary</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your attack is repelled by the dome of ylem protecting (\w+).$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Loss</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>rebounding</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>razed rebounding</name>
								<script>if matches[2] == snd.target then
 snd.used.rebounding = false
 snd.waiting.queue = false
end

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You raze (\w+)('s|') aura of rebounding with (.+)\.$</string>
									<string>^White flames suddenly encase .* as your attack strikes (\w+)('s|') rebounding aura, burning the aura away\.$</string>
									<string>^Focusing your mind, you imbue .+ with blaze in your hands\.$</string>
									<string>^White flames suddenly encase .+, burning away (\w+)('s|') rebounding aura\.$</string>
									<string>^You lash out with .+ and crumple (\w+)('s|') aura of rebounding\.$</string>
									<string>^A line of inky blackness leaps from .+, annihilating (\w+)'s aura of rebounding in a darkling burst\.$</string>
									<string>^(\w+) grabs .+ arm and begins to chew, drooling all the while.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>3p raze rebounding</name>
								<script>if matches[2] == snd.target then
 snd.used.rebounding = false
 snd.waiting.queue = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ razes (\w+)('s|') aura of rebounding with .+\.$</string>
									<string>^\w+ lashes out with .+ and crumples (\w+)('s|') aura of rebounding\.$</string>
									<string>^You send .+ to flay (\w+)'s rebounding defence</string>
									<string>^(\w+)'s rebounding defence has been stripped\.$</string>
									<string>^(\w+)'s aura of weapons rebounding disappears\.$</string>
									<string>^\w+'s flames consume (\w+)'s aura of rebounding\.$</string>
									<string>^You whip .+ through the air in front of (\w+), to no effect\.$</string>
									<string>^\w+ razes? (\w+)'s .+ defence with .+\.$</string>
									<string>^\w+'s angel stares passively, but powerfully, at (\w+).$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Rebounding down</name>
								<script>if matches[2] == snd.target then
  local strip = matches[3]
  if strip == "rebounding" then
    snd.used.rebounding = false
  elseif strip == "shield" then
    snd.used.shield = false
  elseif strip == "cloak" then
    snd.used.rebounding = false
    snd.used.shield = false
    if snd.toggles.calling then
      snd.send("wt " .. snd.target .. " cloak is stripped.")
    end
  elseif strip ~= "cloak" or strip ~= "rebounding" or strip ~= "shield" then
    snd.used.rebounding = false
    snd.used.shield = false
  end
  snd.waiting.queue = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Sand coalesces before you into the form of a blade, and with an indifferent snap of the fingers, you send it to slice (\w+)'s (.*) defence.$</string>
									<string>^With an indifferent snap, you slice apart (\w+)'s (.*) defence.$</string>
									<string>^The stones rip apart (\w+)'s (.*) defence.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Assume rebounding is down</name>
								<script>if matches[2] == snd.target then
 snd.used.rebounding = false
 snd.waiting.queue = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ uses Dhuriv \w+ on (\w+)\.$</string>
									<string>^\w+ uses Spirituality Raze \(failure\) on (\w+)\.$</string>
									<string>^\w+ uses Battlefury Razestrike \(failure\) on (\w+)\.$</string>
									<string>^\w+ uses Battlefury (?:Doubleswing|Doublestrike) on (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>shield</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>3p raze shield</name>
								<script>if matches[2] == snd.target then
 snd.used.shield = false
 snd.waiting.queue = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ razes (\w+)('s|') magical shield with .+\.$</string>
									<string>^\w+ holds (the )?\w+ quarterstaff aloft, the leaves at your feet drawing upward in summons\. With a flick of the weapon, (the )?\w+ sends them to swirl about (\w+), the serrated edges drawing tiny cuts in (the )?\w+ skin as they shred (the )?\w+ defences\.$</string>
									<string>^Flames creep up (\w+)'s magical shield from within, \w+ burning shroud consuming it in an instant\.$</string>
									<string>^You touch your tattoo and a massive, translucent hammer rises up and shatters the magical shield surrounding (\w+)\.$</string>
									<string>^Your flames consume (\w+)'s shield\.$</string>
									<string>^You send .+ to flay (\w+)'s shield defence</string>
									<string>^With a casual flick of (the )?\w+ wrist, (the )?\w+ sends a spell of degradation into (\w+)'s Spirit.$</string>
									<string>^The meteor slams into (\w+)'s shield, shattering it\.$</string>
									<string>You touch your tattoo and summon the hammer but find nothing to strike.</string>
									<string>^(\w+)'s shield rapidly dissipates, (the )?\w+ lust for blood overwhelming it\.$</string>
									<string>^You whip .+ through the air in front of (\w+), to no effect.$</string>
									<string>^\w+ razes? (\w+)'s magical shield with .+\.$</string>
									<string>bone fetish resounds with a chiming echo that shatters (\w+)'s shield.$</string>
									<string>^(\w+)'s shielded defence has been stripped.$</string>
									<string>^A massive, translucent hammer rises out of .+ tattoo and smashes (\w+)'s magical shield.$</string>
									<string>^(\w+)'s shielded defence has been stripped.$</string>
									<string>^The protective shield around (\w+) dissipates.$</string>
									<string>^With a blinding cut of light, the Cleaver splits (\w+)'s magical shield in two.$</string>
									<string>^A thrust from the barbed tail of a vicious wyvern spirit pierces (\w+)'s magical shield.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>3</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>razed shield</name>
								<script>if matches[2] == snd.target then
 snd.used.shield = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You raze (\w+)('s|') magical shield with (.+)\.$</string>
									<string>^You use Spirituality Raze \(shield\) on (\w+)\.$</string>
									<string>^You lash out with .+ and shatter (\w+)('s|') translucent shield\.$</string>
									<string>^You draw your quarterstaff upward as it taps into its stored natural energy, the leaves at your feet heeding your call\. With a flick of the weapon, you send them to scourge (\w+), the serrated edges leaving tiny cuts as they swirl about (the )?\w+ and shred (the )?\w+ defences\.$</string>
									<string>^You use (Primality Leafstorm) on (\w+)\.$</string>
									<string>^You use (Primality Leafstorm Boosted) on (\w+)\.$</string>
									<string>^You use Tenacity Devastate on (\w+).$</string>
									<string>^You use Tenacity Devastate \(fail\) on (\w+).$</string>
									<string>^You touch your tattoo and summon the hammer but (\w+) isn't protected.$</string>
									<string>^(\w+) grabs .+ arm and begins to chew, drooling all the while\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>misc</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Flay Complete Failure</name>
								<script>if snd.target == matches[2] then
	snd.used.paste = false
	snd.used.rebounding = false
	snd.used.shield = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ uses? Assassination Flay \(none\) on (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>3p razed</name>
								<script>if matches[2] == snd.target then
 snd.used.rebounding = false
 snd.used.shield = false
 snd.waiting.queue = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ whips .+ through the air in front of (\w+), to no effect\.$</string>
									<string>^\w+ lashes out at (\w+) with .+ but finds no protective barriers to strip\.$</string>
									<string>^\w+ sends .+ to flay (\w+) but comes away looking confused\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>reflection down</name>
								<script>if matches[2] == snd.target then
 snd.used.reflection = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A reflection of (\w+) blinks out of existence\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fangbarrier gone</name>
								<script>if snd.target == matches[2] then
 snd.used.paste = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The hardened paste coating (\w+)'s? body sloughs off from (the )?\w+ skin\.$</string>
									<string>^The paste coating (\w+)'s? body sloughs off, unable to stick to (the )?\w+ unnaturally slick skin\.$</string>
									<string>^\w+ sinks a set of metal fangs into (\w+), injecting \w+ into .+ veins\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Def strips</name>
								<script>if matches[3] ~= "shield" and matches[2] == snd.target then
	snd.used.rebounding = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s (\w+) defence has been stripped.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>razed</name>
								<script>if matches[2] == snd.target then
 snd.used.rebounding = false
 snd.used.shield = false
 snd.waiting.queue = false
end

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You raze (\w+)('s|') speed defence with .+\.$</string>
									<string>^You whip .+ through the air in front of (\w+), to no effect\.$</string>
									<string>^(\w+)('s|') aura of weapons rebounding disappears\.$</string>
									<string>^You lash out at (\w+) with .+ but find no protective barriers to eliminate\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Illumination Fire</name>
								<script>if matches[2] == snd.target then
  if matches[1]:find("aura of") then
    snd.used.rebounding = false
  elseif matches[1]:find("shield") then
    snd.used.shield = false
  end
elseif snd.target == snd.getting_hit then
  if matches[2] == "aura" then
    snd.used.rebounding = false
  elseif matches[2] == "shield" then
    snd.used.shield = false
  else
    snd.used.rebounding = false
    snd.used.shield = false
  end
end
disableTrigger("Illumination Fire")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your flames consume (\w+)'s (.+)\.$</string>
									<string>^Your flames find no (\w+) to burn\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fervour Spew</name>
								<script>if matches[2] == snd.target or snd.target == snd.getting_hit then
  if matches[1]:find("shield") then
    snd.used.shield = false
  elseif matches[1]:find("rebounding") then
    snd.used.rebounding = false
  elseif matches[1]:find("protections") then
    snd.used.shield = false
    snd.used.rebounding = false
  end
end
disableTrigger("Fervour Spew")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You send lava to destroy their shield but they have none.</string>
									<string>^The lava utterly destroys (\w+) shield.</string>
									<string>^You send lava to destroy their aura of rebounding but they have none.</string>
									<string>^The lava utterly destroys (\w+) aura of rebounding.</string>
									<string>^You send lava to destroy their protections but find they have none.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>lyre down</name>
								<script>snd.target_cured("barrier")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s prismatic barrier dissolves into nothing\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>dome</name>
								<script>snd.target_cured("dome")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s protective dome of ylem disperses\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>random tidesage stuff</name>
								<script>if matches[2] == snd.target then
  if matches[3] == "rebounding" then
    snd.used.rebounding = false
  elseif matches[3] == "shield" then 
    snd.used.shield = false
    snd.used.rebounding = false
  else
    snd.used.shield = false
    snd.used.rebounding = false
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Teeming with sibilant promises, the abyssal voices persuade (\w+) to part with the (\w+) defence.$</string>
									<string>^Desperate to quell \w+'s haunting chorus, (\w+) parts with the (\w+) defence.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>reflection down</name>
								<script>snd.def_remove("reflection")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>One of your reflections has been destroyed!</string>
									<string>All your reflections wink out of existence!</string>
									<string>Your reflection defence has been stripped.</string>
									<string>One of your reflections has been destroyed! You have 0 left.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
					</TriggerGroup>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Impale</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>already impaled</name>
						<script>snd.target_got("writhe_impaled")
snd.target_impaled = true
snd.theytumbling = false</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You cannot do that while you have impaled another.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>not prone</name>
						<script>snd.target_cured("fallen")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You can't do that if your target isn't prone!</string>
							<string>^(\w+) nimbly stays on [a-zA-Z ]+ feet\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>not impaled</name>
						<script>snd.target_impaled = false
snd.target_cured("writhe_impaled")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You are not impaling anybody.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Health/Mana</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>contemplate</name>
						<script>if matches[2] == snd.target then
  local percent = math.floor((tonumber(matches[3]) / tonumber(matches[4])) * 100)
  echo(" " .. percent .. "%")
  snd.mana_percent = percent
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)'s? mana stands at (\d+)/(\d+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>anabiotic</name>
						<script>if matches[2] == snd.target then
 snd.vital_change("health", 10)
 snd.vital_change("mana", 10)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) swallows an anabiotic pill\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>sipped something</name>
						<script>if matches[2]:lower() == snd.target:lower() and matches[3]:find("vial") then
  snd.vital_change("health", 25)
  snd.vital_change("mana", 25)
  snd.lev_gone = false
  if snd.checkAff("no_speed") then -- Assume they sip speed over sipping health, remove speed after the lowest delay (averages between: 4.5-5 seconds)
    tempTimer(4.5, [[snd.target_cured("no_speed")]])
  end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) takes a drink from (.+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Aff Tracking</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>aff called</name>
						<script>if snd.loban_no_more(matches[3]:lower()) == snd.target:lower() then
  snd.maybe_affs = {}
  for aff in string.gmatch(matches[4]:lower(), '([^,^.^: ]+)') do
    aff = snd.loban_no_more(aff)
    if aff ~= "whispering" and aff ~= "dictating" then
      table.insert(snd.maybe_affs, aff)
    end
  end
  snd.hitting = matches[2]
  snd.who_called_affs = matches[2]
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>50</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\(Web\)\: (\w+) says, \"(?i:Afflicting|Afflictingway) (\w+): (.*)\.\"$</string>
							<string>^\(Web\): (\w+) says, \"(?i:Vinelash|Virulent) (\w+): (\w+)\.\"$</string>
							<string>^\(Web\)\: (\w+) says, \"(?:\[\w+\] )?Afflicting (\w+): (.*)(.|,)\"$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>vorpal</name>
							<script>snd.onHit(multimatches[1][3])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses Bladefire Vorpal on (\w+)\.$</string>
								<string>1</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>5</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>end</name>
							<script>setTriggerStayOpen("aff called", 0)
snd.maybe_affs = {}</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string></string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>7</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>batter call</name>
						<script>if string.title(matches[4]) == snd.target then
 local maybe_affs = {}
 for aff in string.gmatch(matches[5], '([^, ]+)') do
  table.insert(maybe_affs, aff)
 end
 for aff in pairs(maybe_affs) do
  snd.target_got(maybe_affs[aff])
 end
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>20</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\(Web\)\: (\w+) says, \"(Battering|Battered) (\w+): (.*)\.\"$</string>
							<string>^\(Web\)\: (\w+) says, \"(Whispering|Whisper) (\w+): (.*)\.\"$</string>
							<string>^\(Web\)\: (\w+) says, \"(Dictate|Dictating) (\w+): (.*)\.\"$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>undo</name>
							<script>if matches[2] == snd.target then
 snd.target_cured(matches[3])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You discern that (\w+) has resisted the (\w+) affliction\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>end</name>
							<script>setTriggerStayOpen("batter call", 0)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return isPrompt()</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>aff called by vamps</name>
						<script>if matches[3]:lower() == snd.target:lower() then
  snd.maybe_affs = {matches[4]}
  snd.target_got(matches[5])
  snd.target_got(matches[6])
  snd.hitting = matches[2]
  snd.who_called_affs = matches[2]
end
--I GUESS
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>50</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\(Web\): (\w+) says, "Afflicting (\w+): (\w+)\. (?:Whispering|Dictating): (\w+), (\w+)\."$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>vorpal</name>
							<script>snd.onHit(multimatches[1][3])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses Bladefire Vorpal on (\w+)\.$</string>
								<string>3</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>5</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>end</name>
							<script>setTriggerStayOpen("aff called by vamps", 0)
snd.maybe_affs = {}</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return isPrompt()</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gave Afflictions</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>delivered venom</name>
							<script>if snd.getting_hit ~= "You" then
  if snd.toggles.atkecho and snd.toggles.gags then 
   deleteLine()
   snd.message("Gave: "..matches[2])
  end
  
  local attacks = {"Lob", "Assault", "Slaughter", "Carve", "Cripple"}
  if attacks[snd.skill_being_used] == nil then
    snd.used.rebounding = false
  end
   
  snd.last_affs = {}
  local aff = snd.venomEffect(matches[2])
  snd.target_got(aff)
  table.insert(snd.last_affs, aff)
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You discern that a layer of (\w+) has rubbed off your weapon\.$</string>
								<string>^Your quarterstaff leaches (\w+) into (the )?\w+'s blood.$</string>
								<string>^You discern that a layer of (\w+) has rubbed off your thread.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>gave aff</name>
							<script>if matches[2] == snd.target then
 snd.target_got(matches[3])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You discern that (\w+) has been afflicted with (.+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Archivist</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Mutagens</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Allergies from mutagen</name>
									<script>if matches[2] == snd.target then
 snd.target_got("allergies")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Skin flushing a deep red, (\w+) looks upon (the )?\w+ in disbelief.$</string>
										<string>^(\w+) cringes as a dark red rash spreads painfully across (the )?\w+ skin.$</string>
										<string>^(\w+) wheezes loudly as (the )?\w+ body weakens under the stress, most of (the )?\w+ skin now dark red.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Addiction from mutagen</name>
									<script>if matches[2] == snd.target then
 snd.target_got("addiction")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Growing unfocused, a perverse addiction settles over (\w+).$</string>
										<string>^(\w+)'s hands begin to shake as (the )?\w+ turns restless.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Lethargy from mutagen</name>
									<script>if matches[2] == snd.target then
 snd.target_got("lethargy")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) slows, energy draining from (the )?\w+ as (the )?\w+ struggles to move.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Blisters mutagen</name>
									<script>if matches[2] == snd.target then
 snd.target_got("blisters")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s skin blisters virulently, sacs of pus and blood bulging from (the )?\w+ frame.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Weariness mutagen</name>
									<script>if matches[2] == snd.target then
	snd.target_got("weariness")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Stumbling, (\w+)'s musculature withers and frays where (the )?\w+ stands.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Impairment mutagen</name>
									<script>if matches[2] == snd.target then
	snd.target_got("impairment")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s body contorts, warping into a subtle yet unrecognizable configuration.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>mutagen cured</name>
									<script>if matches[2] == snd.target then
 	snd.target_cured("mutagen")
	snd.my_mutagen = false
	snd.their_mutagen = false
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The mutagen placed upon (\w+) has expired, its lifespan complete.$</string>
										<string>^The mutagen placed upon (\w+) has expired, too far from you.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>nexus proc</name>
									<script>if matches[2] == snd.target then
	snd.send("bio advance " ..matches[2])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your mutagen leaps from you to (\w+), crackling through the air.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Sadness mutagen</name>
									<script>if matches[2] == snd.target then
	snd.target_got("sadness")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Melancholy settles upon (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Masochism mutagen</name>
									<script>if matches[2] == snd.target then
	snd.target_got("masochism")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) gives a laugh, a strange glint rising into \w+ eyes.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Afflictions</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Elicit Affliction</name>
									<script>if snd.getting_hit == snd.target then
  snd.target_got(snd.affNameCheck(matches[3]))
end
disableTrigger("Elicit Affliction")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You sense that you have afflicted (the )?\w+ with ([a-z _]+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Lemniscate Taken</name>
									<script>if matches[2] == snd.target and snd.checkAff("lemniscate") then
	snd.target_cured("lemniscate")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The passage of time around (\w+) returns to normal.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>square afterimage</name>
									<script>if matches[2] == snd.target then
	if not snd.checkAff("dizziness") then 
		snd.target_got("dizziness")
	elseif not snd.checkAff("faintness") then
		snd.target_got("faintness")
	elseif not snd.checkAff("epilepsy") then
  		snd.target_got("epilepsy")
	elseif not snd.checkAff("shyness") then
  		snd.target_got("shyness")
	end
	
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The burning afterimage of the Square forms before (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>triangle afterimage</name>
									<script>if matches[2] == snd.target then
	if not snd.checkAff("laxity") then 
			snd.target_got("laxity")
	elseif not snd.checkAff("lovers_effect") then 
			snd.target_got("lovers_effect")
	elseif not snd.checkAff("peace") then 
			snd.target_got("peace")
	elseif not snd.checkAff("magnanimity") then 
			snd.target_got("magnanimity")
	end

end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The burning afterimage of the Triangle forms before (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Circle afterimage</name>
									<script>if matches[2] == snd.target then
	if not snd.checkAff("merciful") then 
		snd.target_got("merciful")
	elseif not snd.checkAff("masochism") then 
		snd.target_got("masochism")
	elseif not snd.checkAff("berserking") then 
		snd.target_got("berserking")
	elseif not snd.checkAff("recklessness") then 
		snd.target_got("recklessness")
	end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The burning afterimage of the Circle forms before (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Passive Impress Effect</name>
									<script>if matches[2] == snd.target then
	snd.my_impress = matches[3]
	if matches[3] == "Hex" then
			snd.target_got("hypochondria")
	elseif matches[3] == "Swirl" then
			snd.target_got("mental_disruption")
	elseif matches[3] == "Bloom" then
			snd.target_got("vomiting")
	elseif matches[3] == "Star" then
			snd.target_got("paresis")
	end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) is coaxed by the (\w+) upon a wooden (the )?\w+.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Geo Impressing</name>
									<script>snd.my_impress = matches[2]</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You focus your will and impress the (\w+) upon a wooden (the )?\w+.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>General Variables for Archivist Triggers</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Retrieval of Token</name>
									<script>snd.geoinvert = false
snd.geotrace = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You form the Lens within your mind and squeeze a wooden (.*) through space and into your hand.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Conjoin Cooldown</name>
									<script>snd.conjoincd = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You may conjoin the shapes once more.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Conjoin Not Ready</name>
									<script>snd.conjoin = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>The recognition you had of the world geometries finally escapes you.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Conjoin Hit</name>
									<script>snd.conjoin = true
snd.conjoincd = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You unify the geometries of the world within your mind, gaining fleeting recognition of their infinite potential.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>no more shield</name>
									<script>if matches[2] == snd.target then
 snd.used.shield = false
 --snd.send("wt " ..matches[2].. " - BROKE THEIR SHIELD!")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s magical shield disintegrates, reduced to its component motes.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>snd reset unravel</name>
									<script>snd.reset_target()</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) is already weak in mind and body. A simple nudge unravels .+ mortal form completely\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Swirl Prone</name>
									<script>if matches[2] == snd.target then
  snd.target_prone = true
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) wobbles uncertainly before falling to the ground, (his|her) leg pulled awkwardly behind (his|her) own head.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>No bioessence</name>
									<script>local bioessence = 0</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You do not possess the energy to perform that feat.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Empowered Already</name>
									<script>--snd.empowerready = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You have already empowered that number.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Crescentable</name>
									<script>snd.crescentable = true
snd.target_cured("blackout")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) blinks rapidly, rubbing .+ eyes\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>not crescentable</name>
									<script>if matches[2] == snd.target then
  snd.crescentable = false
  snd.target_got("blackout")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) grips (.*) skull in pain, clenching (.*) eyes shut\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Ascendril/Bloodborn</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Elemancy</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>flamewreathed proc</name>
									<script>if matches[2] == snd.target then
	snd.last_hit_limb = matches[3]
  if snd.flamewreathed.resonance == "Water" then
    snd.last_limb_dmg = 8
  else
  	snd.last_limb_dmg = 7
	end
  snd.took_limb_dmg(matches[3], snd.last_limb_dmg)
	snd.flamewreathed = {limb = "", resonance = ""}
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The flames around (\w+)'s (.+) ignite in intensity and then expire, their energy spent.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>windlance prone</name>
									<script>if matches[2] == snd.target then
	snd.target_got("fallen")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The force of the lance knocks (\w+) from (the )?\w+ feet, local debris tearing into (the )?\w+ as (the )?\w+ falls.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Frostband tick</name>
									<script>if matches[2] == snd.target then
  snd.target_got("cold")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The Brand of the Frost pulses with blue-black light, (\w+)'s face contorting against the excruciating, bone-deep ache of cold.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Frostbrand got</name>
									<script>if matches[2] == snd.target  then
  snd.target_cured("direfrost")
	snd.target_got("frostbrand")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The gleaming fractals of direfrost unite upon (\w+)'s body, solidifying into the biting Brand of the Frost.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Frostbrand gone</name>
									<script>if matches[2] == snd.target  then
	snd.target_cured("frostbrand")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The Frostbrand fades away from (\w+)'s body.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Stalling a skill</name>
									<script>snd.stalled_skill = matches[2]</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You scrawl a glimmering mark of delay in the air, fingers sliding through it to hold on to the (\w+) spell for \d+ seconds\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Stalled skill used</name>
									<script>snd.stalled_skill = ""</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Thaumaturgy Stall Release.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Ice encased proc</name>
									<script>if matches[2] == snd.target then
  snd.target_got("frozen")
  snd.target_got("ice_encased")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Limned with ice, (\w+) becomes encased in the Brand of the Frost's chilling grasp\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>ice encased gone</name>
									<script>if matches[2] == snd.target then
  snd.target_cured("ice_encased")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The ice encasing (\w+) cracks and sloughs off in chunks, shattering upon the ground\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>emberbrand proc</name>
									<script>if matches[2] == snd.target  then
	snd.target_got("ablaze")
  snd.target_got("emberbrand")
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12  and snd.checkAff("ablaze") then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The Brand of Ember seared upon (\w+) glows, fire rippling outward to ignite along  (the )?\w+ body\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>thunderbrand proc</name>
									<script>if matches[2] == snd.target  then
  snd.target_got("thunderbrand")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The brooding, relentless pressure leaves an indent upon (\w+)'s brow, sinking into the Brand of Thunder\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>thunderbrand gone</name>
									<script>if matches[2] == snd.target  then
  snd.target_cured("thunderbrand")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The Thunderbrand fades away from (\w+)'s forehead.\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fulcrum balance</name>
									<script>snd.fulcrum_ready = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You must recover fulcrum balance first.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fulcrum balance back</name>
									<script>snd.fulcrum_ready = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You may cast another complex spell.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Glimpse</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Glimpse End</name>
									<script>if matches[2] == "Water" or matches[2] == "Fire" or matches[2] == "Air" then
	snd.glimpse = "none"
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your glimpse of (\w+) has ended.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Glimpse Affects</name>
									<script>if matches[2] == snd.target then
  if snd.glimpse == "air" then
    if snd.checkAff("vertigo") then
      snd.target_got("muddled")
    else
      snd.target_got("vertigo")
    end
  end
end
if matches[2] == snd.target then
  if snd.glimpse == "water" then
    if snd.checkAff("hypothermia") then
        snd.target_got("cold")
    else
      snd.target_got("hypothermia")
    end
  end
end
if matches[2] == snd.target then
  if snd.glimpse == "fire" then
    snd.target_got("ablaze")
  end
end

</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your glimpse affects (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fulcrum Dissonance Tracking</name>
									<script>if matches[2] == snd.target then
  snd.target_got(matches[3])
  if snd.toggles.atkecho and snd.toggles.gags then
  	deleteLine()
  	snd.message("Fulcrum Dissonance: "..matches[3])
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your fulcrum's dissonance affects (\w+) with (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Glimpsing on</name>
									<script>snd.glimpsing = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Thaumaturgy (Maelstrom|Typhoon|Inferno) \(start\)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Glimpsing off</name>
									<script>snd.glimpsing = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Thaumaturgy (Maelstrom|Typhoon|Inferno) \(end\)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>current glimpse</name>
									<script>local glimpse = {["Typhoon"] = "air", ["Inferno"] = "fire", ["Maelstrom"] = "water",}

snd.glimpse = glimpse[matches[2]]
snd.fulcrum_ready = false
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Thaumaturgy (Typhoon|Inferno|Maelstrom) \(end\).</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Hematurgy Contaminate</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Contaminate used</name>
									<script>snd.balance.enrich = false
snd.fulcrum_call = false
snd.fulcrum_exists = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>Phlegm spews past your lips and into your blood well, its surface chilling and coagulating in acceptance of the vile offering.</string>
										<string>You will black bile to ooze from your pores and into your blood well, the offering accepted with a sudden churning and gurgling bubble.</string>
										<string>You expel an acidic burst of reeking yellow bile into the depths of your blood well, an abrupt warming of its surface and hissing sizzle signaling its greedy acceptance of the offering.</string>
										<string>You call upon your dominion over blood to rid your well of humours, purifying its depths for further use.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>3</integer>
										<integer>3</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>contaminate back up</name>
									<script>snd.balance.enrich = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You can once more freely contaminate your blood well.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Humourism</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>flamewreathed proc - hema</name>
									<script>if matches[2] == snd.target then
	snd.last_hit_limb = matches[3]
  if snd.flamewreathed.resonance == "Phlegm" then
    snd.last_limb_dmg = 8
  else
  	snd.last_limb_dmg = 7
	end
  snd.took_limb_dmg(matches[3], snd.last_limb_dmg)
	snd.flamewreathed = {limb = "", resonance = ""}
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The xanthous bile coating (\w+)'s (.+) seeps deeper into the musculature before dissipating.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>windlance prone - hema</name>
									<script>if matches[2] == snd.target then
	snd.target_got("fallen")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) buckles beneath the force of the magical bolt, its sorcerous strength driving .+ to .+ knees.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Frostband tick - hema</name>
									<script>if matches[2] == snd.target then
  snd.target_got("cold")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Agony commands (\w+)'s expression as .+ own innards betray .+, .+ excess phlegm manifesting as ice in .+ veins.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Frostbrand got - hema</name>
									<script>if matches[2] == snd.target  then
  snd.target_cured("frostbite")
	snd.target_got("excess_phlegm")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s frostbite worsens to a critical state, .+ body's internal humours suffering an excess of phlegm.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Frostbrand gone - hema</name>
									<script>if matches[2] == snd.target  then
	snd.target_cured("excess_phlegm")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s phlegmatic system returns to normal.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Stalling a skill - hema</name>
									<script>snd.stalled_skill = matches[2]</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You turn your sanguine mastery inward, binding the (\w+) spell within your own veins for \d+ seconds.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Stalled skill used - hema</name>
									<script>snd.stalled_skill = ""</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Hematurgy Arrhythmia Release.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Ice encased proc - hema</name>
									<script>if matches[2] == snd.target then
  snd.target_got("frozen")
  snd.target_got("ice_encased")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s excess phlegm intensifies the frost nipping at .+ extremities, weighing .+ down with its elemental influence.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>emberbrand proc - hema</name>
									<script>if matches[2] == snd.target  then
	snd.target_got("ablaze")
  snd.target_got("excess_choleric")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The seething excess of yellow bile within (\w+)'s body inflicts further torment, igniting .+ anew.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>thunderbrand proc - hema</name>
									<script>if matches[2] == snd.target  then
  snd.target_got("excess_melancholic")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The sudden displacement of humours jolts (\w+)'s innards, compelling a production of excess black bile.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>thunderbrand gone - hema</name>
									<script>if matches[2] == snd.target  then
  snd.target_cured("excess_melancholic")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s excess of black bile fades, returning .+ to normal.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Bloodborn Reflections</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Bloodborn Reflection Used</name>
									<script>snd.reflection_charge = snd.reflection_charge-1</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Esoterica Geminate.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Bloodborn Reflection Regained</name>
									<script>snd.reflection_charge = snd.reflection_charge+1</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your arcane power gathers anew - you may unleash another geminating ritual.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Bloodborn No reflections left</name>
									<script>snd.reflection_charge = 0</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You cannot unleash the power of a geminating ritual again so soon.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Bloodborn All reflections regained</name>
									<script>snd.reflection_charge = 3</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your arcane power blossoms as you regain the ability to perform a ritual of gemination.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>BB Glimpse</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Glimpse End - end</name>
									<script>if matches[2] == "phlegm" or matches[2] == "black bile" or matches[2] == "yellow bile" then
	snd.glimpse = "none"
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The influence (.+) holds over your well dissipates.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Glimpse Affects - hema</name>
									<script>if matches[2] == snd.target then
  if snd.glimpse == "black" then
    if snd.checkAff("vertigo") then
      snd.target_got("muddled")
    else
      snd.target_got("vertigo")
    end
  end
end
if matches[2] == snd.target then
  if snd.glimpse == "phlegm" then
    if snd.checkAff("hypothermia") then
        snd.target_got("cold")
    else
      snd.target_got("hypothermia")
    end
  end
end
if matches[2] == snd.target then
  if snd.glimpse == "yellow" then
    snd.target_got("ablaze")
  end
end

</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your dread investiture affects (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fulcrum Dissonance Tracking - hema</name>
									<script>if matches[2] == snd.target then
  snd.target_got(matches[3])
  if snd.toggles.atkecho and snd.toggles.gags then
  	deleteLine()
  	snd.message("Fulcrum Dissonance: "..matches[3])
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your well's thrombosis affects (\w+) with (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Glimpsing on - hema</name>
									<script>snd.glimpsing = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Hematurgy (Suffocate|Profane|Imbrue) \(start\).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Glimpsing off - hema</name>
									<script>snd.glimpsing = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Hematurgy (Suffocate|Profane|Imbrue) \(end\).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>current glimpse - Hema</name>
									<script>local glimpse = {["Suffocate"] = "black", ["Profane"] = "yellow", ["Imbrue"] = "phlegm",}

snd.glimpse = glimpse[matches[2]]</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Hematurgy (Suffocate|Profane|Imbrue) \(end\).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fulcrum not here</name>
								<script>snd.fulcrum_call = true
snd.fulcrum_exists = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You do not seem to have a fulcrum within range to use</string>
									<string>You must have a fulcrum to perform any of its abilities.</string>
									<string>You do not seem to have a fulcrum within range to use, Mage.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Summon fulcrum</name>
								<script>snd.set_queue("fulcrum construct")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You must have a fulcrum to perform any of its abilities.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Draw / Construct / Recall - Fulcrum / Well</name>
								<script>snd.fulcrum_call = false
snd.fulcrum_exists = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You use Thaumaturgy Construct.</string>
									<string>You use Thaumaturgy Recall.</string>
									<string>You use Hematurgy Draw.</string>
									<string>You use Hematurgy Recall.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Well Summon</name>
								<script>snd.set_queue("well draw")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You must have a well to perform any of its abilities.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bard</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Anelace Stab Handling</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Stab Success</name>
									<script>if matches[2] == snd.target then
snd.target_got("hollow")
snd.target_got("narcolepsy")
disableTrigger("Anelace Stab Handling")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Pulsing ominously, the weapon floods (\w+)'s chest with an array of inverted light.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Stab Failure</name>
									<script>disableTrigger("Anelace Stab Handling")
--unsure what other fail conditions might stop this, so also closing it on prompt.</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Stepping quickly out of the way, \w+ dodges the attack.$</string>
										<string>You strike out clumsily and miss your mark.</string>
										<string></string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>3</integer>
										<integer>7</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Ironcollar Handling</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Ironcollar Success</name>
									<script>if matches[2] == snd.target then
snd.target_got("ironcollar")
disableTrigger("Ironcollar Handling")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^An iron collar snaps shut around (\w+)'s throat, sealing itself together.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Ironcollar Failure</name>
									<script>if matches[2] == snd.target then
disableTrigger("Ironcollar Handling")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^An iron collar snaps shut in (\w+)'s hand, clamping only air.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Bard Hit Confirmation</name>
								<script>-- I think Keroc added more possible Tempo lines. :/</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Tempo Hit Confirmation (No Limb)</name>
									<script>if matches[2] == snd.target then
  snd.onHit2({"Rebounding", "Dodge"}, "Bard")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ dances? forward and thrusts? .+\ deep into (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Tempo Hit Confirmation (w/ Limb)</name>
									<script>if matches[2] == snd.target then
  snd.last_hit_limb = matches[3]
  snd.last_limb_dmg = 3.155
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
if matches[2] == snd.target then
  snd.onHit2({"Parry", "Rebounding", "Dodge"}, "Bard")
end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ dances? forward and thrusts? .+\ deep into (\w+)'s (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Bard Rhythm Confirmation</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Rhythm Attack Lines</name>
									<script>if matches[2] == snd.target then
  snd.onHit2({"Rebounding", "Dodge"}, "Bard Rhythm")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ neatly pierces (\w+) with .+\.$</string>
										<string>^\w+ gashes open (\w+) with a flick of .+\.$</string>
										<string>^With a sharp jab, (?:the )?\w+ buries .+ into (\w+)\.$</string>
										<string>^\w+ quickly strikes (\w+) with .+\.$</string>
										<string>^\w+ drives .+ into (\w+) with a quick thrust\.$</string>
										<string>^\w+ lacerates (\w+) with a swing of .+\.$</string>
										<string>^\w+ nimbly cuts into (\w+) with .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Needle Handling</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Needle Afflicting</name>
									<script>local naff = snd.needle

if snd.target == matches[2] then
 snd.target_got(naff)
 snd.needle = "none"
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) appears flushed and somewhat unsteady on .+\ feet.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Weaving Handling</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Globes Complete</name>
									<script>if matches[2] == snd.target then



for i in pairs(snd.globe_affs) do
  if snd.globecount ~= 0 then
    snd.target_got(snd.globe_affs[snd.globecount])
    snd.globecount = snd.globecount-1
  else
    break
  end
end     
snd.target_cured("globes")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The illusionary globes spinning around (\w+) flare in size, then crash into (.*) body.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Runeband Triggering</name>
									<script>if matches[2] == snd.target then
  snd.target_got(snd.runeband_affs[snd.runebandcount])
  if snd.bandclockwise then
    snd.runebandcount = snd.runebandcount+1
    if snd.runebandcount &gt; 7 then
      snd.runebandcount = 1
    end
    snd.message("Next runeband aff is: "..snd.runeband_affs[snd.runebandcount].."", "warning")
  else
    snd.runebandcount = snd.runebandcount-1
    if snd.runebandcount &lt; 1 then
    snd.runebandcount = 7
    end
    snd.message("Next runeband aff is: "..snd.runeband_affs[snd.runebandcount].."", "warning")
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The shifting runes within the band around (\w+) capture (.*) attention.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Runeband Reverse</name>
									<script>if matches[2] == snd.target then
  if not snd.bandclockwise then
    snd.bandclockwise = true
    snd.message("Band is now clockwise! Next aff is: "..snd.runeband_affs[snd.runebandcount].."", "warning")
  else
    snd.bandclockwise = false
    snd.message("Band is now counter-clockwise! Next aff is: "..snd.runeband_affs[snd.runebandcount].."", "warning")
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The brilliant rune bands encircling (\w+) reverse their pattern, changing its spin.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Runeband Ending</name>
									<script>if matches[2] == snd.target then
  snd.target_cured("runeband")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The shifting band of runes around (\w+) has crumbled in your absence.$</string>
										<string>^The shifting band of runes around (\w+) crumbles into motes of light.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Bladestorm Ending</name>
									<script>if matches[2] == snd.target then
  snd.target_cured("bladestorm")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The final dagger plunges down from the skies and into (\w+), sinking into flesh.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Bladestorm Inactive/Gone</name>
									<script>snd.target_cured("bladestorm")
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>Your daggers held within the sky vanish into wisps of smoke.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Soundblast Aff</name>
									<script>if matches[2] == snd.target then
  snd.target_got("ringing_ears")
  snd.target_got("hearing")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) clutches .+ ears in terror, visibly shaken by the sound.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Globes - Runner Bonus (Better) (Do later)</name>
									<script>local runner = multimatches[1][2]

if runner == snd.target then
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) leaves to the .+\.$</string>
										<string>^Zipping through the air, an illusionary globe flies into .+ open hand.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Globes - Runner Bonus</name>
									<script>if matches[2] == snd.target then
  snd.globecount = snd.globecount-1
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Zipping through the air, an illusionary globe from (\w+) flies into your open hand.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Globe Completion</name>
									<script>snd.target_cured("globes")
snd.globecount = 0
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The final globe burns itself into (\w+)'s thoughts as it fades into obscurity.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Blackstar Received</name>
									<script>if matches[2] == snd.target then
snd.target_got("blackstar")
snd.impetus = false
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Drawn together in a ripple-like smear, the black light shapes itself into a small star upon (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Blackstar Fade</name>
									<script>if matches[2] == snd.target then
  snd.target_cured("blackstar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The black star upon (\w+) fades from view.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Impetus Up</name>
									<script>snd.impetus = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You wave your hand over .+, it now glowing with a black light.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Impetus Down</name>
									<script>snd.impetus = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>ceases to glow with black light\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Impetus Fade</name>
									<script>snd.impetus = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The cut wound upon (\w+) turns into black motes that disperse.$</string>
										<string>^(\w+)'s open wound transforms to motes of sickly black that soon disperse.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Songcalling Handling</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Sorrow Finished</name>
									<script>    if snd.target == matches[2] then
     snd.target_got("migraine")
     snd.target_got("squelched")
    end    
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The morbid cadence of your sombre ballad incites a deep and profound sorrow in (\w+)\.$</string>
										<string>^The morbid cadence of \w+'s sombre ballad incites a deep and profound sorrow in (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Doom Finished</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Unable to escape the song-woven and soul-fuelled destruction of the darkly vibrating notes, your tune finds and captivates (\w+), bringing doom upon .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fate Finished</name>
									<script>--if snd.target == matches[2]
--and snd.audience == matches[2] then
--
--end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The eerie, impenitent evensong embraces (\w+), creating a song-woven darkness that swathes .+.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fascination Finished</name>
									<script>if snd.target == matches[2] then
snd.target_got("writhe_stasis")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Like an auditory snare, your song captivates (\w+)'s attention, arresting him with its allurement.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Charity Finished</name>
									<script>if snd.target == matches[2] then
  snd.target_got("generosity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You sense that your charitable song has affected (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Songcalling Start - Instrument</name>
									<script>if multimatches[2][2] ~= "Inspire" then
  local skill = multimatches[2][2]
  snd.playing = true
  snd.song_instrument = skill
  enableTimer("Playing Song")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#ff0000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>FG3BG2</string>
										<string>^You use Songcalling (\w+) \(play\).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>6</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Songcalling Start - Sing</name>
									<script>if multimatches[2][2] ~= "Inspire" then
  local skill = multimatches[2][2]
  snd.singing = true
  snd.song = skill
  enableTimer("Singing Song")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#ff0000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>FG3BG2</string>
										<string>^You use Songcalling (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>6</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Decadence Delivery</name>
									<script>if snd.target == matches[2] then
  snd.target_got("addiction")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You sense that your decadent song has affected (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Awakening Delivered</name>
									<script>if matches[2] == snd.target then
  snd.target_got("awakened")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) gazes at you in awe, lost in a windfall of emotional awakening.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Awakening Ended</name>
									<script>if matches[2] == snd.target then
  snd.target_cured("awakened")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s emotions settle back into normalcy.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Discordance Aff Delivered</name>
									<script>if snd.target == matches[2] then
  snd.target_got(matches[3])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The music engulfs (\w+) with (.*).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Halfbeat Management</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Halfbeat Up</name>
										<script>snd.halfbeat = true</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>Your tone shifts as it picks up speed.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Halfbeat Down</name>
										<script>snd.halfbeat = false</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>6</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>Your songs lose their tempo as your body calms itself.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Quip - Berserking Validation</name>
								<script>if snd.target == matches[2] then
  snd.target_got("berserking")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The insult drives (\w+) particularly mad, whose face fills with anger\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Worrywart - Fear Induce</name>
								<script>if snd.target == matches[2] and snd.target_induced == "fear" then 
  snd.target_got("worrywart")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) appears lost in thought for a moment.$</string>
									<string>^(\w+) furrows .+ brow as .+ undergoes some inner turmoil.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Hiltblow Confirmation</name>
								<script>if snd.target == matches[2] then
  snd.target_got("misery")
  snd.target_got("clumsiness")
end


-- I had to add this to track hiltblow properly.
-- Hiltblow can be dodged and rebounded.</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s stomach gurgles miserably under the blow.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Ridicule - Magnanimity Validation</name>
								<script>if snd.target == matches[2] then
  snd.target_got("magnanimity")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) glances .+ up and down, deciding .+ are beneath .+\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Ironcollar Cure</name>
								<script>if matches[2] == snd.target then
snd.target_cured("ironcollar")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Smoke begins to smoulder from an iron collar upon (\w+) as it crumbles.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Self-Loathing Prone</name>
								<script>if snd.target == matches[2] then
snd.target_got("fallen")
  if snd.target_induced == "fear" then
    snd.target_got("worrywart")
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Overwhelmed by .+ thoughts, (\w+) dramatically flings .+ to the ground.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Coldread</name>
								<script>if matches[2] == snd.target then
deleteLine()
--snd.message("Checking "..matches[2].."'s emotional state:", "warnings")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>27</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You perform a cold read of (\w+):$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Dominant Emotional State</name>
									<script>--The strength of his sadness is at 0%.
--The strength of his happiness is at 0%.
--The strength of his surprise is at 0%.
--The strength of his anger is at 0%.
--The strength of his stress is at 0%.
--The strength of his fear is at 0%.
--The strength of his disgust is at 0%.


local emotional_info = {

neutral = "neutral",
sad = "sadness", 
happy = "happiness",
surprised = "surprise",
angry = "anger",
stressed = "stress",
fearful = "fear",
disgusted = "disgust",

}

snd.target_induced = emotional_info[matches[2]]


--The strength of his sadness is at 0%.
--The strength of his happiness is at 0%.
--The strength of his surprise is at 0%.
--The strength of his anger is at 0%.
--The strength of his stress is at 0%.
--The strength of his fear is at 0%.
--The strength of his disgust is at 0%.
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^.+ emotional state is predominantly (neutral|sad|happy|surprised|angry|stressed|fearful|disgusted).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Emotional Strength %</name>
									<script>--The strength of his sadness is at 0%.
--The strength of his happiness is at 0%.
--The strength of his surprise is at 0%.
--The strength of his anger is at 0%.
--The strength of his stress is at 0%.
--The strength of his fear is at 0%.
--The strength of his disgust is at 0%.



local emotional = matches[2]
local damage = tonumber(matches[3])
local properemotional = string.title(emotional)

snd.emotional_dmg[emotional] = damage
deleteLine()
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The strength of .+ (sadness|happiness|surprise|anger|stress|fear|disgust) is at (\d+)%.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>coldread end</name>
									<script>setTriggerStayOpen("Coldread", 0)</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>return isPrompt()</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>4</integer>
									</regexCodePropertyList>
								</Trigger>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>rhythm gone</name>
								<script>snd.rhythm = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You ease your grip upon your falchion.</string>
									<string>You ease your grip upon your rapier.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Song found deafness</name>
								<script>if matches[2] == snd.target then
  snd.target_cured("hearing")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your forceful, demanding song reaches (\w+), but disappointment pricks your soul as it ultimately falls upon deaf ears.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Bladestorm Tracking (1P)</name>
								<script>snd.target_got("bladestorm")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You cannot weave more than one bladestorm.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Thurible Asthma</name>
								<script>if matches[2] == snd.target then
snd.target_got("asthma")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Coughing, the billowing smoke from a golden thurible makes (\w+)'s lungs seize.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Needle Up</name>
								<script>snd.needlewait = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You may throw another needle.</string>
									<string>You fling a thin needle but your aim is off, missing \w+.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Needle Cooldown</name>
								<script>if matches[2] ~= ("dodge" or "miss") then
snd.needlewait = true
else
snd.needle = "none"
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You use Performance Needle \((.*)\) on \w+.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Induce Affliction</name>
								<script>local emotion_affs = {
  sadness = "shyness",
  happiness = "perplexed",
  surprise = "dizziness",
  anger = "hatred",
  stress = "masochism",
  fear = "self_loathing",
  disgust = "besilence",
}

if matches[2] == snd.target then
snd.target_got(emotion_affs[snd.target_induced])
 snd.track_induce(snd.target)
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s mental state is overwhelmed as .+ revels in .+ burgeoning emotions.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Carni\Warden</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Carnifex</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Soul Aff Cures</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Wraith Cured</name>
										<script>if matches[2] == snd.target then
  snd.target_cured("soul_wraith")
  snd.used.shield = false
 -- if matches[1]:find("cower behind") then
  --  snd.target_got("weariness")
  --end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The sliver of soul infecting (\w+) slowly fades, its essence depleted\.$</string>
											<string>^As (\w+) attempts to cower behind (the )?\w+ shield, a coiled sliver of soul strikes, tearing itself apart as it rakes the protection to shreds\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>soul disease</name>
										<script>if matches[2] == snd.target then
 snd.target_cured("soul_disease")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) looks more robust and healthy as (the )?\w+ soul's disease fades away\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>soul poison</name>
										<script>if matches[2] == snd.target then
 snd.target_cured("soul_poison")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The tenebrous souls plaguing (\w+) fade away with a wail\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>soul distort</name>
										<script>if matches[2] == snd.target then
 snd.target_cured("distortion")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Distortion has left (\w+)\.$</string>
											<string>^(\w+) flinches and hesitates as you strike at (the )?\w+, causing enough of a hesitation to allow your attack to slip past (the )?\w+ defenses\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Soul Frailty gone</name>
										<script>if matches[2] == snd.target then
 snd.target_cured("glasslimb")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The eerie wail from (\w+)'s resonating bones dies down as (the )?\w+ manages to shrug off the glass limb effect.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Soul Aff Gives/Secondaries</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Soul Implant Give</name>
										<script>if matches[2] == snd.target then
  for i in pairs(snd.effects) do
   if snd.effects[i] == matches[4] then
    snd.implant = i
   end
  end
end
snd.balance.implant = false
tempTimer(15, [[snd.balance.implant = true]])</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Your soulstone crackles with a cold blue light as you pry open (\w+)('s|') soul, stealthily implanting a dose of (\w+) to lie dormant until (the )?\w+ enters (the )?\w+ bloodstream\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>implant proc</name>
										<script>if snd.toggles.atkecho and snd.toggles.gags and snd.target == matches[2] then 
 deleteLine()
 snd.message("Implant: "..snd.implant)
end
if matches[2] == snd.target then
 snd.target_cured("soul_implant")
 snd.target_got(snd.implant)
 snd.implant = "none"
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) shudders as a dormant venom in (the )?\w+ body releases itself into (the )?\w+ bloodstream\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>glasslimb</name>
										<script>if matches[2] == snd.target then
 snd.last_hit_limb = matches[4]
 snd.last_limb_dmg = 5.00
 snd.took_limb_dmg(matches[4], snd.last_limb_dmg)
 snd.target_cured("glasslimb")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+)('s|') (.+) shatters like glass beneath the blow\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>soul poison CD</name>
										<script>snd.balance.soulpoison = true</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>You may once more use your souls to poison another being.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Secondary Soul Poison</name>
										<script>if matches[2] == snd.target then
 snd.target_got("soul_poison")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A tenebrous mass of souls ripples into sight, draining (\w+)'s life force\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Savagery Limb/Aff Gives/Cures</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Doublebash Hit Confirmation</name>
										<script>-- The actual limb damage values may fluctuate. Using 7.5% as it is average.
snd.last_hit_limb = matches[3]
snd.last_limb_dmg = 7.5
snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
snd.onHit2({"Dodge", "Parry", "Rebounding"})

if snd.using_both_hands == 0 then
  snd.using_both_hands = 1
else
  disableTrigger("Doublebash Hit Confirmation")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^\w+ powerfully swings? .+ down upon (\w+)'s (.+) and pulls? back with ease, readying a second blow\.$</string>
											<string>^Winding up, \w+ brutally smashe?s? .+ into (\w+)'s (.+)\.$</string>
											<string>^\w+ crushe?s? (\w+)'s (.+) beneath a mighty overhead blow from .+\.$</string>
											<string>^\w+ sends? (\w+)'s (.+) reeling with a mighty strike from .+\.$</string>
											<string>^\w+ steps? in, gruesomely smashing up (\w+)'s (.+) with .+\.$</string>
											<string>^\w+ mutilates? (\w+)'s (.+) with a vengeful blow from .+\.$</string>
											<string>^Lifting up .+, \w+ slams? it into (\w+)'s (.+) with numbing force\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Wither Limb Messages</name>
										<script>if snd.target == matches[2] then
  snd.target_got(matches[3].."_crippled")
end
disableTrigger("Wither Limb Messages")</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^With a gesture towards (\w+)'s (.+), \w+ exerts? \w+ power over \w+ captured souls, forcing them to crush it\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>soul info(deathlore)</name>
									<script>if matches[2] == snd.target then
 snd.soul = tonumber(matches[4])
end
if snd.toggles.gags then 
deleteLine()
snd.message(matches[2].." has &lt;red&gt;"..matches[4].."%&lt;white&gt; soul!")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)('s|') soul stands at (\d+)\%\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Warden</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Ancest Aff Cures</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Inhibit Cured</name>
										<script>if matches[2] == snd.target then
  snd.target_cured("inhibited")
  snd.used.shield = false
 -- if matches[1]:find("tries to raise") then
 --   snd.target_got("weariness")
 -- end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The awaiting presence of an ethereal guardian behind (\w+) suddenly vanishes\.$</string>
											<string>^(\w+) tries to raise a shield, but it does not remain whole for long; the ancestral spirit behind .+ drives its ethereal spear through the barrier with a powerful stab, rendering it useless in its entirety before rippling away\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>portent worn off</name>
										<script>if matches[2] == snd.target then
 snd.target_cured("ancestral_portent")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) looks as if an invisible weight has been lifted suddenly off of \w+ shoulders\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>ambush worn off</name>
										<script>if matches[2] == snd.target then
 snd.target_cured("ancestral_ambush")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The glowing mote of energy ceases its orbit around (\w+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>eluded removal</name>
										<script>if matches[2] == snd.target then
 snd.target_cured("eluded")
 snd.used.rebounding = false
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) appears more impregnable as the curse affecting \w+ defences lifts\.$</string>
											<string>^A weakness exploited, your strike at (\w+) sails effortlessly through \w+ defenses, the attack preceded by another sharp surge of cold as the ancestors watch on\.$</string>
											<string>^Another sharp surge of cold rips through (\w+)'s immediate vicinity, the distraction just enough to allow \w+ the opportunity to strike right through \w+ defenses\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>debilitate gone</name>
										<script>if matches[2] == snd.target then
 snd.target_cured("debilitated")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The effulgent energy encircling (\w+)'s limbs vanishes in a murky haze that fades to nothingness\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Ancest Aff Gives/Secondaries</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Ancestor Attune give</name>
										<script>if matches[2] == snd.target then
  for i in pairs(snd.effects) do
   if snd.effects[i] == matches[4] then
    snd.implant = i
   end
  end
end
snd.balance.implant = false
tempTimer(15, [[snd.balance.implant = true]])
disableTrigger("Ancestor Attune give")</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Your eyes twitch shut as you attune yourself to the ancestors, beseeching them for a coordinated strike that plays once through your mind: when you strike (\w+) with (\w+), they will follow with a subsequent attack utilizing (\w+). Though wordless, their readiness is nonetheless felt\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>attune proc</name>
										<script>if matches[2] == snd.target then
 snd.target_cured("ancestor_implant")
 snd.target_got(snd.implant)
 snd.implant = "none"
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) grasps \w+ ribs with a hiss as a translucent, venom-coated blade stabs its way suddenly through them\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>debilitated limb proc</name>
										<script>if matches[2] == snd.target then
 snd.last_hit_limb = matches[3]
 snd.last_limb_dmg = 5.00
 snd.took_limb_dmg(matches[3], snd.last_limb_dmg)
 snd.target_cured("debilitated")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The energy encircling (\w+)'s (.+) lurches suddenly into \w+ skin with the impact, splintering \w+ bones\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>soul poison CD</name>
										<script>snd.balance.soulpoison = true</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>You may once more call forth another ambush.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Secondary Soul Poison</name>
										<script>if matches[2] == snd.target then
 snd.target_got("ancestral_ambush")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) staggers as \w+ is stabbed from behind, a glowing speartip rending its way through flesh to emerge from \w+ torso\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Warding Limb/Aff Gives/Cures</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Maul Hit Confirmation</name>
										<script>-- The actual limb damage values may fluctuate. Using 7.5% as it is average.
snd.last_hit_limb = matches[3]
snd.last_limb_dmg = 7.5
snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
snd.onHit2({"Dodge", "Parry", "Rebounding"})

if snd.using_both_hands == 0 then
  snd.using_both_hands = 1
else
  disableTrigger("Maul Hit Confirmation")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^\w+ pounds? .+ into (\w+)'s (.+) with(?: an)? unforgiving ferocity, thundering after \w+ for a second strike\.$</string>
											<string>^\w+ darts? forward and jabs? .+ towards? (\w+)'s (.+), drawing blood and tearing flesh\.$</string>
											<string>^\w+ quickly strikes? (\w+)'s (.+) with .+, leaving \w+ gasping and bloodied\.$</string>
											<string>^Grabbing hold of (\w+)'s (.+) with .+ and twisting, \w+ crushe?s? bone beneath \w+ grip\.$</string>
											<string>^There is a sickening crunch as \w+ slams a fist (?:atop|into) (\w+)'s (.+) with .+\.$</string>
											<string>^Bone and flesh shatters as \w+ wraps? .+ around (\w+)'s (.+)\.$</string>
											<string>^Clamping a fist around (\w+)'s (.+) with .+, \w+ bruises? and batters? \w+\.$</string>
											<string>^\w+ lunges? .+ at (\w+)'s (.+) in a rapid stab, bones snapping beneath \w+ grip\.$</string>
											<string>^Pulling back \w+ arm, \w+ bashe?s? (\w+)'s (.+) forcefully with .+\.$</string>
											<string>^With a mighty swing of \w+ arm fitted with .+, \w+ smashe?s? into (\w+)'s (.+)\.$</string>
											<string>^A quick strike with .+ at (\w+)'s (.+) leaves them gasping and bloodied\.$</string>
											<string>^Slamming a fist into (\w+)'s (.+) with .+, you hear a sickening crunch\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Spear Limb Messages</name>
										<script>if snd.target == matches[2] then
  snd.target_got(matches[3].."_crippled")
end
disableTrigger("Spear Limb Messages")</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^\w+ propels? a hand towards (\w+)'s (.+), \w+ ancestral mark alight. A grievous wound opens itself suddenly in the appendage in response, as if a spear had been driven clean through it.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Roaring proc</name>
										<script>if snd.target == matches[2] then
  snd.target_got("fallen")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^\w+ releases? a thunderous roar, driving (\w+) to \w+ knees\.$</string>
											<string>^You release a thunderous roar that leaves (\w+) reeling\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>soul info (ancestry)</name>
									<script>if matches[3] == snd.target then
 snd.soul = tonumber(matches[2])
end
if snd.toggles.gags then 
deleteLine()
snd.message(matches[3].." has &lt;red&gt;"..matches[2].."%&lt;white&gt; soul!")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\d+)% of (\w+)'s soul remains as of yet not displaced.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Shared W/C</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Spinslash 2nd half</name>
									<script>snd.onHit2({"Rebounding", "Dodge"})
disableTrigger("Spinslash 2nd half")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Spinning the weapon deftly in \w+ hands, \w+ moves? in for another strike\.$</string>
										<string>^\w+ twists? with the momentum of the attack, bringing \w+ weapon in again for another laceration\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>no crushed chest</name>
									<script>snd.target_cured("crushed_chest")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>Your target must have a crushed chest.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Batter Secondary Messages</name>
									<script>if snd.target == matches[2] then
  if matches[1]:find("limp") then
    snd.target_got("indifference")
  else
    snd.target_got("stuttering")
  end
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) seems to go somewhat limp under a heavy clean blow\.$</string>
										<string>^(\w+)'s jaw twists unsettlingly under one of the strikes\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>secondary gutcheck</name>
									<script>if snd.target == matches[2] then
  snd.target_got("fallen")
  snd.target_got("anorexia")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) suddenly falls to the ground as .+ begins heaving, tilting \w+ head to one side\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Crushed Chest - Asthma secondary</name>
									<script>if matches[2] == snd.target then
 snd.target_got("asthma")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) gasps for air as (the )?\w+ crushed chest inhibits (the )?\w+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Sweep/coil prone</name>
									<script>if snd.target == matches[2] then
  snd.target_got("fallen")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The weapon slams into (\w+)'s legs as it sweeps by, knocking \w+ painfully to the ground\.$</string>
										<string>^(\w+) is suddenly thrust to the ground as the weapon weaves its way between \w+ legs.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Hound/simulacrum Balance used</name>
									<script>disableTrigger("Sunder Parry") -- did I mean to make this? I don't remember
--I think so because of hound bite
snd.balance.hound = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Hound Balance Used\:</string>
										<string>^Simulacrum Balance Used\:</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Hound/Simul balance gain</name>
									<script>snd.balance.hound = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You can order your hounds to act again.</string>
										<string>You can order your simulacrums to act again.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Hound balance not ready</name>
									<script>snd.balance.hound = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You cannot order your hounds again so soon.</string>
										<string>You cannot order your simulacrums again so soon.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>clumsiness for maul/doublebash</name>
									<script>if snd.target == matches[2] then
  if snd.using_both_hands == 0 then
    snd.using_both_hands = 1
  else
    disableTrigger("Maul Hit Confirmation")
    disableTrigger("Doublebash Hit Confirmation")
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ strikes clumsily at (\w+) with .+, completely missing \w+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>cracked ribs just incase</name>
									<script>if snd.target == matches[2] then
  snd.target_got("cracked_ribs")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You hear an audible 'crunch' as (\w+)'s ribs crack under the blow\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>crushed chest just in case</name>
									<script>if snd.target == matches[2] then
  snd.target_got("crushed_chest")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) wheezes as \w+ ribcage visibly collapses inward as it is crushed\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Indorani/Oneiromancer</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Indorani</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Shrivel secondary</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Shrivel any further</name>
										<script>snd.target_got(matches[2].."_crippled")
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You find that you cannot shrivel the ([a-z ]+)any further.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Legs already shriveled</name>
										<script>if matches[2] == snd.target then
		snd.target_got("right_leg_crippled")
		snd.target_got("left_leg_crippled")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You find that both of (\w+) legs are already shriveled.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Limb already shriveled</name>
										<script>if matches[2] == snd.target then
 snd.target_got(matches[3].."_crippled")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You find that (\w+)'s ([a-z ]+)is already shriveled.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Arms shriveled</name>
										<script>if matches[2] == snd.target then
		snd.target_got("right_arm_crippled")
		snd.target_got("left_arm_crippled")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You find that both of (\w+) arms are already shriveled.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Leech</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Aura taken</name>
										<script>if matches[2] == snd.target then
  snd.target_has_aura = false
  snd.need_leech_aura = false
	if not snd.checkAff("leeched_aura") then 
		snd.target_got("leeched_aura")
	end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) seems to droop as the colour drains from (the )?\w+ face.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Aura regained or still on</name>
										<script>if matches[2] == snd.target then
  snd.target_has_aura = true
  snd.need_leech_aura = true
	snd.target_cured("leeched_aura")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) appears to regain a little colour.$</string>
											<string>^The life aura surrounding (\w+) protects (the )?\w+ from harm.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Already leeched</name>
										<script>if matches[2] == snd.target then
  snd.target_has_aura = false
  snd.need_leech_aura = false
	if not snd.checkAff("leeched_aura") then 
		snd.target_got("leeched_aura")
	end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The life aura of (\w+) has already been leeched away.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Adder</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Adder used</name>
										<script>snd.adder_attached = false
snd.adder_ready = false
local aff = snd.venomEffect(matches[3])
if matches[2] == snd.target then
  if not snd.checkAff(aff) then
    snd.target_got(aff)
  end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The Adder tarot on (\w+) suddenly lurches into motion as an adder rises up from underneath it. It strikes (?:the )?\w+ in the neck, ([a-z]+) glistening on its fangs.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Adder activate ready</name>
										<script>if matches[2] == snd.target then
	snd.adder_attached = true
	if matches[1]:find("tingle") then
		snd.adder_ready = true
	end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A tingle flows through you as the Adder on (\w+) readies itself.$</string>
											<string>^You have already placed the Adder upon (\w+).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>No adder at all</name>
										<script>if matches[2] == snd.target then
	snd.adder_attached = false
	snd.adder_ready = false
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^There is no Adder tarot attached to (\w+).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Adder ripped</name>
										<script>if matches[2] == snd.target then
	snd.adder_attached = false
	snd.adder_ready = false
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) rips the Adder tarot painfully from (the )?\w+ flesh.$  </string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Indorani misc</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Death aura</name>
										<script>if matches[2] == snd.target then
  local afflist = {["dizzy"] = "dizziness", ["deranged"] = "dementia", ["ill"] = "vomiting"}
	snd.target_got(afflist[matches[3]])
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) appears (\w+) from your aura of death.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Belch gone</name>
										<script>-- Not sure it's necessary to track this. Keeping incase an Indorani wants it.</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>The noxious cloud dissipates.</string>
											<string>You use Necromancy Inhale on a noxious cloud.</string>
											<string>You expand your lungs as you inhale the noxious cloud around you. As the last of it is drawn into your mouth, you swallow, removing it from the air.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
											<integer>3</integer>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Belch</name>
										<script>-- Not sure it's necessary to track this. Keeping incase an Indorani wants it.</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>A stinking noxious cloud floats here.</string>
											<string>You belch a cloud of stinking gas out of your lungs and into your surroundings.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Sun tarot strip</name>
										<script>if matches[2] == snd.target then
	snd.target_got("hearing")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The Sun tarot has stripped (\w+)'s deafness.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>1p tarot affs</name>
										<script>local aff = matches[3]:lower()
if matches[4] == snd.target then
  if not snd.checkAff(aff) then
    snd.target_got(aff)
  end
end
--Have concerns about some of the affs being read correctly, but we'll see</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The [a-z]+ tarot is eclipsed and passes on ([a-z]+) to (\w+)\.$</string>
											<string>^The [a-z]+ tarot has passed on ([a-z]+) to (\w+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>cold hit from decay</name>
										<script>--assuming this line only happens in 1st person on decay hits against your target
snd.target_got("cold")</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The ice bites deep into .+ flesh and you notice .+ shivering.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Indorani ents</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Chimera ready</name>
										<script>snd.balance.chimera = true</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>Your chimera paces in anticipation, ready to deliver another attack.</string>
											<string>You may order your chimera to attack once more.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Chimera not ready</name>
										<script>snd.balance.chimera = false</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>You chimera isn't ready to attack just yet.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Soulmaster</name>
										<script>snd.balance.soulmaster = false</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You order the soulmaster entity to manipulate (\w+).$</string>
											<string>A soulmaster tells you, "I am unable to possess that soul right now, Master."</string>
											<string>^Your soulmaster is wrestling for control of (\w+)'s soul and cannot command or hallucinate at (the )?\w+ right now.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>3</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Bubonis afflict enemy</name>
										<script>if matches[2] == snd.target then
  snd.target_got(matches[3])
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Your bubonis has afflicted (\w+) with \w+\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Soulmaster ready</name>
										<script>snd.balance.soulmaster = true</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You sense that the soulmaster entity is in control of (\w+)'s being.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Insomnia strip enemy</name>
										<script></script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The chimera's dragon head exhales a cloud of gas at (\w+).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Slime ready to attack</name>
										<script>snd.balance.envelop = true</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>You may order your slime to envelop once more.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Slime Envelop finished</name>
										<script>snd.balance.envelop = false</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The slime upon (\w+) shrinks into little more then an irritation.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Ranged doppleganger</name>
										<script></script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Your doppleganger has arrived at \'.*\'.$</string>
											<string>^\(Tells\): (the )?\w+ tells you, "I am already there, Master."$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>3P Stupidity</name>
										<script>if matches[2] == snd.target then
  if not snd.checkAff("stupidity") then 
		snd.target_got("stupidity")
	end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A glazed look descends over the features of (\w+).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Oneiromancer</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Misfortune secondary</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Misfortune - already broken</name>
										<script>if matches[2] == "throat" then
  snd.target_got("crippled_throat")
else
 snd.target_got(matches[2].."_crippled")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Fate would not allow more misfortune to befall the ([a-z ]+) any further\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Misfortune - Already broken both legs</name>
										<script>if matches[2] == snd.target then
		snd.target_got("right_leg_crippled")
		snd.target_got("left_leg_crippled")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Fate would not allow more misfortune to befall the legs of (\w+).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Misfortune - Already broken both arms</name>
										<script>if matches[2] == snd.target then
		snd.target_got("right_arm_crippled")
		snd.target_got("left_arm_crippled")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Fate would not allow more misfortune to befall the arms of (\w+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Unspool</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Unspool - finished</name>
										<script>if matches[2] == snd.target then
  snd.target_has_aura = false
  snd.need_leech_aura = false
	if not snd.checkAff("leeched_aura") then 
		snd.target_got("leeched_aura")
	end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) takes on a fuzzy outline, less substantial than before.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Unspool - need</name>
										<script>if matches[2] == snd.target then
  snd.target_has_aura = true
  snd.need_leech_aura = true
	snd.target_cured("leeched_aura")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) appears to regain a little colour.$</string>
											<string>^Too substantial, still... you'll need to unspool (\w+) to make a disjunction effective.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Unspool - Used</name>
										<script>if matches[2] == snd.target then
  snd.target_has_aura = false
  snd.need_leech_aura = false
	if not snd.checkAff("leeched_aura") then 
		snd.target_got("leeched_aura")
	end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Strands of inky black already swirl loosely around the form of (\w+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Diamond</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Diamond proc</name>
										<script>snd.adder_attached = false
snd.adder_ready = false

local aff = snd.venomEffect(matches[3])
 
if matches[2] == snd.target then
	if not snd.checkAff(aff) then
		snd.target_got(aff)
	end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A contrasting mixture of violent red and poisonous green energy shatter the diamond holding them back, their combined might swiftly afflicting (\w+) with a dose of (\w+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Diamond activate ready</name>
										<script>if matches[2] == snd.target then
	snd.adder_attached = true
	if matches[1]:find("shimmer") then
		snd.adder_ready = true
	end
end

</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You notice the diamond embedded upon (\w+) shimmer with a deep, violent red outline that begs to be shattered.$</string>
											<string>^You have already embedded a diamond upon (\w+).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>No diamond at all</name>
										<script>if matches[2] == snd.target then
	snd.adder_attached = false
	snd.adder_ready = false
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^There is no diamond embedded against (\w+)'s forehead\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Diamond ripped</name>
										<script>if matches[2] == snd.target then
	snd.adder_attached = false
	snd.adder_ready = false
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) tears the noxious Diamond shape from \w+ body, wincing in pain\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Oneiromancer ents</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Quetzal - ready</name>
										<script>snd.balance.chimera = true</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>A low growl from your quetzal informs you that it is ready to attack once more.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Quetzal -  not ready</name>
										<script>snd.balance.chimera = false</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>Your quetzal is still recovering; it is not ready to attack again yet.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Puppeteer - Not ready</name>
										<script>snd.balance.soulmaster = false</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>You issue the order but \w+ just ignores  (\w+).$</string>
											<string>You order your puppeteer to weave a hallucination through \w+'s mind.</string>
											<string>You direct the puppeteer to set its strings into  (\w+).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Mocker - Proc</name>
										<script>if matches[2] == snd.target then
  snd.target_got(matches[3])
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>Your mocker has afflicted (\w+) with \w+\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Quetzal - Ready</name>
										<script>snd.balance.soulmaster = true</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You perceive that the puppetmaster is now directing \w+'s instincts\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Quetzal - Strip insomnia</name>
										<script></script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Your quetzal dizzies (\w+) with a mirage-like shimmer of color and heat\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Blob - Envelop ready</name>
										<script>snd.balance.envelop = true</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>Your quicksilver blob has reformed and awaits a new target to envelop.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Blob - Envelop finished</name>
										<script>snd.balance.envelop = false</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The quicksilver blob upon \w+ shrinks back, little more than a starry spot upon \w+ flesh\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Ranged doppleganger</name>
										<script></script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Your doppleganger has arrived at \'.*\'.$</string>
											<string>^\(Tells\): (the )?\w+ tells you, "I am already there, Master."$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Lamia - Proc</name>
										<script>if matches[2] == snd.target then
	snd.target_got("stupidity")
end

</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A lamia hangs upon (\w+) and murmurs \w+ admirations, rendering \w+ slack-jawed\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Moth - Proc</name>
										<script>if matches[2] == snd.target then
 snd.target_got(matches[3].."_crippled")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Flying in chaotic circles, the moth finds a gap in (\w+)'s defence, darting in with unstoppable force to break \w+ (.+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Oneiromancer misc</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Intoxication - Proc</name>
										<script>if matches[2] == snd.target then
  local afflist = {["dizzy"] = "dizziness", ["deranged"] = "dementia", ["ill"] = "vomiting"}
	snd.target_got(afflist[matches[3]])
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) succumbs to your aura of intoxication, appearing (\w+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Fumes Down</name>
										<script>-- Not sure it's necessary to track this. Keeping incase an Indorani wants it.</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>The noxious cloud dissipates.</string>
											<string>You use Oneiromancy Breeze on a noxious cloud.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Fumes Up</name>
										<script>-- Not sure it's necessary to track this. Keeping incase an Indorani wants it.</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>A stinking noxious cloud floats here.</string>
											<string>You use Oneiromancy Fumes.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>1p sphere(sun) affs</name>
										<script>local aff = matches[3]:lower()
if matches[2] == snd.target then
	if not snd.checkAff(aff) then
		snd.target_got(aff)
	end
end
--Have concerns about some of the affs being read correctly, but we'll see</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The rainbow sphere, cloaked in clouds, curses (\w+) with ([a-z]+)\.$</string>
											<string>^The rainbow sphere curses (\w+) with ([a-z]+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>1p hypercube(moon) affs</name>
										<script>local aff = matches[2]:lower()
if matches[3] == snd.target then
	if not snd.checkAff(aff) then
		snd.target_got(aff)
	end
end
--Have concerns about some of the affs being read correctly, but we'll see</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The hypercube's stygian hues incite ([a-z]+) in (\w+)\.$</string>
											<string>^Cloaked in silvery clouds, the hypercube's impossible geometries incite ([a-z]+) in (\w+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>cold hit from starlight + glaciation</name>
										<script>--assuming this line only happens in 1st person on starlight hits against your target
if matches[2] == snd.target then
  snd.target_got("cold")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You open an astral channel at your extended fingertips, willing a surge of wintry moonlight to freeze (\w+)\.$</string>
											<string>^\w+ extends \w+ hands, compelling a surge of wintry moonlight to freeze (\w+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Deafness strips</name>
										<script>local aff = "hearing"
if matches[4] == snd.target then
	snd.target_got(aff)
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The rainbow sphere has renewed (\w+)'s sense of hearing\.$</string>
											<string>^Altered by silvery clouds, the sphere's tones sing forth, restoring (\w+)'s hearing\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Chill - Caloric strip</name>
										<script>if snd.target == matches[2] then
  snd.target_got("no_caloric")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Ice forms upon the insulation around (\w+), causing it to crack off\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>cardinal</name>
										<script>if matches[2]:lower() == snd.target:lower() then
  snd.target_got(matches[3])
  if matches[4] ~= nil then snd.target_got(matches[4]) end
  if matches[5] ~= nil then snd.target_got(matches[5]) end
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>An ethereal cry echoes, proclaiming (\w+)'s suffering from ([a-zA-Z _ -]+), ([a-zA-Z_ -]+) and ([a-zA-Z _ -]+)\.</string>
											<string>An ethereal cry echoes, proclaiming (\w+)'s suffering from ([a-zA-Z _ -]+) and ([a-zA-Z _ -]+)\.</string>
											<string>An ethereal cry echoes, proclaiming (\w+)'s suffering from ([a-zA-Z _ -]+).</string>
											<string>An ethereal cry echoes, proclaiming (\w+)'s suffering from ([a-zA-Z _ -]+), ([a-zA-Z_ -]+), and ([a-zA-Z _ -]+)\.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Deform</name>
								<script>if snd.target == matches[2] then
   snd.deform = false
   if snd.toggles.affcalling then
     snd.send("wt [Indorani] "..snd.target.." DEFORMED. DAMAGE NOW.")
   end   
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You use Necromancy Deform on (\w+)\.$</string>
									<string>^You bend your will upon (\w+), twisting (the )?\w+ essence into knots as you attempt to exacerbate (the )?\w+ physical deformities.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Lumi\Earthcaller</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Luminary</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>battle call</name>
									<script>if matches[4]:lower() == "sensitivity" then
  if snd.checkAff("hearing") then
    snd.battle_aff = matches[4]:lower()
  else
    snd.battle_aff = "hearing"
  end
else
  snd.battle_aff = matches[4]:lower()
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\(Web\)\: (\w+) says, \"(?i:Battle) (\w+): (.*)\.\"$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>chasten call</name>
									<script>if matches[3] == snd.target then
  if matches[2] == "[Luminary] " or matches[1]:find("Chasten") then
    snd.chasten_aff = matches[4]:lower()
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\(Web\)\: \w+ says, \"(\[\w+\] )?(?i:Afflicting|Chasten) (\w+): (.*)\.\"$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>chasten</name>
									<script>if multimatches[3][3] == snd.target then
  if multimatches[3][2]=="self loathing" then
    snd.target_got("self_loathing")
  else
   snd.target_got(multimatches[3][2])
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>2</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You direct a dark bolt of energy through .+ towards (\w+)\.$</string>
										<string>1</string>
										<string>^The curse of (\w+|self loathing) is brought down onto (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>5</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>hellsight gain</name>
									<script>if multimatches[1][2] == snd.target then
  snd.target_got(multimatches[2][2])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>1</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You stare intently at (\w+), opening \w+ mind to the unspeakable visions that spew from the bowels of hell\.$</string>
										<string>^\w+ cries out, suddenly afflicted with (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Angel afflictions</name>
									<script>if matches[2] == snd.target then
  snd.target_got(matches[3])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your angel afflicts (\w+) with (.+)\.$</string>
										<string>^Your angel restores (\w+)'s? (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Earthcaller</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>spur call</name>
									<script>if matches[4]:lower() == "sensitivity" then
  if snd.checkAff("hearing") then
    snd.battle_aff = matches[4]:lower()
  else
    snd.battle_aff = "hearing"
  end
else
  snd.battle_aff = matches[4]:lower()
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\(Web\)\: (\w+) says, \"(?i:Spur) (\w+): (.*)\.\"$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>subdue call</name>
									<script>if matches[3] == snd.target then
  if matches[2] == "[Earthcaller] " or matches[1]:find("Subdue") then
    snd.chasten_aff = matches[4]:lower()
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\(Web\)\: \w+ says, \"(\[\w+\] )?(?i:Afflicting|Subdue) (\w+): (.*)\.\"$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>1p subdue</name>
									<script>if multimatches[3][2] == snd.target then
 snd.target_got(multimatches[3][3])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>2</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You raise an? .+ imperiously towards \w+, exerting a subduing force upon \w+ skeletal frame\.$</string>
										<string>1</string>
										<string>^You amplify the damage to (\w+)'s skeleton, splintering bone levying the curse of (.+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>5</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>aftershock/shadowed ticks</name>
									<script>local aff = {
  chars = "disfigurement",
  disorients = "dizziness",
  stiffens = "stiffness",
  ignites = "ablaze",
  weakens = "weariness",
  burns = "ablaze",
}
if snd.target == matches[2] then
  snd.target_got(aff[matches[3]])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your body radiates waves of pressure, superheating (\w+)'s vicinity as it (\w+) \w+\.$</string>
										<string>^(\w+) writhes in pain as your brilliant light burns and (\w+) \w+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Swarm afflicts</name>
									<script>if matches[2] == snd.target then
  snd.target_got(matches[3])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your swarm afflicts (\w+) with (.*).$</string>
										<string>^Your swarm restores (\w+)'s? (hearing)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Reckoning (hellsight mirror)</name>
									<script>if multimatches[1][2] == snd.target then
  snd.target_got(multimatches[2][2])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>1</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Relaxing a fraction of your iron will, you mouth a wordless litany, fixating upon (\w+) as you direct the Dirge to grant \w+ a glimpse of the oblivion that awaits\.$</string>
										<string>^\w+ cries out, suddenly afflicted with (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Crush Confirmation</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Crush part 1</name>
									<script>if matches[2] == snd.target then
  snd.last_limb_dmg = 2.5
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
  snd.onHit2({"Dodge", "Parry"})
  snd.luminary_crush_first_choice = snd.last_hit_limb
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^With careful aim \w+ smashe?s? .+ (?:mace|crozier) into (\w+)'s .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Crush part 2</name>
									<script>if snd.getting_hit == snd.target then
  local amount = 2.5 --buckler/cavalry is 2.5
  if matches[1]:find("tower") or matches[1]:find("kite") then
    amount = 12.5
  elseif matches[1]:find("banded") then
    amount = 10
  end
  snd.last_limb_dmg = amount
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
  snd.onHit2({"Dodge", "Parry"})
  
  --We also need to add the difference to the first attack. Since you don't know what shield they're using until part 2, it's a little wonky.
  if amount &gt; 2.5 and snd.luminary_crush_first_choice then -- already good if it's buckler
    snd.took_limb_dmg(snd.luminary_crush_first_choice, amount-2.5) -- add the amount minus what we've already given
    snd.luminary_crush_first_choice = nil
  end
end
disableTrigger("Crush Confirmation")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ swiftly follows? up by slamming .+ into \w+ .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Infiltrate Up</name>
								<script>if snd.target == matches[2] then
   snd.infiltrate = true
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You use Subjugation Infiltrate on (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Infiltrate Down</name>
								<script>if snd.target == matches[2] then
   snd.infiltrate = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your swarm ceases its attempt at infiltrate.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Shield Crash</name>
								<script>if snd.target == matches[2] then
   snd.target_got("disrupted")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You crash .+ into (\w+)'s head, disrupting .+ mental equilibrium\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Spur</name>
								<script>if matches[3] == snd.target then  
	if matches[2] == "sensitivity" then
  	if snd.checkAff("hearing") then
  		snd.target_got("sensitivity")
  	else
  		snd.target_got("hearing")
  	end
  else
  		snd.target_got(matches[2])
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You use Subjugation Spur \((.+)\) on (\w+)\.$</string>
									<string>^\w+ uses Subjugation Spur \((.+)\) on (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Misc</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Symptoms</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Epilepsy</name>
									<script>if matches[2] == snd.target then
	snd.target_got("epilepsy")
end

</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) begins to jerk and shake violently, foaming at the mouth.$</string>
										<string>^(\w+) begins to shake wildly.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>berserking</name>
									<script>if matches[2] == snd.target then
	snd.target_got("berserking")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) begins to fume at the mouth and turns bright red.$</string>
										<string>^(\w+) grabs .+ arm and begins to chew, drooling all the while.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>loneliness</name>
									<script>if matches[2] == snd.target then
	snd.target_got("loneliness")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) glances nervously around the room.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>vertigo</name>
									<script>if matches[2] == snd.target then
	snd.target_got("vertigo")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) looks around at the ground longingly.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>pacifism</name>
									<script>if matches[2] == snd.target then
	snd.target_got("pacifism")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) smiles, a look of radiant peace spread across (the )?\w+ features.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>deafness</name>
									<script>if matches[2] == snd.target then
	snd.target_got("hearing")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) clutches (the )?\w+ ears, attempting to block out an unheard noise.$</string>
										<string>^The lion head upon your chimera suddenly opens its maw and lets forth a mighty roar at (\w+), stunning (the )?\w+ with its power.$</string>
										<string>^The lion head upon your chimera lets forth a powerful roar at (\w+), but (the )?\w+ appears unfazed by the attack.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>paresis</name>
									<script>if matches[2] == snd.target then
	snd.target_got("paresis")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) suddenly stiffens as a ghast brushes (the )?\w+ with a finger.$</string>
										<string>^(\w+) stiffens suddenly, (the )?\w+ features frozen in a visage of agony.$</string>
										<string>^An undead .* wildly grabs (\w+)'s wrist within (the )?\w+ gnarled fingers.$</string>
										<string>^(\w+) fights (the )?\w+ seizing muscles with reckless abandon.$</string>
										<string>^(\w+)'s? limbs go limp under (the )?\w+ allergies, leaving (the )?\w+ unable to move\.$</string>
										<string>^Lost in the flow of battle, (\w+) staves off their seizing muscles for the moment\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>ablazeit</name>
									<script>if matches[2] == snd.target then
	snd.target_got("ablaze")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Flames leap around (\w+), charring (the )?\w+ flesh.$</string>
										<string>^Flames spew from a firelord, engulfing (\w+) and consumes (the )?\w+ flesh.$</string>
										<string>^Flames spew in from the .*, engulfing (\w+) and consuming (the )?\w+ flesh.$</string>
										<string>^Flames spew from a firelord, engulfing (\w+) and consuming (the )?\w+ flesh.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>clumsiness</name>
									<script>if matches[2] == snd.target then 
	snd.target_got("clumsiness")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) strikes clumsily at (the )?\w+ with .*, completely missing.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Impatience</name>
									<script>if matches[2] == snd.target then
	snd.target_got("impatience")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) shuffles (the )?\w+ feet in boredom.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>webbed</name>
									<script>if matches[2] == snd.target then
 snd.target_got("writhe_web")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Sticky strands of webbing spray out from .* to cover (\w+)\.$</string>
										<string>^Deftly spinning a web of silk, .+ traps (\w+) within it\.$</string>
										<string>^Sticky strands of webbing spray out to cover (\w+) as you touch the web tattoo\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Deadly flames</name>
									<script>if matches[2] == snd.target then
  if snd.checkAff("ablaze") then
    snd.target_got("crispy")
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Deadly flames leap around (\w+), charring (the )?\w+ flesh.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>fireblock proc</name>
									<script>if matches[2] == snd.target then
	snd.target_cured("ablaze")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s shield of flame repels the fiery attack.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Broken Leg Check</name>
									<script>if matches[2] == snd.target then
 snd.target_got("left_leg_crippled")
 snd.target_got("right_leg_crippled")
 snd.target_got("fallen")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s broken legs cause (the )?\w+ to fall to the ground in a heap.$</string>
										<string>^Your hear two loud snaps and see (\w+) fall to the ground.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Vomiting extra line</name>
									<script>if matches[2] == snd.target then
 snd.target_got("vomiting")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) doubles over, vomiting violently.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Zealot indifference</name>
									<script>if matches[2] == snd.target then
    snd.target_got("indifference")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s eyelids droop as .+ expression turns lax.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>aegis ropes</name>
									<script>if matches[2] == snd.target then
  snd.target_got("writhe_ropes")
end

</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Binding arcane power slithers around (\w+)'s body, ensnaring .+ like ropes or vines\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Spinalrip paresis</name>
									<script>if snd.target == matches[2] then
  snd.target_got("paralysis")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Waves of agony pass through (\w+), who seems to freeze in place\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Chill/Freezing</name>
									<script>if matches[2] == snd.target then
  snd.target_got("cold")
  if snd.toggles.atkecho and snd.toggles.gags then
   deleteLine()
   snd.message("Chilled: "..matches[2]..".")
  end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Frost appears on (\w+)'s flesh as an inky shadeling reaches out to touch (the )?\w+.$</string>
										<string>^You send the cold of the grave to freeze (\w+).$</string>
										<string>^(\w+) shivers slightly as the fist strikes (the )?\w+.$</string>
										<string>^You reach out and grab (\w+)'s arm, chilling (the )?\w+ to the bone.$</string>
										<string>^(\w+) suddenly shudders as (the )?\w+ is struck by a sudden chill.$</string>
										<string>^Frost forms upon .+ and spreads to (\w+)\.$</string>
										<string>opens its maw wide before breathing forth a stream of freezing air towards (\w+)\.$</string>
										<string>^Specks of frost form on (\w+) as \w+ shivers with fear\.$</string>
										<string>^Terror overcomes (\w+) as the frost forms over \w+ completely\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Illusion Stop</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#008000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>** Illusion **</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Illusion color trigger</name>
									<script>if snd.illusion_found == true then
  snd.illusion_found = false
else 
  snd.illusion_found = true
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#008000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>FG6BG2</string>
										<string>return snd.afflictions.aff_flash_blindness.state~="healed"</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>6</integer>
										<integer>4</integer>
									</regexCodePropertyList>
								</Trigger>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Mind batter</name>
								<script>if multimatches[1][2] == snd.target then
  for aff in string.gmatch(multimatches[2][2]:lower(), '(%a+)') do
    if aff ~= "and" then
      snd.target_got(aff)
    end
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>1</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You thrust out and batter (\w+)('s|') mind, making (the )?\w+ reel under your might\.$</string>
									<string>^The telepathic blow struck with (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>vinelash</name>
								<script>if matches[3] == snd.target and matches[2] ~= "loki" then
 for i in pairs(snd.effects) do
  if snd.effects[i] == matches[2] then
   snd.target_got(i)
  end
 end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ uses? Vinelash Venom \((\w+)\) on (\w+)\.$</string>
									<string>^\w+ uses? Bioessence Virulent \((\w+)\) on (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>paralysis</name>
								<script>if matches[2] == snd.target then
 snd.target_cured("paresis")
 snd.target_got("paralysis")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) suddenly seizes up, (the )?\w+ entire body locked by paralysis\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>angel battle 1p</name>
								<script>if matches[3] == snd.target then  
	if matches[2] == "sensitivity" then
  	if snd.checkAff("hearing") then
  		snd.target_got("sensitivity")
  	else
  		snd.target_got("hearing")
  	end
  else
  		snd.target_got(matches[2])
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You use Spirituality Battle \((.+)\) on (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Affliction Howl Track (There is no 3p)</name>
								<script>local howl_conversion =
  {
    ["piercing"] = "hearing",
    ["paralyzing"] = "paresis",
    ["baleful"] = "impairment",
    ["rousing"] = "recklessness",
    ["distasteful"] = "anorexia",
    ["forceful"] = "fallen",
    ["mind-numbing"] = "stupidity",
    ["stomach-turning"] = "vomiting",
    ["claustrophobic"] = "claustrophobia",
    ["muddling"] = "peace",
    ["hypnotic"] = "hypersomnia",
    ["deranged"] = "hallucinations",
    ["lethargic"] = "lethargy",
    ["ringing"] = "ringing_ears",
    ["blurring"] = "blurry_vision",
    ["debilitating"] = "weariness",
    ["berserking"] = "berserking",
    ["angry"] = "hatred",
    ["disturbing"] = "disrupted",
    ["befuddling"] = "confusion",
    ["deep"] = "plodding",
    ["dumbing"] = "idiocy",
  }
if matches[4]:find(snd.target) and howl_conversion[matches[2]] ~= nil then
  snd.target_got(howl_conversion[matches[2]])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your (.+) (howl|shriek|roar|squeal|caw) pours from your throat, affecting ([aA-zZ, ]+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Bay Tracking (1P &amp; 3P)</name>
								<script>if multimatches[2][2] == "wailing" then return end
if multimatches[2][2] == "failure" then return end
local howl_conversion =
  {
    ["piercing"] = "hearing",
    ["paralyzing"] = "paresis",
    ["baleful"] = "impairment",
    ["rousing"] = "recklessness",
    ["distasteful"] = "anorexia",
    ["forceful"] = "fallen",
    ["mind-numbing"] = "stupidity",
    ["stomach-turning"] = "vomiting",
    ["claustrophobic"] = "claustrophobia",
    ["muddling"] = "peace",
    ["hypnotic"] = "hypersomnia",
    ["deranged"] = "hallucinations",
    ["lethargic"] = "lethargy",
    ["ringing"] = "ringing_ears",
    ["blurring"] = "blurry_vision",
    ["debilitating"] = "weariness",
    ["berserking"] = "berserking",
    ["angry"] = "hatred",
    ["disturbing"] = "disrupted",
    ["befuddling"] = "confusion",
    ["deep"] = "plodding",
    ["dumbing"] = "idiocy",
  }

if multimatches[2][3] == snd.target and howl_conversion[multimatches[2][2]] ~= nil then
  snd.target_got(howl_conversion[multimatches[2][2]])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#ff0000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>FG3BG2</string>
									<string>^\w+ \w+ Vocalizing Baying \((.+)\) on (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>6</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Monk</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Telepathy</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Paralysis</name>
									<script>if snd.target == matches[2] then
  snd.target_got("paresis")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You reach out with your mind and paralyse (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Confusion</name>
									<script>if snd.target == matches[2] then
  snd.target_got("confusion")
end

</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You direct a powerful pulse of telepathic energy into (\w+), throwing \w+ mind into chaos and confusion\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Recklessness</name>
									<script>if snd.target == matches[2] then
  snd.target_got("recklessness")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You fill (\w+)'s mind with delusions of grandeur\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Epilepsy</name>
									<script>if snd.target == matches[2] then
  snd.target_got("epilepsy")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You caress the nerves of (\w+) slowly into a state of epilepsy\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Pacifism</name>
									<script>if snd.target == matches[2] then
  snd.target_got("pacifism")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You fill the mind of (\w+) with a strong calm and inner peace\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Anorexia</name>
									<script>if snd.target == matches[2] then
  snd.target_got("anorexia")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You cloud (\w+)'s mind and inhibit \w+ desire to consume food\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Deadening</name>
									<script>if snd.target == matches[2] then
  snd.target_got("deadening")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You reach out with your mind to put a pall over (\w+)'s\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Stupidity</name>
									<script>if snd.target == matches[2] then
  snd.target_got("stupidity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You cast a net of stupidity over (\w+)'s mind\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>successful mindlock</name>
									<script>snd.mindlocked = true

if matches[2] == snd.target then	
	if snd.toggles.calling then
		snd.send("wt " ..snd.target.. " has been locked.")
	end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your telepathic efforts are successful, and the mind of (\w+) is locked with your own.$</string>
										<string>You smile in satisfaction as you continue to manipulate the will of (\w+).</string>
										<string>^Your control is starting to slip, and you are quite certain that (\w+) is aware of anintrusive presence in \w+ mind.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Mindlocking</name>
									<script>if matches[2] == snd.target then	
	if snd.toggles.calling then
		snd.send("wt I'm Attempting a MindLock on " ..snd.target)
	end
  snd.locking = true
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You focus your mind, and begin to concentrate on forming a mind lock with (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>lost mindlock</name>
									<script>snd.mindlocked = false
snd.mindclamped = false
snd.locking = false

if snd.toggles.calling then
	snd.send("wt Lock on target lost.")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>The mental cord snaps(.+)</string>
										<string>You require a mindlock to perform that ability.</string>
										<string>You dissolve the mindlock, severing all telepathic connections between you and \w+.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>3</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Enemy Clamped</name>
									<script>snd.mindclamped = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Telepathy Clamp on (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Blackout cured</name>
									<script>if snd.target == matches[2] then
	snd.target_cured("blackout")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>(\w+) blinks rapidly, rubbing (the )?\w+ eyes.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>mind blank</name>
									<script>if snd.target == matches[2] then
	snd.target_got("turmoil")
  tempTimer(60, [[snd.target_cured("turmoil")]])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Telepathy Blank on (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Mind Balance gained</name>
									<script>snd.balance.mindcommand = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You can command the minds of others once more.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Mind lock redundancy</name>
									<script>snd.mindlocked = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You are already maintaining a mindlock.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Used Mind Cleanse</name>
									<script>snd.balance.mindcleanse = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You survey your own mind, skillfully cleansing it of mental illness.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Mind Cleanse Balance True</name>
									<script>snd.balance.mindcleanse = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You can once again cleanse a mind.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Mind Push</name>
									<script>snd.balance.mindpush = false
tempTimer(15, [[snd.balance.mindpush = true]])</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You muster your will and pass one of your afflictions into (\w+).</string>
										<string>You are unable to push an affliction to (\w+).</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Blackout balance return</name>
									<script>snd.balance.blackout = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>Your mental power returns to you, you can use blackout once more.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Blackout</name>
									<script>snd.balance.blackout = false
if snd.target == matches[2] then
	snd.target_got("blackout")
	snd.send("wt " ..snd.target.." has: blackout")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Telepathy Blackout on (\w+).</string>
										<string>^You summon up your will and throw a devastating shaft of telepathic energy into (\w+), causing (the )?\w+ to experience a total blackout.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Mind command</name>
									<script>snd.balance.mindcommand = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You force your command into the unwilling mind of your victim.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Monk Hit Tracking</name>
								<script>-- Only adding limb damage if we see the hit connect message.
if snd.target == snd.getting_hit then
  snd.last_hit_limb = matches[2]
  if snd.hitting == "You" and snd.stance == "cobra" or snd.stance == "tiger" then
    snd.last_limb_dmg = snd.last_limb_dmg * 1.2
  end
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
  
  if #snd.maybe_affs &gt;= 1 then
  	 local aff = snd.maybe_affs[1]
     if aff ~= "" then
      snd.target_got(aff)
      table.remove(snd.maybe_affs, 1)
  		table.insert(snd.last_affs, aff)
     end
  end  
  
end

disableTrigger("Monk Hit Tracking")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ connects? to the (.+)\!$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Cometkick Collapsed Lung</name>
								<script>if snd.target == matches[2] then
  snd.target_got("weak_grip")
  snd.target_got("collapsed_lung")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) winces as \w+ shudders involuntarily from the impact\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Kai cripple limb breaks</name>
								<script>if matches[2] == snd.target then
 snd.target_got(matches[4].."_crippled")
end
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)('s|') (.+) breaks in half.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Throatstrike confirmation hit</name>
								<script>if snd.target == matches[2] then
  snd.target_got("crippled_throat")
end
disableTrigger("Throatstrike confirmation hit")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The blow rips into (\w+)'s neck, forcibly dislodging \w+ larynx.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Turmoil confirmation hit</name>
								<script>if snd.target == snd.getting_hit then
  snd.target_got("turmoil")
end
disableTrigger("Turmoil confirmation hit")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The blow strikes an artery and .+ slumps slightly\.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Turmoil gone</name>
								<script>if snd.target == matches[2] then
  snd.target_cured("turmoil")
end
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) seems a little more focused and capable\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Arm block proc</name>
								<script>if snd.target == matches[2] then
  snd.last_limb_dmg = 8
  snd.last_hit_limb = matches[3]
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You counter with a fast strike to (\w+)'s (.+) using a fist\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Leg block proc</name>
								<script>if snd.target == matches[2] then
  snd.last_limb_dmg = 8
  snd.last_hit_limb = matches[3]
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You quickly return a blow to (\w+)'s (.+) with a low kick\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Target numbness gone</name>
								<script>if matches[2] == snd.target then
	snd.target_numbed = false
	--snd.send("wt "..snd.target.."'s numbness ended!")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) cries out in agony as (the )?\w+ body feels (the )?\w+ wounds once more.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Target Used Numbness</name>
								<script>if matches[2] == snd.target then
	snd.target_numbed = true
	--snd.send("wt "..snd.target.." used Numbness!")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) grits (the )?\w+ teeth as new-willed determination flashes through (the )?\w+ eyes.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Wrench confirmation hit</name>
								<script>if matches[2] == snd.target then
  if matches[1]:find("calmly wrench") then
    if snd.checkAff(snd.affNameCheck(matches[3].."_crippled")) then
      snd.last_limb_dmg = 7
    else
      snd.last_limb_dmg = 14
    end
    snd.last_hit_limb = matches[3]
    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
    enableTrigger("Sunder Parry")
  else
    snd.target_got("whiplash")
    snd.target_got("smashed_throat")
    snd.target_got("crippled_throat")
  end
 end
 
disableTrigger("Wrench confirmation hit")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ kneels? down over (\w+), gathers? \w+ strength, and calmly wrenche?s? \w+ (.+) from its socket\.$</string>
									<string>^\w+ quickly steps? over (\w+)'s crippled body and seizes? \w+ head between \w+ hands\. With a forceful wrench \w+ twists? \w+ neck until you hear it crack.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>New trigger</name>
								<script>if matches[2] == snd.target then
  snd.target_cured("fallen")
  snd.theytumbling = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) backs away and out of \w+(?:'s)? reach\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sciomancer/Runecarver</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sciomancer</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Gravity</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Gravity - Gain 1 stack</name>
										<script>if matches[2] == snd.target and snd.checkAff("imbued") then
	if snd.gravity &lt;5 then
		snd.gravity = snd.gravity+1
    snd.message("&lt;red&gt;"..snd.target.."&lt;white&gt; has &lt;red&gt;"..snd.gravity.." &lt;white&gt;stacks of gravity.")
	end
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The imbued curse hums as (\w+) grows heavier, personal gravity increasing in response to the assaulting shadow.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Gravity - lose 1 stack</name>
										<script>if matches[2] == snd.target then
	if snd.gravity &gt; 0 then
		snd.gravity = snd.gravity-1
	else	
		snd.gravity = 0
	end
  snd.message("&lt;red&gt;"..snd.target.."&lt;white&gt; has &lt;red&gt;"..snd.gravity.." &lt;white&gt;stacks of gravity.")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The air shifts around (\w+), a little delayed as if (the )?\w+ was lighter.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Singularity Gravity</name>
										<script>if matches[2] == snd.target then
  if snd.gravity &gt;= 0 then
    snd.gravity = snd.gravity + 1
  end
  snd.message("&lt;red&gt;" .. snd.target .. "&lt;white&gt; has &lt;red&gt;" .. snd.gravity .. " &lt;white&gt;stacks of gravity.")
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Your singularity increases the gravity of (.*).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Validation or extra checks</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Random paresis</name>
										<script>if matches[2] == snd.target then
 snd.target_got("paresis")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Focus disrupted, (\w+) staggers, body tensing as muscles numb with paresis.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Nycto from gloom or shadeling</name>
										<script>if matches[2] == snd.target then
  snd.target_got("nyctophobia")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) airs a shuddering whimper as the pressing darkness afflicts .+ with nyctophobia.</string>
											<string>^An inky shadeling stuns (\w+) and afflcits nyctophobia.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Falter - Exhaustion just in case</name>
										<script>if matches[2] == snd.target then
 snd.target_got("exhausted")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+)'s breath wavers and fluctates as (\w+) staggers on (\w+) feet, weariness giving way to exhaustion against the dark.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Already frozen</name>
										<script>if matches[2] == snd.target then
  snd.target_got("frozen")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) is too frozen to prevent an inky shadeling enveloping \w+.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Nycto Validation on Falter</name>
										<script>if matches[2] == snd.target then
 snd.target_got("nyctophobia")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Flinching and paranoid, (\w+) cries out as the terrors of the dark seize within (\w+) head and heart.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Dementia and Dizziness on Falter</name>
										<script>if matches[2] == snd.target then
 snd.target_got("dementia")
 snd.target_got("dizziness")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+)'s eyes widen, unfocused, senses following a demented path between disjointed islands of thought.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Haemo Validation on Falter</name>
										<script>if matches[2] == snd.target then
 snd.target_got("haemophilia")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Pinpricks of blackened red bead through (\w+)'s pores, leaving trails down his body as (\w+) begins to bleed.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Gloom just incase</name>
									<script>if matches[2] == snd.target then
	snd.target_got("gloom")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s shoulders tense and hunch, head hanging as a despairing gloom weighs on (the )?\w+.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Gloom Cured</name>
									<script>if matches[2] == snd.target then
	snd.target_cured("gloom")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The despairing gloom has lifted from (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Shadeling Stun/Nycto</name>
									<script>if matches[2] == snd.target then
	snd.target_got("nyctophobia")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^An inky shadeling stuns (\w+) and afflcits nyctophobia.$</string>
										<string>^(\w+) airs a shuddering whimper as the pressing darkness afflicts (the )?\w+ with nyctophobia.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Lethargy Shaderot</name>
									<script>if matches[2] == snd.target then
	snd.target_got("lethargy")
	if  snd.checkAff("rot_benign") then
		snd.target_got("rot_spirit")
		snd.target_got("rot_heat")
		snd.target_got("rot_wither")
	end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)\'s movements stagger with a lingering lethargy, strength sapped from (the )?\w+ muscles.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Scourge Relapse</name>
									<script>if matches[2] == snd.target then
  snd.target_got(matches[3])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your scourge afflicts (\w+) with (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Shadeling</name>
									<script>if matches[2] == snd.target then
 if snd.checkAff("frozen") then

 elseif snd.checkAff("shivering") then
  snd.target_got("frozen")
 elseif snd.checkAff("no_caloric") then
  snd.target_got("shivering")
 else
  snd.target_got("no_caloric")
 end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Frost appears on (\w+)'s flesh as an inky shadeling reaches out to touch (the )?\w+.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Voidgaze secondary affs</name>
									<script>if matches[2] == snd.target then
  snd.target_got(matches[3])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Blackened blood beads and slicks down (\w+)'s face as (?:the )?\w+ stares into nothingness, the desolate distortion of the world reflected through the void afflicting (?:the )?\w+ with (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Imbued Cure</name>
									<script>if matches[2] == snd.target then
	snd.target_cured("imbued")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) seems to relax as a humming pressure lifts, imbued curse fading.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Shaderot Worsening</name>
									<script>if matches[2] == snd.target and snd.checkAff("rot_benign") then
  local afflist = {"spirit", "heat", "wither", "body"}
  for _, v in pairs(afflist) do if not snd.checkAff("rot_"..v) then
    snd.target_got("rot_"..v)
    break
    end
  end
end

</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Patches of (\w+)'s body puckers and blackens, brittle as old paper yet slick with some kind of slime as the shaderot worsens.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Singularity Affs</name>
									<script>if matches[2] == snd.target then
	snd.target_got(matches[3])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your singularity corrupts (\w+) with (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Singularity disrupted</name>
									<script>--This has a chance to aff vomiting</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your singularity pulses with disruptive energy, affecting (.*).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Impede Cured</name>
									<script>if matches[2] == snd.target then
	snd.target_cured("impede")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) draws increasingly deeper, easier breaths as the gravity lifts from \w+ body, no longer impeding \w+.$</string>
										<string>You shake off the effect with ease, the gravity around you proving too thin to hold.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Scourge - Faintness</name>
									<script>snd.target_got("faintness")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>Your scourge drains their mana and afflicts faintness.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>shadowsphere gone</name>
									<script>if matches[2] == snd.target then
	snd.target_cured("shadowsphere")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The engulfing shadowsphere unravels around (\w+), fading in corrosive mist and fog as the element dissipates into the environment.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Voidtrap on</name>
									<script>if matches[2] == snd.target then
 snd.target_got("voidtrapped")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) groans and falls to the ground, black gaze staring outwards into nothing as (the )?\w+ freezes in a moment of despair.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Voidtrap gone</name>
									<script>if matches[2] == snd.target then
	snd.target_cured("voidtrapped")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) draws a sudden breath, blackened gaze blinking once as if finding something to focus on, (\w+) body beginning to move.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Shadowbrand cured</name>
									<script>if matches[2] == snd.target then
  snd.target_cured("shadowbrand")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The Shadowbrand fades away from (\w+)'s forehead\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Runecarver</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Runecarving</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Spores - Gain 1 stack from Imbue</name>
										<script>if matches[2] == snd.target and snd.checkAff("inoculated") then
	if snd.gravity &lt;5 then
		snd.gravity = snd.gravity+1
    snd.message("&lt;red&gt;"..snd.target.."&lt;white&gt; has &lt;red&gt;"..snd.gravity.." &lt;white&gt;stacks of spores.")
	end
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Writhing lines disturb the surface of (.*)'s skin as the spore invading .* body gluts itself upon the hex's energies\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Spores - lose 1 stack</name>
										<script>if matches[2] == snd.target then
	if snd.gravity &gt; 0 then
		snd.gravity = snd.gravity-1
	else	
		snd.gravity = 0
	end
  snd.message("&lt;red&gt;"..snd.target.."&lt;white&gt; has &lt;red&gt;"..snd.gravity.." &lt;white&gt;stacks of spores.")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A patch of fungus breaks off from (.*) as an invasive culture dies out\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Sporulation Sporey Spores</name>
										<script>if matches[2] == snd.target then
  if snd.gravity &gt;= 0 and snd.gravity &lt;= 5 then
    snd.gravity = snd.gravity + 1
  end
  snd.message("&lt;red&gt;" .. snd.target .. "&lt;white&gt; has &lt;red&gt;" .. snd.gravity .. " &lt;white&gt;stacks of spores.")
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Your morass propagates a culture upon (.*)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Hyphae Proc</name>
										<script>if matches[2] == snd.target then
	if snd.gravity &lt;5 then
		snd.gravity = snd.gravity+1
    snd.message("&lt;red&gt;"..snd.target.."&lt;white&gt; has &lt;red&gt;"..snd.gravity.." &lt;white&gt;stacks of spores.")
	end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Myriad hyphae dig into (.*)'s body, rooting a spore culture to .*\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Branch</name>
										<script>snd.reflection_charge = snd.reflection_charge-1
snd.def_gain("reflection")</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>You use Runecarving Branch.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>More Branch</name>
										<script>snd.reflection_charge = snd.reflection_charge+1</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>You burgeon with primal power, further possibilities of the reflective Branch rune coming into your grasp.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>No Branch</name>
										<script>snd.reflection_charge = 0</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>The branch rune's reflective power eludes you for now.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Full Branch</name>
										<script>snd.reflection_charge = 3</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>A wild flare of instinct fills your heart, the power of the reflective Branch rune returning to you.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Branch on Someone Else</name>
										<script>snd.reflection_charge = snd.reflection_charge-1</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You use Runecarving Branch on (\w+).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Extra Checks</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Anathemise - Exhaustion</name>
										<script>if matches[2] == snd.target then
 snd.target_got("weariness")
 snd.target_got("exhausted")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(.*)'s breath becomes laboured as exhaustion grips .* limbs, the Wanderer's predation running .* ragged\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Nycto Validation on Anathemise</name>
										<script>if matches[2] == snd.target then
 snd.target_got("nyctophobia")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Agony washes over (.*)'s features as the Shadow finds .* wanting, a ragged gasp escaping .*\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Dementia and Dizziness on Anathemise</name>
										<script>if matches[2] == snd.target then
 snd.target_got("dementia")
 snd.target_got("dizziness")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A terrified whimper escapes (.*) as the Seer declares .* fate inevitable, rendering .* expression vacant.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Haemo Validation on Anathemise</name>
										<script>if matches[2] == snd.target then
 snd.target_got("haemophilia")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The Scavenger recognizes (.*) as anathema, .* prying claws eliciting a gush of arterial crimson from .* open wounds.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Malediction/Sporolation</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Gloom 3p just incase</name>
										<script>if matches[2] == snd.target then
	snd.target_got("gloom")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+)'s shoulders tense and hunch, head hanging as a despairing gloom weighs on (the )?\w+.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Myco Touch</name>
										<script>if matches[2] == snd.target then
  snd.target_got("cold")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(.*) experiences a violent shiver as a shambling myconid lashes out at .* with a fungal protrusion\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Myconid Stun/Nycto</name>
										<script>if matches[2] == snd.target then
	snd.target_got("nyctophobia")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Helplessly frozen, (.*) can do naught but scream as a shambling myconid attaches a fungal protrusion to .* head\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Jinx and Relapse</name>
										<script>if matches[2] == snd.target then
  snd.target_got(matches[3])
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Your jinx afflicts (\w+) with (\w+)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Mystify secondary affs</name>
										<script>if matches[2] == snd.target then
  snd.target_got(matches[6])
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(.*) stops short as something steals (the )?\w+ attention, (the )?\w+ expression momentarily mystified as (the )?\w+ is afflicted with (.*)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Rot Worsening</name>
										<script>if matches[2] == snd.target and snd.checkAff("rot_benign") then
  local afflist = {"spirit", "heat", "wither", "body"}
  for _, v in pairs(afflist) do if not snd.checkAff("rot_"..v) then
    snd.target_got("rot_"..v)
    break
    end
  end
end

</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The rot upon (.*)'s accursed form grows and spreads, the wasting hex worsening as it feasts upon .* lifeforce\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Inoculated Cure</name>
										<script>if matches[2] == snd.target then
	snd.target_cured("inoculated")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The writhing roots beneath (.*)'s skin wither and die\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Mystify cured</name>
										<script>if matches[2] == snd.target then
	snd.target_cured("mystify")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(.*) wrests .* mind free from the Seer's mystifying visions, allowing .* control of .* body once more\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Morass Affs</name>
										<script>if matches[2] == snd.target then
	snd.target_got(matches[3])
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The psychoactive nature of your morass infects (.*) with (.*)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Impede Fail</name>
										<script>if matches[2] == snd.target then
  snd.target_cured("impede")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(.*)'s body fights off .* invasive fungal infection, its magic unable to find nourishment\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Mystify On</name>
										<script>if matches[2] == snd.target then
 snd.target_got("mystified")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(.*) eyes widen as something unseen captivates (the )?\w+ attention, (the )?\w+ mind lost to the mystifying curse plaguing it.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>shadowsphere gone</name>
										<script>if matches[2] == snd.target then
	snd.target_cured("woe_curse")
end
</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>The Shadow's curse of woe eases from (.*), .* despairing expression fading away\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Infect Cured</name>
										<script>if matches[2] == snd.target then
	snd.target_cured("fungal_invasion")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(.*)'s fungal infestation dies out, its magic too weak to maintain its assault\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Initiating Omophagia</name>
										<script>if snd.checkAff("voidtrapped") then
  snd.vt = true
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^You use Sporulation Omophagia\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Lethargy Rot</name>
										<script>if matches[2] == snd.target then
	snd.target_got("lethargy")
	if  snd.checkAff("rot_benign") then
		snd.target_got("rot_spirit")
		snd.target_got("rot_heat")
		snd.target_got("rot_wither")
	end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Vile rot chews through (.*)'s flesh and weakens .* musculature, consigning .* to lethargy\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Omophagia Done</name>
										<script>snd.vt = false</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>As the morass grows to truly terrifying proportions, you thread a single strand of enticing life essence into the now ravenous cloud of flesh eating spores set loose by your vernal prowess. The presence of so little nourishment to split between its myriad colonies sets the seething pool of malnourished fungi into a feeding frenzy.</string>
											<string>You use Sporulation Omophagia Consume.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>3</integer>
											<integer>3</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Darkness Aff</name>
										<script>if matches[2] == snd.target then
  snd.target_got(matches[4])
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(.*) airs a shuddering whimper as the pressing darkness afflicts (the )?\w+ with (.*)\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Already has rot</name>
										<script>if matches[2] == snd.target then
	 	snd.target_got("rot_benign")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) is already affected by the rot.$</string>
											<string>^(\w+) already suffers the effects of a wasting curse.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Preymark cured</name>
										<script>if matches[2] == snd.target then
  snd.target_cured("preymark")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The grim tattoo marking (\w+) as prey fades from .+ hand\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Shared</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Sciomancy Repay / Maldeiction Obeisance</name>
									<script>snd.repay = snd.repay + 1
snd.repay_timers = snd.repay_timers or {}
local index = #snd.repay_timers + 1
local time = 10
if snd.have_aff("laxity") then
  time = time + 2
end
local command = function()
                  if snd.repay &gt; 0 then
                    snd.repay = snd.repay - 1
                  end
                  snd.repay_timers[index] = nil
                  snd.core()
                end
                
snd.repay_timers[index] = {timer = tempTimer(time, command), command = command}</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Sciomancy Repay.</string>
										<string>You use Malediction Obeisance.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Syncopate tracking for repay</name>
									<script>local syncopateTime = 3
for _, aff in pairs(snd.mental_affs) do
  if snd.have_aff(aff) then
    syncopateTime = syncopateTime+1
  end
end
syncopateTime = syncopateTime + snd.hidden_afflictions
if snd.repay_timers then
  for index, timerInfo in pairs(snd.repay_timers) do
    local timeRemaining = remainingTime(timerInfo.timer)
    killTimer(timerInfo.timer)
    timerInfo.timer = tempTimer(timeRemaining+syncopateTime, timerInfo.command)
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ uses Numerology Syncopate on you\.$</string>
										<string>return snd.illusionChecks.abilityGate()</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>4</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sentinel</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>animal affs</name>
								<script>if matches[2] == snd.target then
 snd.target_got(matches[3])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your \w+ has afflicted (\w+) with (\w+)\.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Raloth Enter</name>
								<script>send("ent")
enableTrigger("Raloth_Capture")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A baleful spiked raloth's immense form bounds towards you in a ground-shaking stride.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Raloth_Capture</name>
								<script>snd.my_raloth = matches[2]
disableTrigger("Raloth_Capture")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>raloth\#(\d+)</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Lysirine</name>
								<script>if matches[2] == snd.target then
	snd.last_affs = {}
	snd.target_got("paresis")
	snd.target_got("confusion")
	snd.target_got("hallucinations")
	table.insert(snd.last_affs, "hallucinations")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The superheated resin fumes swarm (\w+)'s senses and (the )?\w+ looks around dazed.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>burnt_skin</name>
								<script>if matches[2] == snd.target then
	snd.target_got("burnt_skin")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The intense flame of the resin leaves (\w+) cringing as (the )?\w+ skin turns black.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Trientia Faintness</name>
								<script>if matches[2] == snd.target then
  if snd.checkAff("dizziness") then
	 snd.target_got("faintness")
	end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The resin upon (\w+) emits visible fumes that make (the )?\w+ recoil and cough.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Raloth Trample</name>
								<script>local raloth_affs = {
["throat"] = "crippled_throat",
["ribs"] = "cracked_ribs",
}

if matches[2] == snd.target then
  if raloth_affs[matches[3]] then
    snd.target_got(raloth_affs[matches[3]])
  else
    snd.target_got(matches[3].."_crippled")
  end
end
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s (.+) (is|are) crushed beneath the raloth's weight.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Raloth attack</name>
								<script>if matches[2] == snd.target and snd.proned() then
  snd.target_got("lightwound")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A .+ lumbers towards (\w+) to sink its deadly horns into .+ flesh\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Secondary blurry vision Proc</name>
								<script>if matches[2] == snd.target then
	snd.target_got("blurry_vision")
	table.insert(snd.last_affs, "blurry_vision")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) clenches (the )?\w+ eyes shut as blood covers (the )?\w+ vision.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Weaken arms or legs</name>
								<script>if snd.target == matches[2] then
  if matches[4] == "leg" then
    snd.target_got("lethargy")
  end
end
disableTrigger("Weaken arms or legs")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ strikes at (\w+)'s (left|right) (leg|arm) with .+, viciously rending \w+ muscles\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Dhuriv Pierce/Sever</name>
								<script>if matches[2] == snd.target then
 snd.target_got(matches[3]:gsub(" ", "_").."_crippled")
end
disableTrigger("Dhuriv Pierce/Sever")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s (left leg|right leg|left arm|right arm) is badly crippled under the dhurive\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Noose trap</name>
								<script>if snd.target == matches[2] then
  snd.target_got("writhe_ropes")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A loop of rope entwines around (\w+), pulling \w+ off \w+ feet\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>weasel rebounding strip</name>
								<script>if snd.target == matches[2] then
  snd.used.rebounding = false
  snd.waiting.queue = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your weasel has stripped (\w+)'s rebounding defence.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Shaman</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Boosted Slam Prone</name>
								<script>if snd.target == matches[2] then
	snd.target_got("fallen")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The frenzied air reaches its peak of intensity and slams into (\w+) with a ferocity that knocks (the )?\w+ to the ground\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Boosted Infest</name>
								<script>if matches[2] == snd.target then
	snd.target_got("infested")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s skin twitches and shifts, then suddenly erupts into a horrifying mass of squirming larvae.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Boosted Spines</name>
								<script>if matches[2] == snd.target then
	snd.target_got("blighted")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The seething mass of vines encircling (\w+) constricts, their barbs sinking deep into (the )?\w+ skin\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Stormtouched on</name>
								<script>if matches[2] == snd.target then
	snd.target_got("stormtouched")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The static around (\w+) sparks with light, seemingly more alive.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Stormtouched off</name>
								<script>if snd.target == matches[2] then
  snd.target_cured("stormtouched")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The static surrounding (\w+) and .+ feather fetish dissipates\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Thorns_off</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) quickly plucks off a cluster of thorns embedded in (the )?\w+ and tosses them aside.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Thorns_on</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A multitude of thorns break off from the vine, remaining hooked in (\w+)'s skin.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Static energy afflict</name>
								<script>if matches[2] == snd.target then
  local aff = matches[3]
  if aff == "lovers effect" then
    snd.target_got("lovers_effect")
  else
    snd.target_got(matches[3])
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your jolts of static energy have disrupted (\w+)'s mental state with ([a-z ]+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Stopped reclaim</name>
								<script>snd.toggles.active = true

-- In case we ever code in turning off on reclaim, but I doubt we will. Probably can get rid of this line.</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^As your concentration on (\w+) faulters, the vines lose their hold and retract from (the )?\w+ body to leave (the )?\w+ very much alive, if bloodied and host to several gaping wounds that spurt blood in time to (the )?\w+ heart beat.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Discern spiritsight venom</name>
								<script>if matches[2] == snd.target then
  if snd.toggles.atkecho and snd.toggles.gags then
    deleteLine()
    snd.message("Gave: " .. matches[3])
  end
  snd.last_affs = {}
  local aff = snd.venomEffect(matches[3])
  snd.target_got(aff)
  table.insert(snd.last_affs, aff)
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You discern that (\w+) has been afflicted by the (\w+) venom.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Stormbolt cloud Down</name>
								<script>if matches[2] == snd.target then
  snd.target_cured("stormbolt_cloud")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The skies around (\w+)\ clear as the thunderstorm dissipates.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Omen Down</name>
								<script>snd.incomingomen = false
snd.message(matches[2].." has been struck by omen!", "dendara")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your omen falls [a-z ]+ on (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>lifebane gone</name>
								<script>if snd.target == matches[2] then
  snd.target_cured("lifebane")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The curse of lifebane lifts from (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Bear spirit</name>
								<script>local raloth_affs = {
["throat"] = "crippled_throat",
["ribs"] = "cracked_ribs",
}

if matches[2] == snd.target then
  if raloth_affs[matches[3]] then
    snd.target_got(raloth_affs[matches[3]])
  else
    snd.target_got(matches[3].."_crippled")
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Bellowing angrily, a bear spirit lumbers forward, latching onto (\w+)'s ([a-z ]+) and mauling it savagely.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Natrualtide defense</name>
								<script>--needs a variable to track what you have stored</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You still your thoughts and begin to gather and weave natural energy, preparing for the feat of ----&gt;stuff goes here</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Divulgence 1p</name>
								<script>if snd.target == matches[2] then
  snd.target_got(matches[3])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The esoteric curse sways your foe - (\w+) is now stricken with (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Syssin</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>bedazzle</name>
								<script>if multimatches[1][2] == snd.target then
 snd.target_got(multimatches[3][2])
 snd.target_got(multimatches[5][2])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>4</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You use Subterfuge Bedazzle on (\w+)\.$</string>
									<string>^You sprinkle some silvery powder over (\w+) and grin widely as (the )?\w+ looks about with a look of slight bafflement on (the )?\w+ face\.$</string>
									<string>^You have afflicted with (.+)\.$</string>
									<string>1</string>
									<string>^You have afflicted with (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>5</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Syssin Hit Confirmation</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>whip attacks</name>
									<script>if matches[2] == snd.target then
  if not (snd.used.rebounding or snd.used.shield) then
    snd.onHit2()
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ sends .+ to flay (\w+), lashing out with the tip\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>dirk dstab</name>
									<script>if snd.getting_hit == snd.target then
  if snd.using_both_hands == 0 then
    snd.using_both_hands = 1
  end
  snd.onHit2({"Rebounding", "Dodge"}, "Syssin")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Lunging in, (?:the )?\w+ sticks (\w+) with .+\.$</string>
										<string>^\w+ drives .+ into (\w+) with a vicious stab\.$</string>
										<string>^\w+ jabs (\w+) with .+\.$</string>
										<string>^\w+ neatly skewers (\w+) with a stab from .+\.$</string>
										<string>^Deftly twirling the weapon in (?:the )?\w+ hand, (?:the )?\w+ jabs (?:the )?\w+ with it once more\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Slit</name>
									<script>if snd.getting_hit == snd.target then
  snd.onHit2({"Dodge"}, "Syssin")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Blood sprays like a gushing fountain as \w+ viciously slits the throat of the helpless (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Templar\Rev</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Templar</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Aff confirm</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>rend</name>
										<script>if snd.target == matches[2] then
	snd.target_got("rend")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) begins to bleed vivid red blood from the lacerations by the blade.$</string>
											<string>^Flesh rended into ribbons, vivid red blood pools from the lacerations caused by the blade\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>cripple body</name>
										<script>if matches[2] == snd.target then
 snd.target_got("crippled_body")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^As .+ strikes, a surge of energy cascades along it, striking (\w+)('s|') body\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>cripple legs</name>
										<script>if matches[2] == snd.target then
 snd.target_got("crippled")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^As .+ strikes, a surge of energy cascades along it, striking (\w+)('s|') legs\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>disrupt body</name>
										<script>if matches[2] == snd.target then
 snd.target_got("physical_disruption")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A flash of energy cascades down .+, disrupting (\w+)('s|') balance\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>disrupt mind</name>
										<script>if matches[2] == snd.target then
 snd.target_got("mental_disruption")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A flash of energy cascades down .+, disrupting (\w+)('s|') equilibrium\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>conviction</name>
										<script>if matches[2] == snd.target then
 snd.target_got("conviction")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^As .+ strikes, sparks of energy fizzle across (\w+)('s|') body as (the )?\w+ defences are reduced\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>vorpal confirmation</name>
										<script>if matches[3] == snd.target then
  snd.onHit2({})
end
disableTrigger("vorpal confirmation")</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Shimmering with vorpal power, (the )?\w+ directs .+ at (\w+), and (the )?\w+ is struck by something unseen\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>lightning hit</name>
										<script>if matches[2] == snd.target then
  snd.target_got("epilepsy")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) glows brightly before a bolt of lightning strikes from nowhere, blasting into \w+ as a deafening roar of thunder splits the air.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>no conviction active</name>
										<script>if matches[2] == snd.target then
  snd.target_cured("conviction")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Without conviction, your \w+ empowerment fails to affect (\w+).$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Flared got</name>
										<script>if snd.target == matches[3] then
  snd.target_got("flared")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^As (.*) strikes (\w+), there is a bright flash of light and (\w+) begins to glow brightly.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Flared cured</name>
										<script>if snd.target == matches[2] then
  snd.target_cured("flared")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^The glow surrounding (\w+) vanishes suddenly.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Revenant</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Aff confirm</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>rend 3p</name>
										<script>if snd.target == matches[2] then
	snd.target_got("rend")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) begins to bleed vivid red blood from the lacerations by the blade.$</string>
											<string>^The claws tear at .+ flesh, blood pouring freely from (\w+)'s grievous incisions.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>0</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>cripple body</name>
										<script>if matches[2] == snd.target then
 snd.target_got("crippled_body")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Colorless light lances forth from .+, warping (\w+) beneath its onslaught\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>cripple legs</name>
										<script>if matches[2] == snd.target then
 snd.target_got("crippled")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Colorless light crackles from .+, mercilessly withering (\w+)'s lower half\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>disrupt body</name>
										<script>if matches[2] == snd.target then
 snd.target_got("physical_disruption")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A burst of colorless light from .+ - eerily silent despite the force of the blaze - disrupts (\w+)'s balance\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>disrupt mind</name>
										<script>if matches[2] == snd.target then
 snd.target_got("mental_disruption")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^A burst of colorless light from .+ - eerily silent despite the force of the blaze - disrupts (\w+)'s equilibrium\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>conviction</name>
										<script>if matches[2] == snd.target then
 snd.target_got("conviction")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>engulfs (\w+) in an oily smear of shadow, causing \w+ to stagger for a moment before \w+ recovers - dark motes remain, dancing across \w+ frame\.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>atdum confirmation</name>
										<script>if matches[3] == snd.target then
  snd.onHit2({})
end
disableTrigger("atdum confirmation")</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^\w+ scribes the silvery mark of atdum upon .+ - a split second later, a shadow of the weapon descends, landing an insubstantial strike upon (\w+)\.</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>aneda hit</name>
										<script>if matches[2] == snd.target then
  snd.target_got("epilepsy")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+) is consumed in a colorless conflagration of pale lightning which streaks from the sky, shadowy dim following in place of an eerily absent thunderclap\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
							</TriggerGroup>
							<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Weapon Hit Confirmation</name>
								<script>-- generic weapon lines that both classes use</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>longsword attacks</name>
									<script>if matches[2] == snd.target and (matches[1]:find("longsword") or matches[1]:find("sabre") or matches[1]:find("blade")) then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Advancing with a quick step, \w+ twists .+ into (\w+)\.$</string>
										<string>^\w+ punctures (\w+) with a swift jab of [a-z ]+\.$</string>
										<string>^\w+ scores (\w+) deeply with a blow from .+\.$</string>
										<string>^\w+ catches (\w+) with an upswing of .+\.$</string>
										<string>^\w+ wounds (\w+) with a wide strike of .+\.$</string>
										<string>^\w+ messily hacks into (\w+) with .+\.$</string>
										<string>^\w+ attacks, ripping a furrow in (\w+) with .+\.$</string>
										<string>^\w+ lays (\w+) open with a descending chop from .+\.$</string>
										<string>^\w+ cruelly stabs .+ deep into (\w+)\.$</string>
										<string>^\w+ slices across (\w+) with the edge of .+\.$</string>
										<string>^\w+ wounds (\w+) with a diagonal swipe of .+\.$</string>
										<string>^\w+ neatly slashes (\w+) with .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>shortsword attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("shortsword") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ carves into (\w+) with .+\.$</string>
										<string>^Thrusting .+ forward, (?:the )?\w+ skewers (\w+)\.$</string>
										<string>^With a sharp pass of .+, (?:the )?\w+ scores (\w+)\.$</string>
										<string>^Bringing about .+, (?:the )?\w+ slashes into (\w+)\.$</string>
										<string>^\w+ hacks open (\w+) with .+\.$</string>
										<string>^Slicing sideways with .+, \w+ cuts into (\w+)\.$</string>
										<string>^Cutting with precision, (?:the )?\w+ strikes (\w+) with .+\.$</string>
										<string>^\w+ lacerates (\w+) with a swing of .+\.$</string>
										<string>^\w+ steps in quickly, wounding (\w+) with .+\.$</string>
										<string>^\w+ swipe .+ across (\w+), gashing (?:the )?\w+\.$</string>
										<string>^Lunging in, (?:the )?\w+ stabs (\w+) with .+\.$</string>
										<string>^\w+ punctures (\w+) with a quick jab of .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>falchion</name>
									<script>if matches[2] == snd.target and matches[1]:find("falchion") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ neatly pierces (\w+) with .+\.$</string>
										<string>^\w+ gashes open (\w+) with a flick of .+\.$</string>
										<string>^With a sharp jab, (?:the )?\w+ buries .+ into (\w+)\.$</string>
										<string>^\w+ quickly strikes (\w+) with .+\.$</string>
										<string>^\w+ drives .+ into (\w+) with a quick thrust\.$</string>
										<string>^\w+ lacerates (\w+) with a swing of .+\.$</string>
										<string>^\w+ nimbly cuts into (\w+) with .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>trident attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("trident") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ slashes into (\w+) wickedly with .+\.$</string>
										<string>^\w+ rams .+ hard into (\w+)\.$</string>
										<string>^\w+ jaggedly rends (\w+) with .+\.$</string>
										<string>^\w+ gouges into (\w+) with .+ prongs\.$</string>
										<string>^\w+ deeply punctures (\w+) with .+\.$</string>
										<string>^\w+ sharply jabs (\w+) with .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>sarissa attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("sarissa") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ quickly strikes (\w+) with .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>broadsword attacks</name>
									<script>if matches[2] == snd.target and (matches[1]:find("bastard") or matches[1]:find("broadsword")) then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ slashes hard into (\w+) with .+\.$</string>
										<string>^\w+ shears across (\w+) with the wide edge of .+\.$</string>
										<string>^\w+ plows into (\w+) with a powerful jab of .+\.$</string>
										<string>^\w+ presses in, ripping (\w+) asunder with .+\.$</string>
										<string>^\w+ gouges (\w+) with a powerful stroke of .+\.$</string>
										<string>^\w+ slams the end of .+ deep into (\w+)\.$</string>
										<string>^\w+ bites into (\w+) with a solid swipe of .+\.$</string>
										<string>^\w+ rends (\w+) mercilessly with a blow from .+\.$</string>
										<string>^\w+ batters (\w+) with a strong upswing of .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>battleaxe attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("battleaxe") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^[A-Za-z\' ]+ moves in a wicked blur as \w+ buries it in (\w+)\.$</string>
										<string>^Whirling .+ around .+ \w+ body, \w+ chops fiercely into (\w+)\.$</string>
										<string>^Charging forward, \w+ hews into (\w+) with .+\.$</string>
										<string>^With a diagonal slash, \w+ cleaves into (\w+) with .+\.$</string>
										<string>^\w+ sweeps .+ before \w+, brutally carving into (\w+)\.$</string>
										<string>^Leaping in, \w+ rips (\w+) open with .+\.$</string>
										<string>^With a violent upward swing, \w+ mangles (\w+) with .+\.$</string>
										<string>^With an arcing blow, \w+ swing at (\w+) with .+\.$</string>
										<string>^\w+ cuts open (\w+) with an overhead slash from .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>rapier attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("rapier") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ drives .+ into (\w+) with a quick thrust\.$</string>
										<string>^\w+ nimbly cuts into (\w+) with .+\.$</string>
										<string>^\w+ neatly pierces (\w+) with .+\.$</string>
										<string>^With a sharp jab, \w+ buries .+ into (\w+)\.$</string>
										<string>^\w+ gashes open (\w+) with a flick of .+\.$</string>
										<string>^\w+ lacerates (\w+) with a swing of .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>flyssa attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("flyssa") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ gashes open (\w+) with a flick of .+\.$</string>
										<string>^\w+ drives .+ into (\w+) with a quick thrust\.$</string>
										<string>^\w+ lacerates (\w+) with a swing of .+\.$</string>
										<string>^\w+ quickly strikes (\w+) with .+\.$</string>
										<string>^\w+ neatly pierces (\w+) with .+\.$</string>
										<string>^With a sharp jab, \w+ buries .+ into (\w+)\.$</string>
										<string>^\w+ nimbly cuts into (\w+) with .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>spear attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("spear") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ throws (?:the )?\w+ weight behind .+, driving it into (\w+)\.$</string>
										<string>^\w+ punctures (\w+) with .+\.$</string>
										<string>^Thrusting forward, (?:the )?\w+ drives .+ into (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>scimitar attacks</name>
									<script>if matches[2] == snd.target and (matches[1]:find("scimitar") or matches[1]:find("shotel") or matches[1]:find("sabre")) then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ chops harshly into (\w+) with .+\.$</string>
										<string>^\w+ lunges in, rending (\w+) with .+\.$</string>
										<string>^\w+ carves up (\w+) with .+\.$</string>
										<string>^\w+ cuts sharply with .+, wounding (\w+)\.$</string>
										<string>^\w+ scores (\w+) with an agile jab of .+\.$</string>
										<string>^\w+ thrusts with the point of .+, biting deeply into (\w+)\.$</string>
										<string>^\w+ drives .+, gashing open (\w+)\.$</string>
										<string>^Throwing \w+self forward, \w+ hacks into (\w+) with .+\.$</string>
										<string>^\w+ wickedly drags the curve of .+ across (\w+)\.$</string>
										<string>^\w+ catches (\w+) with an arcing swing of .+\.$</string>
										<string>^Angling .+, \w+ viciously sticks (\w+)\.$</string>
										<string>^\w+ attacks (\w+) with a neat slice, .+ biting into \w+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>clumsiness is the worst</name>
									<script>if matches[2] == snd.target then
  if #snd.maybe_affs &gt;= 1 then
    table.remove(snd.maybe_affs, 1)
  end
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ strikes? clumsily at (\w+) with .+\, completely missing .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>mace attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("mace") then
  snd.last_hit_limb = matches[3]
  snd.templar_last_limb = snd.last_hit_limb
  enableTrigger("Sunder Parry")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ lays? powerfully into (\w+)'s (.+) with a swing of .+\.$</string>
										<string>^\w+ brutally batters? (\w+)'s (.+) with .+\.$</string>
										<string>^\w+ slams? .+ down on (\w+)'s (.+), \w+ flesh giving under the blow\.$</string>
										<string>^\w+ brings? .+ crashing down on (\w+)'s (.+) with a sickening crunch\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>morningstar attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("morningstar") then
  snd.last_hit_limb = matches[3]
  snd.templar_last_limb = snd.last_hit_limb
  enableTrigger("Sunder Parry")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Whirling .+, \w+ pulps? (\w+)'s (.+)'s flesh with a blow\.$</string>
										<string>^\w+ clobbers? (\w+)'s (.+) with a wild swing of .+\.$</string>
										<string>^\w+ lays? into (\w+)'s (.+) with a crushing strike from .+\.$</string>
										<string>^Building momentum with .+, \w+ smashe?s? it down on (\w+)'s (.+)\.$</string>
										<string>^\w+ violently crushe?s? (\w+)'s (.+) with a circling blow of .+\.$</string>
										<string>falls upon (\w+)'s (.+) as \w+ brings? it crashing down\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>flail attacks</name>
									<script>if matches[2] == snd.target and matches[1]:find("flail") then
  snd.last_hit_limb = matches[3]
  snd.templar_last_limb = snd.last_hit_limb
  enableTrigger("Sunder Parry")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^With a vicious whirl, \w+ bashe?s? (\w+)'s (.+) with .+\.</string>
										<string>^\w+ slams? the ends of .+ into (\w+)'s (.+), mutilating \w+ flesh\.</string>
										<string>^\w+ maims? (\w+)'s (.+) with a sideways swipe of .+\.</string>
										<string>^\w+ swings? .+, bringing the balls crashing down on (\w+)'s (.+)\.</string>
										<string>^\w+ mangles? (\w+)'s (.+) with a downward blow from .+\.</string>
										<string>^\w+ tears? (\w+)'s (.+) asunder with a sweeping crush of a .+\.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>bastard</name>
									<script>if matches[2] == snd.target and matches[1]:find("bastard") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar2h")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ steps? in with .+ ready, slashing open (\w+)\.$</string>
										<string>^\w+ massacres? (\w+) with a vengeful swipe of .+\.$</string>
										<string>^\w+ carves? up (\w+) with .+\.$</string>
										<string>^\w+ takes? apart (\w+) with a strong cut from .+\.$</string>
										<string>^\w+ assaults? (\w+), skewering .+ with .+\.$</string>
										<string>^\w+ steps? in with .+ ready, slashing open (\w+)\.$</string>
										<string>^With an arcing slice, \w+ sinks? .+ into (\w+)\.$</string>
										<string>^\w+ throws? momentum behind .+, cleanly stabbing (\w+)\.$</string>
										<string>^\w+ slams? .+’s edge into (\w+), bracing against the impact\.$</string>
										<string>^\w+ charges? forward, hacking (/w+) asunder with .+\.$</string>
										<string>^\w+ neatly swings? .+, ripping into (/w+)\.$</string>
										<string>^Lifting up .+, \w+ swings? brutally downward at (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>falx/glaive</name>
									<script>if matches[2] == snd.target and (matches[1]:find("falx") or matches[1]:find("glaive")) then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar2h")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ scores? (\w+) with a wild blow from .+\.$</string>
										<string>^\w+ viciously skewers? (\w+) with a thrust from .+\.$</string>
										<string>^Cutting forcefully, \w+ rends? (\w+) with .+\.$</string>
										<string>^With a brutal swipe of .+, \w+ rips? up (/w+)\.$</string>
										<string>^Swinging .+ in a powerful arc, \w+ tears? into (\w+)\.$</string>
										<string>^Lancing forward, \w+ drives? .+ into (\w+)\.$</string>
										<string>^With a powerful jab, \w+ gouges? into (\w+) with .+\.$</string>
										<string>^\w+ hacks? into (\w+) ruthlessly with .+\.$</string>
										<string>^Slicing downward with .+, \w+ carves? (\w+) open\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>warhammer</name>
									<script>if matches[2] == snd.target and matches[1]:find("warhammer") then
  snd.last_hit_limb = matches[3]
  snd.templar_last_limb = snd.last_hit_limb
  enableTrigger("Sunder Parry")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Lifting up .+, \w+ slams? it into (\w+)'s (.+) with numbing force\.$</string>
										<string>^Winding up, \w+ brutally smashe?s? .+ into (\w+)'s (.+)\.$</string>
										<string>^\w+ crushe?s? (\w+)'s (.+) beneath a mighty overhead blow from .+\.$</string>
										<string>^\w+ sends? (\w+)'s (.+) reeling with a mighty strike from .+\.$</string>
										<string>^\w+ steps? in, gruesomely smashing up (\w+)'s (.+) with .+\.$</string>
										<string>^\w+ mutilates? (\w+)'s (.+) with a vengeful blow from .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>manta</name>
									<script>if matches[2] == snd.target then
  snd.onHit2({"Rebounding", "Dodge"})
end
disableTrigger("Weapon Hit Confirmation")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Determined to punish (\w+), \w+ raises? .+ and slices? .+ open.$</string>
										<string>^\w+ ruthlessly censures? (\w+), cutting into .+ flesh with .+.$</string>
										<string>^Disgust limns .+ features as .+ assails? (\w+) with .+.$</string>
										<string>^Driving .+ forward, \w+ hacks? at (\w+) without mercy.$</string>
										<string>^Opting for lenience, \w+ grazes? (\w+) with the end of .+.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>gladius</name>
									<script>if matches[2] == snd.target and matches[1]:find("gladius") then
  snd.onHit2({"Rebounding", "Dodge"}, "Templar")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ hack open (\w+) with .+\.$</string>
										<string>^\w+ hacks open (\w+) with .+\.$</string>
										<string>^\w+ punctures (\w+) with a swift jab of [a-z ]+\.$</string>
										<string>^\w+ puncture (\w+) with a swift jab of [a-z ]+\.$</string>
										<string>^With a sharp pass of .+, (?:the )?\w+ scores (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Scythe</name>
									<script>if matches[2] == snd.target then
  snd.onHit2({"Rebounding", "Dodge"})
end
disableTrigger("Weapon Hit Confirmation")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ extends into a lunging arc, assaulting (\w+) with .+\.$</string>
										<string>^Spinning .+ around himself, \w+ gashes open (\w+)\.$</string>
										<string>^\w+ draws back .+ before viciously slicing (\w+)\.$</string>
										<string>^\w+ messily tears up (\w+) with a strike from .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Anguish used</name>
								<script>snd.balance.anguish = false
send("wt " ..matches[2].. " STUNNED with ANGUISH!")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) cries out in anguish as the long shadows loose a terrible howl\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Anguish cd back</name>
								<script>snd.balance.anguish = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff007f</mFgColor>
								<mBgColor>#000000</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your shadow is prepared to induce anguish once more.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>anguish still on cd</name>
								<script>snd.balance.anguish = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your shadow is not yet ready to mentally strike your opponent.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Teradrim/Tidesage</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room got sandy</name>
								<script>local index = table.index_of(gmcp.Room.Info.details,"sandy")
if not index then 
  table.insert(gmcp.Room.Info.details, "sandy")
end
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ uses? Desiccation Flood\.$</string>
									<string>^\w+ uses? Desiccation Desert\.$</string>
									<string>^A cascade of sand flows in from the \w+, settling over the surroundings\.$</string>
									<string>^A swirling cloud of dust and sand sweeps in from the \w+, blanketing the area with a layer of sand\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sand gone</name>
								<script>local index = table.index_of(gmcp.Room.Info.details,"sandy")
if index then 
  table.remove(gmcp.Room.Info.details, index)
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>There is not enough sand present in this location.</string>
									<string>The sand pervading this area blows away as the magics controlling it disperse.</string>
									<string>^\w+ uses? Desiccation Whirl\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room got foggy</name>
								<script>local index = table.index_of(gmcp.Room.Info.details, "fogged")
if not index then 
  table.insert(gmcp.Room.Info.details, "fogged")
end
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ uses? Inundation Inundate\.$</string>
									<string>^\w+ uses? Inundation Fogbank\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fog gone</name>
								<script>local index = table.index_of(gmcp.Room.Info.details,"fogged")
if index then 
  table.remove(gmcp.Room.Info.details, index)
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Wayfarer</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Tenacity Cripple</name>
								<script>if matches[2] == snd.target then
 snd.last_hit_limb = matches[3]
 snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
 snd.target_got(matches[3]:gsub(" ", "_").."_crippled")
end
disableTrigger("Tenacity Cripple")



</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s (left leg|right leg|left arm|right arm) is badly crippled under the handaxe.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Tenacity Punish</name>
								<script>if matches[2] == snd.target then
  if matches[3] == "arm" then
    snd.target_got("punished_arms")
    tempTimer(40, [[snd.target_cured("punished_arms")]])
  else
    snd.target_got("punished_legs")
    tempTimer(40, [[snd.target_cured("punished_legs")]])
  end
end
disableTrigger("Tenacity Punish")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Capitalizing on the damage of (\w+)\'s \w+ (\w+), \w+ brutally hacks? into it with a blow from each blade\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>embed pull</name>
								<script>if matches[2] == snd.target then
  local limb_table = {"right leg", "left leg", "left arm", "right arm",}
  for k, v in pairs(limb_table) do
    if matches[1]:find(v) then
      snd.last_hit_limb = v
    end
  end
  
  snd.last_limb_dmg = 30

  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg )
end

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Grabbing hold of its haft, you wrench your axe loose from (\w+)\'s (.+)\, further damaging muscle and bone in the process\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Tenacity Devastate</name>
								<script>if matches[2] == snd.target then
  snd.used.rebounding = false
  snd.used.shield = false
  if matches[1]:find("vulnerable") then
    snd.onHit2({"Dodge"}, "Wayfarer")
  end
  
  snd.waiting.queue = false
  
end
disableTrigger("Tenacity Devastate")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Throwing \w+ axes in a precise, savage pattern, \w+ shreds? apart (\w+)'s protective barriers with each passing of a blade\.$</string>
									<string>^Throwing \w+ axes in a precise, savage pattern, \w+ rends? through (\w+)'s magical shield with .+, while .+ flies past and finds purchase within \w+ vulnerable flesh\.$</string>
									<string>^Throwing \w+ axes in a precise, savage pattern, \w+ rends? through (\w+)'s rebounding aura with .+, while .+ flies past and finds purchase within \w+ vulnerable flesh\.$</string>
									<string>^Weight shifting with each throw, \w+ launche?s? .+ towards (\w+), though they fly wide with the lack of protective barriers to direct their force\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fury Reverberate</name>
								<script>snd.used.shield = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Drawing a deep breath, \w+ releases? a tremendous shout which ripples through the battlefield, reverberating until \w+ voice gives out\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fury Shatter Second Aff</name>
								<script>if matches[2] == snd.target then

  local aff = ""
  
  if matches[1]:find("frenziedly") then aff = "dementia"
  elseif matches[1]:find("unsure") then aff = "confusion"
  elseif matches[1]:find("spin") then aff = "dizziness"
  elseif matches[1]:find("glazed") then aff = "stupidity" 
  end

	snd.target_got(aff)
  
end
disableTrigger("Fury Shatter Second Aff")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) stares about (the )?\w+ frenziedly, wild-eyed.$</string>
									<string>^(\w+) glances about (the )?\w+ with an unsure expression.$</string>
									<string>^A glazed look descends over the features of (\w+).$</string>
									<string>^(\w+)'s eyes spin wildly.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Tenacity Chop</name>
								<script>if matches[2] == snd.target then
  snd.last_hit_limb = matches[3]
  local aff = "assault_damage_"..snd.last_hit_limb:gsub(" ","_")
  if snd.checkAff(aff) then
    snd.last_limb_dmg = 11
    snd.target_cured(aff) 
  end
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end
disableTrigger("Tenacity Chop")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ chops? into (\w+)'s (.+) with a powerful draw of .+, the blade sinking into \w+ flesh\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Tenacity Assault</name>
								<script>if matches[2] == snd.target then
  snd.last_hit_limb = matches[3]
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
  local aff = "assault_damage_"..snd.last_hit_limb:gsub(" ","_")
  snd.target_got(aff)
  tempTimer(2, function() snd.target_cured(aff) end)
  table.insert(snd.last_affs, aff)
end
disableTrigger("Tenacity Assault")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^With a quick overhand throw, \w+ hurls? .+ at (\w+), the blade tearing into the flesh of \w+ (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>highjump/enrage</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Highjumped</name>
									<script>snd.highjumped = true
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^With a few bounding leaps, you use the terrain to your advantage as you launch yourself towards the sky.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Highjump - landed</name>
									<script>snd.highjumped = false

</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You fall back down to earth, landing upon the ground with a rumbling thud.$</string>
										<string>^Spying (\w+) below, you drop down from your perch, sweeping your axes to deal (the )?\w+ a rending blow.$</string>
										<string>^You begin to descend, the wind whistling past you as the earth draws ever closer. You land easily, back on the ground again.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Enrage on</name>
									<script>snd.enraged = true
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You have gained the enraged defence.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Enrage off</name>
									<script>snd.enraged = false
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your enraged defence has been stripped.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Akkari</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Holy Light Affliction</name>
								<script>if matches[2] == snd.target then
  if matches[3] == "self-pity" then
    snd.target_got("self_pity")
  elseif matches[3] == "sadness" then
    snd.target_got("sadness")
  elseif matches[3] == "hubris" then
    snd.target_got("hubris")
  elseif matches[3] == "commitment fear" then
    snd.target_got("commitment_fear")
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Terror consumes (\w+) as the pitiless light inspires (self-pity|sadness|hubris|commitment fear) in .* heart.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Squire Attacks</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Paresis</name>
									<script>if matches[2] == snd.target then
  snd.target_got("paresis")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^A fervent .* crouches low and strikes at (\w+)'s spine, causing .* muscles to seize.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Haemophilia</name>
									<script>if matches[2] == snd.target then
  snd.target_got("haemophilia")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^A fervent .* sashays forward in a frenzy, lashing out at (\w+) in a flurry of rage-fuelled strikes.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>hallucinations</name>
									<script>if matches[2] == snd.target then
  snd.target_got("hallucinations")
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^A fervent .+ lurches at (\w+) with violent purpose before turning away at the last moment, its feinting manoeuvre leaving .+ mind reeling.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>paste</name>
									<script>if matches[2] == snd.target then
snd.used.paste = false
snd.target_got("no_paste")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^A fervent .*flourishes its weapon before (\w+)'s eyes in an unerring display of skill, sweat breaking out upon .* skin in recognition of the harrowing assault.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Exsanguinate</name>
								<script>if matches[2] == snd.target then
  snd.target_got("effused_blood")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) looks horrified as .* skin begins to weep with vivid red blood.$</string>
									<string>^(\w+) screams as .* veins burst open spilling precious life blood to the ground.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>remorse symptom</name>
								<script>if matches[2] == snd.target then
  snd.target_got("remorse")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s terrible remorse instills certainty of purpose in your mind.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Contrition symptom</name>
								<script>if matches[2] == snd.target then
  snd.target_got("contrition")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The weight of (\w+)'s contrition suffuses your body with righteous vigour.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>black bile got</name>
								<script>if matches[2] == snd.target then
snd.target_got("black_bile")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s body turns sickly as \w+ skin takes on a yellow shade\.$</string>
									<string>^Motes of light pulse beneath (\w+)'s skin, .+ veins twisting oddly as the scouring incandescence wreaks havoc upon .+ insides.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>black bile fired</name>
								<script>if matches[2] == snd.target then
snd.target_cured("black_bile")
snd.target_got("effused_blood")
  if not snd.checkAff("weariness") then
  	snd.target_got("weariness")
  elseif not snd.checkAff("clumsiness") then
  	snd.target_got("clumsiness")
  elseif not snd.checkAff("vomiting") then
  	snd.target_got("vomiting")
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s skin turns a sickly colour and black bile seeps from \w+ mouth\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>manifest</name>
								<script>expandAlias("sndon")
snd.aff_cure("asleep")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You concentrate on regaining your physical form, the unbounded reach of ascended conscious narrowing</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Used Deliver</name>
								<script>if matches[2] == snd.target then
  snd.target_got("feed")
  feed_timer = tempTimer(10, [[snd.target_cured("feed")]])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You use Ascendance Deliver on (\w+).$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Rune activation</name>
								<script>if matches[2] == snd.target then
  snd.target_cured("blood_rune")
  snd.runeused = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You place your palms together, willing the rune placed on (\w+)'s soul to activate\.$</string>
									<string>^You declare that all shall know of (\w+)'s villainy, and incite the brand you have placed to consume.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Pariah / Runed used or times up</name>
								<script>if matches[2] == snd.target  or matches[2] == "yourself" then
	snd.runeused = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You feel the rune placed on (\w+)'s soul grow weaker before dispersing in a plume of foul smoke.$</string>
									<string>^The brand of the pariah you had placed upon (\w+) fades from your awareness.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Cured Afflictions</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>discern</name>
							<script>if matches[2]:lower() == snd.target:lower() then
  snd.target_cured(matches[4])
  if matches[4] == "ablaze" then
    snd.flamestack = 0
  end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You discern that (\w+) has cured the effects of (a )?([a-z- ]+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>ate herb</name>
							<script>if matches[2]:lower() == snd.target:lower() then
 snd.target_cured("anorexia")
 snd.target_used(matches[4])
 snd.track_pill(snd.target)
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) swallows (a|an) (.*) pill\.$</string>
								<string>^(\w+) swallows (a|an) pill of (.*)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>smoked</name>
							<script>if matches[2]:lower() == snd.target:lower() then
 snd.target_cured("asthma")
 if snd.cures[matches[4]] ~= nil then
  snd.target_used(matches[4])
 end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) takes a long drag off (the )?\w+ pipe filled with (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>focus</name>
							<script>if matches[2]:lower() == snd.target:lower() then
  snd.track_focus(snd.target)
  snd.target_cured("impatience")
  snd.target_used("focus")
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^A look of extreme focus crosses the face of (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>poultice</name>
							<script>if matches[2]:lower() == snd.target:lower() then
  snd.target_cured("slickness")
  snd.target_cured("slough")
  if snd.sloughTimer then killTimer(snd.sloughTimer) end
  if not snd.checkAff("burnt_skin") then
    if matches[4] == "epidermal" then
      snd.target_last_used_salve = "epidermal"
      if matches[6] == "head" then
        if snd.checksomeAffs({"stuttering","blurry_vision","indifference","burnt_eyes","sight"}, 1) then
          snd.target_used("epidermal_head")
        else
          snd.target_got("sight")
        end
      elseif matches[6] == "torso" then
        snd.target_used("epidermal_torso")
      elseif matches[6] == "skin" then
        snd.target_used("epidermal")
      end
    else
      snd.target_used(matches[4])    
	  end
  end  

  if snd.class == "Zealot" and matches[2] == snd.target then
    cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
  end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) presses (a|an) (\w+) poultice against (the )?\w+ (.*), rubbing the poultice into (the )?\w+ flesh\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>also smoked</name>
							<script>if matches[2] == snd.target then
 snd.target_cured("asthma")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) takes a long drag off (the )?\w+ pipe\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>touched tree</name>
							<script>if matches[2]:lower() == snd.target:lower() then
 snd.track_tree(matches[2])
 snd.target_cured("paresis")
 snd.target_cured("paralysis")
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(.*) touches a tree of life tattoo\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>writhe</name>
							<script>if matches[2] == snd.target then
  local writhe_table = {
    ["state of transfixion"] = "transfix",
    ["bindings"] = "web",
    ["thigh-jawlock"] = "thighlock",
    ["armpit-jawlock"] = "armpitlock",
    ["neck-jawlock"] = "necklock",
    ["entanglement by ropes"] = "ropes",
    ["tied ropes"] = "bind",
    ["impalement"] = "impaled",
    ["grappling"] = "grappled",
    }
    
  snd.target_cured("writhe_"..writhe_table[matches[3]])

  if matches[1]:find("jawlock") then
    snd.jawlocked = false
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) has writhed free of \w+ (.+)\.$</string>
								<string>^(\w+) has freed \w+ from the (grappling)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>rupture</name>
							<script>snd.jawlocked = false
snd.target_cured("writhe_thighlock")
snd.target_cured("writhe_armpitlock")
snd.target_cured("writhe_necklock")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Snarling, you jerk your head violently from side to side, ripping off a chunk of (\w+)('s|') flesh and rupturing the wound in a spray of blood\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>void</name>
							<script>if matches[2] == snd.target then
 if snd.last_cured ~= "" then
  if snd.cures[snd.last_cure] ~= nil then
   if table.contains(snd.cures[snd.last_cure], snd.last_cured) then
    snd.target_got(snd.last_cured)
	 end
  end
 end
 snd.target_cured("void")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The shadowy void around (\w+) disappears\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>weak void</name>
							<script>if matches[2] == snd.target and snd.last_cured ~= "" then
 if snd.cures[snd.last_cure] ~= nil then
  if table.contains(snd.cures[snd.last_cure], snd.last_cured) then
   snd.target_got(snd.last_cured)
	end
 end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The shadowy void around (\w+) weakens\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>angel sacrifice</name>
							<script>if multimatches[1][2] == snd.target then
 snd.reset_target()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses Spirituality Sacrifice\.$</string>
								<string>1</string>
								<string>^A guardian angel begins to burn impossibly white as (\w+) eyes roll back in ecstasy\. As the light fades away, the angel is no where to be seen\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>5</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Disrupt cure</name>
							<script>if matches[2] == snd.target then
 snd.target_cured("disrupted")
 snd.target_cured("confusion")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+)'s eyes lose their focus suddenly\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Spinecut fails</name>
							<script>if matches[3] == snd.target then
	snd.target_cured("left_leg_crippled")
	snd.target_cured("right_leg_crippled")
	snd.target_cured("confusion")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) uses? Dhuriv Spinecut Fail on (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>flame tattoo</name>
							<script>if snd.target == matches[2] then

  snd.target_cured("writhe_"..matches[3]:gsub("bing", ""))
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+)'s flame tattoo flares suddenly, melting away the (\w+) around \w+.$</string>
								<string>^The lingering energy from (\w+)'s flame tattoo melt away the (\w+) around \w+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Lycan bodyheat used</name>
							<script>if snd.target == matches[2] then  
  snd.target_cured("cold")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) shakes off the cold, thin vapour rising from (?:the )?\S+ body\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>endgame cure tracking</name>
							<script>if snd.target == matches[2] then
  snd.track_endgame(snd.target)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^A flicker of intense focus crosses (\w+)'s face, and \w+ stands somewhat straighter.$</string>
								<string>^With a sinister grin, (\w+)'s body seems to repair itself before your very eyes\.$</string>
								<string>^(\w+) calms for a moment as [a-z]+ body renews itself in an act of recovery\.$</string>
								<string>^(\w+)'s form seems to shimmer before [a-z]+ stands taller, looking healthier\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>voyria cured</name>
							<script>if matches[2] == snd.target then
 snd.target_cured("voyria")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) seems to calm, no longer poisoned\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>numbed_skin cured</name>
							<script>if matches[2] == snd.target then
 snd.target_cured("numbed_skin")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) regains the feeling within \w+ limbs\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Armor tattoo expired</name>
							<script>if matches[2] == snd.target then
  snd.target_cured("armor_tattoo")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The armour tattoo on (\w+) ceases to gleam\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Resists/Undos</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>resisted</name>
							<script>for i in pairs(snd.effects) do
 if snd.effects[i] == multimatches[1][2] then
  snd.target_cured(i)
 end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>1</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You discern that a layer of (\w+) has rubbed off your weapon\.$</string>
								<string>1</string>
								<string>^You discern that (\w+) has resisted the (\w+) affliction\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>5</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>resisted venom</name>
							<script>if matches[2]:lower() == snd.target:lower() then
 for i in pairs(snd.effects) do
  if snd.effects[i] == matches[3] then
   snd.target_cured(i)
	end
 end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+)'s? face flushes as .* body purges the (\w+) venom\.$</string>
								<string>^The countercurrent coating (\w+)'s skin wicks away (\w+) before it can take.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>chaos lord resist</name>
							<script>if multimatches[1][2] == snd.target then
 snd.target_cured(multimatches[3][3])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The crackling chaotic energies surrounding (\w+)'s? body absorb the affliction\.$</string>
								<string>1</string>
								<string>^You discern that (\w+) has resisted the (\w+) affliction\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>5</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>undo in general</name>
							<script>if snd.target == matches[2] then
  if matches[1]:find("venom") then
    snd.target_cured(snd.venomEffect(matches[3]))
  else
    snd.target_cured(matches[3])
  end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You discern that (\w+) has resisted the (.+) affliction\.$</string>
								<string>^(\w+)'s? galeward protects (the )?\w+ from the (\w+) venom\.$</string>
								<string>^(\w+)'s? waterward protects (the )?\w+ from the (\w+) venom\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sunder Parry</name>
							<script>if matches[2] == snd.target then
  if #snd.last_affs &gt;= 1 then
    if snd.last_affs[1] == "blaze" or snd.last_affs[1] == "wasi" then
      snd.used.rebounding = true
    else
      for i in pairs(snd.last_affs) do
       snd.target_cured(snd.last_affs[i])
      end
    end
  end
  
  snd.templar_last_limb = snd.last_hit_limb
  
  if snd.last_hit_limb ~= "none" and snd.last_limb_dmg ~= 0 then
    snd.took_limb_dmg(snd.last_hit_limb, -snd.last_limb_dmg)
    snd.last_hit_limb = "none"
    snd.last_limb_dmg = 0
  end
  
  if snd.using_both_hands == 1 then table.insert(snd.maybe_affs, 1, snd.last_affs[1]) end
  
  snd.last_affs = {}
  snd.luminary_crush_first_choice = nil

end

disableTrigger("Sunder Parry")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) parries the attack on .* with a deft maneuver\.$</string>
								<string>^(\w+) guards the attack on .*\.$</string>
								<string>^(\w+) steps into the attack on .*, grabs .+ arm and twists it\.$</string>
								<string>^With a free hand, (\w+) fends off the attack on \w+ .+\.$</string>
								<string>^With a predatory growl, (\w+) opposes the attack on [a-z ]+, denying it purchase\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sunder Dodge</name>
							<script>if matches[2] == snd.target then
  if #snd.last_affs &gt;= 1 then
    if snd.last_affs[1] == "blaze" or snd.last_affs[1] == "wasi" then
      snd.used.rebounding = true
    else
      for i in pairs(snd.last_affs) do
       snd.target_cured(snd.last_affs[i])
      end
    end
  end

  if snd.last_hit_limb ~= "none" and snd.last_limb_dmg ~= 0 then
    snd.took_limb_dmg(snd.last_hit_limb, -snd.last_limb_dmg)
    snd.last_hit_limb = "none"
    snd.last_limb_dmg = 0
  end
  
  if snd.using_both_hands == 1 then table.insert(snd.maybe_affs, 1, snd.last_affs[1]) end  
  
  snd.last_affs = {}
  snd.luminary_crush_first_choice = nil

end

disableTrigger("Sunder Dodge")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Stepping quickly out of the way, (\w+) dodges the attack\.$</string>
								<string>^(\w+) twists and turns \w+ body, dodging the attack.$</string>
								<string>^Shifting \w+ body, (\w+) weaves out of harm at the last moment\.$</string>
								<string>^You strike clumsily at (\w+), completely missing .+ with .+\.$</string>
								<string>^\w+ strikes clumsily at (\w+) with .+, completely missing \w+\.$</string>
								<string>^Your vision blurs as you strike at (\w+) and miss with .+\.$</string>
								<string>^\w+ blinks and rubs \w+ eye as (?:the )?\w+ misses (\w+) with .+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sunder Rebounding</name>
							<script>if #snd.last_affs &gt;= 1 then
  for i in pairs(snd.last_affs) do
    snd.target_cured(snd.last_affs[i])
  end
end

  if snd.last_hit_limb ~= "none" and snd.last_limb_dmg ~= 0 then
    snd.took_limb_dmg(snd.last_hit_limb, -snd.last_limb_dmg)
    snd.last_hit_limb = "none"
    snd.last_limb_dmg = 0
  end

if snd.using_both_hands == 1 then table.insert(snd.maybe_affs, 1, snd.last_affs[1]) end

snd.last_affs = {}
snd.used.rebounding = true
snd.getting_hit = "You"

disableTrigger("Sunder Rebounding")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The attack rebounds back onto \w+\!$</string>
								<string>^The attack rebounds away from \w+ aura!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Lycan limb break resist</name>
							<script>if matches[2] == snd.target then
  snd.target_cured(matches[4]:gsub(" ", "_").."_crippled")
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) looks mildly stressed in pain, but (the )?\w+ (.+) resists breaking\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Elder shaman proc resistance</name>
							<script>if multimatches[1][2] == snd.target then
  snd.target_cured(multimatches[2][3])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>3</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) summons the will of the Elder Shaman to resist delusion.$</string>
								<string>^You discern that (\w+) has resisted the (\w+) affliction\.$</string>
								<string>^You discern that (\w+) has been afflicted with (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>finesse undo</name>
							<script>if matches[4] == snd.target then
  if #snd.last_affs &gt;= 1 then
    for i in pairs(snd.last_affs) do
    	snd.target_cured(snd.last_affs[i])
   	end
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) stops short as (the )?\w+ comes upon (\w+)'s rebounding aura and deftly pulls away.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Wounds other</name>
						<script>if matches[2] == snd.target then
   enableTrigger("Wounds capture stuff")
else
  disableTrigger("Wounds capture stuff")
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>7</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You take a moment to assess how damaged (\w+)'s limbs are:$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Wounds capture stuff</name>
							<script>local limb = matches[2]:lower()
local bruisingMap = {no = 0, light = 1, moderate = 2, critical = 3}
local dmg = tonumber(matches[3])
snd.took_limb_dmg(limb, dmg - snd.limb_dmg[limb])
snd.limb_bruising[limb] = bruisingMap[matches[4]]</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(.+): +(\d{1,2}\.\d{2})% \((\w+) bruising\)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>proned</name>
						<script>if matches[2] == snd.target then
 snd.target_got("fallen")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)('s|') broken legs cause (the )?\w+ to fall to the ground in a heap\.$</string>
							<string>^(\w+) wobbles uncertainly before falling to the ground, (the )?\w+ leg pulled awkwardly behind (the )?\w+ own head\.$</string>
							<string>^(\w+) leaps up in what is apparently an attempt at a graceful swan dive\. (the )?\w+ smacks ?head first into the solid ground\.$</string>
							<string>^You whistle at .+ and send (the )?\w+ barreling into (\w+), knocking (the )?\w+ to the ground\.$</string>
							<string>^The injury to (\w+)('s|') knees causes (the )?\w+ legs to buckle and (the )?\w+ falls to the ground in a heap\.$</string>
							<string>barrels into (\w+) and knocks (the )?\w+ to the ground\.$</string>
							<string>^\w+ \w+ into (\w+), knocking (the )?\w+ to the ground\.$</string>
							<string>^\w connects? and sends? (\w+) sprawling to the floor\.$</string>
							<string>^You let forth a forceful howl toward (\w+)\.$</string>
							<string>lowers its head and rams it into (\w+) painfully, antlers goring (the )?\w+ flesh before the beast gives a toss of its great head and sends (the )?\w+ sprawling unceremoniously to the ground\.$</string>
							<string>^Crumpling over in mental agony, (\w+) collapses to the floor and clutches (the )?\w+ head\.$</string>
							<string>^The frenzied air reaches its peak of intensity and slams into (\w+) with aferocity that knocks (the )?\w+ to the ground\.$</string>
							<string>^(\w+) is blasted backward as you will an expulsion of energy from your staff,the forked blow knocking (the )?\w+ to the ground\.$</string>
							<string>^(\w+)'s? eyes close suddenly as (the )?\w+ falls asleep\.$</string>
							<string>^The tentacle drags (\w+) from the skies and hurls (the )?\w+ to the ground.$</string>
							<string>^(\w+) is unearthed from the ground!$</string>
							<string>^An elk lowers its head and rams it into (\w+) painfully, antlers goring (the )?\w+ flesh before the beast gives a toss of its great head and sends it sprawling unceremoniously to the ground.</string>
							<string>^The force of the blow drives (\w+) to .+ knees.$</string>
							<string>^Your foot slams into (\w+), knocking \w+ off \w+ feet.$</string>
							<string>(\w+) is already upon the ground.</string>
							<string>^(\w+) is knocked to the ground by a sudden powerful gust of wind\.$</string>
							<string>^(\w+) leaps up in what is apparently an attempt at a graceful swan dive\. (The )?\w+ smacks head ?first into shallow water\.$</string>
							<string>^Being unconscious, (\w+) falls over\.$</string>
							<string>^(\w+) appears dizzy and falls to the ground\.$</string>
							<string>^(\w+) is already fallen upon the ground\.$</string>
							<string>^With a struggle, (\w+) attempts to call upon \w+ willpower reserves, however the effort leaves \w+ looking dizzy and weak. \w+ eyes quickly grow unfocused and .+ sways? slightly before crashing heavily to the ground, and \w+ quickly slips into unconsciousness.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>stood</name>
						<script>if matches[2] == snd.target then
 snd.target_cured("fallen")
 snd.target_cured("left_leg_crippled")
 snd.target_cured("right_leg_crippled")
 snd.target_cured("asleep")
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) stands up and stretches (the )?\w+ arms out wide\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ravager Rebound</name>
						<script>if snd.target == matches[2] then
  snd.target_cured("fallen")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Rebounding with aggres?sive agility, (\w+) forces \w+ back to \w+ feet.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>asleep</name>
						<script>if matches[2] == snd.target then
  snd.target_got("asleep")
  snd.target_got("fallen")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)'s? eyes close suddenly as \w+ falls asleep\.$</string>
							<string>^(\w+) gives in to exhaustion, drifting off to sleep\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>no asleep</name>
						<script>if matches[2] == snd.target then
 snd.target_cured("asleep")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) opens \w+ eyes and yawns mightily\.$</string>
							<string>^(\w+) wakes up with a gasp of pain\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Limbs</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Limb Hits</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>200s</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Tiarna Shear</name>
								<script>if matches[2] == snd.target then
  snd.last_hit_limb = matches[3]
  snd.last_limb_dmg = 11
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end
disableTrigger("Tiarna Shear")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Shimmering wisps of energy surround \w+ as a connection forms between \w+ spirit and that of the bear. An ursine outline encircles \w+ and, with a deafening roar, \w+ claws? the flesh from (\w+)'s (.+)\.$</string>
									<string>^Shimmering energy surrounds \w+ as \w+ concentrates?\. Moments later, .+ encircled by the outline of a great bear and, with a deafening roar, \w+ claws? the flesh from (\w+)'s (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Aetherial Volley</name>
								<script>if matches[2] == snd.target then
  snd.last_hit_limb = matches[3]
  snd.last_limb_dmg = 11
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end
disableTrigger("Aetherial Volley")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Inciting the Mejevsavelnel of old, \w+ beckons? Cthalut, the Archer to \w+ aid. Celestial light kindles into an arrow of sun's fire, before volleying forth as a shooting star to strike (\w+)'s (.+)\.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Nocturn Lash</name>
								<script>if matches[2] == snd.target then
  snd.last_hit_limb = matches[3]
  snd.last_limb_dmg = 11
  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end
disableTrigger("Nocturn Lash")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The shadow \w+ casts? elongates, stretching hungrily towards (\w+)'s (.+)\. The suddenly corporeal shade envelops \w+ in a whirlwind of frenzied strikes, bleeding its malice into \w+\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Glory counting</name>
								<script>snd.glory = snd.glory + 1</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Resonating with chaotic energies, a circular rainbow forms in a shimmer of Astral-inspired glory.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Astral Contaminate</name>
								<script>if matches[2] == snd.target then
 snd.last_hit_limb = matches[3]
 snd.last_limb_dmg = 10.99
 snd.took_limb_dmg(matches[3], snd.last_limb_dmg)
end

disableTrigger("Astral Contaminate")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Palm splayed and with (\w+)'s (.+) the subject of your ire, you send forth ropelike threads of yellow-green to infect him with poisonous, chaotic contamination.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Astral Hamartia Back</name>
								<script>snd.hamartia_used = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You may once again expose the flaws of your enemies.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Glories in Room</name>
								<script>echo("\nYou see glories")
if matches[2] == "five" then
  snd.glory = 5
elseif matches[2] == "four" then
  snd.glory = 4
elseif matches[2] == "three" then
  snd.glory = 3
elseif matches[2] == "two" then
  snd.glory = 2
elseif matches[2] == "one" then
  snd.glory = 1
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>There are (.+) chromatic glories here.</string>
									<string>There is (.+) chromatic glory here.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Hemartia aff</name>
								<script>if matches[2] == snd.target then
 snd.target_got(matches[3])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Eldritch coils of oceanic light arise about your outstretched fingers, blooming toward (\w+) and exposing the flaw of (\w+) amidst disembodied laughter.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Zealot / Ravager</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Zealot</name>
								<script>-- i was forced</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Direblow Hit Confirmation</name>
									<script>if (multimatches[1][3] == snd.target or multimatches[1][4] == snd.target) then
	if multimatches[1][2]:find("drive") then
		snd.last_limb_dmg = 20
  	snd.target_got("lightwound")
		snd.target_got("deepwound")
  	table.insert(snd.last_affs, "lightwound")
		table.insert(snd.last_affs, "deepwound")
	else
		snd.last_limb_dmg = 7.5
  	snd.target_got("lightwound")
  	table.insert(snd.last_affs, "lightwound")
	end
	snd.last_hit_limb = "torso"
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>2</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>(^With .* boundless strength, .+ drives? .+ rigid hand through (\w+).$|^Weakened, .+ thrusts? .+ rigid hand into (\w+) with low momentum.)</string>
										<string>(hand parts flesh and delivers a deep, gory wound.$|sinks partly in as blood oozes around it\.$)</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Blitz Affs</name>
									<script>if matches[2] == snd.target then
  if matches[1]:find("ribs") then
    snd.target_got("cracked_ribs")
  elseif matches[1]:find("throat") then
    snd.target_got("crippled_throat")
  else
   snd.target_got(matches[3].."_crippled")
  end
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s (.+) twists and breaks under the blow.$</string>
										<string>^(\w+)'s ribs crack unsettlingly under the blow\.$</string>
										<string>^(\w+)'s throat crumples under the blow\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Welt proc</name>
									<script>if matches[2] == snd.target and not matches[1]:find("contusion") then
	snd.last_hit_limb = matches[3]
	snd.last_limb_dmg = 6.5
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) winces as (her|his) (.+) throbs from duress.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Heelrush</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Heelrush 1st hit</name>
										<script>if multimatches[1][3] == snd.target then
	snd.last_hit_limb = multimatches[1][4]
	snd.last_limb_dmg = 5.49
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>3</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Spotting an opening, (\w+) lets? loose a kick into (\w+)'s (.+)\.$</string>
											<string>^\w+'?s? blow lands heavily with weight\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Heelrush 2nd hit</name>
										<script>if multimatches[1][4] == snd.target then
	snd.last_hit_limb = multimatches[1][5]
	snd.last_limb_dmg = 8
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>3</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Whirling (the )?\w+ foot around, (\w+) lands? it into (\w+)'s (.+) with a second hit\.$</string>
											<string>^\w+'?s? blow lands heavily with weight\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Heelrush 3rd hit</name>
										<script>if multimatches[1][4] == snd.target then
	snd.last_hit_limb = multimatches[1][5]
	snd.last_limb_dmg = 10
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end
disableTrigger("Heelrush")</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>3</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^With the last of (the )?\w+ momentum, (\w+) heaves? a straight kick into (\w+)'s (.+)\.$</string>
											<string>^\w+'?s? blow lands heavily with weight\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Wrath - Parry watching</name>
									<script>if matches[2] == snd.target then
 snd.parried_limb = matches[4]
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You see (\w+) shift .+ parry to (his|her|their|its) (.+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>3P Ignite From Weapon</name>
									<script>if matches[2] == snd.target then
  if not snd.checkAff("ablaze") then 
		snd.target_got("ablaze")
	end  
  if snd.flamestack ~= 12 and snd.checkAff("ablaze")  then
    snd.flamestack = snd.flamestack + 1
  end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Flames leap from .+ and ignite (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>ablaze</name>
									<script>if matches[2] == snd.target then
  if not snd.checkAff("ablaze") then 
		snd.target_got("ablaze")
	end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Flames leap around (\w+), charring his flesh.$</string>
										<string>^Flames spew from a firelord, engulfing (\w+) and consumes (the )?\w+ flesh.$</string>
										<string>^Flames spew in from the .*, engulfing (\w+) and consuming (the )?\w+ flesh.$</string>
										<string>^Flames spew from a firelord, engulfing (\w+) and consuming (the )?\w+ flesh.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Ablaze Count tracking</name>
									<script>if matches[2] == snd.target then
  if snd.checkAff("ablaze") then  
    if snd.flamestack ~= 12 then
      snd.flamestack = snd.flamestack + 1
    end
  end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^A hellcat shreds (\w+) with blazing claws, heat lashing forth to scourge (her|him|them).$</string>
										<string>^The ground vents open, and a hellish torrent of heat and ash scourge (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>fireblock proc</name>
									<script>if matches[2] == snd.target then
	snd.target_cured("ablaze")
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+)'s shield of flame repels the fiery attack.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Firefist Proc</name>
									<script>if matches[2] == snd.target then
  snd.target_got("ablaze")
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your burning fist catches (\w+) alight in a pale, triumphant blaze.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Firefist proc fails</name>
										<script>if matches[2] == snd.target then
  snd.target_cured("ablaze")
  if snd.class == "Zealot" then
    if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
      snd.immolation_ready = true
    else
      snd.immolation_ready = false
    end
    cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
  end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+)'s shield of flame repels the fiery attack.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Purification Scorch</name>
									<script>if matches[2] == snd.target then
	snd.target_got("ablaze")
  if snd.flamestack ~= 12  and snd.checkAff("ablaze") then
    snd.flamestack = snd.flamestack + 1
  end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ uses? Purification Scorch on (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Scorch fails</name>
										<script>if snd.flamestack &gt; 0 and snd.checkAff("ablaze") then
  snd.flamestack = snd.flamestack - 1
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+)'s shield of flame repels the fiery attack.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Purification Heatspear</name>
									<script>if matches[2] == snd.target then
	snd.target_got("heatspear")  
  if snd.flamestack ~= 12  and snd.checkAff("ablaze") then
    snd.flamestack = snd.flamestack + 1
  end
end
if snd.class == "Zealot" and matches[2] == snd.target  then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ uses? Purification Heatspear on (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>No Flames</name>
									<script>if matches[2] == snd.target then
  if snd.checkAff("ablaze") then
    snd.target_cured("ablaze")
    snd.flamestack = 0
  end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^There are no flames around (\w+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Pyromania Used</name>
									<script>snd.pyromania = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You use Purification Pyromania.</string>
										<string>You have already enacted pyromania.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Pyromania Back</name>
									<script>snd.pyromania = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You feel the heat in the ground dissipate.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Can't Blitz</name>
									<script>snd.blitz = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>There is no one here you can see.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Rebuke Limb Tracking</name>
									<script>if matches[2] == "(left leg)" then
  snd.rebuke_limb = "left leg"
elseif matches[2] == "(right leg)" then
  snd.rebuke_limb = "right leg"
elseif matches[2] == "(right arm)" then
  snd.rebuke_limb = "right arm"
elseif matches[2] == "(left arm)" then
  snd.rebuke_limb = "left arm"
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You use Zeal Rebuke (.*).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Rebuke Back</name>
									<script>snd.rebuke = false
snd.rebuke_limb = "none"</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You may rebuke an attack on your limbs once more.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Rebuke down</name>
									<script>snd.rebuke = true</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You have gained the rebuke defence.</string>
										<string>You cannot rebuke further blows just yet.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fire Level 1</name>
									<script>if matches[2] == snd.target then
  snd.target_got("ablaze")  
  if snd.flamestack ~= 12 and snd.checkAff("ablaze")  then
    snd.flamestack = snd.flamestack + 1
  end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>Flames leap around (\w+), charring (his|her) flesh.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fire Level 2</name>
									<script>if matches[2] == snd.target then
  snd.target_got("ablaze")  
  if snd.flamestack ~= 12 and snd.checkAff("ablaze")  then
    snd.flamestack = snd.flamestack + 1
  end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Hot flames leap around (\w+), charring (his|her) flesh.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Pyromania fire damage</name>
									<script>if matches[2] == snd.target then
  if snd.flamestack ~= 12 and snd.checkAff("ablaze")  then
    snd.flamestack = snd.flamestack + 1
  end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The ground vents open, and a hellish torrent of heat and ash scourge (\w+)$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fire Level 3</name>
									<script>if matches[2] == snd.target then
  snd.target_got("ablaze")  
  if snd.flamestack ~= 12 and snd.checkAff("ablaze")  then
    snd.flamestack = snd.flamestack + 1
  end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^White-hot flames leap around (\w+), charring (his|her) flesh.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Fire Level 4</name>
									<script>if matches[2] == snd.target then
  if snd.checkAff("ablaze") then
    snd.target_got("crispy")
  end
  if snd.flamestack ~= 12 then snd.flamestack = 12 end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Deadly flames leap around (\w+), charring (the )?\w+ flesh.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Infernal Seal</name>
									<script>if matches[2] == snd.target then
  snd.target_got("infernal_seal")
  tempTimer(125, [[snd.target_cured("infernal_seal")]])
  snd.target_got("ablaze")
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ uses? Purification Infernal on (\w+).$</string>
										<string>^(\w+) is already suffering under an Infernal Seal.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Seal Fails</name>
										<script>if matches[2] == snd.target then
  snd.target_cured("infernal_seal")
  if snd.class == "Zealot" then
    if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
      snd.immolation_ready = true
    else
      snd.immolation_ready = false
    end
    cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
  end

  if not snd.checkAff("ablaze") then
    snd.target_cured("ablaze")
  end
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+)'s shield of flame repels the fiery attack.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Welt cooldown tracking</name>
									<script>if matches[2] == snd.target then
	snd.welt_ready = matches[3]
  tempTimer(5, [[snd.welt_ready = "none"]])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>A throbbing welt forms on (\w+)'s (.+).</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Pyromania Prone</name>
									<script>if matches[2] == snd.target then
  snd.target_got("fallen")  
  if snd.flamestack ~= 12 and snd.checkAff("ablaze")  then
    snd.flamestack = snd.flamestack + 1
  end
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The force of the heated air unbalances (\w+) and (she|he) falls.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Whipburst</name>
									<script>if matches[3] == snd.target then
  snd.target_got("ablaze")  
  if snd.flamestack ~= 12 and snd.checkAff("ablaze")  then
    snd.flamestack = snd.flamestack + 1
  end
end
if snd.class == "Zealot" and matches[3] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) uses? Zeal Whipburst \(flame\) on (\w+).$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>Whipburst fails</name>
										<script>if snd.flamestack &gt; 0 and snd.checkAff("ablaze")  then
  snd.flamestack = snd.flamestack - 1
end
if snd.class == "Zealot" and matches[2] == snd.target then
  if snd.flamestack == 12 and snd.checkAff("ablaze")  then 
    snd.immolation_ready = true
  else
    snd.immolation_ready = false
  end
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^(\w+)'s shield of flame repels the fiery attack.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Ravager</name>
								<script>-- i was forced</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Haymaker blow Hit Confirmation</name>
									<script>if (multimatches[1][3] == snd.target or multimatches[1][4] == snd.target) then
	if multimatches[1][2]:find("mercy") then
		snd.last_limb_dmg = 20
  	snd.target_got("lightwound")
		snd.target_got("deepwound")
  	table.insert(snd.last_affs, "lightwound")
		table.insert(snd.last_affs, "deepwound")
	else
		snd.last_limb_dmg = 7.5
  	snd.target_got("lightwound")
  	table.insert(snd.last_affs, "lightwound")
	end
	snd.last_hit_limb = "torso"
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>2</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>(^Lurching forward with violent momentum, \w+ slams? \w+ fist into (\w+)'s gut without mercy\.$|^Your fist collides with (\w+) but carries little momentum, barely a fraction of your true strength\.$)</string>
										<string>(^The sheer force of .+ haymaker strikes at (\w+)'s organs, causing a massive internal bleed\.$|^Lacking sufficient force, your blow causes only minor wounding\.$)</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Rampage affs</name>
									<script>if matches[2] == snd.target then
  if matches[1]:find("ribs") then
    snd.target_got("cracked_ribs")
  elseif matches[1]:find("throat") then
    snd.target_got("crippled_throat")
  else
   snd.target_got(matches[3].."_crippled")
  end
end
</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) gasps in pain, \w+ (.+) shattering under the assault\.$</string>
										<string>^(\w+) doubles over as \w+ ribs crack under the remorseless strike\.$</string>
										<string>^(\w+)'s throat seizes up from the force of the blow\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Welt proc</name>
									<script>if matches[2] == snd.target then
	snd.last_hit_limb = matches[3]
	snd.last_limb_dmg = 6.5
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) winces as the contusion plaguing \w+ (.+) throbs from duress\.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Overpower</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList />
									<regexCodePropertyList />
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>1st hit</name>
										<script>if multimatches[1][3] == snd.target then
	snd.last_hit_limb = multimatches[1][4]
	snd.last_limb_dmg = 5.49
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>3</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Ruthlessly mocking (\w+)'s weakness, (\w+) lashe?s? out at \w+ (.+) with an overly powerful kick.$</string>
											<string>^\w+'?s? blow connects with brutal force\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>2nd hit</name>
										<script>if multimatches[1][4] == snd.target then
	snd.last_hit_limb = multimatches[1][5]
	snd.last_limb_dmg = 8
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>3</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Losing no speed nor time, (\w+) brings? \w+ leg around to smash into (\w+)'s (.+)\.$</string>
											<string>^\w+'?s? blow connects with brutal force\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>3rd hit</name>
										<script>if multimatches[1][4] == snd.target then
	snd.last_hit_limb = multimatches[1][5]
	snd.last_limb_dmg = 10
	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
end
disableTrigger("Heelrush")</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>3</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Spinning on \w+ other heel, (\w+) cruelly drives? \w+ foot into (\w+)'s (.+)\.$</string>
											<string>^\w+'?s? blow connects with brutal force\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</TriggerGroup>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Swagger / Contempt</name>
								<script>if not snd.swaggered then
  snd.swaggered = true
  tempTimer(5,[[snd.swaggered = false]])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You possess mighty swagger in your actions.</string>
									<string>Contempt and spite drive your body onwards.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Swagger Counter</name>
								<script>if snd.swagger == 0 then
 	snd.swagger = 1
elseif snd.swagger == 1 then
	snd.swagger = 2
elseif snd.swagger == 2 then
	snd.swagger = 3
end
      snd.swaggered = true
      tempTimer(5,[[snd.swaggered = false]])

cecho("&lt;red&gt;\nSwagger Total: &lt;white&gt;"..snd.swagger)
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You let your muscles droop for a moment, then force them taut with all your strength.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Too Swag</name>
								<script>snd.swagger = 3</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Your strength is too sapped to use your fists effectively.</string>
									<string>Your strength is far too sapped!</string>
									<string>^Your strength is too sapped to use your fists effectively.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Strength Returns</name>
								<script>if snd.swagger == 3 then
	snd.swagger = 2
elseif snd.swagger == 2 then
	snd.swagger = 1
elseif snd.swagger == 1 then
	snd.swagger = 0
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You feel your muscles bulge as your strength returns.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Generic limb stuff</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>broke</name>
								<script>if matches[2] == snd.target then
  if matches[2] == snd.target and matches[3]~= "head" and matches[3] ~= "torso" then
    snd.target_got(matches[3].." broken")
    snd.target_got(matches[3].." crippled")
  end
  snd.message("&lt;red&gt;"..matches[2].."'s &lt;white&gt;"..matches[3].." was broken!")
  
  snd.limb_status[matches[3]] = "broken"
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s? (.+) breaks from all the damage\.$</string>
									<string>^(\w+)'s? (.+) is shredded into meaty ribbons\.$</string>
									<string>^(\w+) grows sluggish, .+ (head) marred with trauma\.$</string>
									<string>^(\w+) shudders from the discomfort suffered to .+ (torso)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mangled</name>
								<script>
if matches[2] == snd.target then
  snd.message("&lt;red&gt;"..matches[2].."'s &lt;white&gt;"..matches[3].." was mangled!")
  if matches[2] == snd.target then
   snd.last_hit_limb = matches[3]
   snd.last_limb_dmg = 66.66-snd.limb_dmg[matches[3]]
   if snd.checkAff("armor_tattoo") then 
    snd.last_limb_dmg = snd.last_limb_dmg*2 --make sure this doesn't do wonky
   end
   snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
   snd.limb_status[matches[3]] = "mangled"
  end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s? (.+) has been (?:beaten|torn) into uselessness\.$</string>
									<string>^(\w+) groans loudly, clutching .+ mangled and bloodied (head)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mending</name>
								<script>if matches[2]:lower() == snd.target:lower() then
  snd.mendingApply(matches[4])
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end
if snd.class == "Zealot" and matches[2] == snd.target then
  cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) presses a mending poultice against (the )?\w+ (head|torso|right leg|left leg|right arm|left arm|skin|legs|arms), rubbing the poultice into (the )?\w+ flesh\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>restoration</name>
								<script>if matches[2] == snd.target then
  snd.target_last_used_salve = "restoration"
  snd.resto_limb = matches[4]
  snd.enemy_used_regenerate = false
  if restoration_timer then killTimer(restoration_timer) end
  snd.track_restoration(matches[2])
  snd.current_restoration_aff = ""
  local aff_restoration_timer = true
  local restoTime = 4.05
  if snd.checkAff("rot_body") then
    restoTime = restoTime + 4.3
  end
  if snd.resto_limb == "torso" then
    if snd.checkAff("collapsed_lung") then
      snd.current_restoration_aff = "collapsed_lung"
    elseif snd.checkAff("spinal_rip") then
      snd.current_restoration_aff = "spinal_rip"
    elseif snd.checkAff("burnt_skin") then
      snd.current_restoration_aff = "burnt_skin"
    elseif snd.checkAff("crushed_chest") and snd.limb_status["torso"] == "healed" then
      snd.target_cured("crushed_chest")
    elseif snd.checkAff("heatspear") and snd.limb_status["torso"] == "healed" then
      snd.current_restoration_aff = "heatspear"
    elseif snd.checkAff("deepwound") and snd.limb_status["torso"] == "healed" then
      snd.current_restoration_aff = "deepwound"
    else
      aff_restoration_timer = false
      restoration_timer = tempTimer(restoTime, [[if snd.enemy_used_regenerate == true then
                                              snd.took_limb_dmg(snd.resto_limb, -40)
                                            else 
                                              snd.took_limb_dmg(snd.resto_limb, -30)
                                            end
                                  ]])
    end
  elseif snd.resto_limb == "head" then
    if snd.checkAff("mauled_face") then
      snd.current_restoration_aff = "mauled_face"
    elseif snd.checkAff("smashed_throat") and snd.limb_status["head"] == "healed" then
      snd.current_restoration_aff = "smashed_throat"
    elseif snd.checkAff("voidgaze") and snd.limb_status["head"] == "healed" then
      snd.current_restoration_aff = "voidgaze"
    else
      aff_restoration_timer = false
      restoration_timer = tempTimer(restoTime, [[if snd.enemy_used_regenerate == true then
                                              snd.took_limb_dmg(snd.resto_limb, -40)
                                            else 
                                              snd.took_limb_dmg(snd.resto_limb, -30)
                                            end
                                  ]])
    end
--All limbs don't have special resto affs, so just remove the damage accrued.
  else
    aff_restoration_timer = false
      restoration_timer = tempTimer(restoTime, [[if snd.enemy_used_regenerate == true then
                                              snd.took_limb_dmg(snd.resto_limb, -40)
                                            else 
                                              snd.took_limb_dmg(snd.resto_limb, -30)
                                            end
                                  ]])
  end

  if aff_restoration_timer then restoration_timer = tempTimer(restoTime,[[snd.target_cured(snd.current_restoration_aff)]]) end

end

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) presses a restoration poultice against (the )?\w+ (head|torso|right leg|left leg|right arm|left arm), rubbing the poultice into (the )?\w+ flesh\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Prone w/leg breaks</name>
								<script>if matches[2] == snd.target then
   snd.target_got("fallen")
   snd.target_got("right_leg_crippled")
   snd.target_got("left_leg_crippled")
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+)'s legs give way as (the )?\w+ (.+) breaks.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>3P limb breaks from random sources</name>
								<script>if matches[2] == snd.target then
 snd.target_got(matches[3].."_crippled")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The crone withers (\w+)'s ([a-z ]+) into uselessness\.$</string>
									<string>^A .* golem reaches out and seizes (\w+)'s ([a-z ]+) in its powerful grip, pulling and twisting until the bone snaps\.$</string>
									<string>^\w+ reaches out to grab (\w+)'s ([a-z ]+), and it shrivels away\.$</string>
									<string>^You hear the sharp snap of bone as .* rends (\w+)'s ([a-z ]+)\.$</string>
									<string>^\w+ spins (the )?\w+ flail in a blazing arc towards (\w+)'s ([a-z ]+), crushing it\.$ </string>
									<string>^You find that (\w+)'s ([a-z ]+) is already shriveled\.$</string>
									<string>^You quickly adjust the momentum of your flail, smashing it into (\w+)'s ([a-z ]+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>bruising</name>
								<script>if matches[3] == snd.target then
  local bruise = matches[2]
  local limb = matches[4]

	if bruise == "light" then
 		snd.limb_bruising[limb] = 1
	elseif bruise == "moderate" then
 		snd.limb_bruising[limb] = 2
	elseif bruise == "critical" then
 		snd.limb_bruising[limb] = 3
	end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your strikes cause (\w+) bruising on (\w+)'s (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Regenerate</name>
								<script>if matches[2] == snd.target then
  snd.enemy_used_regenerate = true
 end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) becomes flushed as .+ heals with quickened haste.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Angel sear proc</name>
								<script>if snd.target == matches[2] then
  if snd.last_affs[1]:find("bruising") then
    local limb = snd.last_affs[1]:gsub("bruising ", "")
    snd.limb_bruising[limb] = snd.limb_bruising[limb]+1
  elseif snd.target_last_used_salve ~= "restoration" then
    snd.target_got(snd.last_affs[1])
  elseif snd.target_last_used_salve == "restoration" then
    if aff_restoration_timer then killTimer(aff_restoration_timer) end
    if restoration_timer then killTimer(restoration_timer) end
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A burst of colorful steam rises from (\w+)'s skin with sudden surprise\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Soothing</name>
								<script>if matches[2] == snd.target then
  snd.target_last_used_salve = "soothing"
  if snd.toggles.atkecho and snd.toggles.gags then
    deleteLine()
    snd.message(matches[2] .. ": soothing " .. matches[3])
  end
  if snd.checkAff("whiplash") and matches[4] == "head" then
    snd.target_cured("whiplash")
    table.insert(snd.last_affs, "whiplash")
  elseif snd.checkAff("backstrain") and matches[4] == "torso" then
    snd.target_cured("backstrain")
    table.insert(snd.last_affs, "backstrain")
  elseif snd.checkAff("muscle_spasms") and matches[4] == "torso" then
    snd.target_cured("muscle_spasms")
    table.insert(snd.last_affs, "muscle_spasms")
  elseif snd.checkAff("stiffness") then
    snd.target_cured("stiffness")
    table.insert(snd.last_affs, "stiffness")
  elseif snd.checkAff("sore_wrist") and matches[4]:find("arm") then
    snd.target_cured("sore_wrist")
    table.insert(snd.last_affs, "sore_wrist")
  elseif snd.checkAff("weak_grip") then
    snd.target_cured("weak_grip")
    table.insert(snd.last_affs, "weak_grip")
  elseif snd.checkAff("sore_ankle") and matches[4]:find("leg") then
    snd.target_cured("sore_ankle")
    table.insert(snd.last_affs, "sore_ankle")
  end
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) presses a soothing poultice against (the )?\w+ (.+), rubbing the poultice into (the )?\w+ flesh\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>dislocate proc</name>
								<script>if matches[2] == snd.target then
  snd.target_cured(matches[3].."_dislocated")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The prolonged dislocation of (\w+)'s (.+) has exacerbated the injury\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Teradrim/Tidesage</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Heartflutter</name>
								<script>if matches[2] == snd.target then
	if not snd.checkAff("heartflutter") then 
		snd.target_got("heartflutter")
	end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your Minor Green rune shimmers and (\w+) clutches (the )?\w+ chest.$</string>
									<string>^(\w+) gasps and staggers as .* golem punches (the )?\w+ hard in the chest.$</string>
									<string>^Acting swiftly and without emotion, .+ delivers a massive strike to (\w+)'s chest, trammeling (the )?\w+ heartbeat.$</string>
									<string>^The cephalopod shimmers as if alive, and (\w+) stumbles, clutching (the )?\w+ chest.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Dislocate enemy limb</name>
								<script>if matches[2] == snd.target then
	snd.target_got(matches[3].." dislocated")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Grabbing hold of (\w+)'s (.*), .* golem casually wrenches it out of its socket.$</string>
									<string>^Offering (\w+) no mercy, .* attempts to deconstruct (?:the )?\w+ (.*), twisting it painfully in its socket.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Barrage hit confirmation</name>
								<script>if matches[2] == snd.target then
 snd.barrageCounter = snd.barrageCounter + 1
 snd.last_hit_limb = matches[3]
 snd.last_limb_dmg = snd.calcTeradrimLimbDamage("barrage"..snd.barrageCounter)
 snd.took_limb_dmg(matches[3], snd.last_limb_dmg)
 snd.onHit2({"Parry", "Rebounding", "Dodge"})
end
enableTrigger("Barrage prompt turn off")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ strikes? out at (\w+)'s (.+) as \w+ barrage continues.$</string>
									<string>^\w+ bombards? (\w+)\'s (.+) as \w+ relentless broadside continues the assault.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Shockwave limb breaks</name>
								<script>snd.target_got(matches[2].."_crippled")
enableTrigger("Shockwave Prompt Turnoff")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ (.*) snaps under the impact.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Shockwave Prompt Turnoff</name>
								<script>disableTrigger("Shockwave limb breaks")
disableTrigger("Shockwave Prompt Turnoff")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string></string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>7</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Barrage prompt turn off</name>
								<script>disableTrigger("Barrage hit confirmation")
disableTrigger("Barrage prompt turn off")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string></string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>7</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>squeeze</name>
								<script>if snd.target == matches[3] and matches[2] ~= "torso" then
  local limb = string.gsub(matches[2], " ", "_")
  snd.target_got(limb.."_crippled")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>uses Synthesis Squeeze \((.+)\) on (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Green Major Rune (Cephalopod)</name>
								<script>if matches[2] == snd.target then
	if not snd.checkAff("fallen") then 
		snd.target_got("fallen")
	end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your daubed cephalopod twitches, ancient magic pitching (\w+) off (the )?\w+ feet.$</string>
									<string>^Your Green Major rune flares, casting (\w+) to the ground.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Undertow (levitation) done</name>
								<script>if matches[2] == snd.target then
  snd.lev_gone = false
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) has freed (.*) from the grip of the rolling undertow\.$</string>
									<string>^(\w+) has freed (.*) from the trappings of quicksand\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Teradrim runemarks</name>
								<script>snd.runemarkMinor = matches[2]
snd.runemarkMajor = matches[3]</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You have a (\w+) minor rune painted upon a (\w+) major rune.$</string>
									<string>^You quickly inscribe a (\w+) rune upon a (\w+) rune on yourself with ink.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Tidesage daubs</name>
								<script>local daubMap =
  {tentacle = "red", wave = "blue", mouth = "yellow", cephalopod = "green", fin = "purple", eye = "gold"}
snd.runemarkMinor = daubMap[matches.minor]
snd.runemarkMajor = daubMap[matches.major]</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You paint yourself with the greater mark of the (?&lt;major&gt;\w+) then daub the lesser mark of the (?&lt;minor&gt;\w+) upon it\.$</string>
									<string>^You have daubed a (?&lt;minor&gt;\w+) lesser mark onto a (?&lt;major&gt;\w+) greater mark\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Lycan</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>flurry</name>
								<script>if matches[2] == snd.target then
 hitting = true
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>99</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ uses? Ferality Flurry on (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>flurry hit</name>
									<script>if hitting then
 snd.last_hit_limb = matches[4]
 snd.last_limb_dmg = 9.99
 snd.took_limb_dmg(matches[4], snd.last_limb_dmg)
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>2</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^\w+ (powerful jaws|deadly claws) dig deep, lethal wounds into (the )?\w+ (.+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
									<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
										<name>undo flurry</name>
										<script>echo("works")
if hitting then
 snd.took_limb_dmg(snd.last_hit_limb, -snd.last_limb_dmg)
end</script>
										<triggerType>0</triggerType>
										<conditonLineDelta>0</conditonLineDelta>
										<mStayOpen>0</mStayOpen>
										<mCommand></mCommand>
										<packageName></packageName>
										<mFgColor>#ff0000</mFgColor>
										<mBgColor>#ffff00</mBgColor>
										<mSoundFile></mSoundFile>
										<colorTriggerFgColor>#000000</colorTriggerFgColor>
										<colorTriggerBgColor>#000000</colorTriggerBgColor>
										<regexCodeList>
											<string>^Stepping quickly out of the way, (\w+) dodges the attack\.$</string>
											<string>^(\w+) parries the attack on (.*) with a deft maneuver\.$</string>
											<string>^(\w+) guards the attack on (.*)\.$</string>
											<string>^A reflection of (\w+) blinks out of existence\.$</string>
											<string>^With a free hand, (\w+) fends off the attack on (the )?\w+ (.+)\.$</string>
											<string>^(\w+) steps into the attack on (.*), grabs .+ arm and twists it\.$</string>
										</regexCodeList>
										<regexCodePropertyList>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
											<integer>1</integer>
										</regexCodePropertyList>
									</Trigger>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>flurry end</name>
									<script>setTriggerStayOpen("flurry", 0)
hitting = false</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(Left Hand Balance|Right Hand Balance) Used: (.*) seconds$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>not crippled</name>
								<script>snd.target_cured(matches[2].."_crippled")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^There is no point in trying to mangle the (.+) as it is unbroken\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>not broken</name>
								<script>snd.limb_status[matches[2]] = "healed"</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The (.+) is not damaged enough to destroy it\.$</string>
									<string>^There is no point in trying to mangle the (.+) as it is unbroken\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Throat Rip</name>
								<script>if matches[2] == snd.target then
 snd.target_cured("writhe_necklock")
 snd.jawlocked = false
 snd.target_got("throatrip")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^With ruthless glee, you dig your fangs into (\w+)('s|') throat, tearing it to bloody ribbons.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Spleen Rip</name>
								<script>if matches[2] == snd.target then
 snd.target_cured("writhe_armpitlock")
 snd.jawlocked = false
 snd.target_got("spleenrip")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^With (\w+) at your mercy, you brutally slash open (.+) torso to gouge (.+) spleen out with your claws\.$</string>
									<string>^You release your pin and instead thrust your jaws under (\w+)'s ribcage, biting into the sweet meat of \w+ spleen.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Groin Rip</name>
								<script>if matches[2] == snd.target then
 snd.target_cured("writhe_thighlock")
 snd.jawlocked = false
 snd.target_got("groinrip")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Ruthlessly pinning (\w+) down, you tear at the tender, exposed muscles of (the )?\w+ groin, ripping out meaty chunks of flesh\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>3p armpitlock</name>
								<script>if matches[2] == snd.target then
 snd.target_got("writhe_armpitlock")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Smelling weakness, \w+ snaps at the crook of (\w+)('s|') arm with (the )?\w+ mighty jaws, pinning \w to the ground.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>3p necklock</name>
								<script>if matches[2] == snd.target then
 snd.target_got("writhe_necklock")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ gives a short cry of victory and pins (\w+) to the ground by (the )?\w+ neck with(the )?\w+ powerful jaws.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>3p thighlock</name>
								<script>if matches[2] == snd.target then
 snd.target_got("writhe_thighlock")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Seeing (the )?\w+ prey helpless, (the )?\w+ grabs the inner thigh of (\w+) within (the )?\w+ mighty jaws, pinning (the )?\w+ to the ground\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Groinrip</name>
								<script>if matches[2] == snd.target then
 snd.target_cured("writhe_thighlock")
 snd.jawlocked = false
 snd.target_got("groinrip")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Ruthlessly pinning (\w+) down, you tear at the tender, exposed muscles of (the )?\w+ groin, ripping out meaty chunks of flesh\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Lock gone</name>
								<script>if matches[2] == "thigh" then
 	  snd.target_cured("writhe_thighlock")
  elseif matches[2] == "armpit" then
    snd.target_cured("writhe_armpitlock")
  elseif matches[2] == "neck" then
    snd.target_cured("writhe_necklock")
  end
 	snd.jawlocked = false</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You must have your teeth locked on that person's (.+) to be able to rip into their .+\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Failed skullcrush</name>
								<script>if snd.proned() and table.contains(snd.target_has, "head_crippled") then
  snd.target_cured("head_crippled")
elseif snd.proned() and not table.contains(snd.target_has, "head_crippled") then
  snd.target_cured("fallen")
else
  snd.target_cured("head_crippled")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You cannot crush the skull of a foe unless they have fallen and are suffering from head trauma\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Jawlock TICK Confirm</name>
								<script>local RipCheck = multimatches[2][2]

if multimatches[2][3] == snd.target then
  if RipCheck == "writhe_necklock" then
    snd.target_got("writhe_necklock")
    snd.jawlocked = true
  elseif RipCheck == "writhe_armpitlock" then
    snd.target_got("writhe_armpitlock")
    snd.jawlocked = true
  elseif RipCheck == "writhe_thighlock" then
    snd.target_got("writhe_thighlock")
    snd.jawlocked = true
  end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#ff0000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>FG3BG2</string>
									<string>^You use Ferality (Thighlock|Armpitlock|Necklock) \(tick\) on (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>6</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>hit w/trauma</name>
							<script>if matches[2] == snd.target then 
  if snd.toggles.atkecho then
   deleteLine()
   snd.message("Empower: trauma.")
  end

 snd.last_hit_limb = matches[4]
 snd.took_limb_dmg(matches[4], snd.limb_dmg_done)
 
 snd.templar_last_limb = snd.last_hit_limb
 
elseif snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^As .+ strikes (\w+)('s|) (.+), it sends a pulse of destructive power into it\.$</string>
								<string>^Shadow takes root as .+ lands, threading through (\w+)('s|) (.+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Parrying</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>targeting</name>
							<script>snd.targeting[matches[3]] = matches[2]</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You will now target the ([a-z ]+)of your opponent with your ([a-z]+) arm\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>not targeting</name>
							<script>snd.targeting[matches[2]] = "none"</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You will now target attacks with your (right|left) arm wherever you see an opening\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Parry tracking</name>
							<script>if matches[2] == snd.target then
  snd.parried_limb = matches[3]
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) parries the attack on \w+ (.+) with a deft maneuver\.$</string>
								<string>^(\w+) guards the attack on \w+ (.+)\.$</string>
								<string>^(\w+) steps into the attack on \w+ (.+), grabs your arm and twists it\.$</string>
								<string>^With a free hand, (\w+) fends off the attack on (?:the \w+'s|\w+) (.+)\.$</string>
								<string>^With a predatory growl, (\w+) opposes the attack on \w+ (.+), denying it purchase\.$</string>
								<string>^(\w+) steps into the attack on \w+ (.+), grabs your arm, and shakes you violently\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Third Person Tracking</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>batter call</name>
						<script>if string.title(matches[4]) == snd.target then
 snd.maybe_affs = {}
 for aff in string.gmatch(matches[5], '([^, ]+)') do
  table.insert(snd.maybe_affs, aff)
 end
end
for aff in pairs(snd.maybe_affs) do
 snd.target_got(snd.maybe_affs[aff])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>20</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\(Web\)\: (\w+) says, \"(Battering|Battered) (\w+): (.*)\.\"$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>undo</name>
							<script>if matches[2] == snd.target then
 snd.target_cured(matches[3])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You discern that (\w+) has resisted the (\w+) affliction\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>end</name>
							<script>setTriggerStayOpen("batter call", 0)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return isPrompt()</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Disperse</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Teammate writhes</name>
							<script>if matches[2] ~= "you" then
  if (snd.disperse == "callers" and table.contains(snd.callers, matches[2])) then
    snd.send("qeb disperse " .. matches[2])
  elseif sndNDB_Exists(gmcp.Char.Status.name) or not sndNDB_Exists(matches[2]) then 
    -- Eliminate cases where one or the other isn't in the name database
  elseif (snd.disperse == "all" and sndNDB.players[gmcp.Char.Status.name].city == sndNDB.players[matches[2]].city) then
    snd.send("qeb disperse " .. matches[2])
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\w+ uses Relic (?:Webspray|Entangle) on (\w+)\.$</string>
								<string>^\w+ uses Tarot Hangedman \(entangle\) on (\w+)\.$</string>
								<string>^\w+ uses \w+ Transfix on (\w+)\.$</string>
								<string>^\w+ uses \w+ Impale on (\w+)\.$</string>
								<string>^\w+ uses Ferality \w+lock on (\w+)\.$</string>
								<string>^\w+ uses Assassination Bind on (\w+)\.$</string>
								<string>^\w+ uses Savagery Skewer on (\w+)\.$</string>
								<string>^\w+ uses Mentis Mesmerize on (\w+)\.$</string>
								<string>^\w+ uses? Primality Strangle on (\w+)\.$</string>
								<string>^\w+ uses? Battlefury Lunge \(impale\) on (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Colors and Echoes</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ylem</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>extraction</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff5500</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Ethereal motes of energy flood into your outstretched grasp as the extraction continues.</string>
								<string>The air hums with energy as you prepare for the extraction.</string>
								<string>You feel the strain upon your body lessen as the preparation for extraction comes to a close, motes of energy swirling around you.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>collapse</name>
							<script>if snd.toggles.gags then
  deleteLine()
end
snd.message("\n&lt;brown&gt;Foci collapsed!\nFoci collapsed!\nFoci collapsed!")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff5500</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Latent energies flare around the focus, crackling ominously with power before winking out with a hushed whisper. Motes of pale light drift upwards from the dying leyline's focus, smoldering like a dying ember into the firmament as the focal point collapses into the ether.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>eld formed</name>
							<script>snd.send("qeb refining shackle eld")
snd.eld = snd.eld+1</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A swelling of energy originates from deep within the focal point, congealing into</string>
								<string>A swelling of energy originates from deep within the sinkhole, congealing into</string>
								<string>^A tremor runs through the leylines, and in a crackle of searing white lightning, .+ rips free\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
								<integer>2</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>shackled</name>
							<script>snd.eld = snd.eld-1
if snd.eld &gt; 0 then
 snd.send("qeb refining shackle eld")
end  
if snd.toggles.gags then
    deleteLine()
    snd.attack_hit("shackled", "eld")
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You draw upon the power of the leylines and divert their energy to shackle</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>no eld</name>
							<script>snd.eld = 0</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You see no such eld here.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>tap minor</name>
							<script>if snd.toggles.gags then
    deleteLine()
    snd.attack_hit("tapped", "minor")
end

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You tap into the leylines, reaching outward to the minor focus for extraction. Motes of energy flicker upwards to you.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>minor tapped</name>
							<script>if snd.toggles.gags then
    deleteLine()
    snd.message("Minor tapped!")
end


</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The very air wavers around you with a sudden fluctuation of power from the leylines and a low hum begins to resonate from the depths of (.*)\. A minor focal point is being tapped for its energies\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lesser</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#aa0000</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Streams of wavering light emit erratically from an unstable convergence of energy here.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Classes</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Carnifex/Warden</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Soul Harvesting</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>consumption start</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("You: start consumption.", "atk")
end
swarms = 0</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>Frowning at the soulstone in your palm, you concentrate on its basic soul-trapping properties, feeding it with your own soul energy and expanding it to include your immediate area. As the stone activates, it glows an eerie red, floating from your palm to above your head, covering everything in the vicinity with its repulsive light.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>consumption tick</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("You: summon souls.", "atk")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>With cold ruthlessness, you slice off a sliver of your own soul, feeding it to the voracious soulstone spinning above you. It instantly pulses with energy, and the sickening stench of death permeates the area as it lures nearby spirits into its soul-trapping influence.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>consumption swarm</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("Summoned a &lt;green&gt;swarm&lt;white&gt;!")
end
swarms = swarms + 1
if swarms &gt;= 3 then
  snd.send("qeb soul cull")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^A dispersed multitude of souls drift in from the (\w+) and coalesce to a single churning mass\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>consumption wraith</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("Summoned a &lt;red&gt;wraith&lt;white&gt;!")
end
snd.send("qeb soul strike wraith")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^A tormented wraith drifts in from the (\w+), bringing with it an aura of death and stagnant chill\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>consumption stop</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("You: soul summon", "atk")
end
snd.def_take("soul_body")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>A swirling mass of void-black darkness gathers in the space before you. Reaching forth, you casually withdraw your soulstone, returning it to your possession.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>consumption end</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("You: end consumption.", "atk")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>The suffocating atmosphere lightens noticeably as the soulstone's glow dims and finally dies out.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>culled</name>
									<script>swarms = 0</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You channel pure soul energy into an ethereal soul cleaver until it is crackling with ominous, red sparks. Barely able to contain your desire for more souls to harvest, you swing an ethereal soul cleaver in an arc, releasing its culling energy in a wave around you.</string>
										<string>You use Deathlore Cull</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>harvested</name>
									<script>if snd.toggles.gags then 
deleteLine()
snd.message("You: harvest soul")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Raising your soulstone above .+, you snarl a guttural chant that causes a smoke-grey glyph to appear within the stone. Moments later, an ethereal stream of silver-white motes flows up from .+ and into the soulstone\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>3p harvest</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message(multimatches[1][2] .. " harvested!")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>2</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) uses Deathlore Harvest\.$</string>
										<string>1</string>
										<string>.+</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>5</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Ancestry Trial</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>trial start</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("You started an Ancestry Trial.", "atk")
end
swarms = 0</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You hold a hand over your ancestral mark, beseeching the ancestors to recognize you in trial. You suffuse the energy that drains from the mark with your own lifeforce, the two energies swirling together into a twitching ring that forms itself around you.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>trial tick</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("New challengers have arrived!", "atk")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>Your lifeforce slowly trickles away, the glowing arena ring absorbing the energy as anotherancestral warrior attempts to manifest.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>trial warrior</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("Summoned a &lt;green&gt;warrior&lt;white&gt;!")
end
swarms = swarms + 1
if swarms &gt;= 3 then
  snd.send("qeb ancest lunge")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Ready for combat, an ethereal warrior drifts in from the (\w+), spectral weapon held forth\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>trial champion</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("Summoned a &lt;red&gt;champion&lt;white&gt;!")
end
snd.send("qeb ancest duel champion")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^An enormous, ethereal champion drifts in from the (\w+) to find a challenge\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>trial stop</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("One more?", "atk")
end
snd.def_take("invocation")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>Your ancestral mark becomes visible with a soft glow as tendrils of energy weave their way acrossyour body towards it, returning to their source of power again.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>trial end</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("You ended the Trial!", "atk")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>The ethereal arena disappears as the trial comes to an end.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>banished</name>
									<script>swarms = 0</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You drive the shaft of (.*) into the ground with a resounding slam, a shockwave of energy rippling out to banish your ancestral opponents.$</string>
										<string>You use Ancestry Lunge.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>harvested</name>
									<script>if snd.toggles.gags then
  deleteLine()
  snd.message("You gained more renown with the ancestors!")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^Your mark pulses with the ancestor's approval as they witness your victory over .+\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>simul target</name>
								<script>snd.simul_target = matches[2]</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A .+ simulacrum will now target the (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Templar/Rev</name>
							<script>-- removed some items in here. Feel free to add them back of your own accord.</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Terramancer</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Terramancy</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Desiccation</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>sandstorm start</name>
									<script>if snd.toggles.atkecho and snd.toggles.gags then
  deleteLine()
  snd.message(matches[2] .. " used: sandstorm!")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^With a flick of (the )?\w+ wrist, (\w+) conjures a fine layer of magic sand that settles over everything insight\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>sandstorm</name>
									<script>if snd.toggles.gags then
  deleteLine()
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^The fury of the sandstorm lessens as it fuels .+ attack\.$</string>
										<string>^The force of .+ attack kicks up a cloud of dust and sand into the raging storm, increasing its size to massive\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>slice</name>
									<script>if snd.toggles.atkecho and snd.toggles.gags then
  deleteLine()
  snd.got_hit("slice " .. matches[3], matches[2])
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^With a forceful sweep of the hand, (\w+) sends a wave of sand to shred your (.+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Luminary</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>battle</name>
								<script>if snd.toggles.atkecho and snd.toggles.gags then
 deleteLine()
 snd.got_hit("battle "..multimatches[1][3], multimatches[1][2])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) uses Spirituality Battle \((.+)\) on you\.$</string>
									<string>1</string>
									<string>^Your mind writhes under the torment of a guardian angel, afflicting you with (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>5</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Ascendril</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>transfix fail</name>
								<script>if matches[2] == snd.target then
 snd.target_got("sight")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You weave fire and water together in an attempt to transfix (\w+), but succeed only in curing (the )?\w+ blindness\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>transfix</name>
								<script>if matches[2] == snd.target then
 snd.target_got("writhe_transfix")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^With blinding speed, you weave fire and water together in an intricate pattern that transfixes (\w+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Telepathy</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mindnet in/out</name>
								<script>snd.alertnessHit(matches[3], matches[2], "mindnet")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) has (entered|left) the area\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mindnet on</name>
								<script>if snd.toggles.affcalling then
 snd.send("wt [MINDNET] is now ON!")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You cast an invisible mind net out into the distance, allowing it to settle about the surrounding land.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mindnet off</name>
								<script>if snd.toggles.affcalling then
 snd.send("wt [MINDNET] is now OFF!")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You cease concentration and your mind net vanishes.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>fullsense</name>
								<script>snd.scented = {}</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>200</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You use Telepathy Fullsense.</string>
									<string>1</string>
									<string>You seek out all mental presences within your reach:</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>5</integer>
									<integer>3</integer>
								</regexCodePropertyList>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>fullsense end</name>
									<script>setTriggerStayOpen("fullsense", 0)
if snd.toggles.calling then
 local string = "wt Fullsense!"..snd.sep
 for i in pairs(snd.scented) do
  x = mmp.searchRoomExact(i)
  for y in pairs(x) do
   z = y
  end
  list = ""
  for j in pairs(snd.scented[i]) do
   list = list.." "..snd.scented[i][j]
  end
	if i ~= snd.my.room_name then
   string = string.."wt "..i.." ("..z.."): "..list..snd.sep
	end
 end
 snd.send(string)
 snd.scented = {}
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>return isPrompt()</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>4</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>scent line</name>
									<script>if snd.scented[matches[3]] == nil then
 snd.scented[matches[3]] = {}
end
table.insert(snd.scented[matches[3]], matches[2])</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You sense (\w+) at (.+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mind glance</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You glance through your telepathic bond and out of (\w+)'s? eyes\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Syssin</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Subterfuge</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>darkflood</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>You unfurl your palm and pure essence of darkness pours forth to drown out the light.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>already dark</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>The room is already surrounded in darkness.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>darkness faded</name>
									<script></script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>The shadows that swath the area in darkness creep back into themselves.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>3</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Hypnosis</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>hypnotized</name>
									<script>snd.hypno = "open"</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You fix (\w+) with an entrancing stare, and smile in satisfaction as you realise that (the )?\w+ mind is yours\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>sealed</name>
									<script>snd.hypno = "ready"</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You draw (\w+) out of (the )?\w+ hypnotic daze, your suggestions indelibly printed on (the )?\w+ mind\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>snapped</name>
									<script>snd.hypno = "running"
snd.hyp = 0
snd.last_hypno = 0</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You snap your fingers in front of (.+)\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>suggested</name>
									<script>snd.hypno = "open"
snd.last_hypno = snd.hyp</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^You issue the suggestion, concealing it deep within (\w+)'s? mind\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>not hypnotized</name>
									<script>if matches[2] == snd.target then
 snd.hypno = "none"
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) is not under a hypnotic spell\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>already hypnotized</name>
									<script>snd.hypno = "running"</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) is already under the effects of hypnosis\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>not sealed</name>
									<script>snd.hypno = "open"</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) is already open to suggestions, Syssin\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>effect</name>
									<script>if matches[2] == snd.target then
 snd.hypno = "running"
 snd.hyp = 0
 snd.last_hypno = 0
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(\w+) appears confused for a moment\.$</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</TriggerGroup>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Instakills</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>cleave 1</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) begins building up momentum with .+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>cleave 2</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) swings the .+ about (the )?\w+ head, gathering momentum as (the )?\w+ bears down on you\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>reave 1</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^A viscous blue sheen envelops .+ as (\w+) draws it back, the motion accompanied by an odd tugging sensation from deep within that threatens to steal your breath with it\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>reave 2</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) swings .+ around in a wide arc toward you, the deadly weapon whistling through the air as it carves a path straight for your core\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>chasm</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) stomps a foot mightily into the ground and a quickly-moving spiderweb of cracks spreads outwards from the impact towards you\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>judge 1</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) raises .+ over you to pass judgement on your sins, and it begins to crackle with righteous fire\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>judge 2</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+)('s|') mace begins to make a high-pitched keening sound as it rapidly spins over (the )?\w+ head\. You have only moments left to escape before you are judged!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>behead 1</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) raises an? .+ over (the )?\w+ head and begins to swing it in a wide circle, gaining speed as (the )?\w+ goes\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>behead 2</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) begins to bear down on you with (the )?\w+ .+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>death tarot</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) flings a tarot card at you and upon impact, it disappears\. And ominous silence overtakes your surroundings\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>reclamation 1</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Perspiration breaks out on (\w+)'s brow and (the )?\w+ slowly raises (the )?\w+ hands upward\. Responding to the call, the tips of fresh plant life break through the ground and begin to rise upward at (the )?\w+ behest, thickening and growing into sinuous lashes that firmly ensnare you\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>reclamation 2</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\w+ continues to lend (the )?\w+ reserves to their hungry growth, the vines corkscrew around your limbs, digging in painfully as you begin to feel your extremities go numb\. The slender tips of the creeping plants pierce through your skin like needles at points along the major veins in the wrists, neck and legs as they continue their parasitic spread throughout your body\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>noose</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You feel uneasy as you hear the sound of something above you.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Mobility</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>fled</name>
							<script>if matches[2] == snd.target then
  cecho("\n\n&lt;red&gt;TARGET FLED &lt;white&gt;"..snd.parseDir(matches[3]).."&lt;red&gt;!")
  cecho("\n&lt;red&gt;TARGET FLED &lt;white&gt;"..snd.parseDir(matches[3]).."&lt;red&gt;!")
  cecho("\n&lt;red&gt;TARGET FLED &lt;white&gt;"..snd.parseDir(matches[3]).."&lt;red&gt;!")
	if snd.toggles.calling then
		snd.send("wt " ..snd.target.. " has fled to the "..snd.parseDir(matches[3]))
	end
  snd.theytumbling = false
  snd.theyran = true
  snd.theyrandir =	snd.parseDir(matches[3])
end

if gmcp.Char.Status.class == "Shapeshifter" and snd.theyran then
    local rmSwap = {
        north = "south",
        northwest = "southeast",
        northeast = "southwest",
        west = "east",
        east = "west",
        southwest = "northeast",
        southeast = "northwest",
        south = "north",
        ["in"] = "out",
        out = "in",
        up = "down",
        down = "up",
    }
	snd.neckdragdir = rmSwap
end

tempTimer(2,[[snd.theyran = false]])
tempTimer(2,[[snd.theyrandir = "none"]])
tempTimer(2,[[snd.neckdragdir = "none"]])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) tumbles out to the (.+)\.$</string>
								<string>^(\w+) suddenly leaps away to the (.+) atop (the )?\w+ mount\.$</string>
								<string>^(\w+) leaves to the (\w+).$</string>
								<string>^(\w+) leaves to the (\w+)\, riding .*.$</string>
								<string>^(\w+) stalks out to the (\w+), .*.$</string>
								<string>^(\w+) disappears over the top of a pile of rubble to the (\w+).$</string>
								<string>^(\w+) begins to scale over the icewall to the (the )?\w+.$</string>
								<string>^(\w+) leaps majestically to the (\w+).$</string>
								<string>^Light begins to return as (\w+) leaves to the (\w+).$</string>
								<string>^Giving (his|her|their) *-furred coat a vigorous shake, (\w+) departs to the (\w+).$</string>
								<string>^Your enhanced senses inform you that (\w+) has appeared to the (\w+).$</string>
								<string>^(\w+) backflips to the (\w+).$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>tumble start</name>
							<script>if matches[2] == snd.target then
  cecho("\n\n&lt;red&gt;TARGET TUMBLING &lt;white&gt;"..snd.parseDir(matches[3]).."&lt;red&gt;!")
  cecho("\n&lt;red&gt;TARGET TUMBLING &lt;white&gt;"..snd.parseDir(matches[3]).."&lt;red&gt;!")
  cecho("\n&lt;red&gt;TARGET TUMBLING &lt;white&gt;"..snd.parseDir(matches[3]).."&lt;red&gt;!")

	tempTimer(3.5,[[snd.theytumbling = false]])
	snd.theytumbling = true
  
  snd.target_got("fallen")
  
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) begins to tumble towards the (.+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>alertness</name>
							<script>snd.alertnessHit(matches[3], matches[2], "alertness")


if matches[2] == snd.target then
	snd.theyran = true
	snd.theyrandir =	snd.parseDir(matches[3])
	tempTimer(2,[[snd.theyran = false]])
	tempTimer(2,[[snd.theyrandir = "none"]])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your enhanced senses inform you that (\w+) has appeared to the (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>alertness here</name>
							<script>snd.alertnessHit("here", matches[2], "alertness")
if snd.target == matches[2] then
	snd.target_gone = false
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your enhanced senses inform you that (\w+) has entered your current location\.$</string>
								<string>^Your angel informs you that (\w+) is in this room\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>universe tarot</name>
							<script>if snd.faction == "spirit" then
 snd.send("qeb close map")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A shimmering, translucent image rises up before you, its glittering surface displaying the verdant grasslands, soaring mountains, sprawling settlements and deep blue seas of the Aetolia mainland.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>angel near</name>
							<script>snd.alertnessHit("adjacent", matches[2], "alertness")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your angel informs you that (\w+) is close by\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>forced movement</name>
							<script>snd.send("qeb stand"..snd.sep..snd.swapDir(matches[2]))</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your body jerks violently, leading you to the (\w+)\.$</string>
								<string>^You are dragged by the jaws around your neck to the (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Movement</name>
							<script>--- contains lots of lines that may be useful to you</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Naturalism Displacement - Shaman</name>
								<script>if matches[2] == snd.target then

end

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^The earth parts and forcibly ejects (\w+), the roots that bore (the )?\w+ there relinquishing their grip and returning from whence they came, leaving (the )?\w+ where your companion once stood.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Leaving enemy</name>
								<script>if matches[2] == snd.target then
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) leaves to the (\w+).$</string>
									<string>^(\w+) leaves to the (\w+)\, riding .*.$</string>
									<string>^(\w+) stalks out to the (\w+), .*.$</string>
									<string>^Leaving a thin trail of fire in .* wake, (\w+) heads towards the (\w+).$</string>
									<string>^(\w+) disappears over the top of a pile of rubble to the (\w+).$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Enemy lightform</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Closing (the )?\w+ eyes briefly in concentration, (\w+) begins to break apart into tiny motes of light until no trace of (the )?\w+ can be seen where (the )?\w+ once stood.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Reform lightform enemy</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Your surroundings become blindingly bright as (\w+) becomes corporeal once more.$ </string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Trees</name>
								<script>if matches[2] == snd.target then
	snd.send("qeb touch tentacle "..matches[2])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^Grabbing onto nearby branches, (\w+) quickly climbs up into the treetops.$</string>
									<string>^You notice (\w+) swing nimbly into view in the trees overhead.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Flying away</name>
								<script>if matches[2] == snd.target then
	snd.send("qeb touch tentacle "..matches[2])
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) begins to flap (the )?\w+ wings powerfully, and rises quickly up into the firmament.$</string>
									<string>^(\w+) flies up into the skies, carried by (the )?\w+ mount's beating wings.$</string>
									<string>^(\w+) is quickly carried up into the skies.$</string>
									<string>^(\w+) flits into view directly overhead.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Burrow</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) burrows into the ground and disappears from sight.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Syssin Scale</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) begins to scale over the icewall to the (the )?\w+.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Target tentacled</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ touches a tattoo and suddenly the ground splits open as a nightmarish tentacle shoots skywards, dragging (\w+) back to earth.$</string>
									<string>^You touch the tentacle tattoo and suddenly the ground splits open as a nightmarish tentacle shoots skywards, dragging (\w+) back to earth.$</string>
									<string>^(\w+) tumbles to the ground helplessly.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Leap run</name>
								<script>if matches[2] == snd.target then
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) leaps majestically to the (\w+).$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Mind wrench  to location</name>
								<script>if matches[2] == snd.target then	
	if snd.toggles.calling then
		snd.send("wt " ..snd.target.. " has been wrenched.")
	end
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) drifts into view, carried by some unseen force.$</string>
									<string>^You pick up (\w+) and wrench (the )?\w+ across the land, sacrificing your telepathic bond with (the )?\w+ in the process.$</string>
									<string>^(\w+) is suddenly thrown off (his|her) feet, spinning in mid-air before vanishing from sight.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Person Lured</name>
								<script>if matches[2] == snd.target then
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ eyes cloudy and limbs stiff, (the )?\w+ strides in from the (the )?\w+.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>You got banished</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) uses Kaido Banish on you.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Pilg out</name>
								<script>if matches[2] == snd.target then
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You turn to see (\w+) shimmer away.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Purgatory</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\w+ uses Purification Purgatory.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Name finder</name>
								<script>snd.send("wt I'm at ("..gmcp.Room.Info.num..") '"..gmcp.Room.Info.name.."' in "..gmcp.Room.Info.area)</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^\(Web\): (the )?\w+ says, "Where you at (\w+) (.|\?)"</string>
									<string>^\(Web\): (the )?\w+ says, "(\w+) where are you(.|\?)"$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sand shifted to us</name>
								<script>if matches[2] == snd.target then
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\w+) is suddenly spat out of the ground.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fracture</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You sense that (the )?\w+ has entered the Iernian Fracture.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Pulled Away (Me)</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You feel a moment of disorientation as you are magically summoned.$</string>
									<string>^Your surroundings spin and vanish into the distance as you are wrenched from your location and flung far across the land.$</string>
									<string>^You are enveloped by a blazing sphere of light and are carried helplessly away.$</string>
									<string>You feel yourself compelled to leave the room, beckoned by the allure of a guardian angel.</string>
									<string>^Roots snake upward and abruptly tangle about your ankles, yanking you unceremoniously down into the waiting earth. For a few moments you struggle for breath, soil invading your nostrils, before you are deposited to the surface once more in whereabouts unknown.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Too close</name>
							<script>if matches[2] == snd.target then
  snd.theyran = false
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) is too close to you!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Ran Away</name>
							<script>if matches[2] == snd.target then
  snd.theyran = false
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) fades away into the shadows, and is gone.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Alerts</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>web invite</name>
							<script>if snd.toggles.affcalling then
  if (sndNDB.players[gmcp.Char.Status.name].city == sndNDB.players[matches[2]].city) then
   snd.send("web accept")
	end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) has invited you to join a web\. WEB ACCEPT to accept the invitation\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>web call</name>
							<script>if matches[2] == gmcp.Char.Status.name and snd.toggles.calling then
 snd.send("wt Target: "..snd.target)
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\(Web\): (\w+) says?, \"Target: (\w+)\.\"$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>scent</name>
							<script>snd.scented = {}</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>99</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You use (the )?\w+ Scent\.$</string>
								<string>1</string>
								<string>You tilt your head back and deeply inhale any scents from the air.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>5</integer>
								<integer>3</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>scent end</name>
								<script>setTriggerStayOpen("scent", 0)

if snd.toggles.calling then
  local string = ""
	
  for i in pairs(snd.scented) do
    x = mmp.searchRoomExact(i)
    for y in pairs(x) do
      z = y
    end
    list = ""
    for j in pairs(snd.scented[i]) do
      list = list .. " " .. snd.scented[i][j]
    end
    if i ~= snd.my.room_name then
      string = "wt " .. i .. " (" .. z .. "): " .. list .. snd.sep
    end
  end
	
  if string ~= "" then snd.send(string) end
  snd.scented = {}
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>return isPrompt()</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>4</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>scent line</name>
								<script>if snd.scented[matches[3]] == nil then
 snd.scented[matches[3]] = {}
end
table.insert(snd.scented[matches[3]], matches[2])</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You pick up the faint scent of (\w+) at (.+)\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>beckon</name>
							<script>if (sndNDB.players[gmcp.Char.Status.name].city == sndNDB.players[matches[2]].city) then
  snd.send("follow "..matches[2])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) beckons you to (the )?\w+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>follow enemy</name>
							<script>if snd.defenses.def_phase.state ~= "deffed" then
  if (sndNDB.players[gmcp.Char.Status.name].city ~= sndNDB.players[matches[2]].city) then
    snd.send("qeb lose "..matches[2])
  end
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You begin to follow (\w+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>melting</name>
							<script>if matches[2] ~= snd.target and (snd.toggles.attacking or snd.toggles.bashing) and snd.toggles.affcalling then
  local choices = {
  ["Templar"] = "defend",
  ["Revenant"] = "juxtapose",
  ["Ascendril"] = "cast reflection",
  ["Shaman"] = "nature barrier",
  ["Alchemist"] = "botany envelop",
  ["Teradrim"] = "sand shield",
  ["Tidesage"] = "fog harden",
  ["Luminary"] = "angel aura",
  ["Earthcaller"] = "osso ribcage",
  ["Zealot"] = "enact cascade",}
  
  if choices[snd.class] ~= nil then
    send("qeb "..choices[snd.class].." "..matches[2])
  end
  
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\(Web\): (\w+) says, \"I'm melting! I'm melting!\"$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>deliverance use</name>
							<script>local string = ""
if snd.toggles.affcalling then
 string = "wt "..string.upper(multimatches[2][2]).." used deliverance!"..snd.sep
end
if multimatches[2][2] == snd.target then
 string = string.."wt STOP HITTING STOP HITTING STOP!"
 snd.target = "nil"
 expandAlias("stap", false)
end
snd.send(string)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>1</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#ff0000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>FG3BG2</string>
								<string>^(\w+) uses Kaido Deliverance \(active\)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>6</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>deliverance proc</name>
							<script>local string = ""
if snd.toggles.affcalling then
 string = "wt "..string.upper(multimatches[2][2]).." used deliverance!"..snd.sep
end
if multimatches[2][2] == snd.target then
 string = string.."wt STOP HITTING STOP HITTING STOP!"
 expandAlias("stap", false)
end
snd.send(string)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>1</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#ff0000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>FG3BG2</string>
								<string>^(\w+) uses Kaido Deliverance \(proc\) on (the )?\w+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>6</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>can't envenom</name>
							<script>snd.send("wipe left"..snd.sep.."wipe right")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have too many effects stacked onto your weapon.</string>
								<string>^No more venoms will fit upon .+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>arti pipes</name>
							<script>snd.toggles.lighting = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have no pipes that need to be lit.</string>
								<string>You possess no means of creating a flame.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>need dismount</name>
							<script>expandAlias("dm", false)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You cannot do that while mounted.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>class change</name>
							<script>if matches[1]:find("assume") then
	snd.assumed_class = matches[2]
else
  snd.assumed_class = nil
end
if snd.class ~= matches[2] then
  snd.changeClass()
end
raiseEvent("sunder_update_vitals")

tempTimer(1, function() sendGMCP("Char.Skills.get") send("") end)
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your active class has been switched to (\w+)\.$</string>
								<string>^You assume the (\w+) class\.$</string>
								<string>^You have assumed the (\w+) class.$</string>
								<string>^You forfeit the duel and leave the arena\.$</string>
								<string>^You have been defeated and are thrown out of the Arena\.$</string>
								<string>^You have been victorious and leave the Arena in triumph!$</string>
								<string>^The combat has been declared a draw and is over\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>radiance</name>
							<script>local string = "wt I'm being RADIANCED! PANIC!"..snd.sep.."say I'm being RADIANCED! AAAAAAAAHHHHH!"..snd.sep.."panic"..snd.sep.."panic"..snd.sep.."panic"..snd.sep.."panic"..snd.sep.."panic"
if snd.toggles.listening and #snd.callers &gt;= 1 then
 string = string.."tell "..snd.callers[1].." I'm being radianced! HELP ME PLEASE!"
end
snd.send(string)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A shiver runs down your spine, and you feel an instinctive urge to run as far and as fast as you can.</string>
								<string>^A shimmering image of the face of (the )?\w+ appears fleetingly before you, frowning in concentration\.$</string>
								<string>Sparks of multicoloured light begin to dance in your mind.</string>
								<string>An odd sensation of warmth begins to fill your body.</string>
								<string>Arcs of white light begin to flash across your vision, radiant and bright.</string>
								<string>Your heart thumps as you realize that you have but seconds left to escape whatever fate awaits you.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>1</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>forced tumble</name>
							<script>snd.send("stop")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You hear (the )?\w+'s? voice and you feel irresistibly compelled to: tumble \w+$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>unblock</name>
							<script>snd.send("unblock")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\(Web\): \w+ says, \"Unblock\.\"$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>defending</name>
							<script>if (sndNDB.players[gmcp.Char.Status.name].city == sndNDB.players[matches[2]].city) then
  cecho(" \n&lt;red&gt;Someone is being defended, make sure it isn't an illusion!")
	tempTimer(5, [[enableTrigger("defending")]])
	disableTrigger("defending")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) leaps swiftly in front of (\w+) to defend (the )?\w+!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Misc</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>crit</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff5500</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You have scored a (CRITICAL) hit!$</string>
								<string>^You have scored a (STAGGERING CRITICAL) hit!$</string>
								<string>^You have scored a (CRUSHING CRITICAL) hit!$</string>
								<string>^You have scored a (MUTILATING CRITICAL) hit!$</string>
								<string>^You have scored an (ANNIHILATING CRITICAL) hit!!!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>newbie</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff007f</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^.+ has escaped Slaver\'s Isle and entered the realm of Aetolia\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>parried</name>
							<script>if snd.toggles.atkecho and snd.toggles.gags then
 deleteLine()
 snd.message("&lt;white&gt;You parried an attack to your &lt;red&gt;"..matches[2].."&lt;white&gt;!")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You parry the attack to your ([a-z ]+) with a deft maneuver\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>diverted</name>
							<script>if snd.toggles.gags then
  deleteLine()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>jerks to the side, the attack barely grazing .+\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>first aid</name>
							<script>if snd.toggles.gags then
  deleteLine()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#008080</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>FG14BG2</string>
								<string>[FirstAid]:</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>6</integer>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>outc</name>
							<script>if snd.toggles.gags then
  deleteLine()
  if tonumber(multimatches[3][3]) &lt; 200 then
    snd.message("&lt;red&gt;LOW ON: &lt;white&gt;" .. string.title(multimatches[3][2]))
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[FirstAid]: outc</string>
								<string>1</string>
								<string>^You remove 1 (\w+), bringing the total in the cache to (\d+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
								<integer>5</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>gold</name>
							<script>if snd.toggles.gags then
  deleteLine()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You collect \d+ gold from the corpse\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>stand</name>
							<script>if (snd.toggles.bashing or snd.toggles.attacking) and snd.toggles.gags then
  deleteLine()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>1</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You are not fallen or kneeling.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>bashing removing spam</name>
							<script>if snd.toggles.gags then
  deleteLine()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>1</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You empower your weapon with sacrifice.</string>
								<string>^As the corpse of .+ falls, your aura bestows redemption upon (the )?\w+\.$</string>
								<string>A rush of energy fills you as you feel ready to deliver a devastating blow upon your next target.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>1</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>shadow globe</name>
							<script>snd.send("get globe")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#00007f</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A globe of gloaming shadow rests upon the ground here, glistening darkly.</string>
								<string>Pulsing faintly, a globe of glowing spirit lies here.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>monolith sigil</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffaaff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A sigil in the shape of a small, rectangular monolith is on the ground.</string>
								<string>There are \d+ monolith sigils here.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>cube sigil</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#aa55ff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Resting on the ground is a cube-shaped silver sigil.</string>
								<string>There are \d+ cube sigils here.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>sect accept</name>
							<script>snd.send("firstaid defence on")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) has accepted your challenge!$</string>
								<string>^You accept the challenge issued by (\w+)!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>sleep</name>
							<script>snd.send("wake")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Your exhausted mind can stay awake no longer, and you fall into a deep sleep.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>ylem chunks</name>
							<script>snd.send("get chunk"..snd.sep.."get chunk")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^A final swift strike from your pick shatters an unstable ylem deposit, breaking it into severalsoftly glowing chunks.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>1p combat messages</name>
						<script>snd.target_gone = false
snd.last_attack = "none"</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>2</conditonLineDelta>
						<mStayOpen>99</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You use (\w+) (.+) on (.+)\.$</string>
							<string>1</string>
							<string>^(.+)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>5</integer>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>rebounded</name>
							<script>snd.used.rebounding = true
snd.rebounded = true
snd.getting_hit = "You"</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The attack rebounds away from (the )?\w+ aura!$</string>
								<string>The attack rebounds back onto you!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>end used</name>
							<script>setTriggerStayOpen("1p combat messages", 0)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return isPrompt()</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>1p untargeted combat message</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You use (\w+) ([^' on ']+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Misc</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>lust tarot</name>
						<script>if snd.faction == "spirit" and snd.toggles.auto_reject then
 snd.send("qeb reject "..matches[2])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) quickly flings a tarot card at you, and you feel unreasonable lust for (the )?\w+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>death</name>
						<script>if matches[2] == snd.target then
 --snd.toggles.attacking = false
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) has been slain by (\w+)\.$</string>
							<string>^(\w+) walks in divine grace\. You may not harm (the )?\w+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>stop attacking</name>
						<script>if snd.toggles.attacking == true then snd.toggle("attacking") end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Vibrant essence streams forth from the floor, signaling the end of combat.</string>
							<string>You currently walk in divine grace and may neither be harmed nor harm another. To leave this state of protection, you may REJECT GRACE.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>starburst</name>
						<script>if matches[2] == snd.target then
 expandAlias("t "..snd.target)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) has burst back to life after falling to (the )?\w+\.$</string>
							<string>^(\w+) uses Deathlore Substitute\.$</string>
							<string>^(\w+) uses Necromancy Soulcage\.$</string>
							<string>^\w+ uses? Spirituality Absolve \(soulcage\) on (\w+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>got hit</name>
						<script>local exclusions = {"Relic", "Raloth", "Artifact", "Survival", "Research", "Manipulation", "Tattoos"}
local skill = multimatches[2][3]

  if not table.contains(exclusions, skill) then
    found_set = "none"
    for set in pairs(snd.cureset_skills) do
      if table.contains(snd.cureset_skills[set], skill) then
        found_set = set   
      end
    end
    
    if snd.class_hitting == "none" then --haven't seen anyone hit yet
      if found_set == "none" then --skill isn't in class list
        send("cureset switch general", false) --non-specific cureset
      elseif snd.cureset ~= found_set then
        snd.cureset = found_set -- because you may not have the cureset, go ahead and set it for usage
        send("cureset switch " .. found_set, false) --swap to class cureset
        snd.class_hitting = found_set --note what class is hitting
      end      
    elseif snd.class_hitting ~= found_set then --this is a second class hitting
      snd.class_hitting = found_set
      send("cureset switch group", false)
    end
    snd.person_hitting = multimatches[2][2]

  if not table.contains(snd.people_hitting_me, multimatches[2][2]) then
    table.insert(snd.people_hitting_me, multimatches[2][2])
    tempTimer(4, [[table.remove(snd.people_hitting_me, 1)]])
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#ff0000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>FG3BG2</string>
							<string>^(.+) uses (\w+) .+ on you\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>6</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>cureset switch</name>
						<script>snd.cureset = matches[2]</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You will now use the (\w+) firstaid priority set\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>sometimes un-spam</name>
						<script>if snd.toggles.attacking and snd.toggles.gags then
 deleteLine()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You will now target the .+ of your opponent with your (the )?\w+ arm\.$</string>
							<string>^You will now target attacks with your (the )?\w+ arm wherever you see an opening\.$</string>
							<string>You see no 'body' to take.</string>
							<string>You see no 'husk' to take.</string>
							<string>You have cleared your axes queue.</string>
							<string>You are not wielding a handaxe in either of your hands.</string>
							<string>You have cleared your eqbal queue.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>3p lust</name>
						<script>if sndNDB.players[gmcp.Char.Status.name].tether == "Spirit" then
 snd.send("qeb drop monolith")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+ quickly flings a tarot card at (\w+), whose eyes light up\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>brazier</name>
						<script>if (sndNDB.players[gmcp.Char.Status.name].city == sndNDB.players[matches[2]].city) then
 snd.send("qeb touch brazier "..matches[2])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) is violently ripped from your location by a magical summoning\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Reflections</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Reflection Used</name>
							<script>snd.reflection_charge = snd.reflection_charge-1</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You use (Arcanism|Sorcery) Reflection.$</string>
								<string>^You use Artifact Reflection Wand on (\w+).$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Reflection Regained</name>
							<script>snd.reflection_charge = snd.reflection_charge+1</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You feel a tingle as you are able to cast another reflection.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>No reflections left</name>
							<script>snd.reflection_charge = 0</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You cannot summon forth another reflection so soon.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>All reflections regained</name>
							<script>snd.reflection_charge = 3</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You feel recharged as you recover your ability to cast reflections.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Accursed 3p</name>
						<script>if matches[2] == snd.target then
  snd.target_got("accursed")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) cries out in agonized horror, tortured by an unseen curse.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Enabling Some Things on Login</name>
						<script>snd.crescentable = true
snd.target_aegis = false
snd.infiltrate = false
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Password correct. Welcome to Aetolia.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Loyals Attacking</name>
						<script>snd.loyalsattacking = true</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You order a hellcat to kill (\w+).$</string>
							<string>^You order a (\w+) spirit to kill (\w+).$</string>
							<string>^A (\w+) spirit is already hostile towards (\w+).$</string>
							<string>^You order (.*) to kill (\w+).$</string>
							<string>^A (\w+) is already hostile towards (\w+).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Loyals Not Attacking</name>
						<script>snd.loyalsattacking = false</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You order a hellcat to assume a passive stance.</string>
							<string>^Your spirit familiar morphs into the form of a (\w+) spirit\.$</string>
							<string>^You order a (\w+) spirit to assume a passive stance.$</string>
							<string>They all seem to settle down.</string>
							<string>^You order (a|an|the) (\w+) to assume a passive stance.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>3</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Target Oblivion</name>
						<script>if sndNDB.players[gmcp.Char.Status.name].city == sndNDB.players[matches[2]].city then
else
  snd.send("wt "..matches[2].." is singing Oblivion next to v"..gmcp.Room.Info.num)
  if snd.class == "Syssin" then
    expandAlias("gs "..matches[2])
  elseif snd.class == "Shaman" or snd.class == "Alchemist" then
    expandAlias("np "..matches[2])
  elseif snd.class == "Luminary" then
    snd.attack("qeb angel beckon "..matches[2])
  elseif snd.class == "Earthcaller" then
    snd.attack("qeb osso lurch "..matches[2])
  elseif snd.class == "Praenomen" then
    snd.attack("qeb lure "..matches[2])
  elseif snd.class == "Akkari" then
    snd.attack("qeb DEJEMASHAI "..matches[2])
  end
  -- onei bowl dreamscape? throatcrush range? wayfarer axe toss?
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^A deathly song rings within your ears, the dolent notes of (\w+) swarming your thoughts, and causing your eyes to droop with its somnolent effect.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Warning - Collapse / Omophagia</name>
						<script>snd.send("wt Collapse/Omophagia damage incoming from "..matches[2].." at v"..gmcp.Room.Info.num)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) uses? Sporulation Omophagia.$</string>
							<string>^(\w+) uses? Gravitation Collapse.$</string>
							<string>The living morass expands further, enfolding more of its surroundings into the reach of its impending feast of frenzy.</string>
							<string>The keening THWUM rhythmically emanating from a destabilizing singularity grows in volume.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Ylem</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>leylines</name>
					<script>if ylm.path["v"..snd.my.room] ~= nil then
 if ylm.active then
  ylm.next_zone = ylm.path["v"..ylm.next_zone]
  ylm.foci = tonumber(multimatches[9][2])
  if ylm.foci == 0 then
		if ylm.next_zone == "city" then
			ylm.active = false
			send("qeb path track city")
		else
      snd.message("Headed to: "..ylm.next_zone)
			expandAlias("goylem", false)
  	end
	end
 end
endscript>
					<triggerType>0</triggerType>
					<conditonLineDelta>9</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You reach a hand outwards and close your eyes, seeking for the ethereal energies of the leylines around you.</string>
						<string>1</string>
						<string>^.+$</string>
						<string>1</string>
						<string>^You detect (\d+) lesser foci nearby\.$</string>
						<string>1</string>
						<string>You detect (\d+) twin foci nearby.</string>
						<string>1</string>
						<string>^You detect (\d+) minor foci in the area\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>5</integer>
						<integer>1</integer>
						<integer>5</integer>
						<integer>1</integer>
						<integer>5</integer>
						<integer>1</integer>
						<integer>5</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Utilities</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Toxicology</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>milking</name>
						<script>snd.send("qeb milk "..matches[2].." into fluidcache")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You milk \d+ doses of (\w+) into your fluidcache, consuming the venom sacs on hand\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>casks</name>
						<script>snd.send("qeb milk "..matches[2].." into cask")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Preparing your tools, you carefully squeeze and milk out a dose of (\w+) into a small wooden cask, consuming the venom sacs in hand\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>rags</name>
						<script>snd.send("qeb craft rag")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Taking care with your work, you quickly patch together a simple rag.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>venoms missing</name>
						<script>snd.my_venoms = {}</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>200</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>==============================[     Venoms      ]==============================</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>venom line</name>
							<script>table.insert(snd.my_venoms, matches[2])
table.insert(snd.my_venoms, matches[3])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\s+\[\s+\d+\] the venom (\w+)\s+\[\s+\d+\] the venom (\w+)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>single venom line</name>
							<script>table.insert(snd.my_venoms, matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\s+\[\s+\d+\] the venom (\w+)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>venoms end</name>
							<script>setTriggerStayOpen("venoms missing", 0)

local all_venoms = {
"sumac",
"xentio",
"oleander",
"eurypteria",
"kalmia",
"digitalis",
"darkshade",
"curare",
"epteth",
"prefarar",
"monkshood",
"euphorbia",
"colocasia",
"oculus",
"hepafarin",
"camus",
"vernalius",
"epseth",
"larkspur",
"slike",
"voyria",
"delphinium",
"vardrax",
"loki",
"aconite",
"selarnia",
"gecko",
"scytherus",
"ouabain"
}

local missing_venoms = {}

for venom in pairs(all_venoms) do
 if not table.contains(snd.my_venoms, all_venoms[venom]) then
  table.insert(missing_venoms, all_venoms[venom])
 end
end
if #missing_venoms &gt;= 1 then
 snd.message("You are missing: &lt;red&gt;"..table.concat(missing_venoms, "&lt;white&gt;,&lt;red&gt; "))
 snd.send(" ")
else
 snd.message("You have all the venoms!")
 snd.send(" ")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return isPrompt()</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Who parser</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Who line</name>
						<script>local person = matches[2]
local room = matches[3]
local vnum = matches[4]

local room_table = snd.who_list[room] or {}
table.insert(room_table, person)
snd.who_list[room] = room_table
table.insert(snd.true_who, person)
 
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\s+(\w+) - (.+?)\s+- (?:v(\d+))?</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>More</name>
						<script>send("more")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Type more to continue reading.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Total people</name>
						<script>disableTrigger("Who parser")

for room, players in pairs(snd.who_list) do
  if #players &gt; 1 then
    snd.message("&lt;gold&gt;" .. room .. " - &lt;green&gt;" .. #players .. " &lt;white&gt;people\n - " .. table.concat(players, ", "))
  end
  
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^There are (\d+) people total online with (\d+) (people|person) that (are|is) hidden from you.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>rock crush</name>
					<script>snd.send("qeb rockcrush rock for ink")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You crush an? (the )?\w+ rock in your mighty fist\. When you open your hand, you find (the )?\w+ inks?\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>shop ih</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>200</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You can see the following (\d+) objects:$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>shop ih end</name>
						<script>setTriggerStayOpen("shop ih", 0)
snd.shopih = false</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return isPrompt()</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>ih line</name>
						<script>if snd.shopih then
 snd.send("shop price item "..matches[3].." "..snd.shopprice.." shelf "..snd.shopshelf)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^"([^\d]+)(\d+)"\s+(.*).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Room Vnums</name>
					<script>mmp.locateAndEcho(matches[2], "", matches[3]:gsub("an unstable section of ", ""))</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You divine the location of this death as (.+) in (.+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Zealot farsee</name>
					<script>mmp.locateAndEcho(matches[2])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^The hazy scenery of (.+) fills the space briefly before fading away\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Faster Water Movement w/mmap</name>
					<script>mmp.swim()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>There's water ahead of you. You'll have to swim to make it through.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Gagged lines</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Luminary/Earthcaller</name>
						<script>if snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+'s light burns \w+\.$</string>
							<string>^\w+'s wounds close up before your eyes\.$</string>
							<string>^\w+'s pressure waves superheat \w+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Sciomancer</name>
						<script>if snd.toggles.nontargetgags and matches[2] ~= snd.target and snd.toggles.gags then
  deleteFull()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^The air shifts around (\w+), a little delayed as if \w+ was lighter.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Praenomen</name>
						<script>if snd.toggles.nontargetgags and snd.toggles.gags then
  deleteFull()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+ appears irritated as the sun bears down upon \w+.$</string>
							<string>^\w+ uses Mentis (Seduction|Temptation) on \w+\.$</string>
							<string>^\w+ staggers for a moment, clutching \w+ head\.$</string>
							<string>^\w+ slumps, appearing physically weakened\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Weapon wiping</name>
						<script>deleteFull()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+ carefully wipes all the venoms off of .+.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Generic items</name>
						<script>deleteFull()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have no more room in your fluidcache.</string>
							<string>You light your supply of pipes, igniting the herbs within.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Carnifex</name>
						<script>if snd.toggles.nontargetgags and matches[2] ~= snd.target and snd.toggles.gags then
  deleteFull()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) pales as a trickle of \w+ soul ebbs from an ethereal wound.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Shaman</name>
						<script>if snd.toggles.nontargetgags and matches[2] ~= snd.target and snd.toggles.gags then
  deleteFull()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) summons the will of the Elder Shaman to resist delusion.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Vermin</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>vermin</name>
						<script>if snd.toggles.vermin then
  if snd.toggles.newbie then
    send("k vermin")
  else
  --single attack logic
    snd.bashing.target = "vermin"
    battack = ""
    for k,v in pairs(snd.class_list) do
      if snd.class_list[k].class == snd.class then
      if snd[v.class:lower().."_bash_override"] then
        snd[v.class:lower().."_bash_override"]()
      else
        v.func()
      end
      snd.send("qeb stand"..snd.sep..battack)
      end
    end
  end
end
snd.vermin = snd.vermin + 1
if snd.vermin &gt;= 3 then
 if snd.toggles.vermin == true then
 		if bot.going then
      tempTimer(1.5, [[expandAlias("move")]])
    end
		disableTimer("moveroom")
 end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Tongue flicking to taste the air, a pebbly black snake comes into view.</string>
							<string>The glint of pebbly scales alerts you to the entrance of a black snake.</string>
							<string>With a faint slithering noise, a pebbly black snake enters.</string>
							<string>You spy a seagull, rooting around the ground for scraps of anything edible.</string>
							<string>The faint clicking of insect legs on stone alerts you to the entrance of a carrion beetle.</string>
							<string>A carrion beetle enters, scavenging for flesh.</string>
							<string>A carrion beetle scuttles in, searching for food.</string>
							<string>A black rat scurries in, looking for food.</string>
							<string>A reticulated planthopper lands on a perch nearby, becoming eerily still.</string>
							<string>The faint clicking of insect legs on stone alerts you to the entrance of a giant ugly pincher.</string>
							<string>An ugly pincher scuttles in, searching for food.</string>
							<string>A tiny pincher scuttles in, searching for food.</string>
							<string>The faint clicking of insect legs on stone alerts you to the entrance of an ugly pincher.</string>
							<string>A giant ugly pincher enters, scavenging for flesh.</string>
							<string>An ugly pincher enters, scavenging for flesh.</string>
							<string>A tiny pincher enters, scavenging for flesh.</string>
							<string>The faint clicking of insect legs on stone alerts you to the entrance of a tiny pincher.</string>
							<string>A giant ugly pincher scuttles in, searching for food.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Sell Vermin</name>
						<script>if snd.toggles.vermin == true then
  local area = gmcp.Room.Info.area
	if area == "Spinesreach" then	snd.send("sell vermin to ghada")
	elseif area == "Duiran" then snd.send("sell vermin to nysos")
	elseif area == "Bloodloch" then snd.send("sell vermin to enzo")
	elseif area == "the City of Enorian" then snd.send("sell vermin to shrift")
	end
  
	snd.toggles.vermin = false
	snd.send("vermin")
	disableTimer("moveroom")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A large scientific laboratory</string>
							<string>Illuminated cave passage between shops</string>
							<string>Entering Bloodloch market district</string>
							<string>A dockyard slum</string>
							<string>Cabalist Ghada nods curtly at you.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>QWP for level 20 goggles</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>True Who Parsing</name>
						<script>for word in string.gmatch(multimatches[1][1], '[^.,%s]+') do
    if word ~= "and" then
        table.insert(snd.true_who, word)
    end
end
sndNDB_SortOnline(snd.true_who)
disableTrigger("QWP for level 20 goggles")

 

  

   </script>
						<triggerType>0</triggerType>
						<conditonLineDelta>1</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.+)\.$</string>
							<string>1</string>
							<string>^There (are \d+ people total online with \d+ people that are hidden from you\.|is 1 person online\. Lonely you!)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>5</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Walking around</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Orrery globe</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Found Orrery Globe</name>
							<script>expandAlias("stap")
snd.send("get globe")
snd.found_globe = gmcp.Room.Info.num</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^A small globe rests upon the ground here, elements within churning in constant war with one another\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Wrong room, go back</name>
							<script>send("goto "..snd.found_globe)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You see no 'globe' to take\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Got globe</name>
							<script>snd.found_globe = 0</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You pick up a churning globe of warring elements.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Custom Mudlet Mapper items</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Custom walk delay</name>
						<script>mmp.customwalkdelay(2)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Your progress is hindered by a thick, sticky spiderweb as you slowly make your way \w+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Custom movement for Sonn</name>
						<script>if bot.going then
 snd.send("d")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^As you press against the bookcase, you feel it give way.$</string>
							<string>^A sharp click sounds within the walls as you pull on the lever, the noise reverberating through the surrounding corridor noisily.$</string>
							<string>^Giving a strident screech, the bookcase slides to the side to reveal a passage downward.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Downed shrine in Order logs</name>
						<script>local room = multimatches[2][2]

mmp.locateAndEcho(room)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>erected a shrine at '</string>
							<string>- \w+ erected a shrine at '(.+)'\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Questing</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Torturer's Caverns</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Annaria</name>
						<script>if snd.toggles.questing then
  snd.send("say follow me!")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A malnourished paladin squire is imprisoned here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Rozhirr</name>
						<script>snd.send("qeb g key")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>An iron prison key tumbles out of the corpse of Sentinel Rozhirr.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Tellimerius</name>
						<script>if sndNDB.players[gmcp.Char.Status.name].tether == "Spirit" and snd.toggles.questing then
 snd.send("give Rozhirr to Tellimerius"..snd.sep.."give Tuera to Tellimerius"..snd.sep.."give Mellias to Tellimerius")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Bristling blades ever-ready to strike, Tellimerius, the Deep Dweller stands here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Kerr'ach</name>
						<script>if snd.toggles.questing then
  snd.send("give Tellimerius to Kerr'ach")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Draped in dark robes, Kerr'ach, the Lich stands here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Roz</name>
						<script>if sndNDB.players[gmcp.Char.Status.name].tether == "Shadow" and snd.toggles.questing then
 snd.send("say Tuera wants her")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Sentinel Rozhirr says, "What business do you have with my prisoner, speak your intent."</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Roz bow</name>
						<script>if sndNDB.players[gmcp.Char.Status.name].tether == "Shadow" and snd.toggles.questing then
 expandAlias("pt tue")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Sentinel Rozhirr quickly unlocks the prison door, bowing.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Bloodloch</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Tisian</name>
						<script>if snd.toggles.questing and gmcp.Room.Info.num == "18278" then
	send("qeb give tisian to lucisa")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A cavernous study.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Arurer Haven</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Get that key</name>
						<script>if snd.toggles.questing then
	send("qeb take 158672")
	havekey = true
	tempTimer(600, [[havekey = false]])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A small key lies on the ground here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Unlock chest</name>
						<script>if snd.toggles.questing then
	if havekey then
		send("qeb unlock chest"..snd.sep.."open chest"..snd.sep.."take seashell from chest"..snd.sep.."give seashell to gunder")
		havekey = false
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Circle of prayer in the gardens.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Attica</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bern</name>
						<script>if snd.toggles.questing and givelunch then
	send("give 47122 to bern")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Village pier.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Leena</name>
						<script>if snd.toggles.questing then
	send("give 40721 to 61682")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A small house reeking of fish.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Matilda</name>
						<script>if snd.toggles.questing then
	send("say yes, i am here to help")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Matilda's Bakery.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Comb</name>
						<script>if snd.toggles.questing then
	send("take comb")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>wooden comb lies</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Hemlock</name>
						<script>if snd.toggles.questing then
	send("take 81504")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>green hemlock plant springs</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Erin</name>
						<script>if snd.toggles.questing then
	send("give 30635 to 60186")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>The village common.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Helga</name>
						<script>if snd.toggles.questing then
	send("give 81504 to helga"..snd.sep.."give 29766 to helga")
	curehas = true
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Helga the Medicine</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Flower</name>
						<script>if snd.toggles.questing then
	send("take 29766")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A breathtaking lily of</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Trudd/Johan</name>
						<script>if snd.toggles.questing then
	send("give 17679 to trudd"..snd.sep.."give 71098 to trudd"..snd.sep.."give 74642 to trudd")
	send("give barrel to johan")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A cozy common room.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ale</name>
						<script>if snd.toggles.questing then
	send("take barrel")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>barrel of ale lies</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Alanna</name>
						<script>if snd.toggles.questing then
	if giveshawl then
		send("give shawl to alanna")
		giveshawl = false
		tempTimer(600, [[giveshawl = true]])
	elseif not givelunch then
		send("say I heard you could use some help")
		givelunch = true
		tempTimer(600, [[givelunch = false]])
	else
		send("say I heard you have some delicious candy")
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A comfortable home.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Arila</name>
						<script>if snd.toggles.questing then
	if curehas then
		send("give 18804 to arila")
		tempTimer(600, [[curehas = false]])
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A dairy shop.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Aran</name>
						<script>if snd.toggles.questing then
	send("say what sort of help do you need?")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A smoke-filled smithy.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Tern</name>
						<script>if snd.toggles.questing then
	if not giveshawl then
		send("say do you need any help?")
		giveshawl = true
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A modest tailor's shop.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Daryn</name>
						<script>if snd.toggles.questing then
	send("give 4171 to daryn")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A small dock</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ring</name>
						<script>if snd.toggles.questing then
	send("take ring")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A flash of red draws your</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Erik</name>
						<script>if snd.toggles.questing then
	send("give pike to erik")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Living room of a fisherman's cottage.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Vlad</name>
						<script>if snd.toggles.questing then
	send("give ring to vladerhelm")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Vladerhelm, a handsome</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Aerie</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Shaft</name>
						<script>if snd.toggles.questing and hasbar then
	send("qeb open vent"..snd.sep.."put bar in vent"..snd.sep.."push vent")
	tempTimer(600, [[hasbar = false]])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>[HINT]: If you have the metal bar</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bar</name>
						<script>if snd.toggles.questing then
	send("take bar")
	hasbar = true
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A short metal bar lies here. </string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Man</name>
						<script>if snd.toggles.questing then
	send("say Actually, I'm here because of Zahav.")
	skysilver = true
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>An atavian man says, "Thank you... now I don't feel so stressed."</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Eitan</name>
						<script>if snd.toggles.questing then
	if eitan1 == 0 then
		send("say adila sent me")
		tempTimer (1.5, [[send ("say zihfer")]])
		eitan1 = 1
	elseif eitan1 == 1 then
		send("give note to eitan")
		eitan1 = 2
	elseif eitan1 == 4 then
		send("give note to eitan")
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Eitan, the</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Cloudblossom</name>
						<script>if snd.toggles.questing then
	send("give flower to lyahla")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Lyahla, a pregnant Atavian woman</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Books</name>
						<script>if snd.toggles.questing then
	if book1 == 0 then
		send("say I heard you have a new weaving book")
		book1 = 1
	elseif book1 == 2 then
		send("put carving in gate##w")
		book1 = 3
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A short Atavian woman stands here, tapping her fingers</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Drawer1</name>
						<script>if snd.toggles.questing then
	send("open desk")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Spartan diplomat's chambers.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Drawer2</name>
						<script>if snd.toggles.questing then
	send("take note")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A grimy note spills out of the desk, falling to the ground.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Alomeirah</name>
						<script>if snd.toggles.questing then
	if book1 == 1 then
		send("give book to 175602")
	else
		send("say i heard you like weaving")
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Hands folded neatly in her lap, Alomeirah sits here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Give book to Alomeirah</name>
						<script>
if snd.toggles.questing then
	book1 = 2
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a book titled "Examples of woven designs of the Ankyrean periods." to Alomeirah, a mild</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Adila</name>
						<script>if snd.toggles.questing then
	if eitan1 &gt;= 2 then
		send("say Zahav sent me about a sketch for the breastplate")
		sketch1 = 1
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Adila stands here, paintbrush in one hand. </string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Zahav</name>
						<script>if snd.toggles.questing then
	if sketch then
		send("give sketch to zahav")
		sketch = true
		tempTimer (1.5, [[send ("give skycrystal to zahav")]])
		skysilver = false
		breastplate = true
	end
end
	</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Zahav, an Atavian metalworker is here, frowning at a sketch in front of him.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Breastplate</name>
						<script>if snd.toggles.questing then
	if breastplate then
		send("give breastplate to aamiran")
		breastplate = false
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Aamiran, the Atavian Satrap stands here, his wings flared proudly.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Rug</name>
						<script>if snd.toggles.questing then
	send("take rug")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Sumptuous bedchambers.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Rug2</name>
						<script>if snd.toggles.questing then
	send("give rug to anean")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Anean, an</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Wall</name>
						<script>if snd.toggles.questing then
	if book1 == 3 then
		send("push wall"..snd.sep.."take note")
		book1 = 4
		eitan1 = 4
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Artifact hall.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Eitan Part 3</name>
						<script>if snd.toggles.questing then
	eitan1 = 3
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have completed the AERIE_TELL quest!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Eitan Part 4</name>
						<script>if snd.toggles.questing then
	eitan1 = 4
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have completed the AERIE_ZIHFER quest!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Restart All</name>
						<script>if snd.toggles.questing and not hasbar then
	eitan1 = 0
	book1 = 0
	skysilver = false
	sketch = false
	breastplate = false
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Narrow fissure.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Arbothia</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Lizenne</name>
						<script>if snd.toggles.questing then
	send("give pattern to lizenne")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Lizenne is here</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pattern</name>
						<script>if snd.toggles.questing then
	send("take pattern")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A clothing pattern lies</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Lich Gardens</name>
					<script>if snd.toggles.questing then
  snd.send("give Venicus to Zarxotl")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>His immense Rajamalan frame looming over his surroundings, General Zarxotl stands in the shadows.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Three Widows</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>kestrel</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("whistle kestrel")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Flitting through the air, a kestrel wanders around in search of prey.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>alpaca</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give hay to alpaca")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Sniffing at the ground for food, an alpaca wanders about here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>give ore</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give ore to bernar")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a hematite ore of iron to Bernar.</string>
							<string>You give a rock of silver ore to Bernar.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>give coal</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give coal to bernar")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a lump of flaking coal to Bernar.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>bernar</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give nugget to bernar"..snd.sep.."give ore to bernar"..snd.sep.."give coal to bernar")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Weighing from heel to toe, Bernar stands here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>kiki</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give rock to kiki")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Babbling to a rock in her hand, Kiki is wandering around in circles here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>give rock</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give rock to kiki")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a small grey rock to Kiki, the lost Grecht.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>jinjin</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give net to jinjin"..snd.sep.."give packet to jinjin"..snd.sep.."give pickaxe to jinjin"..snd.sep.."give ore to jinjin")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Jinjin stands here, squinting at everything that moves.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>net</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give net to jinjin")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a simple net to Jinjin.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>packet</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give packet to jinjin")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a packet of seeds to Jinjin.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>pickaxe</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give pickaxe to jinjin")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a simple pickaxe to Jinjin.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>ore</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("give ore to jinjin")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a chunk of mixed ore to Jinjin.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Helba</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>ore</name>
						<script>if snd.toggles.questing then
  if not snd.items["a rich vein of iron ore"] and not snd.items["a vein of iron ore"] then
   snd.send("qeb get 50 ore")
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You raise your pickaxe and swing it at a rich vein of iron ore, striking off the final chunk of ore.</string>
							<string>You raise your pickaxe and swing it at a vein of iron ore, striking off the final chunk of ore.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>radek</name>
						<script>if snd.toggles.questing then
  snd.send("greet radek")
  snd.send("give ore to radek")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Dust and grime peppering his skin, Foreman Radek is here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>give ore</name>
						<script>if snd.toggles.questing then
 snd.send("give ore to radek")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a lump of iron ore to Foreman Radek.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>rubble gone</name>
						<script>expandAlias("mpp")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have finished clearing away the rubble blocking off the mine</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>rubble</name>
						<script>expandAlias("mpp") 
send("dig")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A large pile of rubble hinders passage through the mines here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Arget Massai</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>putoran ash</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("get ash")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A pile of volcanic ash has accumulated here, gritty and coarse underfoot.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>grecht</name>
						<script>if snd.toggles.questing then
 snd.send("give ash to grecht")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>An elderly Grecht man totters around here, serenely tending to his gardens.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>give ash</name>
						<script>if snd.toggles.questing then
 snd.send("give ash to grecht")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a pile of volcanic ash to a wizened Grecht gardener.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>garden</name>
						<script>if snd.toggles.questing and snd.are_we_with_grouped() then
 snd.send("p garden")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A thriving garden of mountain plants springs up from the thin soil, tilled in neat rows.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>mountain garden</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>200</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A thriving mountain garden is holding:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>garden end</name>
							<script>setTriggerStayOpen("mountain garden", 0)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^It is holding \d+ objects\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>garden line</name>
							<script>if snd.toggles.questing and snd.are_we_with_grouped() then
  if string.find(matches[4], "thriving") or string.find(matches[4], "tenacious") or string.find(matches[4], "stubborn") then
   snd.send("get "..matches[3].." from garden")
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^"([^\d]+)(\d+)"\s+(.+)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Rainforest</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bruce</name>
						<script>if snd.toggles.questing then
 snd.send("give sapphire to bruce")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Bruce the Collector stands nearby with odd objects of many sizes and shapes shoved into his pockets. </string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>give sapphire</name>
						<script>if snd.toggles.questing then
 snd.send("give sapphire to bruce")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You give a beautiful rough sapphire to Bruce the Collector.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Caravan</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>cuttthroat entrance</name>
						<script>if snd.toggles.fasthunt then
	snd.toggles.bashing = true
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^A menacing Caentoi cutthroat arrives from the \w+ with a confident stride.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>caravan auto follow</name>
						<script>if snd.toggles.questing then
  send("qeb "..matches[2])
 end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>The caravan slowly makes it way (\w+).</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Sunder Name DB</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName>Sunder Name DB</packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Sunder NDB</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>CWHO</name>
						<script>cityMembers = {}
ndbCity = matches[2]</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>99</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^The following citizens of (\w+) are in the realm:$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Person Found</name>
							<script>if matches[2] == "Citizen" or matches[2] == "The" then 

else
  local person = string.trim(matches[2])
	if not sndNDB_Exists(person) or not sndNDB_isCitizenOf(ndbCity, person) then
		table.insert(cityMembers, person)
	end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+)\s+(\w+) \s+(.+)</string>
								<string>^(\w+)\s+(\w+)(?: novice)?$</string>
								<string>^(\w+)\s+(\w+) of (?:the Great Oak)?\s+(.+)$</string>
								<string>^(\w+)\s+(\w+) of(?: the)? \w+\s+(.+)?$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Close CWHO</name>
							<script>setTriggerStayOpen("CWHO", 0)

if next(cityMembers) then
	snd.message("Need an update due to: "..table.concat(cityMembers, ", ")..".")
	sndNDB_NameList(cityMembers)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string></string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>7</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Header Line</name>
							<script>deleteLine()
cecho("\n&lt;a_brown&gt;Citizen        Rank                          Position                    [CT?]")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Citizen        Rank                          Position                    [CT?]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Sunder target calling</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName>SWARM_Auto_Targeting</packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Deaths</name>
					<script>snd.targeting.who = matches[2]</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>100</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You have slain (\w+)\.$</string>
						<string>^(\w+) has been slain by (\w+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Rebirth effects</name>
						<script>if snd.targeting.who == matches[2] then
  snd.targeting.burst = true
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) uses Illumination Rebirth\.$</string>
							<string>^(\w+) uses Tattoos Starburst\.$</string>
							<string>^(\w+) uses Purification Resurgence\.$</string>
							<string>^(\w+) uses Deathlore Substitute\.$</string>
							<string>^(\w+) uses Necromancy Soulcage\.$</string>
							<string>^(\w+) uses Oneiromancy Remembrance\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>death prompt</name>
						<script>setTriggerStayOpen("Death In Room", 0)

if snd.toggles.calling and not snd.targeting.burst then
  if table.contains(snd.players_here, snd.targeting.who) then
    table.remove(snd.players_here, table.index_of(snd.players_here, snd.targeting.who))
  end
  if snd.targeting.who == snd.target then
    snd.get_new_target()
  end
end

snd.targeting.who = nil
snd.targeting.burst = false</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Target no longer available</name>
					<script>if snd.toggles.bashing then snd.no_target() end
snd.target_gone = true

if not snd.toggles.calling then return end

local who = matches[2]:title()

if table.contains(snd.players_here, who) then
  table.remove(snd.players_here, table.index_of(snd.players_here, who))
  send("ql")
end

if who:lower() ~= "eld" and who == snd.target:title() then
	snd.no_target()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You can find no such target as '(\w+)'\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Target list</name>
					<script>if matches[2] ~= gmcp.Comm.Channel.Text.talker then return end

local caller = matches[2]
local list = matches[3]

if table.contains(snd.callers, matches[2]) then 
	snd.addTargetList(list)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\(Web\)\: (\w+) says, "Target list\: (.+)\."$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Target Priority</name>
					<script>if matches[2] ~= gmcp.Comm.Channel.Text.talker then return end

local caller = matches[2]
local tar = matches[3]
local pos = matches[4] or nil

if table.contains(snd.callers, matches[2]) then
	snd.addSingleTarget(tar, pos)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\(Web\)\: (\w+) says, "Target priority\: (\w+) (\d+)\."$</string>
						<string>^\(Web\)\: (\w+) says, "Target priority\: (\w+)\."$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Unable to hit target ( ice/web/etc wall or not next to us)</name>
					<script>if not snd.toggles.calling then return end

local who = snd.target:title()

if table.contains(snd.targeting.list, who) then
	snd.get_new_target()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>A massive wall blocks your dagger.</string>
						<string>You don't see any such player in an adjacent location.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Cleared Target List</name>
					<script>if matches[2] ~= gmcp.Comm.Channel.Text.talker then return end

local caller = matches[2]

if table.contains(snd.callers, matches[2]) then
	snd.clearTargetList()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\(Web\)\: (\w+) says, "Target list cleared\."$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>dome/prismatic on target</name>
					<script>if matches[2] == snd.target then
  local who = matches[2]:title()
  local count = 1
  if not snd.illusion_found then
    if table.contains(snd.targeting.list, who) then
      local pos = table.index_of(snd.targeting.list, who) or nil
      for k, v in ipairs(snd.targeting.list) do
        if
          table.contains(snd.players_here, who) and
          table.contains(snd.players_here, v) and
          k &gt; table.index_of(snd.targeting.list, who)
        then
          expandAlias("t " .. v)
          break
        end
      end
    else
      table.remove(snd.players_here, table.index_of(snd.players_here, who))
      snd.get_new_target()
    end
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Your attack is repelled by the dome of ylem protecting (\w+).$</string>
						<string>^Your attack is repelled by the prismatic barrier surrounding (\w+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Autocall targets to web if asked</name>
					<script>snd.callTargetList()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\(Web\)\: (\w+) says, "Targets\?\"$</string>
						<string>^\(Web\)\: (\w+) says, "Target list\?\"$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Remove Target</name>
					<script>if matches[2] ~= gmcp.Comm.Channel.Text.talker then return end

local caller = matches[2]
local who = matches[3]

if table.contains(snd.callers, matches[2]) then
	snd.removeTarget(who)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\(Web\)\: (\w+) says, "Target removed\: (\w+)."$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Fishing</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>fishing prompt</name>
					<script>if auto_fish and fish_update then

	fish_update = false

local linestrength = matches[2]
local fishstrength = matches[3]
local distance = matches[4]

if tonumber(linestrength) &gt;= 95 and tonumber(distance) &gt;= 10 then
	send("qeb fishing cut", false)
elseif tonumber(linestrength) &gt;= 90 and tonumber(distance) &gt;= 30 then
	send("qeb fishing cut", false)
elseif tonumber(linestrength) &gt;= 7 and tonumber(fishstrength) &gt;= 0 then
  send("qeb fishing reel", false)
elseif tonumber(fishstrength) &gt;= 25 then
	send("qeb fishing lead", false)
elseif tonumber(linestrength) &lt;= 100 then
	send("qeb fishing reel", false)

end

end

deleteFull()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Line: (\d+)\% Fish: (\d+)\% Distance: (\d+)\%$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>fishing caught</name>
					<script>deleteFull()
Fishingcast = false
snd.fishinginfo.currentfish = tonumber(snd.fishinginfo.currentfish + 1)
snd.fishmsg("&lt;SeaGreen&gt;You caught &lt;green&gt;"..matches[2].."&lt;SeaGreen&gt;!")
snd.fishmsg("&lt;SeaGreen&gt;You now have &lt;green&gt;"..snd.fishinginfo.currentfish.." &lt;SeaGreen&gt;fish out of &lt;yellow&gt;"..snd.fishinginfo.bucket_capacity.."&lt;SeaGreen&gt; in your bucket!\n")
Fishingcaught = false
Fishtick = 0

if auto_fish and snd.fishinginfo.currentfish &gt;= snd.fishinginfo.bucket_capacity then
  auto_fish = false
  Reeling = "cut"
  Fishtick = 0
  snd.fishmsg("&lt;red&gt;Autofishing disabled.")
  snd.fishmsg("&lt;SeaGreen&gt;Your fishing bucket is full! Remember to return to Hob&lt;green&gt;(v53402)&lt;SeaGreen&gt; and &lt;red&gt;GIVE FISHBUCKET TO HOB&lt;SeaGreen&gt; to receive payment and factions points!")
  snd.fishmsg("&lt;red&gt;CUTTING LINE!")
elseif auto_fish and snd.fishinginfo.currentfish &lt; snd.fishinginfo.bucket_capacity then
  Reeling = "recast"
end


Fishingfunction()

save_fishinginfo_db()
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^With a mighty heave, you lift (.*) out of the water\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>CaptureFishingHole</name>
					<script>-- Make sure tables actually exist.
if not fishing_holes then
	load_fishing_db()
end

fishing_holes[multimatches[1][2]] = fishing_holes[multimatches[1][2]] or {}

-- Get some basic data.
fishing_holes[multimatches[1][2]].name = multimatches[1][2]
fishing_holes[multimatches[1][2]].type = multimatches[2][2]

-- Track the room.
fishing_holes[multimatches[1][2]].rooms = fishing_holes[multimatches[1][2]].rooms or {}
local found_room = false
for k,v in pairs(fishing_holes[multimatches[1][2]].rooms) do
	if v == gmcp.Room.Info.num then 
		found_room = true
		break
	end
end
if not found_room then
	table.insert(fishing_holes[multimatches[1][2]].rooms, gmcp.Room.Info.num)
end

-- Format the fishing hole contents string so that it can be parsed.
multimatches[2][3] = "|" .. multimatches[2][3]:gsub(", ", "||") .. "|"
multimatches[2][3] = multimatches[2][3]:gsub(" and ", "||")
multimatches[2][3] = multimatches[2][3]:gsub("%|and ", "||")
multimatches[2][3] = multimatches[2][3]:gsub("%|%|%|", "||")

-- Iterate over the fishing hole contents and get the fish in the hole.
local temp_fish = {}
for ftype in multimatches[2][3]:gmatch("%|%d+ of ([%w%s%'%-]+)%|") do	
	table.insert(temp_fish, ftype)
end
for ftype in multimatches[2][3]:gmatch("%|([%w%s%'%-]+)%|") do
	local skip = false
	for tmp in ftype:gmatch("%d of ") do
		skip = true
		break
	end
	if not skip then 
		table.insert(temp_fish, ftype) 
	end
end

-- Make sure our fishing table exists before checking it in the following loop.
fishing_holes[multimatches[1][2]].fish = fishing_holes[multimatches[1][2]].fish or {}
for k, v in pairs(fishing_holes[multimatches[1][2]].fish) do
	if v == "unfamiliar creatures" then
		table.remove(fishing_holes[multimatches[1][2]].fish, k)
		break
	end
end

for _, ftype in pairs(temp_fish) do
	local found = false
	for k,v in pairs(fishing_holes[multimatches[1][2]].fish) do
		if ftype == v then 
			found = true
			break
		end
	end
	if not found then table.insert(fishing_holes[multimatches[1][2]].fish, ftype) end
end

-- Save data.
save_fishing_db()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>1</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are standing within (.+)\.$</string>
						<string>^The (.+) teem with (.+).</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing tick</name>
					<script>if Fishingcaught then
	send("qeb fishing reel", false)
end
Fishtick = Fishtick + 1
if tonumber(Fishtick) &gt; 15 then
	send("qeb fishing discern", false)
end

deleteFull()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You use Fishing (tick).</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing failed</name>
					<script>deleteFull()
Fishingcast = false
Fishingcaught = false
Reeling = "recast"
snd.fishmsg("&lt;ansiRed&gt;The fish got away! &lt;green&gt;Recasting!")

Fishingfunction()

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You use Fishing Disappointment.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing stopped</name>
					<script>Reeling = "none"
Fishingcast = false
Fishingcaught = false
Fishtick = 0
currently_fishing = false</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You reel in your line and cease fishing.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing Cut</name>
					<script>deleteFull()
Fishingcast = false
Fishingcaught = false
if auto_fish then
  Reeling = "recast"
  snd.fishmsg("&lt;khaki&gt;You can't catch that one! &lt;green&gt;Nicking the line and recasting!")
else
  Reeling = "none"
end




Fishingfunction()

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You use Fishing Cut.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>FishNeedUpdate</name>
					<script>fish_update = true
Fishtick = 0

deleteFull()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You reel frantically against</string>
						<string>You guide the pole to one side, leading the fighting creature</string>
						<string>With a fluid flick of your wrist, you loose the fishhook</string>
						<string>Your line jerks sharply down as your hook finds a home in something.</string>
						<string>The fish tugs wearily against your line.</string>
						<string>The fish tugs madly against your line.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
						<integer>0</integer>
						<integer>0</integer>
						<integer>0</integer>
						<integer>0</integer>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>FishCast</name>
					<script>deleteLine()
snd.fishmsg("&lt;green&gt;CASTING LINE!")
currently_fishing = true
Fishingcast = true
Fishtick = 0

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>With a fluid flick of your wrist, you loose the fishhook</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing Lead</name>
					<script>send("qeb fishing lead", false)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Your line jerks sharply down as your hook finds a home in something.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Speed up fishing</name>
					<script>if snd.class == "Archivist" and tonumber(gmcp.Char.Vitals.bio) &gt; 0 then
	snd.send("bio steroid")
end
Fishtick = 0</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You use Fishing Lead.</string>
						<string>You use Fishing Reel.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing Stop</name>
					<script>if auto_fish then
  auto_fish = false
  Fishtick = 0
  snd.fishmsg("&lt;red&gt;Autofishing disabled.")
  Reeling = "cut"
  snd.fishmsg("&lt;red&gt;CUTTING LINE!")
end

Fishingfunction()
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You sense that you will be unable to catch any of the fish that remain here.</string>
						<string>With no room in your bucket for .*, you are forced to cut it loose.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing Gags</name>
					<script>if auto_fish then
  deleteFull()
end

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Your line bobs idly in the water.$</string>
						<string>You use Fishing (nibble).</string>
						<string>Your line dips as something nibbles lightly at its end.</string>
						<string>You use Fishing Reel.</string>
						<string>You reel frantically against</string>
						<string>You use Fishing Lead.</string>
						<string>You have made an especially mighty</string>
						<string>Added .+ to your bucket!</string>
						<string>You use Fishing Catch.</string>
						<string>The creature at the other end of your line gives a mighty jerk,</string>
						<string>You lightly nick your taut line,</string>
						<string>You use Fishing Cast.</string>
						<string>You're not fishing yet! Try FISHING CAST at a fishing hole to get started.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>3</integer>
						<integer>3</integer>
						<integer>3</integer>
						<integer>2</integer>
						<integer>3</integer>
						<integer>2</integer>
						<integer>1</integer>
						<integer>3</integer>
						<integer>2</integer>
						<integer>2</integer>
						<integer>3</integer>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing Sell</name>
					<script>expandAlias("sunder fishbucket clear", false)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You give .+ to Hob\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing Hit</name>
					<script>deleteLine()
local fishhooked = {
"FISH HOOKED!",
"YOU GOT A FISH ON THE LINE!",
"YOU GOT A HIT!",
"HOOKED! REEL IT IN!",
"THERE'S A FISH ON YOUR LINE!",
"LEADING A FISH!",
"YOU GOT SOMETHING! MAYBE...",
}

snd.fishmsg("&lt;green&gt;"..fishhooked[math.random(#fishhooked)])
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You use Fishing \(hit\).</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fishing Weight</name>
					<script>deleteLine()
if auto_fish then
  snd.fishmsg("&lt;SeaGreen&gt;Your catch weighs &lt;green&gt;"..matches[2].."&lt;SeaGreen&gt;!")
end
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>At (.*), this falls below your heaviest catch of .+ at this hole by .*.</string>
						<string>At (.*), this is the largest catch of .+ you've had at .+!</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage>
		<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>Sunder</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<time>00:00:00.000</time>
			<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
				<name>Vermin</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<time>00:00:00.000</time>
				<Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
					<name>moveroom</name>
					<script>expandAlias("move")
disableTimer("moveroom")</script>
					<command></command>
					<packageName></packageName>
					<time>00:00:55.000</time>
				</Timer>
			</TimerGroup>
			<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
				<name>Bard</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<time>00:00:00.000</time>
				<Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
					<name>Singing Song</name>
					<script>snd.song = "none"
snd.singing = false
disableTimer("Singing Song")</script>
					<command></command>
					<packageName></packageName>
					<time>00:00:08.100</time>
				</Timer>
				<Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
					<name>Playing Song</name>
					<script>snd.song_instrument = "none"
snd.playing = false
disableTimer("Playing Song")</script>
					<command></command>
					<packageName></packageName>
					<time>00:00:06.100</time>
				</Timer>
			</TimerGroup>
		</TimerGroup>
	</TimerPackage>
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Sunder</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Core</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Help System</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Main Index</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Main index</name>
							<script>cecho("\n&lt;CadetBlue&gt;Sunder Helpfile")
cecho("\n&lt;MediumSeaGreen&gt;---------------")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Welcome to &lt;green&gt;Sunder&lt;ForestGreen&gt;! This helpfile is meant to give you an introduction to different things that &lt;green&gt;Sunder &lt;ForestGreen&gt;can do. It will not cover every option entirely, but it will provide the most often used or asked about items a bit more light to show how or when to use them.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;The first thing you should know is the &lt;DeepSkyBlue&gt;stap &lt;ForestGreen&gt;command. You type &lt;DeepSkyBlue&gt;stap &lt;ForestGreen&gt;and &lt;green&gt;Sunder &lt;ForestGreen&gt;will cease whatever it is currently attempting to do, for the most part. Some items may need to be toggled manually depending on the situation, but by and large &lt;DeepSkyBlue&gt;stap &lt;ForestGreen&gt;will keep you from hitting someone or something, or any other number of items.")
cecho("\n")
cecho("\n&lt;MediumTurquoise&gt;The index for the rest of the helpfiles is as such:")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;Bashing               &lt;ForestGreen&gt;Do you want to go bashing? &lt;green&gt;Sunder&lt;ForestGreen&gt; has you covered!")
cecho("\n&lt;DeepSkyBlue&gt;PK                    &lt;ForestGreen&gt;Playerkilling and you. Please practice safe PvP.")
cecho("\n&lt;DeepSkyBlue&gt;Defenses              &lt;ForestGreen&gt;How to upkeep, turn on/off and customize defenses.")
cecho("\n&lt;DeepSkyBlue&gt;Ylem                  &lt;ForestGreen&gt;Finding minors and other ylem based information.")
cecho("\n&lt;DeepSkyBlue&gt;Utilities             &lt;ForestGreen&gt;Vermin, fishing, shops, questing and more.")
cecho("\n&lt;DeepSkyBlue&gt;War                   &lt;ForestGreen&gt;Helpful aliases for handling war divisions")
cecho("\n&lt;ForestGreen&gt;Each above entry will point you toward more specific items in each section as needed.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Use &lt;DeepSkyBlue&gt;sunder help &lt;subject&gt; &lt;ForestGreen&gt;to navigate through everything else.")
cecho("\n")
raiseEvent("sunder_update_vitals")
</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Ylem helpfile</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;YLEM &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;Hunting after those elusive minors and lessers has never been easier! This will walk you through how to do that with a few easy steps. To start, you will need to make sure you have learned &lt;DeepSkyBlue&gt;LEYLINES &lt;ForestGreen&gt;in &lt;MediumTurquoise&gt;Vision &lt;ForestGreen&gt;(289 lessons) and &lt;DeepSkyBlue&gt;SHACKLING &lt;ForestGreen&gt;in &lt;MediumTurquoise&gt;Refining &lt;ForestGreen&gt;(239 lessons). While &lt;DeepSkyBlue&gt;shackling &lt;ForestGreen&gt;is not necessarily needed for this to work, it will benefit you in the long run and keep you from having to deal with multiple eld at once. In the process of learning &lt;DeepSkyBlue&gt;leylines&lt;ForestGreen&gt;, you will also learn &lt;DeepSkyBlue&gt;DETECTION&lt;ForestGreen&gt;, which will assist you in finding focal points. This is only needed if you do not have any reserves to use &lt;MediumTurquoise&gt;MANIPULATE PYLON FOR NODESENSE&lt;ForestGreen&gt;, which allows you to PATH TRACK MINOR directly to the focal point. For this, you will also need to purchase ylem goggles from the vendor at your pylon. Just PATH TRACK PYLON and ASK &lt;vendor&gt; WARES to BUY GOGGLES FROM &lt;vendor&gt;.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;The &lt;green&gt;Sunder &lt;ForestGreen&gt;ylem finder is simple to use! To start, just type in &lt;DeepSkyBlue&gt;goylem start &lt;ForestGreen&gt;and watch as it does all the work of walking around for you. It has a set path that it follows and is easy to change if you wish to do so or if new areas are added before &lt;green&gt;Sunder &lt;ForestGreen&gt;is updated again. It will continually run until it finds either a minor or a lesser. If it finds a minor, you can either DETECTION ON and walk around to find the focal point (it is highlighted in &lt;green&gt;Sunder&lt;ForestGreen&gt; already, so you won't miss it!) or you can PATH TRACK MINOR if you have ylem goggles and have used MANIPULATE PYLON FOR NODESENSE. The nodesense defense will only last for one hour or ten uses. Once you find the minor and extract it (EXTRACTION is the syntax) fully, you can &lt;DeepSkyBlue&gt;goylem next &lt;ForestGreen&gt;to have &lt;green&gt;Sunder &lt;ForestGreen&gt;continue the set path. If you need to stop at any point, you can &lt;DeepSkyBlue&gt;goylem stop &lt;ForestGreen&gt;and it will take you back to your city and reset the variables to start over if you decide to pick it up again. If you need to stop temporarily, you can just &lt;DeepSkyBlue&gt;stap&lt;ForestGreen&gt; and then &lt;DeepSkyBlue&gt;goylem &lt;ForestGreen&gt;to start back up again where you left off!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;goylem start          &lt;ForestGreen&gt;Start finding foci")
cecho("\n&lt;DeepSkyBlue&gt;goylem next           &lt;ForestGreen&gt;Move to the next area")
cecho("\n&lt;DeepSkyBlue&gt;goylem stop           &lt;ForestGreen&gt;Stop and return to your city")
cecho("\n&lt;DeepSkyBlue&gt;goylem                &lt;ForestGreen&gt;Continue if you had to stop")
cecho("\n&lt;DeepSkyBlue&gt;sh                    &lt;ForestGreen&gt;Shackle an eld in the room to stop it from hitting you!")
cecho("\n")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (Y|y)lem$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Toggles help</name>
							<script>cecho("\n&lt;MediumSeaGreen&gt;*------------------------------------------------------------------------------------------------*")
cecho("\n&lt;MediumSeaGreen&gt;|                                           &lt;CadetBlue&gt;SUNDER TOGGLES                                       &lt;MediumSeaGreen&gt;|")                                                    
cecho("\n&lt;MediumSeaGreen&gt;*------------------------------------------------------------------------------------------------*")
cecho("\n&lt;MediumSeaGreen&gt;| &lt;ansiCyan&gt;TOGGLE NAME &lt;MediumSeaGreen&gt; |                 &lt;ansiCyan&gt;INFOMATION                  &lt;MediumSeaGreen&gt;|             &lt;ansiCyan&gt;TOGGLES               &lt;MediumSeaGreen&gt;|")
cecho("\n&lt;MediumSeaGreen&gt;|------------------------------------------------------------------------------------------------|\n")

local togglecolor = ""

for k, v in pairs(snd.toggle_info) do

if snd.toggles[k] then togglecolor = "DeepSkyBlue" else togglecolor = "SlateGray" end

  cecho("&lt;MediumSeaGreen&gt;|&lt;"..togglecolor.."&gt; "..padRight(k, 13).. "&lt;MediumSeaGreen&gt;|&lt;ForestGreen&gt; "..padRight(tostring(v.info), 44).."&lt;MediumSeaGreen&gt;|&lt;MediumTurquoise&gt; "..padRight(tostring(v.command), 34).."&lt;MediumSeaGreen&gt;|\n")
end

cecho("&lt;MediumSeaGreen&gt;*------------------------------------------------------------------------------------------------*\n")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (T|t)oggles$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Bashing helpfiles</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Sunder bashing</name>
							<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;bashing&lt;CadetBlue&gt; help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;has several methods of helping you bash, from hitting things in your room to helping you navigate the landscape of Aetolia and its many areas. You can easily know if &lt;green&gt;Sunder&lt;ForestGreen&gt; recognizes your area by doing a check with the &lt;red&gt;SURVEY&lt;ForestGreen&gt; command. As long as you see mob names, &lt;green&gt;Sunder&lt;ForestGreen&gt; will be able to hit things for you.")
cecho("\n")
cecho("\n&lt;red&gt;Consider this your warning: &lt;ForestGreen&gt;The folks who upkeep Sunder do not, by any means, condone or suggest using Sunder to do things while you are AFK or otherwise unable to attend to your character. From HELP AUTOMATION -&gt; FULLY automating quests and hunting - with movement and all actions included in the triggers - are allowed so long as one is present at the computer, as well as gambling automation. Please do not abuse what is being given to you without regard for the admin stance.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;DeepSkyBlue&gt;aa                    &lt;ForestGreen&gt;Make &lt;green&gt;Sunder &lt;ForestGreen&gt;try to hit everything in the room!")
cecho("\n                     &lt;ForestGreen&gt; If there is nothing left in the room, this will turn off.")
cecho("\n&lt;DeepSkyBlue&gt;ff                    &lt;ForestGreen&gt;Want to walk around manually and have Sunder hit things? Use this.")
cecho("\n                     &lt;ForestGreen&gt; It automatically turns on hitting when it finds a valid target.")
cecho("\n&lt;DeepSkyBlue&gt;grp &lt;person&gt;          &lt;ForestGreen&gt;Inform &lt;green&gt;Sunder&lt;ForestGreen&gt; of your bashing party.")
cecho("\n&lt;DeepSkyBlue&gt;grp queen rook pawn   &lt;ForestGreen&gt;Example of adding more than one person.")
cecho("\n&lt;DeepSkyBlue&gt;orbs                  &lt;ForestGreen&gt;Activate your ylem orbs with one alias!")
cecho("\n&lt;DeepSkyBlue&gt;sunder toggle generic &lt;ForestGreen&gt;Use generic mob type instead of number to bash.")
cecho("\n")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; has some more advanced features listed in &lt;DeepSkyBlue&gt;sunder help autobashing&lt;ForestGreen&gt;.")


cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (B|b)ashing$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Sunder auto bashing</name>
							<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;autobashing&lt;CadetBlue&gt; help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;recognizes a good majority of the areas in the game, including the main bashing areas and most of the ones you might use while gaining levels. The following methods will help you bash these areas, either singular or multiple at a time.")
cecho("\n")
cecho("\n&lt;red&gt;Consider this your warning: &lt;ForestGreen&gt;The folks who upkeep Sunder do not, by any means, condone or suggest using Sunder to do things while you are AFK or otherwise unable to attend to your character. From &lt;red&gt;HELP AUTOMATION -&gt;&lt;ForestGreen&gt; 'FULLY automating quests and hunting - with movement and all actions included in the triggers - are allowed so long as one is present at the computer, as well as gambling automation.' &lt;red&gt;Please do not abuse what is being given to you without regard for the admin stance.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;DeepSkyBlue&gt;goarea               &lt;ForestGreen&gt;Bash the current area you're in and then walk back to your city.")
cecho("\n                     &lt;ForestGreen&gt;Use this for bashing just one area. No need to use the below command.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;bashpath &lt;areas&gt;     &lt;ForestGreen&gt;Define your custom bashing route from valid areas.")
cecho("\n                     &lt;ForestGreen&gt;It will automatically walk you from the last room of area 1 to area 2, etc.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;bashpath tiyen, xaanhal, mamashi &lt;ForestGreen&gt;- for example, would bash those areas and then head home.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;There are some more functions in the scripts for use in your code for creating paths, doing new areas, etc.")
--You would want to look into SND Autopaths-&gt;Creating-&gt;start/add/compile.


cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (A|a)utobashing$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Utility helpfiles</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Questing Help File</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;QUESTING &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Always ending up with odds and ends in your inventory or kestrels following you around EVERYWHERE because you dared to walk through Three Widows? Well no more! You will now be able to toggle quests on and off so that you only whistle or pick up items when you want!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;------------")
cecho("\n&lt;ForestGreen&gt;As of right now, there is only one toggle to turn it on/off. More may be added in the future! It will not auto-walk areas for you, you will still need to walk around and while you do so &lt;green&gt;Sunder&lt;ForestGreen&gt; will pick up items and turn them in as appropriate. ")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;toggle questing       &lt;ForestGreen&gt;Toggles questing on/off")
cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (q|Q)uesting$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Who Help File</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;WHO &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------")
cecho("\n&lt;ForestGreen&gt;Tired of looking through the who list trying to figure out who is where and who they are with when looking for that pesky lesser that was just tapped? Well, thanks to &lt;green&gt;Czcibor&lt;ForestGreen&gt;, &lt;green&gt;Sunder &lt;ForestGreen&gt;has built in group checking via the who list!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;Using the alias &lt;DeepSkyBlue&gt;WHO GROUPS &lt;green&gt;Sunder &lt;ForestGreen&gt;will now sift through the who list and capture room locations. Once it is done with that, it will show you the names of the rooms that have more than one person in that location, how many people are there, and then who all is in that location! Note that those with the &lt;red&gt;cloaking&lt;ForestGreen&gt; artifact or in hidden rooms are unable to be tracked in this manner.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;who groups            &lt;ForestGreen&gt;Shows the full WHO list and then the grouped rooms with more than one person")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (w|W)ho$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Vermin Help File</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;VERMIN &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;-----------------------------------------")
cecho("\n&lt;ForestGreen&gt;We get it! Every time you see that daily/weekly/monthly(especially the monthly) milestone for vermin, you just want to run head first into a team of mages collapsing singularities and calamaties! So hopefully these will make your life easier from here on out and save you from death by mages! No guarantees :(")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;First, you will want to make sure you are wielding whatever you need to kill the vermin. After you are ready to start your quest of ridding a city of its vermin, you just &lt;DeepSkyBlue&gt;PATH TRACK &lt;ForestGreen&gt;to any city &lt;LimeGreen&gt;(make sure you are not an enemy!) &lt;ForestGreen&gt;and then type &lt;DeepSkyBlue&gt;toggle vermin &lt;ForestGreen&gt;to start! This will work similar to &lt;DeepSkyBlue&gt;gogo &lt;ForestGreen&gt;in that it will just begin bashing from where you are currently. No matter which city you begin your vermin bashing in, it will end at the vermin mob and will automatically sell your vermin! So no more accidental offerings of vermin to your gods! Should you need to finish early, just type &lt;DeepSkyBlue&gt;toggle vermin &lt;ForestGreen&gt;again and an echo will pop up to remind you to go sell your vermin!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;toggle vermin         &lt;ForestGreen&gt;Toggles the vermin autobasher on/off")
cecho("\n&lt;MediumSeaGreen&gt;-----------------------------------------")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (v|V)ermin$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Fluidcache Help File</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;FLUIDCACHE &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Ever log in and notice you lost a bunch of refills because your vials, bandages, or (gods forbid) rags decayed? Well NO MORE! Or at least, LESS LIKELY! &lt;green&gt;Sunder &lt;ForestGreen&gt;is now equipped with a few more aliases to help alleviate this problem!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;Simply input the alias you want to use and then either let &lt;green&gt;Sunder &lt;ForestGreen&gt;fill your empty vials, bandages, or rags or consume them into your fluidcache. If you are new to Aetolia, make sure you read &lt;green&gt;HELP FLUIDCACHE &lt;ForestGreen&gt;if you have not already!")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Keep in mind that these aliases will not buy anything for you. Please refer to &lt;DeepSkyBlue&gt;sunder help shops &lt;ForestGreen&gt;to see the aliases that will purchase bulk items for you!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;venoms                &lt;ForestGreen&gt;First buy the rags you need for combat and type &lt;DeepSkyBlue&gt;venoms")
cecho("\n                      &lt;ForestGreen&gt;to have &lt;green&gt;Sunder &lt;ForestGreen&gt;fill your rags for you. You can search this")
cecho("\n                      &lt;ForestGreen&gt;alias in your scripts to change which venoms you want it to fill!")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;unvenom               &lt;ForestGreen&gt;Just what it says! Typing &lt;DeepSkyBlue&gt;unvenom &lt;ForestGreen&gt;will fluidcache consume")
cecho("\n                      &lt;ForestGreen&gt;all the venoms from your rags!")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;fillvials             &lt;ForestGreen&gt;This alias will fill the vials in your inventory from your fluidcache.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;unfillvials           &lt;ForestGreen&gt;Like &lt;DeepSkyBlue&gt;unvenom&lt;ForestGreen&gt;, this alias will consume the elixirs")
cecho("\n                      &lt;ForestGreen&gt;in your vials back into your fluidcache.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;fillbandages          &lt;ForestGreen&gt;This will fill the clean bandages in your inventory with the poultices")
cecho("\n                      &lt;ForestGreen&gt;from your fluidcache.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;unfillbandages        &lt;ForestGreen&gt;Again... same as the other 'un' aliases, but for poultices.")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------------")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (F|f)luidcache$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Shop Help File</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;SHOPS &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;Purchasing necessary items from shops can be a bit mundane, but NO MORE! Often you will find yourself buying many refills or masses of pills - to help combat this, &lt;green&gt;Sunder &lt;ForestGreen&gt;includes a few aliases to help make that less painful!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;The first thing you need to do is find a shop. You can do this by going to any city (including Esterport!) and using &lt;DeepSkyBlue&gt;PATH TRACK DIRECTORY&lt;ForestGreen&gt;. This will take you to the directory where you can peruse all the shops in that city (think of it like a search engine). From there you can &lt;DeepSkyBlue&gt;DIRECTORY &lt;ForestGreen&gt;'&lt;DeepSkyBlue&gt;item&lt;ForestGreen&gt;' to see which shop is carrying the item(s) you need. If you have MXP turned on, you can click on the vnum for the shop you want or &lt;DeepSkyBlue&gt;PATH TRACK vnum &lt;ForestGreen&gt;to get there.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Once you are in a shop, you will simply need to put in the alias for the items you wish to purchase and let &lt;green&gt;Sunder &lt;ForestGreen&gt;do the rest!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;buypills #            &lt;ForestGreen&gt;Pills! Typing &lt;DeepSkyBlue&gt;buypills &lt;ForestGreen&gt;followed by an amount will buy that amount")
cecho("\n                      &lt;ForestGreen&gt;of every type of pill! EXAMPLE: &lt;DeepSkyBlue&gt;buypills 500 &lt;ForestGreen&gt;will buy &lt;LimeGreen&gt;500 &lt;ForestGreen&gt;of each pill.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;fillcache # type      &lt;ForestGreen&gt;Fluidcache! Just use &lt;DeepSkyBlue&gt;fillcache &lt;ForestGreen&gt;followed by the number of times")
cecho("\n                      &lt;ForestGreen&gt;you want to buy a refill and what type of refill you want to buy.")
cecho("\n                      &lt;ForestGreen&gt;The types are: &lt;DeepSkyBlue&gt;venoms&lt;ForestGreen&gt;, &lt;DeepSkyBlue&gt;poultices&lt;ForestGreen&gt;, and &lt;DeepSkyBlue&gt;elixirs&lt;ForestGreen&gt;. EXAMPLE: &lt;DeepSkyBlue&gt;fillcache") 
cecho("\n                      &lt;DeepSkyBlue&gt;10 elixirs &lt;ForestGreen&gt;will purchase &lt;LimeGreen&gt;10 &lt;ForestGreen&gt;refills of each type of elixir. The purchase")
cecho("\n                      &lt;ForestGreen&gt;line may be gagged, so just check your FC before and after purchasing!")
cecho("\n                      &lt;LimeGreen&gt;**NOTE** &lt;ForestGreen&gt;This will buy the amount of refills, so to fill your cache(&lt;LimeGreen&gt;1500&lt;ForestGreen&gt;)")
cecho("\n                      &lt;ForestGreen&gt;you will only need to purchase &lt;LimeGreen&gt;30 &lt;ForestGreen&gt;refills!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (S|s)hops$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Fishing Help File</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;FISHING &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Our &lt;green&gt;Sunder &lt;ForestGreen&gt;fishing system has been put together from several different systems, and will help you with your fishing milestones or just when you want to kick back and relax to earn some gold. The first thing you will want to do is set the amount of max fish you want to catch using &lt;DeepSkyBlue&gt;sunder maxfish # &lt;ForestGreen&gt;and the amount of fish currently in your bucket using &lt;DeepSkyBlue&gt;sunder fishbucket #&lt;ForestGreen&gt;. Once this is done just turn on the autofisher and let &lt;green&gt;Sunder &lt;ForestGreen&gt;do the rest. You will notice that all the spam has been removed, but it is still working and will notify you when it turns off due to reaching the maxfish amount or if the fishing hole is empty.")
cecho("\n")
cecho("\n&lt;red&gt;Consider this your warning: &lt;ForestGreen&gt;The folks who upkeep Sunder do not, by any means, condone or suggest using Sunder to do things while you are AFK or otherwise unable to attend to your character. From HELP AUTOMATION -&gt; FULLY automating quests and hunting - with movement and all actions included in the triggers - are allowed so long as one is present at the computer, as well as gambling automation. Please do not abuse what is being given to you without regard for the admin stance.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;1. Put up your wielded items manually and wield your pole.\n")
cecho("&lt;ForestGreen&gt;2. Go to a fishing hole.\n")
cecho("&lt;ForestGreen&gt;3. Do '&lt;DeepSkyBlue&gt;FISHING DISCERN&lt;ForestGreen&gt;' to make sure you see fish. This will\n")
cecho("&lt;ForestGreen&gt;   track the hole type, vnum, and what fish you see automatically\n")
cecho("&lt;ForestGreen&gt;   in a database it creates on the first time you use it.\n")
cecho("&lt;ForestGreen&gt;4. If you can fish there and there are fish, type in '&lt;DeepSkyBlue&gt;afish&lt;ForestGreen&gt;'\n") 
cecho("&lt;ForestGreen&gt;   to turn on the auto-fisher.\n")
cecho("&lt;ForestGreen&gt;5. If you run out of fish in this hole, it will turn off fishing on\n")
cecho("&lt;ForestGreen&gt;   its own. You can also type in '&lt;DeepSkyBlue&gt;afish&lt;ForestGreen&gt;' to turn it off.\n")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;afish                       &lt;ForestGreen&gt; Turns the auto-fisher off/on")
cecho("\n&lt;DeepSkyBlue&gt;sunder maxfish &lt;amount&gt;  &lt;ForestGreen&gt;    Set and check the max amount of fish you want to catch.")
cecho("\n&lt;DeepSkyBlue&gt;sunder fishbucket &lt;amount&gt; &lt;ForestGreen&gt;  Set and check the amount of fish in your bucket.\n                             Using &lt;DeepSkyBlue&gt;sunder fishbucket clear &lt;ForestGreen&gt;will set the amount to '&lt;green&gt;0&lt;ForestGreen&gt;'")
cecho("\n&lt;DeepSkyBlue&gt;fishing search ??        &lt;ForestGreen&gt;    You can search for a water hole type, or fish, from holes you've\n                             discerned.")
cecho("\n&lt;DeepSkyBlue&gt;fishing search full ??       &lt;ForestGreen&gt;If you prepend &lt;DeepSkyBlue&gt;info&lt;ForestGreen&gt; or &lt;DeepSkyBlue&gt;full&lt;ForestGreen&gt; it displays complete info instead of\n                             abridged.")
cecho("\n&lt;DeepSkyBlue&gt;fgo ?? &lt;ForestGreen&gt;                      Search and path to a specific fishing hole. EX: &lt;DeepSkyBlue&gt;fgo vortex&lt;ForestGreen&gt;.")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (F|f)ishing$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Name database help file</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;Name Database &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")
cecho("\n&lt;ForestGreen&gt;The name databse that &lt;green&gt;Sunder&lt;ForestGreen&gt; utilizes will be familiar to many of you who have come from other IRE games, including the utilization and coloring effects. See below for aliases to toggle certain items and general upkeep of the names contained.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Please note that you do NOT need to utilize the highlighting if you do not want to, but you absolutely do need the name database for other functions of &lt;green&gt;Sunder&lt;ForestGreen&gt;.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;------------")
cecho("\n&lt;ForestGreen&gt;By default, the name database should be installed when you set everything up. You can either make your own database of names as you go, or check on the discord and see if there's an updated list - you'll probably wind up with 1000+ names!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;sndb settings         &lt;ForestGreen&gt;Shows you current color configuration of everyone.")
cecho("\n&lt;DeepSkyBlue&gt;sndb hl               &lt;ForestGreen&gt;Toggles the highlighting of names on/off.")
cecho("\n&lt;DeepSkyBlue&gt;sndb hl &lt;org&gt; &lt;color&gt; &lt;ForestGreen&gt;Change your custom color config per city.")
cecho("\n&lt;DeepSkyBlue&gt;As a note --          Enemy highlighting isn't functional yet but is being worked on.")
cecho("\n&lt;DeepSkyBlue&gt;qwp                   &lt;ForestGreen&gt;Parse the who list to add new names.")
cecho("\n&lt;DeepSkyBlue&gt;whois &lt;person&gt;        &lt;ForestGreen&gt;Shows basic info like level and class. Currently disabled.")
cecho("\n&lt;tomato&gt;Please don't use this to metagame. Self police.")
cecho("\n&lt;DeepSkyBlue&gt;honors &lt;person&gt;       &lt;ForestGreen&gt;Update one individual person. Not as useful due to API changes.")
cecho("\n&lt;DeepSkyBlue&gt;sndb clearout         &lt;ForestGreen&gt;Remove unranked/people below level 50.")
cecho("\n&lt;DeepSkyBlue&gt;sndb redo             &lt;ForestGreen&gt;Re-check everyone in the database.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;There are some more functions in the scripts for use in your code for checking city/class/if they exist in the database etc.")

cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")

--[[
sndb settings - Shows basic settings information
sndb install - Initial install alias, otherwise unused

sndb hl - Highlight Names
sndb hl (org) (colour) - Change highlighting of a particular city
sndb hlprio (org|enemies) - Change highlight priority between cities/enemies
sndb ehl (i|u|b) - Change format of enemy highlighting (italics/bold/underline)
 -- Enemy highlighting isn't functional yet but is being worked on.

qwp - Parse online people. As a failsafe, it won't print if there's unchecked people. Just use it again once it's checked them.
whois (person) - Prints information pertaining to a person.
honours (person) - Will honours as per usual, but also check them via API.
sndb clearout - Remove unranked/low level people (under 50).
sndb redo - Will re-honours everyone currently in the database.


sndNDB_getColour(person) - Useful for highlighting; will return the colour of the person's city.
sndNDB_Exists(person) - Will tell you if they're tracked by the NDB yet.

sndNDB_getClass(person)
sndNDB_getCitizenship(person) - Both self-explanatory.
sndNDB_isCitizenOf(city, person) - Will return true if they're a citizen of X city.

]]</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (N|n)amedb$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Sunder Utilities Index</name>
							<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;UTILITIES &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;has several different utilities that are quite useful! Below is a summarized list that will direct you to the correct files so that you can become familiar with them and reference back to them at any time!")
cecho("\n")
cecho("\n&lt;MediumTurquoise&gt;To view the following &lt;green&gt;Sunder &lt;MediumTurquoise&gt;help files, use &lt;DeepSkyBlue&gt;sunder help &lt;MediumTurquoise&gt;&lt;filename&gt;!")
cecho("\n&lt;DeepSkyBlue&gt;Vermin               &lt;ForestGreen&gt;Explantion on &lt;green&gt;Sunder's &lt;ForestGreen&gt;vermin autobasher!")
cecho("\n&lt;DeepSkyBlue&gt;Fishing              &lt;ForestGreen&gt;Explantion on how to use &lt;green&gt;Sunder's &lt;ForestGreen&gt;fishing utilities!")
cecho("\n&lt;DeepSkyBlue&gt;Shops                &lt;ForestGreen&gt;Quick aliases to make purchasing easier!")
cecho("\n&lt;DeepSkyBlue&gt;Fluidcache           &lt;ForestGreen&gt;Aliases to consume and fill vials/rags/bandages!")
cecho("\n&lt;DeepSkyBlue&gt;Who                  &lt;green&gt;Sunder's &lt;ForestGreen&gt;WHO parsing system and how it works!")
cecho("\n&lt;DeepSkyBlue&gt;Questing             &lt;ForestGreen&gt;Helpful questing aliases (no more pesky kestrels following you around!)")
cecho("\n&lt;DeepSkyBlue&gt;Namedb               &lt;ForestGreen&gt;All the commands for the databse.")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (U|u)tilities$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Offense/defense helpfiles</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Sunder PK helpfile</name>
							<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;PvP&lt;CadetBlue&gt; help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;has several built in ways for every class to be, at some level, useful. Even if it is just automatically attacking a target with a bashing attack. &lt;green&gt;Sunder &lt;ForestGreen&gt;is not and will not be updated with the best 1v1 PvP methods, nor will requests for 1v1 specific items be given time. The intent of Sunder has been and always will be the ability for the average player to get into the PvP scene at the lowest level and be able to participate in team scenarios.")
cecho("\n")
cecho("\n&lt;red&gt;Some of the classes have decently fine-tuned aliases (Syssin, Templar) due to the original creator  spending time in those classes. Remember that these were built on the effort of another player and they do not speak to your own skill or development. Using them to beat people at the low or middle tier of skill level does not indicate that you are improving. If you are interested in learning to PvP in the 1v1 arena, your best bet is to examine what is built here and expand or change it as opposed to relying on it without modification. These are public offenses and people can and will abuse their access to them to make it easy to beat you.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;DeepSkyBlue&gt;ls &lt;person&gt;                         &lt;ForestGreen&gt;Choose your target caller(s)")
cecho("\n&lt;DeepSkyBlue&gt;ls stine vaessa bob                 &lt;ForestGreen&gt;Example of listening to more than one person.")
cecho("\n&lt;DeepSkyBlue&gt;loc                                 &lt;ForestGreen&gt;Need help?! Call out your place in the world over web!")
cecho("\n&lt;DeepSkyBlue&gt;acl                                 &lt;ForestGreen&gt;Toggle calling of afflictions over web.")
cecho("\n&lt;DeepSkyBlue&gt;tcl                                 &lt;ForestGreen&gt;Toggle calling of targets over web.")
cecho("\n&lt;DeepSkyBlue&gt;toggles disperse &lt;none/callers/all&gt; &lt;ForestGreen&gt;Automatic dispersing of writhe affs.")
cecho("\n                                    &lt;ForestGreen&gt;Default none. Not always necessary.")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; target calling - instead of the old rigid lists found within Sunder, we will now utilize the custom, on the fly lists along with our name database to be able to cycle through targets effectively in the room. Please see &lt;DeepSkyBlue&gt;sunder help calling&lt;ForestGreen&gt; for more information on using that.")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; has the following aliases available for you to use in combat. There may be more aliases included in the settings, but not always!")

if snd.class == "Monk" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Will use mind batter to hit with affs, if enemy prone then wrench.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;head &lt;white&gt;              - Used for damage, does not deviate unless target is proned.")
cecho("\n&lt;goldenrod&gt;Limbs:")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Used to hit different limbs, will change combo depending on parry.")
elseif snd.class == "Shapeshifter" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Goes for the head. Each time. Big damage/bleeding if not parried.")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Straight limb breaks into jawlocks.")
cecho("\n &lt;green&gt;insta&lt;white&gt;              - Goes for quarter kills. Check AB QUARTER for more information.")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Utilizes slash to delay limb breaks, good for pushing level 2 breaks.")
elseif snd.class == "Syssin" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Basic dstab w/venoms. No hypnosis.")
cecho("\n &lt;green&gt;magic&lt;white&gt;              - More advanced, geared towards magic, uses hypnosis.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - More advanced, geared towards physical, uses hypnosis.")
cecho("\n &lt;green&gt;kl&lt;white&gt;                 - 1v1 offense. Does not snap for you as that requires timing.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Straight damage.")
elseif snd.class == "Wayfarer" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;legs &lt;white&gt;              - Uses lob to pressure leg breaks, will try to dropstrike if able.")
cecho("\n &lt;green&gt;lock&lt;white&gt;               - Experimental skirmish route to seal locks w/slaughter and muddled.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Sensitivity/sight to support transfix. Boosted halt to keep people in room.")
cecho("\n &lt;green&gt;gaff&lt;white&gt;               - Group affs w/preference toward venom lock. Slaughter if prone w/sensitivity.")
cecho("\n &lt;green&gt;bleed&lt;white&gt;              - Bleed focused to assist Templar w/hemorrhage.")
elseif (snd.class == "Templar" or snd.class == "Revenant") then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ret &lt;white&gt;               - The 1v1 standard. Lock into retribution.")
cecho("\n &lt;green&gt;newb&lt;white&gt;               - Basic venoms, no bladefire empowerments, no vorpal.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Use a 2h weapon to zeal/dsw someone and do physical damage.")
cecho("\n &lt;green&gt;bleed&lt;white&gt;              - Bleed focused affs into hemorrhage.")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Two small bludgeon weapons to deal bruising and limb damage.")
elseif snd.class == "Shaman" or snd.class == "Alchemist" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Straight vinelash w/venoms.")
cecho("\n &lt;green&gt;storm&lt;white&gt;              - Works toward stormtouched, then goes for lightning damage.")
cecho("\n &lt;green&gt;supp&lt;white&gt;               - Aff-lock support.")
elseif snd.class == "Sentinel" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;salve&lt;white&gt;              - Works towards frozen w/limb breaks. Need raloth/icewyrm.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Venom lock into spinecut death sequence.")
cecho("\n &lt;green&gt;group&lt;white&gt;              - Group focused small aff pool into spinecut.")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Just venoms, no dhuriv attacks, perfect for starters.")
elseif snd.class == "Luminary" or snd.class == "Earthcaller" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;git&lt;white&gt;                - Damage kill with aff stacking and overwhelm.")
cecho("\n &lt;green&gt;mana&lt;white&gt;               - Straight mana sap.")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Smite + chasten.")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Sight into tfix/overwhelm.")
elseif snd.class == "Ascendril" or snd.class == "Bloodborn" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;damage&lt;white&gt;             - Damage kill.")
cecho("\n &lt;green&gt;fire&lt;white&gt;               - Set them ablaze and watch them burn.")
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;affs&lt;white&gt;               - Build affs!")
cecho("\n &lt;green&gt;solo&lt;white&gt;               - Push limb damage/frozen for a shatter!")
elseif snd.class == "Zealot" or snd.class == "Ravager" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Damage kill.")
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;fire&lt;white&gt;               - Focus on ablaze for Zealot support I guess? idk")
elseif snd.class == "Archivist" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build mental affs and go for unravel")
elseif snd.class == "Carnifex" or snd.class == "Warden" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route")
cecho("\n &lt;green&gt;legs&lt;white&gt;               - Specifically for legs!")
elseif snd.class == "Indorani" or snd.class == "Oneiromancer" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs! High Aeon/Hourglass prio.")
elseif snd.class == "Praenomen" or snd.class == "Akkari" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;mez&lt;white&gt;                - Work on siphoning mana for annihilate and mesmerize!")
elseif snd.class == "Teradrim" or snd.class == "Tidesage" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route")
elseif snd.class == "Sciomancer" or snd.class == "Runecarver"  then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route via grip and erupt, adds in transfix/chill")
cecho("\n &lt;green&gt;gdmg &lt;white&gt;               - Damage kill with singularity/morass involved")
cecho("\n &lt;green&gt;gaff&lt;white&gt;                - Build affs with singularity/morass involved!")
cecho("\n &lt;green&gt;sing1&lt;white&gt;                - Make your singularity/morass")
cecho("\n &lt;green&gt;gc&lt;white&gt;                   - Shoot your cannon/mortify at your target nearby")
end

cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n")
cecho("\n")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (p|P)(K|k)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Sunder defenses helpfile</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;Defenses &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;Upkeep of defenses can be a tedious task, especially those stripped after a certain amount of time or if you just don't want to worry about it. To that end, Sunder is equipped to be able to help you upkeep defenses in a mildly intelligent manner via checking what skills you have access. The system uses GMCP to automatically check your skills, as well as checking your tattoos and raceskills, to accurately and easily keep track.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;defup                 &lt;ForestGreen&gt;Turn on automatic defense upkeep of defenses.")
cecho("\n&lt;DeepSkyBlue&gt;kd &lt;defname&gt;          &lt;ForestGreen&gt;Toggle a specific defense upkeep on/off.")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; also has the built in capability to utilize the antiquated artifact goggles, making a number of defs instantaneous and without cost.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;toggle goggles        &lt;ForestGreen&gt;Toggle Sunder using goggles or not.")
cecho("\n&lt;DeepSkyBlue&gt;mygoggles #           &lt;ForestGreen&gt;Tell Sunder what level your goggles are set to.")
cecho("\n")
cecho("\n")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (D|d)efenses$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Sunder calling helpfile</name>
							<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;Calling &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;In previous iterations of Sunder, we used static calling lists that were susceptible to failure due to not having new people updated, people switching tethers, needing different orders, etc. To that end, we have updated our methodology and you may find all of the ways to manipulate targets below.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;tcl                   &lt;ForestGreen&gt;Turn on automatic target calling.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;atl [name]&lt;ForestGreen&gt;            Add targets in the priority you specify.")
cecho("\n              &lt;white&gt;        Example &gt; &lt;red&gt;atl ezreal nazeebo meepo")
cecho("\n&lt;DeepSkyBlue&gt;atp [name] [position]&lt;ForestGreen&gt; Add target with/without a # value for priority.")
cecho("\n              &lt;white&gt;        Example &gt; &lt;red&gt;atp tryndamere 1")
cecho("\n&lt;DeepSkyBlue&gt;tlist&lt;ForestGreen&gt;                 List your targets in web for others.")
cecho("\n&lt;DeepSkyBlue&gt;atlc&lt;ForestGreen&gt;                  Clears your targets out to start over.")
cecho("\n&lt;DeepSkyBlue&gt;atr&lt;ForestGreen&gt;                   Remove a singular target from your list.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;nt&lt;ForestGreen&gt;                    Manually skip to the next target in line.")
cecho("\n")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(S|s)under (H|h)elp (C|c)alling$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>^sunder help directory$</name>
						<script>cecho("\n&lt;MediumSeaGreen&gt;Found: &lt;white&gt;"..getMudletHomeDir())</script>
						<command></command>
						<packageName></packageName>
						<regex>^sunder help find my profile$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Vitals</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>setup</name>
						<script>snd.send("config wrapwidth 0")
snd.send("config auto_outc on")
snd.send("config combatmessages on")
snd.send("config affliction_view on")
snd.send("config simple_diag on")
snd.send("config curemsgs default")
snd.send("config fishnumbers on")
snd.send("gathering on")
if not sndNDB.installed then
  sndNDB_Install()
  sndNDB.highlightNames = false
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^\?setup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>toggles</name>
						<script>cecho("&lt;white&gt;Toggles:")
for tog in pairs(snd.toggles) do
 if snd.toggles[tog] then
  cecho("&lt;green&gt;\n"..string.title(tog))
 else
  cecho("&lt;red&gt;\n"..string.title(tog))
 end
end
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^togs$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Toggles</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>lighting</name>
						<script>snd.toggle("lighting")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(lgt|toggle lighting|toggle pipes)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>on</name>
						<script>snd.toggles.active = true
cecho("&lt;green&gt;Sunder is ON!")
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^sndon$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>off</name>
						<script>snd.toggles.active = false
cecho("&lt;red&gt;Sunder is OFF!")
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^sndoff$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>calling</name>
						<script>snd.clearTargetList()
snd.toggle("calling")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(tcl|toggle calling)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>affcalling</name>
						<script>snd.toggle("affcalling")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(acl|toggle affcalling)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>gallop</name>
						<script>snd.toggle("gallop")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(tgl|toggle gallop)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>newb basher</name>
						<script>snd.toggle("newbie")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(tnewb|toggle newbie)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>parry</name>
						<script>snd.toggle("parrying")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(tpry|toggle parry)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>attack echoes</name>
						<script>snd.toggle("atkecho")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(tatk|toggle attack echo)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>listening</name>
						<script>if matches[2] == "off" then
  if snd.toggles.listening then
    snd.toggle("listening")
  end
else
  if not snd.toggles.listening then
    snd.toggle("listening")
  end
  snd.toggles.listening = true
  if snd.offense_loaded then
    snd.callers = {}
    for name in string.gmatch(matches[2], '([^ ]+)') do
      table.insert(snd.callers, string.title(name))
    end
    cecho("&lt;white&gt;Listening to: &lt;green&gt;"..table.concat(snd.callers, "&lt;white&gt;, &lt;green&gt;").."&lt;white&gt;!")
    send(" ")
  else
    cecho("&lt;white&gt;Listening &lt;green&gt;ON&lt;white&gt;!")
    send(" ")
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^ls (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>rockharvest</name>
						<script>snd.toggle("rockharvest")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(tr|toggle rockharvest)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>lightning</name>
						<script>snd.toggle("lightning")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(tlgt|toggle lightning)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>dash</name>
						<script>snd.toggle("dash")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(tds|toggle dash)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Chameleon</name>
						<script>snd.toggle("chameleon")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(tcm|toggle chameleon)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Questing</name>
						<script>snd.toggle("questing")</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle questing$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Ylem Goggles</name>
						<script>snd.toggle("goggles")
snd.goggle_update()
  
</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle goggles$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Goggle level</name>
						<script>if matches[3] then
  cecho("&lt;red&gt;You have set your ylem goggles level to:&lt;orange_red&gt; "..matches[3].."&lt;red&gt;.")
  snd.toggles.goggle_level = tonumber(matches[3])
  snd.goggle_update()
else
  cecho("&lt;red&gt;You have set your ylem goggles level to:&lt;orange_red&gt; "..snd.toggles.goggle_level.."&lt;red&gt;.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(mygoggles|mygoggles (\d+))$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dome auto use</name>
						<script>snd.toggle("dome")</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle dome$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Auto check plants</name>
						<script>snd.toggle("plants")</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle plants$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Cobra bashing</name>
						<script>snd.toggle("cobra")</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle cobra$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Gag non target curing</name>
						<script>snd.toggle("nontargetgags")</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle non target gagging$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>auto reject lust</name>
						<script>snd.toggle("auto_reject")</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle reject$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Purge/Purify/Panacea</name>
						<script>if snd.class == "Praenomen" or snd.class == "Akkari" then
	snd.toggle("purify")
elseif snd.class == "Carnifex" or snd.class == "Warden" then
	snd.toggle("purge")
elseif snd.class == "Shaman" or snd.class == "Alchemist" then
	snd.toggle("panacea")
else
  cecho("\nYou have no purging ability for your class that needs to be turned on.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^pon$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Prism Bashing</name>
						<script>if snd.class == "Ascendril" or snd.class == "Bloodborn" then
	snd.toggle("prism")
else
  cecho("\nYou cannot prism bash in this class.")
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^prism$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Enrich Bashing</name>
						<script>if snd.class == "Ascendril" or snd.class == "Bloodborn" then
	snd.toggle("enrich")
else
  cecho("\nYou cannot enrich bash in this class.")
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^prism$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Hidden afflictions diagnose count</name>
						<script>if matches[2] then
  cecho("&lt;red&gt;You will diagnose at &lt;yellow&gt;"..matches[2].."&lt;red&gt; hidden afflictions.")
  snd.toggles.diagaffs = tonumber(matches[2])
else
  cecho("&lt;red&gt;You currently diagnose at&lt;yellow&gt; "..snd.toggles.diagaffs.."&lt;red&gt; hidden afflictions.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>(?i)^diagaffs(?: (\d+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Chameleon Targets</name>
						<script>local people = matches[2]:gsub(",", "")
peopleTable = matches[2]:split(" ")
snd.toggles.chameleonPeople = peopleTable
snd.message("Will try to chameleon as one of: "..table.concat(snd.toggles.chameleonPeople, ", "))</script>
						<command></command>
						<packageName></packageName>
						<regex>(?i)^chamtargets (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>target rune for tidesage/teradrim</name>
						<script>snd.toggles.targetrune = not snd.toggles.targetrune
if snd.toggles.targetrune then
  cecho("&lt;red&gt;Will now factor in targeting rune for tidesage/teradrim limb damage.")
else
  cecho("&lt;red&gt;Will no longer factor in targeting rune for tidesage/teradrim limb damage.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle targetrune$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>^toggle alerts$</name>
						<script>snd.toggles.alerts = not snd.toggles.alerts
if snd.toggles.alerts then
  cecho("&lt;red&gt;Will now display alerts on your prompt.")
else
  cecho("&lt;red&gt;Will no longer display alerts on your prompt.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle alerts$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set 200 race</name>
						<script>local ascendantTypes =
{
  "none",
  -- "adherent", split this up into the flavors below
  "seraph",
  "aetherial",
  "titan",
  "glacian",
  "nocturn",
  "sagani",
  "chaos",
  "tiarna",
  "astral",
  
  "instinct",
  "malevolent",
  "strife",
  "corruption",
  "memory",
  "tyranny",
}
if table.contains(ascendantTypes, matches[2]:lower()) then
  snd.toggles.ascendedtype = matches[2]:lower()
  cecho("&lt;red&gt;Ascended race set to: "..matches[2]:lower())
else
  cecho("&lt;red&gt;Invalid ascended race. Options are: "..table.concat(ascendantTypes, ", "))
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle ascendant (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Set your mount</name>
						<script>snd.toggles.mount = matches[2]
cecho("&lt;red&gt;Your mount's ID has been set to: "..snd.toggles.mount)</script>
						<command></command>
						<packageName></packageName>
						<regex>^snd mount (\d+)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Misc</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>mount</name>
						<script>snd.send("qeb recall "..snd.toggles.mount..snd.sep.."recall mount"..snd.sep.."quickmount "..snd.toggles.mount)
</script>
						<command></command>
						<packageName></packageName>
						<regex>^mnt$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>dismount</name>
						<script>snd.send("qeb qdmount"..snd.sep.."order "..snd.toggles.mount.." follow me")</script>
						<command></command>
						<packageName></packageName>
						<regex>^dm$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>shield tattoo</name>
						<script>if snd.toggles.attacking then
 snd.send("undefend")
end

if snd.toggles.attacking == true then snd.toggle("attacking") end
if snd.toggles.bashing == true then snd.toggle("bashing") end
if snd.toggles.fasthunt == true then snd.toggle("fasthunt") end


if snd.have_aff("paresis") then
 snd.send("firstaid elevate paresis")
end
if snd.class == "Carnifex" then
 snd.send("qeb soul shield")
else
 snd.send("qeb touch shield tattoo")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^ts$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>wield none</name>
						<script>snd.send("wipe left"..snd.sep.."wipe right"..snd.sep.."secure left"..snd.sep.."secure right"..snd.sep.."wear tower"..snd.sep.."wear buckler"..snd.sep.."wear shield")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^wnon$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>directions</name>
						<script>if snd.toggles.calling and not snd.toggles.fasthunt then
 snd.send("qeb get monolith"..snd.sep..matches[2]..snd.sep.."drop monolith")
else
 snd.send("qeb "..matches[2])
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(n|e|s|w|ne|nw|se|sw|in|up?|out|o|d|down)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>group</name>
						<script>snd.group = {}
if matches[2] ~= "none" then
 for name in string.gmatch(matches[2], '([^ ]+)') do
  table.insert(snd.group, string.title(name))
 end
end
display(snd.group)</script>
						<command></command>
						<packageName></packageName>
						<regex>^grp (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Landmarks w/descriptions</name>
						<script>snd.landmarks_descs =
  {
    {"tear", "The tear of Lleis"},
    {"orrery", "The Celestial Orrery"},
    {
      "Tara, Cosmina, Derryk, Sylvos, Tiber, Gladius, Gloom, Derban, Grothgar, Grollum, Smirnick, Smythe, Helfga, Naggamantex, Glixx, Quelzar, Sisters, Hecuba",
      "Fengard Mobs",
    },
    {"Tellimerius, Broondac, Belmith, Marcello, Axel, Makkali, Mamba, Tolonar", "Milestone mobs"},
    {"hg", "Outside the Hunting Grounds"},
    {"Nighteye, Claw, Shade, Staghelm, Silence, Rose, Ivory, Rowan, HGShrine", "Approximate locations of hunting grounds items."},
    {"herolt", "Herolt's quiz"},
    {"farkle", "The permanent farkle table"},
    {"lineconnect", "The game of Line Connect"},
    {"poker", "The poker table in esterport"},
    {"safari", "Giovelli's Safari"},
    {"boggard", "Boggard in esterport. Takes black ylem."},
    {"staging", "Where your city gathers for combat."},
    {"training", "Your city's training room."},
  }
for _, landmark in ipairs(snd.landmarks_descs) do
  cecho("\n&lt;sandy_brown&gt;" .. string.title(landmark[1]) .. ": &lt;aquamarine&gt;" .. landmark[2])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^snd landmarks$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>landmarks</name>
						<script>local tmp = getRoomUserData(1, "gotoMapping")
if not tmp or tmp == '' then
  tmp = "[]"
end
local temp, maptable = yajl.to_value(tmp), {}
for k, v in pairs(temp) do
  maptable[k:lower()] = v
end
local destinationRoom = maptable[matches[2]:lower()]
snd.moving_to = (destinationRoom or snd.landmarks[matches[2]] or matches[2])

snd.core()</script>
						<command></command>
						<packageName></packageName>
						<regex>^pt (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>walkarea</name>
						<script>-- Used to quickly walk through an area without touching the mobs, use triggers to define ways to stop as in the Orrery Globe method
snd.toggles.fastwalk = true
snd_walkArea()
expandAlias("move")</script>
						<command></command>
						<packageName></packageName>
						<regex>^walkarea$</regex>
					</Alias>
				</AliasGroup>
				<Alias isActive="yes" isFolder="no">
					<name>target</name>
					<script>snd.target = string.title(matches[2])
if snd.toggles.calling then
 snd.send("wt Target: "..snd.target)
end
echo("Target: "..snd.target)
send(" ")
if snd.target_trigger_id then killTrigger(snd.target_trigger_id) end
snd.target_trigger_id = tempTrigger(snd.target, [[selectString("]] .. snd.target .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.target_trigger_idlow then killTrigger(snd.target_trigger_idlow) end
snd.target_trigger_idlow = tempTrigger(string.lower(snd.target), [[selectString("]] .. string.lower(snd.target) .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.offense_loaded then
 snd.reset_target()
 snd.target_gone = false
end
raiseEvent("sunder_enemy_affs_updated")
raiseEvent("sunder_enemy_limbs_updated")</script>
					<command></command>
					<packageName></packageName>
					<regex>^t (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>stop attacking</name>
					<script>if mmp ~= nil then
  expandAlias("mstop", false)
end
if snd.toggles.attacking == true then snd.toggle("attacking") end
snd.send("queue clear")
snd.send("path stop")
if snd.bashing_loaded then
  if snd.toggles.fasthunt then
    expandAlias("ff", false)
  end
  bot.going = false
  snd.toggles.bashing = false
  snd.defenses.def_vigor.needit = false
  snd.which_path = ""
end
if snd.offense_loaded then
  snd.send("target nothing" .. snd.sep .. "target nothing with right")
  snd.hound_queue = {}
end
if snd.ylem_loaded then
  ylm.active = false
end
snd.pathing = false
snd.toggles.fastwalk = false
raiseEvent("sunder_update_toggles")
</script>
					<command></command>
					<packageName></packageName>
					<regex>^stap$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>target call over web - individual targets</name>
					<script>send("wt Target: "..matches[2])
snd.target = string.title(matches[2])
echo("Target: "..snd.target)
send(" ")
raiseEvent("sunder_enemy_affs_updated")

if snd.target_trigger_id then killTrigger(snd.target_trigger_id) end
snd.target_trigger_id = tempTrigger(snd.target, [[selectString("]] .. snd.target .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.target_trigger_idlow then killTrigger(snd.target_trigger_idlow) end
snd.target_trigger_idlow = tempTrigger(string.lower(snd.target), [[selectString("]] .. string.lower(snd.target) .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.offense_loaded then
 snd.reset_target()
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^tc (\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>reset sunder</name>
					<script>snd.reset_me()
snd.defenses_loaded = false
snd.crescentable = true
snd.target_aegis = false
snd.growbal = 0
snd.infiltrate = false
</script>
					<command></command>
					<packageName></packageName>
					<regex>^rst$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Bashing</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Autobashing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>move</name>
						<script>x = bot.info.room
x = "v"..x
if bot.going then
 if bot.path[x] ~= nil then
  if string.find(bot.path[x], "pt") then
	 y = string.sub(bot.path[x], 3)
	 snd.moving_to = y
	 send(" ")
	elseif mmp ~= nil then
   expandAlias("goto "..bot.path[x], false)
  else
   snd.moving_to = bot.path[x]
	 send(" ")
  end
 else
  echo("where r we")
 end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^move$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>initiate</name>
						<script>--Set the correct path, whether that is by checking level or using input from the user.
if matches[2] then
  snd.runPath(matches[2])
else
  local level = ""
  for check in string.gmatch(gmcp.Char.Status.level, '[%d]+') do
    if level == "" then
      level = tonumber(check)
    end
  end
  if level &gt; 93 then
    snd.runPath("high")
  else
    snd.runPath("low")
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^gogo(?: (\w+))?$</regex>
					</Alias>
				</AliasGroup>
				<Alias isActive="yes" isFolder="no">
					<name>start bashing</name>
					<script>if not snd.toggles.bashing then snd.toggle("bashing") end
snd.room_clear = true
snd.defenses.def_vigor.needit = true
snd.send("leading on")</script>
					<command></command>
					<packageName></packageName>
					<regex>^aa$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>stop bashing</name>
					<script>if snd.toggles.bashing then snd.toggle("bashing") end
snd.defenses.def_vigor.needit = false
cecho("&lt;green&gt;Bashing OFF!")
if snd.toggles.fasthunt then
 snd.toggles.fasthunt = false
 echo("\nFasthunt OFF!")
end
snd.send("queue clear")
send(" ")</script>
					<command></command>
					<packageName></packageName>
					<regex>^ast$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>fasthunt</name>
					<script>snd.toggle("fasthunt")</script>
					<command></command>
					<packageName></packageName>
					<regex>^ff$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>generics</name>
					<script>snd.toggle("generics")

cecho("\n&lt;red&gt;The use of a generic word (ie 'kelki' instead of 'kelki1234' or just '1234') brings with it a certain amount of risk. You risk hitting an NPC that you may not mean to, including quest mobs with the same short name, or boss mobs in the same vein. This is your warning. Please use it when appropriate.")
</script>
					<command></command>
					<packageName></packageName>
					<regex>^toggle generic$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>orbs</name>
					<script>snd.send("activate amberorb"..snd.sep.."activate greenorb"..snd.sep.."activate whiteorb"..snd.sep.."activate crimsonorb"..snd.sep.."activate ceruleanorb")
</script>
					<command></command>
					<packageName></packageName>
					<regex>^orbs$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>chocolates</name>
					<script>snd.send("eat mint"..snd.sep.."eat hazelnut"..snd.sep.."eat caramel"..snd.sep.."eat strawberry")</script>
					<command></command>
					<packageName></packageName>
					<regex>^choc$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>See if Sunder has path</name>
					<script>if sunder_areaPaths[gmcp.Room.Info.area] then 
  snd.message("We've got a path here")
else
  snd.message("No path here.")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^check this area$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>single attack</name>
					<script>if snd.bashing.target ~= snd.target then snd.bashing.target = snd.target end
battack = ""
for k,v in pairs(snd.class_list) do
  if snd.class_list[k].class == snd.class then
  if snd[v.class:lower().."_bash_override"] then
    snd[v.class:lower().."_bash_override"]()
  else
    v.func()
  end
  snd.send("qeb stand"..snd.sep..battack)
  end
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^f$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Move to next area</name>
					<script>if snd.toggles.fasthunt then

  local area = sunder_areaPaths[gmcp.Room.Info.area]
  local last_room_of_this_area = ""

  for k, v in pairs(area) do
    if v == "ptcity" then
      last_room_of_this_area =  k
    end
  end

  expandAlias("goto "..bot.path[last_room_of_this_area])

end</script>
					<command></command>
					<packageName></packageName>
					<regex>^move to next area$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Apothecary mode</name>
					<script>if matches[2] then
  snd.apothecaryEnabled = matches[2] == "on"
else
  snd.apothecaryEnabled = not snd.apothecaryEnabled
end

cecho("&lt;green&gt;Apothecary mode: &lt;orange&gt;"..(snd.apothecaryEnabled and "ON!" or "OFF!"))</script>
					<command></command>
					<packageName></packageName>
					<regex>^snd apothecary(?: (on|off))?$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Healing</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>defense toggle</name>
					<script>if not string.find(matches[2], "def_") then
 matches[2] = "def_"..matches[2]
end
for i in pairs(snd.defenses) do
 if string.find(i, matches[2]) then
  if snd.defenses[i].needit then
   snd.defenses[i].needit = false
   snd.message("No longer keeping &lt;red&gt;"..i.."&lt;white&gt;.", "echo")
   send(" ")
  else
   snd.defenses[i].needit = true
   snd.message("Now keeping &lt;green&gt;"..i.."&lt;white&gt;.", "echo")
   send(" ")
  end
  return
 end
end
snd.message("No such defense as &lt;red&gt;"..matches[2].."&lt;white&gt;!", "echo")
send(" ")</script>
					<command></command>
					<packageName></packageName>
					<regex>^kd (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>defense options</name>
					<script>local selection = ""
if matches[3] then 
  selection = matches[3] 
else
  if snd.class == "None" and snd.toggles.ascendedtype ~= "none" then
    selection = snd.toggles.ascendedtype
  else
    selection = snd.class:lower()
  end
end

if snd.class == "Ascendril" then send("simultaneity") end
if snd.class == "Bloodborn" then send("prowess") end
if snd.class == "Archivist" then snd.send("incite lens") end
if snd.class == "Sciomancer" then snd.send("channel shadow") end
if snd.class == "Runecarver" then snd.send("straddle line") end
if snd.class == "Teradrim" then snd.send("golem call") end
if snd.class == "Tidesage" then snd.send("synth call") end
 if snd.toggles.active == false then
  display("Sunder is currently off. Please SNDON to turn it back on! If you wish to remove this behavior, alter it in the 'general deaths' trigger.")
else
  send("def", false)
end

snd.load_def(selection)</script>
					<command></command>
					<packageName></packageName>
					<regex>^(ldd (.*)|defup)$</regex>
				</Alias>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Toggles</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="no" isFolder="no">
						<name>healing</name>
						<script>snd.toggle("healing")</script>
						<command></command>
						<packageName></packageName>
						<regex>^hl$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>defenses</name>
						<script>snd.toggle("defenses")</script>
						<command></command>
						<packageName></packageName>
						<regex>^tdf$</regex>
					</Alias>
					<Alias isActive="no" isFolder="no">
						<name>clotting</name>
						<script>snd.toggle("clotting")</script>
						<command></command>
						<packageName></packageName>
						<regex>^tclt$</regex>
					</Alias>
					<Alias isActive="no" isFolder="no">
						<name>standing</name>
						<script>snd.toggle("standing")</script>
						<command></command>
						<packageName></packageName>
						<regex>^ss$</regex>
					</Alias>
				</AliasGroup>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Offense</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>template</name>
					<script>--[[ This is a blank attack template, just the most basic outline of what an offense
 alias should look like. ]]--
if snd.class == "MyClass" then -- set this to the class this alias is for
snd.starting_attack() -- always run this first, it does some important resets
function snd.attack_function() -- defining this function is how we tell sunder what to do
	if not snd.waiting.queue then -- don't want to spam, this will prevent that
		-- declare some important variables, you can add more here if you need
		local string = ""
		local call = ""

		-- attack logic goes here, you need to set string = whatever you want to send
		string = "punch "..snd.target
		call = "wt Afflicting "..snd.target..": DEATH"

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
				</Alias>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Generic</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>my location</name>
						<script>snd.send("wt I'm at ("..gmcp.Room.Info.num..") '"..gmcp.Room.Info.name.."' in "..gmcp.Room.Info.area)</script>
						<command></command>
						<packageName></packageName>
						<regex>^loc$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>eye sigil</name>
						<script>snd.set_queue("quickwield both eyesigil"..snd.sep.."relax grip"..snd.sep.."throw eye at ground"..snd.sep.."qeb secure eyesigil")</script>
						<command></command>
						<packageName></packageName>
						<regex>^eye$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>web tattoo</name>
						<script>if snd.toggles.attacking then snd.toggle("attacking") end
if matches[2] == nil then
 snd.send("qeb touch web "..snd.target)
else
 snd.send("qeb touch web "..matches[2])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^tw(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>brazier</name>
						<script>if matches[2] == nil then
 snd.attack("touch brazier "..snd.target)
else
 snd.attack("touch brazier "..matches[2])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^brz(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>tentacle</name>
						<script>if matches[2] == nil then
 snd.attack("touch tentacle "..snd.target)
else
 snd.attack("touch tentacle "..matches[2])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^tnt(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>orrery</name>
						<script>snd.send("infuse orrery with "..snd.faction)</script>
						<command></command>
						<packageName></packageName>
						<regex>^or$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>breathe fire</name>
						<script>snd.send("qeb breathe fire at icewall")</script>
						<command></command>
						<packageName></packageName>
						<regex>^bf$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>prism</name>
						<script>if matches[2] == nil then
 snd.attack("touch prism "..snd.target)
else
 snd.attack("touch prism "..matches[2])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^prm(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>shackle</name>
						<script>snd.send("qeb refining shackle eld")</script>
						<command></command>
						<packageName></packageName>
						<regex>^sh$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>tumble</name>
						<script>snd.send("qeb tumble "..matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^tm (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>dummy mode</name>
						<script>snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = "punch "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
</script>
						<command></command>
						<packageName></packageName>
						<regex>^dummy$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>swing up</name>
						<script>if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb swing up")</script>
						<command></command>
						<packageName></packageName>
						<regex>^su$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>swing down</name>
						<script>if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb swing down")</script>
						<command></command>
						<packageName></packageName>
						<regex>^sd$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Quick translocator alias</name>
						<script>if snd.toggles.attacking then snd.toggle("attacking") end
if snd.toggles.bashing then snd.toggle("bashing") end
if snd.toggles.fasthunt then snd.toggle("fasthunt") end
snd.send("qeb use translocator")</script>
						<command></command>
						<packageName></packageName>
						<regex>^ut$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>disperse</name>
						<script>if matches[2] ~= "none" and matches[2]~= "callers" and matches[2]~="all" then 
	send(" ")
	cecho("\n&lt;red&gt;Not a viable choice! &lt;white&gt;Enter either: &lt;red&gt;none &lt;white&gt;| &lt;yellow&gt;callers &lt;white&gt;| &lt;green&gt;all")
	snd.toggles.dispersing = false
else
	snd.disperse = matches[2]
	if snd.disperse == "none" then
		snd.toggles.dispersing = false
		send(" ")
		cecho("\n&lt;red&gt;Dispersing is now off.")
	else
		snd.toggles.dispersing = true
		send(" ")
		cecho("\n&lt;red&gt;Dispersing: &lt;green&gt;"..snd.disperse)
	end
  raiseEvent("sunder_update_toggles")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle disperse (\w+)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Neutral</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Monk</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>afflictions</name>
								<script>if snd.class == "Monk" then
snd.giving = {
"paresis",
"stupidity",
"anorexia",
"recklessness",
"dizziness",
"confusion",
"epilepsy",
"hallucinations"
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  if snd.used.shield then
   string = "combo "..snd.target.." sck ucp ucp"
	elseif snd.proned() and not snd.checkAff("writhe_impaled") then
	 if snd.parried_limb == "left leg" then
	  string = "combo "..snd.target.." wrt right leg hfp right hfp right"
	 else
	  string = "combo "..snd.target.." wrt left leg hfp left hfp left"
	 end
  else
	 one = "none"
	 two = "none"
	 three = "none"
   for i in pairs(snd.giving) do
    if not snd.checkAff(snd.giving[i]) then
     if one == "none" then
      one = snd.giving[i]
		 elseif two == "none" then
		  two = snd.giving[i]
		 elseif three == "none" then
		  three = snd.giving[i]
     end
    end
   end
	 if three ~= "none" then
    string = "mind batter "..snd.target.." "..one.." "..two.." "..three
		if snd.toggles.affcalling and not snd.target_gone then
		 string = "wt Battering "..snd.target..": "..one..", "..two..", "..three..snd.sep..string
		end
	 else
    if snd.parried_limb == "head" then
     string = "combo "..snd.target.." sdk hkp hkp"
		else
	   string = "combo "..snd.target.." wwk ucp ucp"
		end
	 end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mouse mode</name>
								<script>if snd.class == "Monk" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  if snd.used.shield then
   string = "combo "..snd.target.." sck ucp ucp"
	elseif snd.proned() and not snd.checkAff("writhe_impaled") then
	 if snd.parried_limb == "left leg" then
	  string = "combo "..snd.target.." wrt right leg hfp right hfp right"
	 else
	  string = "combo "..snd.target.." wrt left leg hfp left hfp left"
	 end
  elseif snd.parried_limb == "head" or not snd.no_parry() then
	 string = "combo "..snd.target.." sdk hkp hkp"
	else
	 string = "combo "..snd.target.." wwk ucp ucp"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ms$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>head</name>
								<script>if snd.class == "Monk" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
    if snd.used.shield then
      string = "combo "..snd.target.." sck ucp ucp"
    elseif (snd.checkAff("left_leg_crippled") or snd.checkAff("right_leg_crippled")) then
      string = "swk "..snd.target
    elseif snd.checkAff("fallen") and not snd.checkAff("writhe_impaled") then
	    string = "bbt "..snd.target
	  else
	    string = "combo "..snd.target.." wwk ucp ucp"
    end
    
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^head$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limbs</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Limbs</name>
								<script>if snd.class == "Monk" then
 
  snd.starting_attack()
 
  function snd.attack_function()
    if not snd.waiting.queue then
 
      local string = "" -- this will populate with our attack
      local call = "" -- call your aff you're pushing
      local kai = tonumber(gmcp.Char.Vitals.kai) 
 
      snd.giving = {"stupidity", "anorexia", "paresis", "recklessness", "confusion", "epilepsy"}      
 
      snd.mindAffliction = "none"
      for i in pairs(snd.giving) do
        if not snd.checkAff(snd.giving[i]) then
          if snd.mindAffliction == "none" then
            snd.mindAffliction = snd.giving[i]
            if snd.mindAffliction == "confusion" then
              snd.mindAffliction = "confuse"
            elseif snd.mindAffliction == "paresis" then
              snd.mindAffliction = "paralyse"
            end
          end
        end
      end
 
      if snd.used.shield then
        tekuraKick = "sck"
      elseif snd.stance ~= "tiger" then
		     tekuraKick = "tgs"
	    elseif (snd.checkAff("writhe_impaled") or snd.checkAff("head_mangled") or snd.limb_dmg["head"] &gt;= 66.66) and snd.checkAff("fallen") then
        tekuraKick = "axk"
      elseif snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"},1) and not snd.checkAff("fallen") then
        tekuraKick = "swk"
      elseif snd.limb_dmg["left leg"] &lt; 33.33 and (snd.no_parry() or snd.parried_limb ~= "left leg") and snd.resto_limb ~= "left leg" then
        tekuraKick = "snk left"
	    elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.no_parry() or snd.parried_limb ~= "right leg") and snd.resto_limb ~= "right leg" then
        tekuraKick = "snk right"
	    else 
        tekuraKick = "wwk"
      end
 
      if snd.parried_limb ~= "left leg" and snd.limb_dmg["left leg"] &lt; 33.33 and snd.resto_limb ~= "left leg" then
        firstPunch = "hfp left"
      elseif snd.parried_limb ~= "right leg" and snd.limb_dmg["right leg"] &lt; 33.33 and snd.resto_limb ~= "right leg" then
        firstPunch = "hfp right"
      else
		    firstPunch = "hkp"
      end
 
      if snd.parried_limb ~= "left leg" and snd.limb_dmg["left leg"] &lt; 33.33 and snd.resto_limb ~= "left leg" then
        secondPunch = "hfp left"
      elseif snd.parried_limb ~= "right leg" and snd.limb_dmg["right leg"] &lt; 33.33 and snd.resto_limb ~= "right leg" then
        secondPunch = "hfp right"
      else
		    secondPunch = "hkp"
      end
 
      if snd.theytumbling then
        string = "slt "..snd.target
      elseif snd.checkAff("fallen") and not snd.checkAff("writhe_impaled") and snd.checksomeAffs({"left_leg_broken", "right_leg_broken", "right_arm_broken", "left_arm_broken"},1) then
        string = "bbt "..snd.target
      elseif kai &gt;= 40 and not snd.enemy_restoration_balance and snd.checksomeAffs({"left_leg_broken", "right_leg_broken", "right_arm_broken", "left_arm_broken"},1) then
			     string = "kai cripple "..snd.target
      else
        string = "combo "..snd.target.." "..tekuraKick.." "..firstPunch.."  "..secondPunch..snd.sep.." mind "..snd.mindAffliction.." "..snd.target
        call = "wt Afflicting "..snd.target..": "..snd.mindAffliction..snd.sep
      end
 
      if snd.toggles.affcalling and not snd.target_gone then
        string = call..string
		  end
 
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
 
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Shapeshifter</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limb Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mouse mode</name>
								<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not snd.checkAff("writhe_thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not snd.checkAff("necklock") then
		 mangled = limbs[limb]
		elseif not snd.checkAff("writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 end
	end
	if snd.used.shield then
	 string = "touch hammer "..snd.target
	-- check if we can jawlock now!
  elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then
	 if string.find(mangled, "leg") then
	  string = "jawlock thigh of "..snd.target
	 elseif mangled == "head" then
	  string = "jawlock neck of "..snd.target
	 elseif mangled == "torso" or string.find(mangled, "arm") then
	  string = "jawlock armpit of "..snd.target
	 end
	elseif broken ~= "nothing" and not snd.jawlocked then
	 string = "destroy "..broken.." of "..snd.target
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ms$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>group quarter</name>
								<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not snd.checkAff("writhe_thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not snd.checkAff("writhe_necklock") then
		 mangled = limbs[limb]
		elseif not snd.checkAff("writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 end
	end
  
	if snd.used.shield then
	 	string = "pounce "..snd.target
	elseif snd.theyran then
	  string = "neckdrag "..snd.target..snd.neckdragdir
	-- check if we can jawlock now!
	elseif snd.checksomeAffs({"writhe_thighlock", "writhe_necklock", "writhe_armpitlock"}, 1) and not snd.jawlocked then
	 string = "quarter "..snd.target
	elseif broken ~= "nothing" and not snd.jawlocked then
	 string = "destroy "..broken.." of "..snd.target
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^insta$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>limbs</name>
								<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	crippled = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not snd.checkAff("writhe_thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not snd.checkAff("writhe_necklock") then
		 mangled = limbs[limb]
		elseif not snd.checkAff("writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 elseif snd.checkAff(limbs[limb]:gsub(" ","_").."_crippled") and snd.limb_dmg[limbs[limb]] &lt; 33.33 and crippled == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
		 crippled = limbs[limb]
		end
	 end
	end
	if snd.used.shield then
	 	string = "pounce "..snd.target
	elseif snd.theyran then
	  string = "neckdrag "..snd.target..snd.neckdragdir
	elseif snd.jawlocked then
	 string = "rupture "..snd.target
	-- check if we can jawlock now!
  elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then
	 if string.find(mangled, "leg") then
	  string = "jawlock thigh of "..snd.target
	 elseif mangled == "head" then
	  string = "jawlock neck of "..snd.target
	 elseif mangled == "torso" or string.find(mangled, "arm") then
	  string = "jawlock armpit of "..snd.target
	 end
	elseif broken ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then
	 string = "mangle "..broken.." of "..snd.target
	elseif crippled ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then
	 string = "destroy "..crippled.." of "..snd.target
	elseif snd.resto_limb ~= "none" and snd.defenses.def_fury.state ~= "deffed" then
	 string = "combo "..snd.target.." hamstring left hamstring right"
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	 if snd.defenses.def_fury.state == "deffed" then
	  string = "pounce "..snd.target..snd.sep..string
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>More In-Depth Quartering</name>
								<script>--Note, this one is using more than just slashing to do limb damage. So, it's a bit more effective at getting quarters.

if snd.class == "Shapeshifter" then
	snd.starting_attack()
	function snd.attack_function()
 		if not snd.waiting.queue then
  		local function feralityConvert(limb)
    		if string.find(limb, "leg") then
      		return "hamstring "..limb:gsub(" leg", "")
    		elseif string.find(limb, "arm") then
      		return "rend "..limb:gsub(" arm", "")
    		elseif limb == "torso" then
      		return "bodypunch"
    		elseif limb == "head" then
      		return "skullwhack"
    		else
      		return "slash "..limb
    		end
  		end
  -- list what limbs to hit
  		limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
			mangled = "nothing"
      damaged = "nothing"
			broken = "nothing"
  		for limb in pairs(limbs) do
	 			if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  			if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "writhe_thighlock") then
	   				mangled = limbs[limb]
					elseif limbs[limb] == "head" and not table.contains(snd.target_has, "writhe_necklock") then
		 				mangled = limbs[limb]
					elseif not table.contains(snd.target_has, "writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 				mangled = limbs[limb]
					end
	 			elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  			if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") and snd.parried_limb ~= limbs[limb] then
	   				broken = limbs[limb]
					end
	 			end
  		end  --end of for loop  
  		for _, aff in pairs(snd.target_has) do
      	if string.find(aff, "_crippled") and snd.limb_status[aff:gsub("_crippled ", "")] ~= "crippled" and snd.limb_status[aff:gsub("_crippled", "")] ~= "mangled" and snd.parried_limb ~= aff:gsub("_crippled", "") then
        	damaged = aff:gsub("_crippled", "")
          if damaged == "left_leg" then
            damaged = "left leg"
          elseif damaged == "right_leg" then
            damaged = "right leg"
          elseif damaged == "left_arm" then
            damaged = "left arm"
          elseif damaged == "right_arm" then
            damaged = "right arm"
          end
          break
        end
      end  --end of for loop  
			
			if snd.used.shield then
	 			string = "pounce "..snd.target
				
			elseif snd.checksomeAffs({"writhe_thighlock", "writhe_necklock", "writhe_armpitlock"},1) and not snd.jawlocked then -- check if we can jawlock now!
	 			string = "quarter "..snd.target
  		elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then -- Checking for Jawlock opertunities
				if string.find(mangled, "leg") and not snd.checkAff("groinrip")then
	  			string = "jawlock thigh of "..snd.target
	 			elseif mangled == "head" and not snd.checkAff("throatrip") then
	  			string = "jawlock neck of "..snd.target
	 			elseif mangled == "torso" or string.find(mangled, "arm") and not snd.checkAff("spleenrip") then
	  			string = "jawlock armpit of "..snd.target
				end --end of attempts to get a lock in
	 
			elseif broken ~= "nothing" and not snd.jawlocked then
	 			string = "destroy "..broken.." of "..snd.target
			elseif damaged ~= "nothing" and not snd.jawlocked then
        string = "mangle "..damaged.." of "..snd.target
      else
	 			left = "nothing"
	 			right = "nothing"
	 			for limb in pairs(limbs) do
	  			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 				if right == "nothing" then
		  				right = feralityConvert(limbs[limb])
		 				elseif left == "nothing" then
		  				left = feralityConvert(limbs[limb])
		 				end
					end
	 			end
	 			if left == "nothing" then -- we only found one limb to hit
	  			left = right -- double up!
	 			end
	 			string = "combo "..snd.target.." "..left.." "..right
			end -- end of primary attacking function setup
				
  		if string ~= snd.last_attack and not snd.waiting.queue then
   			snd.last_attack = string
   			snd.send("qeb "..snd.last_attack)
   			snd.waiting.queue = true
   			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  	end--end the actual attack rolling
 	end --end the main code
end --end the function
--and sending it to the mud
snd.attack_function()   
end -- end the class </script>
								<command></command>
								<packageName></packageName>
								<regex>^quart$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>raw damage</name>
								<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
  if not snd.waiting.queue then
    if snd.used.shield then
   		string = "pounce "..snd.target
		elseif snd.theyran then
			string = "neckdrag "..snd.target..snd.neckdragdir
		elseif snd.defenses.def_fury.state == "deffed" then
	    string = "pounce "..snd.target..snd.sep.."combo "..snd.target.." jugular jugular"
	  elseif not snd.no_parry() then
	 		string = "combo "..snd.target.." bodypunch jugular"
    elseif not snd.parried_limb == "head" then
      string = "combo "..snd.target.." jugular skullwhack"
		else
	    string = "combo "..snd.target.." jugular jugular"
	  end
    
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>1v1</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Semi 1v1 Route</name>
								<script>if snd.class == "Shapeshifter" then    
	snd.starting_attack()
		
	function snd.attack_function()        
 		if not snd.waiting.queue then                    
  		local function feralityConvert(limb)            
    		if string.find(limb, "leg") then              
    		  return "hamstring "..limb:gsub(" leg", "")
    		elseif string.find(limb, "arm") then
      		return "rend "..limb:gsub(" arm", "")
    		elseif limb == "torso" then
      		return "bodypunch"         
    		elseif limb == "head" then
      		return "skullwhack"
    		else
      		return "slash "..limb
    		end
  		end
	
-- Making the table of limbs and damage
  		limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
			mangled = "nothing"
			broken = "nothing"
			crippled = "nothing"
			
			for limb in pairs(limbs) do
	 			if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then -- checking for mangle opertunities
		  		if string.find(limbs[limb], "leg") and not snd.checksomeAffs({"groinrip","writhe_thighlock"},1) then	
				 		mangled = limbs[limb]
					elseif limbs[limb] == "head" and not snd.checksomeAffs({"throatrip","writhe_necklock"},1) then
				 		mangled = limbs[limb]
					elseif not snd.checksomeAffs({"spleenrip","writhe_armpitlock"},1) and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
				 		mangled = limbs[limb]
					end
			 	elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then -- Updating the table with current breaks
			  	if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   				broken = limbs[limb]
					end
	 			elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 33.33 and crippled == "nothing" then -- Updating the table with current cripples
	  			if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
				 		crippled = limbs[limb]
					end
	 			end
			end  --end of for loop       
	
	 		if snd.used.shield then           
		 		string = "pounce "..snd.target
			elseif snd.theyran then
			   string = "neckdrag "..snd.target..snd.neckdragdir
		  elseif snd.checksomeAffs({"groinrip", "throatrip", "spleenrip"},2) then --nom nom nom
				string = "devour "..snd.target            
			elseif snd.checkAff("writhe_necklock") and not snd.checkAff("throatrip") then-- Checking for Rip opertunities
				string = "throatrip "..snd.target          
			elseif snd.checkAff("writhe_armpitlock") and not snd.checkAff("spleenrip") then-- Checking for Rip opertunities
				string = "spleenrip "..snd.target
			elseif snd.checkAff("writhe_thighlock") and not snd.checkAff("groinrip") then-- Checking for Rip opertunities
				string = "groinrip "..snd.target
			elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then -- Checking for Jawlock opertunities
				if string.find(mangled, "leg") and not snd.checkAff("writhe_thighlock")then
	  			string = "jawlock thigh of "..snd.target
	 			elseif mangled == "head" and not snd.checkAff("writhe_necklock") then
	  			string = "jawlock neck of "..snd.target
	 			elseif mangled == "torso" or string.find(mangled, "arm") and not snd.checkAff("writhe_armpitlock") then
	  			string = "jawlock armpit of "..snd.target
				end
			elseif broken ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then  -- Limb escalation
		 		string = "destroy "..broken.." of "..snd.target   
			elseif crippled ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then -- Limb escalation
	 			string = "mangle "..crippled.." of "..snd.target

			else -- build the limb breaks if nothing else major going on
	 			left = "nothing"       
	 			right = "nothing"          
	 			for limb in pairs(limbs) do
	  			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and not table.contains(snd.target_has, limb.."_crippled") then  
		 				if right == "nothing" then  
		  				right = limbs[limb]
		 				elseif left == "nothing" then  
		  				left = limbs[limb]
		 				end
					end
	 			end
	 
--Doubling up the same attack if only one is found
	 			if left == "nothing" then 
	  			left = right 
	 			end
	 
-- using the feraility convert with what we've made so far
	 			string = "combo "..snd.target.." "..feralityConvert(left).." "..feralityConvert(right)  
			end -- end of primary attacking function setup
	
--queuing it so we can keep the attack rolling
  	if string ~= snd.last_attack and not snd.waiting.queue then   
   		snd.last_attack = string 
   		snd.send("qeb "..snd.last_attack)
   		snd.waiting.queue = true
   		tempTimer(snd.delay(), [[snd.waiting.queue = false]])  
  	end--end the actual attack rolling
 	end --end the main code
end --end the function
--and sending it to the mud
snd.attack_function()   
end -- end the class if
</script>
								<command></command>
								<packageName></packageName>
								<regex>^kll$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Syssin</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Wielding</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>wield bashing</name>
								<script>if snd.class == "Syssin" then
snd.send("quickwield left whip"..snd.sep.."quickwield right shield")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wbsh$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield pvp</name>
								<script>if snd.class == "Syssin" then
snd.send("quickwield left dirk"..snd.sep.."quickwield right shield")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wpvp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield bow</name>
								<script>snd.send("secure left"..snd.sep.."secure right"..snd.sep.."wear buckler"..snd.sep.."bowstance")</script>
								<command></command>
								<packageName></packageName>
								<regex>^wbow$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Assassination</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>yank</name>
								<script>if snd.class == "Syssin" then
if matches[2] == "" then
 snd.send("qeb quickwield left whip"..snd.sep.."yank "..snd.target)
else
 snd.send("qeb quickwield left whip"..snd.sep.."yank "..matches[2])
end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bk(.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>backstab</name>
								<script>if snd.class == "Syssin" then
if matches[2] == "" then
 snd.send("qeb quickwield left dirk"..snd.sep.."backstab "..snd.target.." curare")
else
 snd.send("qeb quickwield left dirk"..snd.sep.."backstab "..matches[2].." curare")
end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bs(.*)$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Subterfuge</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>darkflood</name>
								<script>if snd.class == "Syssin" then
snd.send("qeb conjure darkflood")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^df$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>abduct</name>
								<script>if snd.class == "Syssin" then
if matches[2] == nil then
 snd.send("qeb abduct "..snd.target)
else
 snd.send("qeb abduct "..matches[2])
end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^at(?: (.*))?$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Vortex</name>
								<script>if snd.class == "Syssin" then
  if matches[2] == nil then
    snd.send("qeb worm vortex "..snd.target)
  else
    snd.send("qeb worm vortex "..matches[2])
  end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^vt(?: (.*))?$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Hypnosis</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>hypnotise</name>
								<script>if snd.class == "Syssin" then
snd.send("qeb hypnotise "..snd.target)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^hyp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>shadow mark</name>
								<script>if snd.class == "Syssin" then
snd.send("qeb shadow mark numbness "..snd.target)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^sm$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>hypnotise stack</name>
								<script>if snd.class == "Syssin" then
snd.hypno_stack = {
 "hypochondria",
 "clumsiness",
 "impatience",
 "lethargy",
 "hypochondria",
 "impatience",
 "clumsiness",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy",
 "claustrophobia",
 "impatience",
 "agoraphobia"
}
snd.hyp = 0
snd.last_hypno = 0
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.hypno == "open" or snd.hypno == "none" then
   if snd.hypno == "none" then
    string = "hypnotise "..snd.target..snd.sep
   end
   if #snd.hypno_stack &gt; snd.last_hypno + 1 then
    snd.hyp = snd.last_hypno+1
    string = string.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
   else
    string = "seal "..snd.target.." 3"
   end
  else
   snd.message("Good to go! KILL THEM NOW!")
  end
 end
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^hypno$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>hypnotise magic stack</name>
								<script>if snd.class == "Syssin" then
snd.hypno_stack = {
 "hypochondria",
 "clumsiness",
 "impatience",
 "confusion",
 "hypochondria",
 "impatience",
 "clumsiness",
 "confusion",
 "impatience",
 "loneliness",
 "confusion",
 "claustrophobia",
 "impatience",
 "agoraphobia"
}
snd.hyp = 0
snd.last_hypno = 0
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.hypno == "open" or snd.hypno == "none" then
   if snd.hypno == "none" then
    string = "hypnotise "..snd.target..snd.sep
   end
   if #snd.hypno_stack &gt; snd.last_hypno + 1 then
    snd.hyp = snd.last_hypno+1
    string = string.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
   else
    string = "seal "..snd.target.." 3"
   end
  else
   snd.message("Good to go! KILL THEM NOW!")
  end
 end
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^hypm$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>suggest</name>
								<script>if snd.class == "Syssin" then
local shorthand = {
["clu"] = "clumsiness",
["imp"] = "impatience"
}
if shorthand[matches[2]] then
 snd.send("qeb suggest "..snd.target.." "..shorthand[matches[2]])
else
 cecho("&lt;red&gt;No such affliction!")
end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^sg (\w+)$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mouse mode</name>
								<script>if snd.class == "Syssin" then
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_crippled",
		"right_leg_crippled",
		"hearing",
		"sensitivity",
		"voyria"
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		"slickness",
		"stupidity",
		"anorexia",
		"hearing",
		"sensitivity",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		-- let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) 
					and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if not snd.used.shield and snd.balance.backstab then
				string = "quickwield left dirk"..snd.sep.."backstab "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			elseif snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ms$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>legs</name>
								<script>if snd.class == "Syssin" then
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")

		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		"left_leg_crippled",
		"right_leg_crippled",
		"left_arm_crippled",
		"right_arm_crippled",
		"stupidity",
		"anorexia",
		"hearing",
		"sensitivity",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",

}
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		-- let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) 
					and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if not snd.used.shield and snd.balance.backstab then
				string = "quickwield left dirk"..snd.sep.."backstab "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			elseif snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^legs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>magic</name>
								<script>if snd.class == "Syssin" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "confusion",
 "hypochondria",
 "impatience",
 "vertigo",
 "confusion",
 "impatience",
 "loneliness",
 "confusion"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_crippled",
		"right_leg_crippled",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"weariness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"clumsiness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"weariness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"clumsiness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif not snd.checkAff("numbed_skin") then
			-- they don't have numbness yet
			if snd.used.paste then -- but they have fangbarrier, so we can't give it
				-- we need to flay first
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else -- they don't have fangbarrier - go for it!
				string = "shadow mark numbness "..snd.target
			end
		-- they already have numbness, let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) 
						and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" and table.contains(snd.target_has, "numbed_skin") then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^mg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>kill</name>
								<script>if snd.class == "Syssin" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "lethargy",
 "hypochondria",
 "impatience",
 "vertigo",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_crippled",
		"right_leg_crippled",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"clumsiness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif not snd.checkAff("numbed_skin") then
			-- they don't have numbness yet
			if snd.used.paste then -- but they have fangbarrier, so we can't give it
				-- we need to flay first
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else -- they don't have fangbarrier - go for it!
				string = "shadow mark numbness "..snd.target
			end
		-- they already have numbness, let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" and table.contains(snd.target_has, "numbed_skin") then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^kl$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>1v1</name>
								<script>if snd.class == "Syssin" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "lethargy",
 "hypochondria",
 "impatience",
 "vertigo",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_crippled",
		"right_leg_crippled",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"clumsiness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		-- they already have numbness, let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Syssin" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if not snd.used.shield and snd.balance.backstab then
	 string = "quickwield left dirk"..snd.sep.."backstab "..snd.target
  elseif snd.proned() and not snd.used.shield then
   string = "quickwield left whip"..snd.sep.."garrote "..snd.target
  else
	 if snd.used.paste then
	  string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
	 else
    string = "bite "..snd.target.." camus"
	 end
  end
 if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
	-- we do have shadow balance
  string = string..snd.sep.."shadow sleight pall "..snd.target
 end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Shooting</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>snipe</name>
								<script>if snd.class == "Syssin" then
  snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch normal"..snd.sep.."snipe "..snd.target.." "..matches[2])
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^snp (\w+)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>meteor</name>
								<script>if snd.class == "Syssin" then
  if matches[2] == nil then
    snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch meteor"..snd.sep.."shoot "..snd.target.." meteor")
  else
    snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch meteor"..snd.sep.."shoot "..matches[2].." meteor")
  end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^met(?: (.*))?$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>ghost</name>
								<script>if snd.class == "Syssin" then
  if matches[2] == nil then
    snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch ghost"..snd.sep.."shoot "..snd.target)
  else
    snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch ghost"..snd.sep.."shoot "..matches[2])
  end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gs(?: (.*))?$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Shoot</name>
								<script>if matches[2] == "" then
 snd.send("qeb shoot "..snd.target.." curare")
else
 snd.send("qeb shoot "..matches[2].." curare")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^shoot(.*)$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Wayfarer</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affs</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Salve affs priority</name>
								<script>if snd.class == "Wayfarer" then -- Requires dropstrike
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
		local tohit = {}
		local extraaff = "asthma"
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local shatter = false
		local indoors = table.contains(gmcp.Room.Info.details, "indoors")
		local enrage = false
		--local preatk = "qa "..snd.target..snd.sep
    
    if gmcp.Char.Vitals.wield_left == "empty" and gmcp.Char.Vitals.wield_right == "empty" then return end
		
		if tonumber(gmcp.Char.Vitals.fury) &gt;=40 then
			shatter = true -- spam it
		else
			shatter = false
		end

		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			enrage = true
		else
			enrage = false
		end
		
		snd.giving = {
      "left_leg_crippled",
      "right_leg_crippled",
      "left_arm_crippled",
			"right_arm_crippled",
      "anorexia",
      "asthma",
      "slickness",
      "stupidity",
      "paresis",
      "clumsiness",
      "sensitivity",
    }
		if #missing == 2 and not snd.used.shield and not snd.used.rebounding then
			venom = snd.effects[missing[1]]
		elseif #missing == 1 and not snd.used.shield then
			venom = snd.effects[missing[1]]
		end
		
      for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) then
        if not table.contains(touse, snd.giving[i]) then 
          table.insert(touse, snd.giving[i])
                end
          end
      end
        
        for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
        end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		end
		
    
        --Can we do this based on number of affs?
		if snd.aff_count_all() &gt; 8 and not indoors then
			if not snd.used_rebounding and not snd.highjumped then
			string = "highjump"
			elseif snd.highjumped == true then
				string = "axe dropstrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif snd.used_rebounding then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			end
		end

    
        if snd.aff_count_all() &gt; 8 and not indoors and snd.checkAff("sensitivity") and snd.proned() 
    and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if indoors and snd.checkAff("sensitivity") and snd.proned() and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if shatter and not snd.checkAff("sensitivity") and not snd.checkAff("weariness") and not snd.enraged then
			string = "fury shatter "..snd.target..snd.sep..string
		end
		
		if enrage == true and not snd.enraged and snd.checkAff("sensitivity") then
			string = "fury enrage "..snd.sep..string
		end
		

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
		
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^legs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wayfarer aff support</name>
								<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
		local string = ""
		local call = "" 
		local touse = {}
		local tohit = {}

if gmcp.Char.Vitals.wield_left == "empty" and gmcp.Char.Vitals.wield_right == "empty" then return end
		
		local fury_amount = tonumber(gmcp.Char.Vitals.fury)
		local fury = ""

		snd.giving = {
		"asthma",
		"paresis",
    "sensitivity",
		"clumsiness",
		"slickness",
		"left_leg_crippled",
		"right_leg_crippled",
		"anorexia",
		"stupidity",
		"left_leg_crippled",
		"left_arm_crippled",
		"haemophilia",
		"allergies",
		"vomiting",
		"recklessness",
		"sight",
		"shyness",
		"dizziness",
    }
		
--This is a special case to use slaughter to quickly lock someone, with the additional chance 
--of using muddled to seal it long enough for next round. Affs are checked backwards so we can
--use the most necessary first, as they'll be put on top of the stack first.
		
		if snd.checksomeAffs({"slickness","clumsiness", "hypochondria", "weariness", "paresis"}, 2) and snd.checkAff("asthma") then
			if not snd.checkAff("stupidity") then
				if fury_amount &gt;= 60 and tonumber(gmcp.Char.Vitals.ability_bal) then
					fury = "fury shatter "..snd.target.." boost"
				else
					table.insert(snd.giving, 1, "stupidity")
				end
			end

			if not snd.checkAff("anorexia") then
				table.insert(snd.giving, 1, "anorexia")
			end

			if not snd.checkAff("slickness") then
				table.insert(snd.giving, 1, "slickness")
			end
			string = "we gon slaughter this bruh"
		end
-----	
		for i in pairs(snd.giving) do
  		if not snd.checkAff(snd.giving[i]) then
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
-----
		if snd.used.shield then
			if snd.used.rebounding then
				string = "axe devastate "..snd.target
				call = nil
			else
				string = "axe devastate "..snd.target.." "..tohit[1]
			end
			
		elseif string:find("slaughter") or snd.target_locked() then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
		
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			
		end
		
		if fury_amount &gt;= 83 and tonumber(gmcp.Char.Vitals.ability_bal) and not snd.checkAff("lethargy") then
			fury = "fury halt "..snd.target
		end

		if fury~= "" then string = fury..snd.sep..string end

-----
		if snd.toggles.affcalling and not snd.target_gone and call ~= nil then
			if string:find("slaughter") then
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			else
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			end
			string = call..string
		end

		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
		
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group Limbs w/execute</name>
								<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()

  if not snd.waiting.queue then
    local string = ""
    local call = ""
		local limb_tohit = ""
    local targ = "nothing"
		local touse = {}
    local tohit = {}
    local execute_check = false
    local fury = tonumber(gmcp.Char.Vitals.fury)
    local distract = false
      if snd.balance.fury and fury &gt;=30 then
        distract = true
      end
 
    
	  snd.giving_limbs = {"head", "right leg", "left leg", "left arm", "right arm",}  
    for k, v in pairs(snd.giving_limbs) do
      if snd.limb_status[v] == "healed" and ((snd.parried_limb ~= v and snd.last_hit_limb ~= v) or snd.no_parry() or distract) then
        limb_tohit = v
        break
      end
    end
        
    snd.giving = {
      "left_leg_crippled",
      "right_leg_crippled",
      "left_arm_crippled",
      "right_arm_crippled",
      "anorexia",
      "asthma",
      "slickness",
      "stupidity",
      "paresis",
      "sensitivity",
      "weariness",
      "clumsiness",
    }
    
    for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) then
        if not table.contains(touse, snd.giving[i]) then 
          table.insert(touse, snd.giving[i])
        end
      end
		end
    
    for k, v in pairs(snd.limb_dmg) do
      if k ~= "torso" and k ~= "head" and snd.limb_status[k] ~= "healed" and snd.limb_status["head"] ~= "healed" and snd.checksomeAffs({"fallen", "prone", "frozen"},1) then
        execute_check = true
      end
    end
    
    for i in pairs(touse) do
			table.insert(tohit, snd.effects[touse[i]])
		end
      
    if snd.used.shield and snd.used.rebounding then
      string = "axe devastate "..snd.target
    elseif snd.used.shield or snd.used.rebounding then
      string = "axe devastate "..snd.target.." "..tohit[1]
      call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
    elseif execute_check then
      string = "axe execute "..snd.target
    elseif snd.checksomeAffs({"right_leg_crippled", "left_leg_crippled", "right_leg_broken", "left_leg_broken"}, 1) and not snd.checkAff("fallen") then
      string = "axe sweep "..snd.target
    else
      string = "axe chop "..snd.target.." "..limb_tohit.." "..tohit[1]
      call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
    end
    
    if distract then
      string = "fury distract "..snd.target..snd.sep..string
    end

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
  
  	if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
  
  end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>sensi + tfix support</name>
								<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
    
	if not snd.waiting.queue then
	
		local string = ""
		local call = ""
		local touse = {}
		local tohit = {}
		local extraaff = "asthma"
		local boosthalt = false
		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			boosthalt = true -- spam it
		else
			boosthalt = false
		end
    
    if gmcp.Char.Vitals.wield_left == "empty" and gmcp.Char.Vitals.wield_right == "empty" then return end
		
		snd.giving = {
		"hearing",
		"sight",
		"paresis",
    "sensitivity",
		"asthma",
		"vomiting",
		"allergies",
		"slickness",
		"left_leg_crippled",
		"right_leg_crippled",
		"anorexia",
		"stupidity",
    }
		
      for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) then
        if not table.contains(touse, snd.giving[i]) then 
          table.insert(touse, snd.giving[i])
                end
          end
      end
        
        for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
        end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if boosthalt and not snd.enraged then
			string = "fury halt "..snd.target.." boost"..snd.sep..string
		end
		
		if snd.proned() and boosthalt and not snd.enraged and snd.checkAff("sensitivity") and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) then
			string = "fury enrage"..snd.sep..string
		end

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Lacerate (Bleed) focused</name>
								<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
		local tohit = {}
    local fury = ""
    local current_fury = tonumber(gmcp.Char.Vitals.fury)
		local indoors = table.contains(gmcp.Room.Info.details, "indoors")		

		if current_fury &gt;=20 and not snd.checkAff("hearing") and not snd.checksomeAffs({"ringing_ears", "sensitivity"},2) then
      fury = "fury warcry " .. snd.target
        if current_fury &gt;= 40 and not snd.checksomeAffs({"ringing_ears", "hearing"},2) then
          fury = fury .. " boost"
        end
		elseif current_fury &gt;= 30 and not snd.checkAff("exhausted") then
      fury = "fury exhaust " .. snd.target    
    end
    
		-- set the affs we want to use
		snd.giving = {
    "sensitivity",
		"clumsiness",
		"allergies",
		"vomiting",
		"recklessness",
		"paresis",
		"asthma",
    "weariness",
    }
    
		-- pick affs from the list above
  	for i in pairs(snd.giving) do
  		-- make sure not to double up paresis and paralysis
  		if not snd.checkAff(snd.giving[i]) then
  			-- and don't add an aff we've already got one higher in the list!
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
		
		while #tohit &lt; 3 do
			table.insert(tohit, "delphinium")
		end
		
		-- now to decide what attack to use!
    if snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		
    elseif snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]
      
    elseif not snd.checkAff("haemophilia") and not snd.used.rebounding then
      string = "axe lacerate " .. snd.target
      
    elseif snd.proned() and snd.checkAff("sensitivity") and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
      
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]
		end
				
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call .. snd.sep .. string
		end
    
    if fury ~= "" then string = string..snd.sep..fury end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bleed$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Bard</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Team Afflictions</name>
							<script>if snd.class == "Bard" then -- We're a super awesome badass bard, obv

snd.starting_attack() -- always run this first, it does some important resets

function snd.attack_function() -- defining this function is how we tell sunder what to do

    if not snd.waiting.queue then -- don't want to spam, this will prevent that
 
 
 -- if i'm in a rhythm combo, i can't use sword affs.
 
 if snd.rhythm then
    snd.giving = {
    "perplexed",
    "self_loathing",
    "berserking",
    "dazed",
    
     }    

-- Feel free to uncomment this. I have not been able to test it entirely, so ymmv. :)
--  if snd.rhythm
--  and snd.checkAff("fallen")
--  and snd.checkAff("dizziness")
--  and hasSkill("Sock", "Performance")
--  and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
--    table.insert(snd.giving, 1, "dazed")
--  end    
    
    
    else
  
  
  -- My affs normally when not in a rhythm combo.
  
    snd.giving = {
--  "misery",
  "paresis",
  "clumsiness",
  "asthma",
  "slickness",
  "anorexia",
--  "misery",
  "perplexed",
  "shyness",
  "dizziness",
  "weariness",
  "sensitivity",
  "haemophilia",
  "vomiting",
  "allergies",
  "recklessness",
  --"voyria",
  }
  
    
 end
  
		-- declare some important variables, you can add more here if you need
    local canWeave = false
    local canSing = false
    local canPlay = false
    local myinstrument = "saxophone69420" -- put your own instrument's id# here.
    local needInstrument = false
		local string = ""
		local call = ""
    local nextaff = "none"
    local tempoaff = "none"
    -- 1 affliction from snd.giving
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and nextaff == "none"
      and snd.giving[i] ~= snd.needle
    then
      nextaff = snd.giving[i]
    end
  end
  
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and tempoaff == "none"
      and snd.giving[i] ~= snd.needle
      and table.contains(snd.venom_affs, snd.giving[i])
        then
          tempoaff = snd.giving[i]
        end
    end  
   
 
 -- Let's run a check for weaving. If I need to modify this in some way (i.e a support route), I will there. 
  
  if tonumber(gmcp.Char.Vitals.dithering) &lt; 1
  and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
			canWeave = true -- Hell yeah brother
  end     
  
  -- Let's run a check for singing. I don't want to sing if it's not cheap. Ymmv on this decision - I will modify it in the support route example.
    
  if not snd.singing
  and snd.halfbeat then
			canSing = true -- I'm an idol
  end    


-- Let's run a check for playing. I will really not be using it in this route,  but it's nice to write and use later.

  if not snd.playing
  and (string.find((gmcp.Char.Vitals.wield_left), myinstrument) or  string.find((gmcp.Char.Vitals.wield_right), myinstrument)) then
			canPlay = true -- Jam out!!
  end 




      
    -- Only cowards and losers spam shield or rebounding &gt;:(
  if snd.used.shield then
      string = "pierce "..snd.target  
  elseif snd.used.rebounding then
      string = "pierce "..snd.target

    -- K, Tempo if you got some big dmg for it.    
  elseif not snd.rhythm
    and snd.checksomeAffs({"paresis", "shyness"}, 2) then
      string = "tempo "..snd.target..snd.effects[tempoaff]
      call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
    
    -- Addiction check.
  elseif canSing 
    and hasSkill("Decadence", "Songcalling")
    and not snd.checkAff("addiction") then
      string = "sing song of decadence"
  
    -- Sorrow pushing logic.
  elseif canSing
    and hasSkill("Sorrow", "Songcalling")
    and not snd.checksomeAffs({"migraine", "squelched"}, 1) then
      string = "sing song of sorrow" 
      
    -- Let's still efficiently use sing in teams if we can.    
  elseif canSing
    and hasSkill("Youth", "Songcalling") then
      string = "sing song of youth"
        
    -- Dithering Block. 
    -- 
    -- Let's check for globes first. If we don't have destiny up, we need to do that here.
    -- If we do have destiny, we can do it as part of our string later.
    
  elseif canWeave
   and hasSkill("Runeband", "Weaving")
   and not snd.checkAff("runeband") then
        string = "weave runeband "..snd.target
       
        
  elseif canWeave
    and not snd.checkAff("besilence")
    and hasSkill("Headstitch", "Weaving")
    and snd.checkAff("asthma") then
        string = "weave headstitch "..snd.target    
            
     
  elseif canWeave
    and not snd.checkAff("bladestorm")
    and hasSkill("Bladestorm", "Weaving")
    and snd.checkAff("runeband") then
        string = "weave bladestorm "..snd.target
    
    -- Anelace Check 
      
 --     elseif not snd.checkAff("ringing_ears") then
 --       string = "weave soundblast"
        
    --- Balance Block
          
  elseif snd.aff_count_all() &gt; 2
    and not snd.checkAff("magnanimity") then
      string = "ridicule "..snd.target
  
  elseif table.contains(snd.performance_affs, nextaff) then
      string = snd.performance_attacks[nextaff].." "..snd.target
  else    
		  string = "tempo "..snd.target.." "..snd.effects[nextaff]
	 	  call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
    end
  
  if snd.balance.inspire
    and hasSkill("Inspire", "Songcalling") then
      string = "inspire"..snd.sep..string
    end

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^affs$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Team Damage</name>
							<script>if snd.class == "Bard" then -- We're a super awesome badass bard, obv

snd.starting_attack() -- always run this first, it does some important resets

function snd.attack_function() -- defining this function is how we tell sunder what to do

    if not snd.waiting.queue then -- don't want to spam, this will prevent that
 
 
 -- if i'm in a rhythm combo, i can't use sword affs.
 
 if snd.rhythm then
    snd.giving = {
    "perplexed",
    "self_loathing",
    "berserking",
    "dazed",
    
     }    
    
    
    else
  
  
  -- My affs normally when not in a rhythm combo.
  
    snd.giving = {
  "paresis",
  "clumsiness",
  "sensitivity",
  "asthma",
  "shyness",
  "haemophilia",
  "vomiting",
  "allergies",
  "slickness",
  "anorexia",
  "weariness",
  "misery",
  "perplexed",
  "dizziness",
  "recklessness",
  --"voyria",
  }
  
    if not snd.rhythm
    and snd.checkAff("fallen")
    and snd.checkAff("dizziness")
    and hasSkill("Sock", "Performance")
    and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
      table.insert(snd.giving, 1, "dazed")
    end   
  
    
    
 end
  
		-- declare some important variables, you can add more here if you need
    local canWeave = false
    local canSing = false
    local canPlay = false
    local myinstrument = "saxophone69420" -- put your own instrument's id# here.
    local needInstrument = false
		local string = ""
		local call = ""
    local nextaff = "none"
    local tempoaff = "none"
    -- 1 affliction from snd.giving
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and nextaff == "none"
      and snd.giving[i] ~= snd.needle
    then
      nextaff = snd.giving[i]
    end
  end
  
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and tempoaff == "none"
      and snd.giving[i] ~= snd.needle
      and table.contains(snd.venom_affs, snd.giving[i])
        then
          tempoaff = snd.giving[i]
        end
    end  
   
 
 -- Let's run a check for weaving. If I need to modify this in some way (i.e a support route), I will there. 
  
  if tonumber(gmcp.Char.Vitals.dithering) &lt; 1
  and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
			canWeave = true -- Hell yeah brother
  end     
  
  -- Let's run a check for singing. I don't want to sing if it's not cheap. Ymmv on this decision - I will modify it in the support route example.
    
  if not snd.singing
  and snd.halfbeat then
			canSing = true -- I'm an idol
  end    


-- Let's run a check for playing. I will really not be using it in this route,  but it's nice to write and use later.

  if not snd.playing
  and (string.find((gmcp.Char.Vitals.wield_left), myinstrument) or  string.find((gmcp.Char.Vitals.wield_right), myinstrument)) then
			canPlay = true -- Jam out!!
  end 




      
    -- Only cowards and losers spam shield or rebounding &gt;:(
  if snd.used.shield then
      string = "pierce "..snd.target  
  elseif snd.used.rebounding then
      string = "pierce "..snd.target

    -- K, Tempo if you got some big dmg for it.    
  elseif not snd.rhythm
    and snd.checksomeAffs({"paresis", "shyness"}, 2) then
      string = "tempo "..snd.target.." "..snd.effects[tempoaff]
      call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
  
    -- Ringing_ears check.    
  elseif not snd.checkAff("ringing_ears")
    and hasSkill("Soundblast", "Weaving")
    and canWeave then
      string = "weave soundblast"


    -- Unheard Song Check. This is just DMG.
  elseif canSing
    and hasSkill("Unheard", "Songcalling")
    and snd.checkAff("hearing") then
      string = "sing song of the unheard" 
      
    -- Let's still efficiently use sing in teams if we can.    
  elseif canSing
    and hasSkill("Youth", "Songcalling") then
      string = "sing song of youth"
        
    -- Dithering Block. 
    -- 
    -- Let's check for globes first. If we don't have destiny up, we need to do that here.
    -- If we do have destiny, we can do it as part of our string later.


   elseif canWeave
    and hasSkill("Tearing", "Weaving") then
        string = "weave tearing "..snd.target
        
    --- Balance Block
          

  elseif table.contains(snd.performance_affs, nextaff) then
      string = snd.performance_attacks[nextaff].." "..snd.target
  else    
		  string = "tempo "..snd.target.." "..snd.effects[nextaff]
	 	  call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
    end
      

  if snd.balance.inspire
  and hasSkill("Inspire", "Songcalling") then
      string = "inspire"..snd.sep..string
    end

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^tdmg$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Support Audience/Allies</name>
							<script>if snd.class == "Bard" then -- We're a super awesome badass bard, obv

snd.starting_attack() -- always run this first, it does some important resets

function snd.attack_function() -- defining this function is how we tell sunder what to do

    if not snd.waiting.queue then -- don't want to spam, this will prevent that
 
 -- if i'm in a rhythm combo, i can't use sword affs.
 
 if snd.rhythm then
    snd.giving = {
    "perplexed",
    "self_loathing",
    "berserking",
    "dazed",
    
     }    

    else
  
  -- My affs normally when not in a rhythm combo.
  
    snd.giving = {
  "misery",
  "paresis",
  "clumsiness",
  "asthma",
  "slickness",
  "anorexia",
  "perplexed",
  "shyness",
  "dizziness",
  "weariness",
  "sensitivity",
  "haemophilia",
  "vomiting",
  "allergies",
  "recklessness",
  --"voyria",
  }
    
 end
  
		-- declare some important variables, you can add more here if you need
    local canWeave = false
    local canSing = false
    local canPlay = false
    local myinstrument = "ocarina449359" -- put your own instrument's id# here.
    local needInstrument = false
		local string = ""
		local call = ""
    local nextaff = "none"
    local tempoaff = "none"
    -- 1 affliction from snd.giving
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and nextaff == "none"
      and snd.giving[i] ~= snd.needle
    then
      nextaff = snd.giving[i]
    end
  end
  
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and tempoaff == "none"
      and snd.giving[i] ~= snd.needle
      and table.contains(snd.venom_affs, snd.giving[i])
        then
          tempoaff = snd.giving[i]
        end
    end  
   
 
 -- Let's run a check for weaving. If I need to modify this in some way (i.e a support route), I will there. 
  
  if tonumber(gmcp.Char.Vitals.dithering) &lt; 1
  and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
			canWeave = true -- Hell yeah brother
  end     
  
  -- Let's run a check for singing. I don't want to sing if it's not cheap. Ymmv on this decision - I will modify it in the support route example.
    
  if not snd.singing then
			canSing = true -- I'm an idol
  end    


-- Let's run a check for playing. I will really not be using it in this route,  but it's nice to write and use later.

  if not snd.playing
  and (string.find((gmcp.Char.Vitals.wield_left), myinstrument) or  string.find((gmcp.Char.Vitals.wield_right), myinstrument)) then
			canPlay = true -- Jam out!!
  end 




      
    -- Only cowards and losers spam shield or rebounding &gt;:(
  if canPlay
    and hasSkill("Youth", "Songcalling") then
      string = "play song of youth"
      
    -- Let's still efficiently use sing in teams if we can.    
  elseif canSing
    and hasSkill("Youth", "Songcalling") then
      string = "sing song of youth"
        
    -- Dithering Block. 
    -- 
    -- Let's check for globes first. If we don't have destiny up, we need to do that here.
    -- If we do have destiny, we can do it as part of our string later.
    
-- There is no dithering in this route.
-- ... yet.


    --- Balance Block
    
  elseif snd.used.shield then
      string = "pierce "..snd.target  
  elseif snd.used.rebounding then
      string = "pierce "..snd.target
          
  elseif snd.aff_count_all() &gt; 2
    and not snd.checkAff("magnanimity") then
      string = "ridicule "..snd.target
  
  elseif table.contains(snd.performance_affs, nextaff) then
      string = snd.performance_attacks[nextaff].." "..snd.target
  else    
		  string = "tempo "..snd.target.." "..snd.effects[nextaff]
	 	  call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
    end
  
  if snd.balance.inspire
    and hasSkill("Inspire", "Songcalling") then
      string = "inspire"..snd.sep..string
    end

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^supp$</regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Spirit</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Akkari</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Akkari Attack Template</name>
							<script> if snd.class == "Akkari" then -- set this to the class this alias is for
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		-- declare some important variables
 local string = ""
 local touse = {}
 local gashaff = {}
 local call = ""
 local fcall = ""
 local scall = ""
 local paff = "none"
 local saff_one = "none"
 local saff_two = "none"
 local pattack = ""
 local sattack = ""
 local extraaff = "amnesia"
 

 snd.primary_aff = {
    --"effused_blood",

		}

snd.secondary_aff = {
    "remorse",
    "contrition",
    }

snd.akkari_host()
snd.akkari_attend()

  for i in pairs(snd.primary_aff) do
    if not snd.checkAff(snd.primary_aff[i]) 
 --   and not (snd.used.rebounding and table.isMember(snd.censure_affs, snd.primary_aff[i]))

    and not (snd.primary_aff[i] == "paresis" and snd.checkAff("paralysis")) 
    then
					if not table.contains(gashaff, snd.primary_aff[i]) then
						table.insert(gashaff, snd.primary_aff[i])
					end
    end
  end

  if table.isMember(snd.censure_affs, gashaff[1]) then
      if gashaff[1] == "sight" then
     	pattack = "wipe left"..snd.sep.."censure "..snd.target.." lenient "..snd.effects[gashaff[1]]..snd.sep
      else
    	pattack = "wipe left"..snd.sep.."censure "..snd.target.." "..snd.effects[gashaff[1]]..snd.sep
      end
      fcall = "Afflicting "..snd.target..": "..snd.effects[gashaff[1]].." "
  elseif table.isMember(snd.akkari_bal_affs, gashaff[1]) then
      if gashaff[1] == "black_bile" then
      pattack = "denounce "..snd.target.." corruption"..snd.sep
      fcall = ""
      else
      pattack = snd.akkari_bal_attacks[gashaff[1]].." "..snd.target..snd.sep
      end
  elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
      pattack = snd.akkari_eq_attacks[gashaff[1]].." "..snd.target..snd.sep
  else
      pattack = "denounce "..snd.target..snd.sep
	end
  
    	for i in pairs(snd.secondary_aff) do
				if not (snd.checkAff(snd.secondary_aff[i]) or snd.secondary_aff[i] == gashaff[1] or (gashaff[1] == "sight" and snd.secondary_aff[1] == "hearing")) then
					if not table.contains(touse, snd.secondary_aff[i]) then
						table.insert(touse, snd.secondary_aff[i])
					end
				end
			end
      
      if touse[2] == "sight" then
        table.remove(touse, table.index_of(touse, "sight"))
      end
      
      if touse[2] == "hearing" then
        table.remove(touse, table.index_of(touse, "hearing"))
      end
      
			while #touse &lt; 3 do
				table.insert(touse, extraaff)
			end
  
  
  if gashaff[1] == "sight" then
    if touse[1] == "sight" then
      table.remove(touse, table.index_of(touse, "sight"))
    end
    if touse[1] == "hearing" then
      table.remove(touse, table.index_of(touse, "hearing"))
    end
    sattack = "dictate "..touse[1].." "..snd.target..snd.sep
    if touse[1] == "remorse" or touse[1] == "contrition" then
    else
    scall = "Whispering "..snd.target..": "..touse[1]
    end
  elseif touse[1] == "sight" then
    sattack = "spirit attend "..snd.target..snd.sep
  elseif touse[1] == "hearing" then
    sattack = "spirit attend "..snd.target..snd.sep
  elseif touse[1] == "blood_poison" then
    sattack = "spirit bane "..snd.target..snd.sep
  else
    if (touse[2] == "hearing" or touse[2] == "sight") then
      if snd.can_proclaim then
        sattack = "proclaim "..touse[1].." "..touse[3]..snd.sep
      else
        sattack = "dictate "..touse[1].." "..touse[3].." "..snd.target..snd.sep
      end
        if touse[1] == "remorse" or touse[1] == "contrition" then
        else
        scall = "Whispering: "..touse[1].." "..touse[3]
        end
    else
      if snd.can_proclaim then
        sattack = "proclaim "..touse[1].." "..touse[2]..snd.sep
      else    
        sattack = "dictate "..touse[1].." "..touse[2].." "..snd.target..snd.sep
      end
      if touse[1] == "remorse" or touse[1] == "contrition" then
      else
      scall = "Whispering "..snd.target..": "..touse[1].." "..touse[2]
      end
    end


  end


    if snd.used.shield and snd.used.rebounding then
      string = "denounce "..snd.target..snd.sep.."spirit provoke "..snd.target
      fcall = ""
      scall = ""
    elseif snd.used.shield then
      string = "denounce "..snd.target..snd.sep..sattack
      fcall = ""
    elseif snd.mana_percent &lt; 35 then
      string = "dumavai "..snd.target
      fcall = ""
      scall = ""
    elseif snd.mana_percent &lt; 44 and snd.checkAff("blood_rune") then
      string = "spirit vilify"..snd.sep.."dumavai "..snd.target
      fcall = ""
      scall = ""
    elseif snd.checkAff("writhe_transfix") and not snd.checkAff("feast") and gmcp.Char.Status.spec == "Dosan" then
      string = "spirit exorcise "..snd.target
      fcall = ""
      scall = ""
    elseif snd.can_deliver() then
      string = "deliver "..snd.target..snd.sep..sattack
      fcall = ""
    elseif snd.used.rebounding and table.isMember(snd.censure_affs, gashaff[1]) then
        string = "denounce "..snd.target.." corruption"..snd.sep..sattack
        fcall = ""
        --fcall = "Afflicting "..snd.target..": black_bile"
    elseif snd.checkAff("impatience") and snd.checksomeAffs({"sadness", "confusion",}, 2) 
    and gmcp.Char.Status.spec == "Naarak" and not snd.checkAff("blood_curse") then
      string = "spirit anathema "..snd.target
      fcall = ""
      scall = ""
    elseif gmcp.Char.Status.spec == "Naarak" and snd.can_inquisition and 
    ((snd.aff_count_mental() == 12 or (snd.checkAff("blood_curse") and snd.aff_count_mental() == 10))
    or
    (snd.checkAff("blood_rune") and (snd.aff_count_mental() == 9 or (snd.checkAff("blood_curse") and snd.aff_count_mental() == 7))))
    then
      string = "spirit inquisition "..snd.target
      fcall = ""
      scall = ""
    elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
      string = pattack
      fcall = ""
      scall = ""
    else
      string = pattack..snd.sep..sattack
    end
    
    
    if not snd.loyalsattacking then
    string = "order loyals attack "..snd.target..snd.sep..string
    end
    
    string  = "contemplate "..snd.target..snd.sep..string..snd.sep
 
    if fcall ~= "" then
      call = "wt "..fcall
    end
    
    if scall ~= "" then
      if call ~= "" then
      call = call..snd.sep.."wt "..scall
      else
      call = "wt "..scall
      end
    end
 
    
		-- check if we need to prepend an affliction call
	  if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
		string = call..snd.sep..string
    end
	
  
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
						</Alias>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Akkari" then
snd.starting_attack()
function snd.attack_function()
  local string = ""
  local corpus = "none"
  local touse = {}

	snd.giving_whisper = {
			"impatience",
			"lovers",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",
	}
	snd.akkari_lovers(snd.giving_whisper)
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
      
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep 
    end
	
	if not snd.waiting.queue then
	 	if snd.theytumbling then
			string = string.."penitence "..snd.target..snd.sep.."qeb deliver "..snd.target
		elseif snd.theyran then
			string = string.."DEJEMASHAI "..snd.target
  	elseif not snd.checkAff("writhe_transfix") then
 			string = string.."Exhort "..snd.target
		else
			string = string.."denounce "..snd.target..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target
    end
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   	snd.last_attack = string
   	snd.attack(snd.last_attack)
   	snd.waiting.queue = true
   	tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end

end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Mes feast</name>
								<script>if snd.class == "Akkari" then
snd.starting_attack()
function snd.attack_function()

  local string = ""
  local corpus = "none"
  local touse = {}
	
	
	snd.giving_whisper = {
			"impatience",
			"lovers",
			"berserking",
			"stupidity",
			"confusion",
			"recklessness",
			"masochism",
			"anorexia",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"paranoia",
	}
  snd.akkari_lovers(snd.giving_whisper)
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep 
    end

	
  if not snd.waiting.queue then
	 	if snd.theytumbling then
			string = string.."penitence "..snd.target..snd.sep.."qeb deliver "..snd.target
		elseif snd.theyran then
			string = string.."DEJEMASHAI "..snd.target
  	elseif not snd.checkAff("writhe_transfix") then
 			string = string.."exhort "..snd.target
		elseif not snd.checkAff("feast") then
			string = string.."spirit exorcise "..snd.target
		else
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
		
			string = string.."deliver "..snd.target..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target
		end
	end
 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^feast$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Praenomen Group Dmg</name>
								<script>if snd.class == "Akkari" then
  snd.giving_whisper =
    {
      "lovers",
      "impatience",
      "stupidity",
      "recklessness",
      "epilepsy",
      "anorexia",
      "confusion",
      "dementia",
      "berserking",
      "masochism",
      "peace",
      "vertigo",
      "indifference",
      "agoraphobia",
    }
  snd.akkari_lovers(snd.giving_whisper)
  snd.starting_attack()

  function snd.attack_function()
    local string = ""
    local corpus = "none"
    local touse = {}
    local call = ""
    if snd.theytumbling then
      string = "penitence " .. snd.target .. snd.sep .. "qeb deliver " .. snd.target
    elseif snd.theyran then
      string = "DEJEMASHAI " .. snd.target
    elseif snd.mana_percent &lt; 35 and not snd.used.shield then
      --Checking if we could annihilate the last time we contemplated, and trying if we can. Need to add logic to announce mana calls
      string = "dumavai " .. snd.target
    else
      for i in pairs(snd.giving_whisper) do
        if not snd.checkAff(snd.giving_whisper[i]) then
          if not table.contains(touse, snd.giving_whisper[i]) then
            table.insert(touse, snd.giving_whisper[i])
          end
        end
      end
      string =
        "denounce " ..
        snd.target ..
        snd.sep ..
        "dictate " ..
        touse[1] ..
        " " ..
        touse[2] ..
        " " ..
        snd.target
    end
    string =
      "contemplate " ..
      snd.target ..
      snd.sep ..
      "order loyals attack " ..
      snd.target ..
      snd.sep ..
      string
    --Contemplate target and order loyal to attack it before attacking
    call = "wt Afflicting " .. touse[1] .. " " .. touse[2]
    if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
      string =
        call ..
        snd.sep ..
        "contemplate " ..
        snd.target ..
        snd.sep ..
        "order loyals attack " ..
        snd.target ..
        snd.sep ..
        string
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gdmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Afflictions</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Group Afflictions</name>
								<script>if snd.class == "Akkari" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local touse = {}
 snd.giving_whisper = {
			"impatience",
			"lovers",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",

	}
  snd.akkari_lovers(snd.giving_whisper)
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
			
	if not snd.waiting.queue then
		if snd.theytumbling then
			string = "penitence "..snd.target..snd.sep.."qeb deliver "..snd.target
		elseif snd.theyran then
			string = "DEJEMASHAI "..snd.target
		else
			string = "denounce "..snd.target..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target
		end
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Annhilate and Mesmerize</name>
								<script>if snd.class == "Akkari" then
  snd.starting_attack()

  function snd.attack_function()
    local string = "contemplate " .. snd.target .. snd.sep
    local corpus = "none"
    local touse = {}
    local physcount = 0
    for aff in pairs(snd.physical_affs) do
      if table.contains(snd.target_has, snd.physical_affs[aff]) then
        physcount = physcount + 1
      end
    end
    local mentcount = 0
    for aff in pairs(snd.mental_affs) do
      if table.contains(snd.target_has, snd.mental_affs[aff]) then
        mentcount = mentcount + 1
      end
    end
    snd.giving_whisper =
      {
        "impatience",
        "lovers",
        "stupidity",
        "anorexia",
        "confusion",
        "recklessness",
        "agoraphobia",
        "vertigo",
        "indifference",
        "peace",
        "masochism",
        "paranoia",
      }
    snd.akkari_lovers(snd.giving_whisper)
    if not snd.loyalsattacking then
      string = string .. "order loyals kill " .. snd.target .. snd.sep
    end
    if not snd.waiting.queue then
      if snd.theytumbling then
        string = "penitence " .. snd.target .. snd.sep .. "qeb deliver " .. snd.target
      elseif snd.theyran then
        string = "DEJEMASHAI " .. snd.target
      elseif snd.mana_percent &lt; 35 and not snd.used.shield then
        string = string .. "dumavai " .. snd.target
      elseif snd.proned() then
        string = string .. "tithe " .. snd.target
      elseif not snd.checkAff("writhe_transfix") then
        string = string .. "exhort " .. snd.target
      else
        for i in pairs(snd.giving_whisper) do
          if not snd.checkAff(snd.giving_whisper[i]) then
            if not table.contains(touse, snd.giving_whisper[i]) then
              table.insert(touse, snd.giving_whisper[i])
            end
          end
        end
        string =
          "denounce " ..
          snd.target ..
          snd.sep ..
          "dictate " ..
          touse[1] ..
          " " ..
          touse[2] ..
          " " ..
          snd.target
      end
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^mez$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>akkari Group Affs</name>
								<script>if snd.class == "Akkari" then
snd.starting_attack()

function snd.attack_function()
 local string = ""
 local touse = {}
 local gashaff = {}
 local call = ""
 
 snd.giving_whisper = {
 		"lovers",
		"impatience",
 		"recklessness",
		"stupidity", 
 		"masochism",
		"agoraphobia",
 		"confusion",
		"epilepsy",
 		"anorexia",
		"berserking",
 		"vertigo",
 		"dementia",
 		"peace",
		"paranoia",
 		"indifference",

		}
	snd.akkari_lovers(snd.giving_whisper)

snd.scythe_gash = {
		"paresis",
		"asthma",
		"slickness",
		"anorexia",
		"clumsiness",
		"dizziness",
		"stupidity",
		"weariness",
		
	    }
		

			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end

			for i in pairs(snd.scythe_gash) do
				if not snd.checkAff(snd.scythe_gash[i]) then
					if not table.contains(gashaff, snd.scythe_gash[i]) then
						table.insert(gashaff, snd.scythe_gash[i])
					end
				end
			end

        if snd.mana_percent &lt; 35 and not snd.used.shield then 
            string = "dumavai "..snd.target
        else
		       if snd.used.shield or snd.used.rebounding then
              string = "denounce "..snd.target..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target
              call = "wt Afflicting "..snd.target..": "..touse[1]..snd.sep..", "..touse[2]		   
           else
			        string = "wipe weapon"..snd.sep.."censure "..snd.target.." "..snd.effects[gashaff[1]].." lenient"..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target..snd.sep
			        call = "wt Afflicting "..snd.target..": " ..snd.effects[gashaff[1]]..". Whispering: "..touse[1]..", "..touse[2]
			     end
        end

	if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
		string = call..snd.sep.."contemplate "..snd.target..snd.sep.."order loyals attack "..snd.target..snd.sep..string
	end

    if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
    snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group Lock</name>
								<script>snd.current_offense = "glo"
if snd.class == "Akkari" then
  -- set this to the class this alias is for
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      -- declare some important variables
      local string = ""
      local touse = {}
      local gashaff = {}
      local call = ""
      local fcall = ""
      local scall = ""
      local paff = "none"
      local saff_one = "none"
      local saff_two = "none"
      local pattack = ""
      local sattack = ""
      local extraaff = "amnesia"
      if snd.target_locked() then
        snd.primary_aff =
          {
            "sight",
            "writhe_transfix",
            "paresis",
            "stupidity",
            "anorexia",
            "asthma",
            "slickness",
            "no_paste",
            "blood_curse",
            "black_bile",
          }
      else
        --  "effused_blood",
        -- "blood_rune",
        snd.primary_aff =
          {
            "paresis",
            "stupidity",
            "anorexia",
            "asthma",
            "slickness",
            "no_paste",
            "blood_curse",
            "black_bile",
          }
      end
      if snd.target_locked() then
        snd.secondary_aff =
          {
            "impatience",
            "confusion",
            "indifference",
            "stupidity",
            "confusion",
            "epilepsy",
            "berserking",
            "sight",
            "lovers",
            "peace",
            "recklessness",
            "dementia",
            "paranoia",
            "anorexia",
            "vertigo",
            "masochism",
            "agoraphobia",
            "amnesia",
          }
      else
        if
          snd.cureset == "archivist" or
          snd.cureset == "shaman" or
          snd.cureset == "ascendril" or
          snd.cureset == "Sciomancer"
        then
          snd.secondary_aff =
            {
              "stupidity",
              "impatience",
              "confusion",
              "epilepsy",
              "berserking",
              "sight",
              "lovers",
              "peace",
              "recklessness",
              "dementia",
              "paranoia",
              "anorexia",
              "vertigo",
              "masochism",
              "agoraphobia",
              "indifference",
              "amnesia",
            }
        else
          snd.secondary_aff =
            {
              "stupidity",
              "impatience",
              "epilepsy",
              "berserking",
              "sight",
              "lovers",
              "confusion",
              "peace",
              "recklessness",
              "dementia",
              "paranoia",
              "anorexia",
              "vertigo",
              "masochism",
              "agoraphobia",
              "indifference",
              "amnesia",
            }
        end
      end
      snd.akkari_lovers(snd.secondary_aff)
      snd.akkari_host()
      snd.akkari_attend()
      for i in pairs(snd.primary_aff) do
        --   and not (snd.used.rebounding and table.isMember(snd.censure_affs, snd.primary_aff[i]))
        if
          not snd.checkAff(snd.primary_aff[i]) and
          not (snd.primary_aff[i] == "paresis" and snd.checkAff("paralysis"))
        then
          if not table.contains(gashaff, snd.primary_aff[i]) then
            table.insert(gashaff, snd.primary_aff[i])
          end
        end
      end
      if table.isMember(snd.censure_affs, gashaff[1]) then
        if gashaff[1] == "sight" then
          pattack =
            "wipe left" ..
            snd.sep ..
            "censure " ..
            snd.target ..
            " lenient " ..
            snd.effects[gashaff[1]] ..
            snd.sep
        else
          pattack =
            "wipe left" ..
            snd.sep ..
            "censure " ..
            snd.target ..
            " " ..
            snd.effects[gashaff[1]] ..
            snd.sep
        end
        fcall = "Afflicting " .. snd.target .. ": " .. snd.effects[gashaff[1]] .. " "
      elseif table.isMember(snd.akkari_bal_affs, gashaff[1]) then
        if gashaff[1] == "black_bile" then
          pattack = "denounce " .. snd.target .. " corruption" .. snd.sep
        else
          pattack = snd.akkari_bal_attacks[gashaff[1]] .. " " .. snd.target .. snd.sep
        end
      elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
        pattack = snd.akkari_eq_attacks[gashaff[1]] .. " " .. snd.target .. snd.sep
      else
        pattack = "denounce " .. snd.target .. snd.sep
      end
      for i in pairs(snd.secondary_aff) do
        if
          not (
            snd.checkAff(snd.secondary_aff[i]) or
            snd.secondary_aff[i] == gashaff[1] or
            (gashaff[1] == "sight" and snd.secondary_aff[1] == "hearing")
          )
        then
          if not table.contains(touse, snd.secondary_aff[i]) then
            table.insert(touse, snd.secondary_aff[i])
          end
        end
      end
      if touse[2] == "sight" then
        table.remove(touse, table.index_of(touse, "sight"))
      end
      if touse[2] == "hearing" then
        table.remove(touse, table.index_of(touse, "hearing"))
      end
      while #touse &lt; 3 do
        table.insert(touse, extraaff)
      end
      if gashaff[1] == "sight" then
        if touse[1] == "sight" then
          table.remove(touse, table.index_of(touse, "sight"))
        end
        if touse[1] == "hearing" then
          table.remove(touse, table.index_of(touse, "hearing"))
        end
        sattack = "dictate " .. touse[1] .. " " .. snd.target .. snd.sep
        if touse[1] == "remorse" or touse[1] == "contrition" then
        else
          scall = "Whispering " .. snd.target .. ": " .. touse[1]
        end
      elseif touse[1] == "sight" then
        sattack = "spirit attend " .. snd.target .. snd.sep
      elseif touse[1] == "hearing" then
        sattack = "spirit attend " .. snd.target .. snd.sep
      elseif touse[1] == "blood_poison" then
        sattack = "spirit bane " .. snd.target .. snd.sep
      else
        if (touse[2] == "hearing" or touse[2] == "sight") then
          if snd.can_proclaim then
            sattack = "proclaim " .. touse[1] .. " " .. touse[3] .. snd.sep
          else
            sattack = "dictate " .. touse[1] .. " " .. touse[3] .. " " .. snd.target .. snd.sep
          end
          if touse[1] == "remorse" or touse[1] == "contrition" then
          else
            scall = "Whispering: " .. touse[1] .. " " .. touse[3]
          end
        else
          if snd.can_proclaim then
            sattack = "proclaim " .. touse[1] .. " " .. touse[2] .. snd.sep
          else
            sattack = "dictate " .. touse[1] .. " " .. touse[2] .. " " .. snd.target .. snd.sep
          end
          if touse[1] == "remorse" or touse[1] == "contrition" then
          else
            scall = "Whispering " .. snd.target .. ": " .. touse[1] .. " " .. touse[2]
          end
        end
      end
      if snd.used.shield and snd.used.rebounding then
        string = "denounce " .. snd.target .. snd.sep .. "spirit provoke " .. snd.target
        fcall = ""
        scall = ""
      elseif snd.used.shield then
        string = "denounce " .. snd.target .. snd.sep .. sattack
        fcall = ""
      elseif snd.mana_percent &lt; 35 then
        string = "dumavai " .. snd.target
      elseif snd.mana_percent &lt; 44 and snd.checkAff("blood_rune") then
        string = "spirit vilify" .. snd.sep .. "dumavai " .. snd.target
        fcall = ""
        scall = ""
      elseif snd.used.rebounding and table.isMember(snd.censure_affs, gashaff[1]) then
        string = "denounce " .. snd.target .. " corruption" .. snd.sep .. sattack
        fcall = ""
      elseif
        snd.checkAff("impatience") and
        snd.checksomeAffs({"sadness", "confusion"}, 2) and
        gmcp.Char.Status.spec == "Naarak" and
        not snd.checkAff("blood_curse")
      then
        string = "spirit anathema " .. snd.target
        fcall = ""
        scall = ""
      elseif
        gmcp.Char.Status.spec == "Naarak" and
        snd.can_inquisition and
        (
          (
            snd.aff_count_mental() == 12 or
            (snd.checkAff("blood_curse") and snd.aff_count_mental() == 10)
          ) or
          (
            snd.checkAff("blood_rune") and
            (
              snd.aff_count_mental() == 9 or
              (snd.checkAff("blood_curse") and snd.aff_count_mental() == 7)
            )
          )
        )
      then
        string = "spirit inquisition " .. snd.target
        fcall = ""
        scall = ""
      elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
        string = pattack
        fcall = ""
        scall = ""
      else
        string = pattack .. snd.sep .. sattack
        if table.isMember(snd.censure_affs, gashaff[1]) then
        end
      end
      if not snd.loyalsattacking then
        string = "order loyals attack " .. snd.target .. snd.sep .. string
      end
      string = "contemplate " .. snd.target .. snd.sep .. string .. snd.sep
      if fcall ~= "" then
        call = "wt " .. fcall
      end
      if scall ~= "" then
        if call ~= "" then
          call = call .. snd.sep .. "wt " .. scall
        else
          call = "wt " .. scall
        end
      end
      -- check if we need to prepend an affliction call
      if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
        string = call .. snd.sep .. string
      end
      -- we don't want to resend our existing attack, so check against that
      if string ~= snd.last_attack and not snd.waiting.queue then
        -- if we've got a new attack now,
        snd.last_attack = string
        cecho("\n&lt;white&gt;" .. string)
        snd.attack(snd.last_attack)
        -- manage the anti-spam check below
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
  -- make sure to actually send the attack once on use!
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^glo$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Wielding</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>wield bashing</name>
								<script>if snd.class == "Akkari" then
  snd.send("quickwield both mantha")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wbsh$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Misc</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Lure</name>
								<script>snd.send("qeb DEJEMASHAI "..matches[2])</script>
								<command></command>
								<packageName></packageName>
								<regex>^lure (\w+)$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>1v1</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Naarak Host Route</name>
								<script>if snd.class == "Akkari" then
snd.starting_attack()
function snd.attack_function()
  local string = "contemplate "..snd.target..snd.sep
  local corpus = "none"
  local touse = {}
  local tohit = {}
  local whis = {}
 
  snd.giving_whisper = {
            "impatience",
            "lovers",
            "peace",
            "stupidity",
            "confusion",
            "anorexia",
            "berserking",
            "recklessness",
            "agoraphobia",
            "vertigo",
            "indifference",
            "masochism",
            "paranoia",
 
  }
  snd.akkari_lovers(snd.giving_whisper)

  snd.giving = {
        "asthma",
        "paresis",
        "clumsiness",
        "weariness",
  }
      for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end

      for j in pairs(snd.giving_whisper) do
        if not snd.checkAff(snd.giving_whisper[j]) then
          if not table.contains(whis, snd.giving_whisper[j]) then
            table.insert(whis, snd.giving_whisper[j])
          end
        end
      end
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end
      
    if not snd.loyalsattacking then
      string = string.."order loyals kill "..snd.target..snd.sep 
    end
    
    local seizeMana = 0
    local mAffBump = 4.00
    seizeMana = tonumber((10.98) + (mentcount*mAffBump))
    
    if snd.checkAff("blood_curse") then
      seizeMana = seizeMana+((seizeMana/10)*1.5)
    end
   
  if not snd.waiting.queue then
  
	 	  if snd.theytumbling then
			   string = string.."penitence "..snd.target..snd.sep.."qeb deliver "..snd.target
		  elseif snd.theyran then
			   string = string.."DEJEMASHAI "..snd.target
      elseif snd.used.shield then
        string = string.."denounce "..snd.target.." upset"..snd.sep.."dictate "..whis[1].." "..whis[2].." "..snd.target
      elseif snd.used.rebounding then
         string = string..snd.target..snd.sep.."bloodlet " ..snd.target..snd.sep.. "dictate "..whis[1].." "..whis[2].." "..snd.target
      elseif not snd.checkAff("rend") then
        string = string.."bloodlet " ..snd.target..snd.sep.. "dictate "..whis[1].." "..whis[2].." "..snd.target
      elseif not snd.checkAff("blood_rune") and not snd.runeused then
        string = string.."spirit pariah " ..snd.target
      elseif ((snd.mana_percent - seizeMana) &lt;= 37 and snd.checkAff("blood_rune")) or ((snd.mana_percent - seizeMana) &lt;= 32) and snd.balance.seize  then
        string = string.."spirit inquisition " ..snd.target
      elseif snd.mana_percent &lt;= 37 and not snd.balance.seize and snd.runeused and snd.checkAff("blood_rune") then
        string = string.."spirit vilify"
      elseif snd.mana_percent &lt; 35 or (snd.mana_percent &lt; 44 and snd.checkAff("blood_rune")) then
 			  string = string .. "dumavai "..snd.target
  	  elseif mentcount &gt;= 3 and not snd.checkAff("blood_curse") then
        string = string.."spirit anathema " ..snd.target
      else
        string = string.."wipe weapon"..snd.sep.."censure "..snd.target.." "..tohit[1].." lenient"..snd.sep.."dictate "..whis[1].." "..whis[2].." "..snd.target..snd.sep
      end
    end
   
   
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(d), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^narrak$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limbs</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Group Limbs</name>
								<script>snd.current_offense = "gli"
if snd.class == "Akkari" then -- set this to the class this alias is for
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		-- declare some important variables
 local string = ""
 local touse = {}
 local gashaff = {}
 local call = ""
 local fcall = ""
 local scall = ""
 local paff = "none"
 local saff_one = "none"
 local saff_two = "none"
 local pattack = ""
 local sattack = ""
 local extraaff = "amnesia"
 

 snd.primary_aff = {
    --"effused_blood",
    "blood_rune",
    "left_leg_crippled",
    "right_leg_crippled",
    "left_arm_crippled",
    "right_arm_crippled",
    "paresis",
    "stupidity",
    "anorexia",
    "asthma",
    "slickness",
    "sight",    
    "blood_curse",
    "black_bile",
		}

snd.secondary_aff = {
    "stupidity",
    "impatience",
    "epilepsy",
    "berserking",
    "loneliness",
    "confusion",
    "peace",
    "recklessness",
    "dementia",
    "paranoia",
    "anorexia",
    "vertigo",
    "masochism",
    "agoraphobia",
    "indifference",
    "amnesia",
    }
	snd.akkari_lovers(snd.secondary_aff)

snd.akkari_host()
snd.akkari_attend()

  for i in pairs(snd.primary_aff) do
    if not snd.checkAff(snd.primary_aff[i]) 
    and not (snd.primary_aff[i] == "paresis" and snd.checkAff("paralysis")) 
    then
					if not table.contains(gashaff, snd.primary_aff[i]) then
						table.insert(gashaff, snd.primary_aff[i])
					end
    end
  end

  if table.isMember(snd.censure_affs, gashaff[1]) then
      if gashaff[1] == "sight" then
     	pattack = "wipe left"..snd.sep.."censure "..snd.target.." lenient "..snd.effects[gashaff[1]]..snd.sep
      else
    	pattack = "wipe left"..snd.sep.."censure "..snd.target.." "..snd.effects[gashaff[1]]..snd.sep
      end
      fcall = "Afflicting "..snd.target..": "..gashaff[1].." "
  elseif table.isMember(snd.akkari_bal_affs, gashaff[1]) then
      if gashaff[1] == "black_bile" then
      pattack = "denounce "..snd.target.." corruption"..snd.sep
      else
      pattack = snd.akkari_bal_attacks[gashaff[1]].." "..snd.target..snd.sep
      end
  elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
      pattack = snd.akkari_eq_attacks[gashaff[1]].." "..snd.target..snd.sep
  else
      pattack = "denounce "..snd.target..snd.sep
      fcall = ""
	end
  
    	for i in pairs(snd.secondary_aff) do
				if not (snd.checkAff(snd.secondary_aff[i]) or snd.secondary_aff[i] == gashaff[1] or (gashaff[1] == "sight" and snd.secondary_aff[1] == "hearing")) then
					if not table.contains(touse, snd.secondary_aff[i]) then
						table.insert(touse, snd.secondary_aff[i])
					end
				end
			end
      
      if touse[2] == "sight" then
        table.remove(touse, table.index_of(touse, "sight"))
      end
      
      if touse[2] == "hearing" then
        table.remove(touse, table.index_of(touse, "hearing"))
      end
      
			while #touse &lt; 3 do
				table.insert(touse, extraaff)
			end
  
  
  if gashaff[1] == "sight" then
    if touse[1] == "sight" then
      table.remove(touse, table.index_of(touse, "sight"))
    end
    if touse[1] == "hearing" then
      table.remove(touse, table.index_of(touse, "hearing"))
    end
    sattack = "dictate "..touse[1].." "..snd.target..snd.sep
    if touse[1] == "remorse" or touse[1] == "contrition" then
    else
    scall = "Whispering "..snd.target..": "..touse[1]
    end
  elseif touse[1] == "sight" then
    sattack = "spirit attend "..snd.target..snd.sep
  elseif touse[1] == "hearing" then
    sattack = "spirit attend "..snd.target..snd.sep
  elseif touse[1] == "blood_poison" then
    sattack = "spirit bane "..snd.target..snd.sep
  else
    if (touse[2] == "hearing" or touse[2] == "sight") then
      if snd.can_proclaim then
        sattack = "proclaim "..touse[1].." "..touse[3]..snd.sep
      else
        sattack = "dictate "..touse[1].." "..touse[3].." "..snd.target..snd.sep
      end
        scall = "Whispering: "..touse[1].." "..touse[3]
    else
      if snd.can_proclaim then
        sattack = "proclaim "..touse[1].." "..touse[2]..snd.sep
      else    
        sattack = "dictate "..touse[1].." "..touse[2].." "..snd.target..snd.sep
      end
      if touse[1] == "remorse" or touse[1] == "contrition" then
      else
      scall = "Whispering "..snd.target..": "..touse[1].." "..touse[2]
      end
    end


  end


    if snd.used.shield and snd.used.rebounding then
      string = "denounce "..snd.target..snd.sep.."spirit provoke "..snd.target
      fcall = ""
      scall = ""
    elseif snd.used.shield then
      string = "denounce "..snd.target..snd.sep..sattack
      fcall = ""
    elseif snd.mana_percent &lt; 35 then
      string = "dumavai "..snd.target
      fcall = ""
      scall = ""
    elseif snd.mana_percent &lt; 44 and snd.checkAff("blood_rune") then
      string = "spirit vilify"..snd.sep.."dumavai "..snd.target
      fcall = ""
      scall = ""
    elseif snd.used.rebounding and table.isMember(snd.censure_affs, gashaff[1]) then
        string = "denounce "..snd.target.." corruption"..snd.sep..sattack
        fcall = ""
    elseif snd.checkAff("impatience") and snd.checksomeAffs({"sadness", "confusion",}, 2) 
    and gmcp.Char.Status.spec == "Naarak" and not snd.checkAff("blood_curse") then
      string = "spirit anathema "..snd.target
      fcall = ""
      scall = ""
    elseif gmcp.Char.Status.spec == "Naarak" and snd.can_inquisition and 
    ((snd.aff_count_mental() == 12 or (snd.checkAff("blood_curse") and snd.aff_count_mental() == 10))
    or
    (snd.checkAff("blood_rune") and (snd.aff_count_mental() == 9 or (snd.checkAff("blood_curse") and snd.aff_count_mental() == 7))))
    then
      string = "spirit inquisition "..snd.target
      fcall = ""
      scall = ""
    elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
      string = pattack
      fcall = ""
      scall = ""
    else
      string = pattack..snd.sep..sattack
    end
    
    
    if not snd.loyalsattacking then
    string = "order loyals attack "..snd.target..snd.sep..string
    end
    
    string  = "contemplate "..snd.target..snd.sep..string
    
    
    if fcall ~= "" then
      call = "wt "..fcall
    end
    
    if scall ~= "" then
      if call ~= "" then
      call = call..snd.sep.."wt "..scall
      else
      call = "wt "..scall
      end
    end
    
    
		-- check if we need to prepend an affliction call
	  if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
		string = call..snd.sep..string
    end
	
  
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
      cecho("\n&lt;white&gt;"..string)
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gli$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Ascendril</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offense</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
			
	if snd.glimpse == "none" and snd.checkAff("stormtouched") and not snd.glimpsing then
		string = "fulcrum glimpse air"
	elseif snd.glimpse == "none" and not snd.checkAff("stormtouched") then
		string = "fulcrum glimpse fire"
	end

	if snd.checkAff("stormtouched") and not snd.used.shield then
		string = string..snd.sep.."cast lightning "..snd.target
  elseif snd.used.shield or snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) or (snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned() then
				string = "cast windlance " .. snd.target
	else
  	if snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
  	
  		if gmcp.Char.Vitals.ability_bal == "1" then
  			string = "fulcrum flare "..snd.target
  		end
  		
  		if gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "water" then
  			string = string..snd.sep.."fulcrum enrich fire"
  		end
  
  		if gmcp.Char.Vitals.resonance == "fire" then
  			string = string..snd.sep.."cast windlance "..snd.target
  		end
  
  		if gmcp.Char.Vitals.resonance == "air" then
  			string = string..snd.sep.."cast fireball "..snd.target
  		end
	end
end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^damage$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>ablaze</name>
								<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local limbs = {"head", "left leg", "torso", "right leg", "left arm", "right arm"}
		local targ = "nothing"
		
		for limb in pairs(limbs) do
			-- ignore last parried, last hit, and any limbs being resto'd
			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and limbs[limb] ~= snd.resto_limb then
				if targ == "nothing" then
					targ = limbs[limb]
				end
			end
		end
			
	if snd.used.shield then
		string = string..snd.sep.."cast windlance "..snd.target
	end
			
	if snd.glimpse == "none" and not snd.glimpsing then
		string = "fulcrum glimpse fire"
	end

	if snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
	
		if gmcp.Char.Vitals.ability_bal == "1" then
			string = "fulcrum flare "..snd.target
		end
		
		if gmcp.Char.Vitals.resonance ~= "fire" then
			string = string..snd.sep.."fulcrum enrich fire"
		end
		
		if gmcp.Char.Vitals.resonance == "fire" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				string = string..snd.sep.."fulcrum stall 3 firelash "..snd.target.." "..targ
			else
				string = string..snd.sep.."cast firelash "..snd.target.." "..targ
			end
		end

	end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
	
end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^fire$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Utility Aliases</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Manually reset glimpse</name>
								<script>if matches[2] == "none" then
  snd.glimpse = "none"
  snd.glimpsing = false
else
  snd.glimpse = matches[2]
  snd.glimpsing = true
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^glimpse (\w+)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>order loyals aggro</name>
								<script>send("order efreeti kill "..snd.target)</script>
								<command></command>
								<packageName></packageName>
								<regex>^olk$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>order loyals stop aggro</name>
								<script>send("order loyals passive")</script>
								<command></command>
								<packageName></packageName>
								<regex>^olp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Trace Clarity</name>
								<script>send("outc topazdust"..snd.sep.."outc diamonddust"..snd.sep.."trace clarity")</script>
								<command></command>
								<packageName></packageName>
								<regex>^crune$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Prop Aegis</name>
								<script>send("cast ensorcell aegis")</script>
								<command></command>
								<packageName></packageName>
								<regex>^prop$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Soar</name>
								<script>send("qeb cast soar "..matches[2])</script>
								<command></command>
								<packageName></packageName>
								<regex>^soar (\w+)$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Remote Aliases</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>fireball</name>
								<script>send("qeb cast prism fireball "..snd.target..""..snd.sep.."cast fireball "..snd.target)</script>
								<command></command>
								<packageName></packageName>
								<regex>^fb$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affs</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>affs</name>
								<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}

		local extraaff = ""
		
			snd.giving = {
			"clumsiness",
			"paresis",
			"haemophilia",
			"asthma",
			"slickness",
			"anorexia",
			"stupidity",
			}
			
	for i in pairs(snd.giving) do
		-- make sure not to double up paresis and paralysis
		if not snd.checkAff(snd.giving[i]) then
			-- and don't add an aff we've already got in the list!
			if not table.contains(touse, snd.giving[i]) then
				table.insert(touse, snd.giving[i])
			end
		end
	end
	-- now let's convert affs to venoms/empowerments
	for aff in pairs(touse) do
		table.insert(tohit, snd.effects[touse[aff]])
	end
	-- if we didn't find enough stuff to hit with, stick in our filler
	while #tohit &lt; 3 do
		table.insert(tohit, extraaff)
	end
			
	if snd.glimpse == "none" and not snd.checkAff("thunderbrand") and not snd.glimpsing then
		string = "fulcrum glimpse air"
	elseif snd.glimpse == "none" and snd.checkAff("thunderbrand") then
		string = "fulcrum catalyst "..snd.target.." air"
	end

	if snd.checkAff("stormtouched") then
		string = string..snd.sep.."cast lightning "..snd.target
	elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
	
		if snd.checkAff("vertigo") then
			string = "fulcrum flare"
		end
		
		if gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "fire" then
			string = "fulcrum enrich air"
		end

		if gmcp.Char.Vitals.resonance == "water" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				string = string..snd.sep.."fulcrum stall 3 pressurize "..snd.target
			elseif snd.defenses.def_stalled.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."cast windlance "..snd.target
				else
					if snd.checksomeAffs({"dizziness", "stupidity"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast lightning "..snd.target
					end
				end
			end

		elseif gmcp.Char.Vitals.resonance == "air" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				if snd.checksomeAffs({"dizziness", "stupidity"},2) and not snd.proned then
					string = string..snd.sep.."fulcrum stall 3 frostblade "..snd.target.." "..tohit[2]
				else
					string = string..snd.sep.."fulcrum stall 3 thunder "..snd.target
				end
			elseif snd.defenses.def_stalled.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."cast windlance "..snd.target
				elseif snd.proned then
					if snd.checksomeAffs({"lethargy", "confusion"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast hailstorm "..snd.target
					end
				elseif not snd.proned then
					if snd.checksomeAffs({"masochism", "stupidity"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast coldsnap "..snd.target
					end
				end
			end
		end

end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^affs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>group affs (stine)</name>
								<script>if snd.class == "Ascendril" then
  snd.starting_attack()
  function snd.attack_function()
    if not snd.waiting.queue then
  		local string = ""
  		local call = "" 
      local can_we_stall = false; if snd.defenses.def_stalled.state ~= "deffed" then can_we_stall = true end
  		local can_we_flare = false; if gmcp.Char.Vitals.ability_bal ==  "1" then can_we_flare = true end
      local resonance = gmcp.Char.Vitals.resonance
      local random_limb = {"right leg", "right arm", "left leg", "left arm", "head", "torso"}
  		local touse = {}
  		local tohit = {}
      
  		local extraaff = "epseth"
  		
  		snd.giving = {                                             
  			"asthma",
  			"slickness",
  			"anorexia",
  			"stupidity",
        "weariness",
        "dizziness",
        "vomiting",
        "recklessness",
        }
  			
    	for i in pairs(snd.giving) do
    		if not snd.checkAff(snd.giving[i]) then
    			if not table.contains(touse, snd.giving[i]) then
    				table.insert(touse, snd.giving[i])
    			end
    		end
    	end
     
    	for aff in pairs(touse) do
    		table.insert(tohit, snd.effects[touse[aff]])
    	end
     
    	while #tohit &lt; 3 do
    		table.insert(tohit, extraaff)
    	end
    			
    	if snd.glimpse == "none" and not snd.glimpsing then
    		--string = "fulcrum glimpse air"
    	end
    
    	if snd.glimpse == "none" then
    	
    		if can_we_flare and snd.checkAff("vertigo") and not snd.checkAff("muddled") then
    			string = "fulcrum flare"
    		end
  
    		if (resonance == "" or resonance == "none" or resonance == "fire") and snd.balance.enrich then
    			string = "fulcrum enrich air"
    		 end
        
        if snd.used.shield then
    			string = string..snd.sep.."cast windlance "..snd.target
          
    		elseif resonance == "water" then
    			if can_we_stall then
            string = string..snd.sep.."fulcrum stall 3 "
            if not snd.checksomeAffs({"vertigo", "confusion"}, 1) and not snd.checkAff("weariness") then
    				  string = string.." pressurize "..snd.target
            elseif not snd.checksomeAffs({"dizziness", "stupidity"}, 2) then
              string = string.."thunder "..snd.target
            else  
              string = string.."firelash  "..snd.target..random_limb[math.random(#random_limb)]
            end 
    			else
  					if not snd.checksomeAffs({"dizziness", "stupidity"},2) then
            	string = string..snd.sep.."cast lightning "..snd.target
  					else
  						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
  					end
    			end
    
    		elseif resonance == "air" then
    			if can_we_stall then
            string = string..snd.sep.."fulcrum stall 3 "
    				if not snd.checksomeAffs({"stupidity, masochism"}, 2) then
              string = string.."coldsnap "..snd.target
    				elseif not snd.checkAff("lethargy") then
    					string = string.."hailstorm "..snd.target
            else
    					string = string.."firelash  "..snd.target..random_limb[math.random(#random_limb)]
    				end
    			else            
    				if not snd.checksomeAffs({"lethargy", "confusion"},2) and snd.proned and snd.stalled_skill ~= "hailstorm" then
    					string = string..snd.sep.."cast hailstorm "..snd.target
    				elseif not snd.checksomeAffs({"masochism", "stupidity"},2) and snd.stalled_skill ~= "coldsnap" then
    					string = string..snd.sep.."cast coldsnap "..snd.target
            else
              string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
    				end
          end
  			elseif resonance ==  "fire" then
    			if can_we_stall then
            string = string..snd.sep.."fulcrum stall 3 "
    				if not snd.checksomeAffs({"vertigo", "confusion"},2) and not snd.checkAff("clumsiness") then
    					string = string.."pressurize "..snd.target
    				elseif not snd.checksomeAffs({"stupidity, recklessness"}, 2) then
              string = string.."coldsnap "..snd.target
            else
    					string = string.."firelash  "..snd.target..random_limb[math.random(#random_limb)]
    				end
    			else            
    				if snd.timer_check("restoration", .5) and not snd.checksomeAffs({"anorexia", "indifference"}, 2) then
    					string = string..snd.sep.."cast gorge "..snd.target
    				elseif not snd.checksomeAffs({"masochism", "stupidity"},2) and snd.stalled_skill ~= "coldsnap" then
    					string = string..snd.sep.."cast coldsnap "..snd.target
            else
              string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
    				end
          end
    		end
      end
  
    	if string ~= snd.last_attack and not snd.waiting.queue then
    		snd.last_attack = string
    		snd.attack(snd.last_attack)
    		snd.waiting.queue = true
    		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    	end
      end
    end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limbs / Salves</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>solo shatter</name>
								<script>if snd.class == "Ascendril" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      local limbs = {"left leg", "right leg", "left arm", "right arm"}
      local targ = "nothing"
      local stalled = false
      if snd.defenses.def_stalled.state == "deffed" then
        stalled = true
      end
      for limb in pairs(limbs) do
        -- ignore last parried, last hit, and any limbs being resto'd
        if
          limbs[limb] ~= snd.parried_limb and
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbrand") then
        string = "fulcrum glimpse water"
      elseif snd.glimpse == "none" and snd.checkAff("frostbrand") then
        string = "fulcrum catalyst " .. snd.target .. " frost"
      elseif snd.used.shield == true then
        string = "cast windlance " .. snd.target
      elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "fulcrum flare " .. snd.target
        end
        if gmcp.Char.Vitals.resonance == "water" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.resonance == "fire" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.resonance == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            --not snd.direfrost and not snd.checkAff("frostbrand") then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^solo$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>frozen</name>
								<script>if snd.class == "Ascendril" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      -- next, the afflictions we want to give
      local touse = {}
      local tohit = {}
      local stalled = false
      if snd.defenses.def_stalled.state == "deffed" then
        stalled = true
      end

      local extraaff = ""
      snd.giving = {"anorexia"}
      for i in pairs(snd.giving) do
        -- make sure not to double up paresis and paralysis
        if not snd.checkAff(snd.giving[i]) then
          -- and don't add an aff we've already got in the list!
          if not table.contains(touse, snd.giving[i]) then
            table.insert(touse, snd.giving[i])
          end
        end
      end
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      -- if we didn't find enough stuff to hit with, stick in our filler
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbrand") then
        string = "fulcrum glimpse water"
      elseif snd.glimpse == "none" and snd.checkAff("frostbrand") then
        string = "fulcrum catalyst " .. snd.target .. " frost"
      elseif snd.used.shield or 
			(snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"},1) or snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned() then
				string = "cast windlance " .. snd.target
      elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "fulcrum flare " .. snd.target
        end
        if gmcp.Char.Vitals.resonance == "water" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "fulcrum stall 3 mistral " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast mistral " .. snd.target
						end
          end
        elseif gmcp.Char.Vitals.resonance == "fire" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "fulcrum stall 3 coldsnap " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "cast gorge " .. snd.target .. " euphoriant"
						else
							string = string .. snd.sep .. "cast hailstorm " .. snd.target
            end
          end
        elseif gmcp.Char.Vitals.resonance == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 hailstorm " .. snd.target
            end
          elseif stalled then
           if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "cast gorge " .. snd.target .. " euphoriant"
						elseif not snd.checkAff("masochism") then
							string = string .. snd.sep .. "cast coldsnap " ..snd.target
						else
							string = string .. snd.sep .. "cast hailstorm " ..snd.target
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^freeze$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Luminary</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Spirituality</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>beckon</name>
								<script>if snd.class == "Luminary" then
if matches[2] == "" then
 snd.send("qeb angel beckon "..snd.target)
elseif matches[2] == "all" then
 snd.send("qeb angel beckon")
else
 snd.send("qeb angel beckon "..matches[2])
end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bk(.*)$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Devotion</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>force stop</name>
								<script>if snd.class == "Luminary" then
 if snd.toggles.attacking then snd.toggle("attacking") end
 if matches[2] == "" then
  snd.send("qeb perform force "..snd.target.." stop")
 else
  snd.send("qeb perform force "..matches[2].." stop")
 end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^fs(.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>resurrection</name>
								<script>if snd.class == "Luminary" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb perform resurrection "..matches[2])
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^rez (\w+)$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mouse mode</name>
								<script>if snd.class == "Luminary" then
snd.giving_shield = {
"sight",
"paresis",
"weariness",
"asthma",
}
snd.giving_battle = {
"impatience",
"sensitivity",
"stupidity",
"vertigo",
"self_pity",
"migraine",
}
snd.giving_chasten = {
"loneliness",
"hypochondria",
"stupidity",
"lethargy",
"dementia",
"recklessness",
"masochism",
"paranoia"
}
snd.starting_attack()
function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
 local shield = "none"
 local battle = "none"
 local chasten = "none"
 if snd.mana_percent &lt; 40 and not snd.used.shield then
  string = "angel absolve "..snd.target
 elseif snd.proned() then
  string = "shield overwhelm "..snd.target
 elseif table.contains(snd.target_has, "sight") then
  string = "evoke transfixion "..snd.target
 else
  if snd.balance.battle then
   for i in pairs(snd.giving_battle) do
	  if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
	   battle = snd.giving_battle[i]
	  end
	 end
  end
  if snd.used.shield then
   shield = "shield raze"
  else
   for i in pairs(snd.giving_shield) do
    if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
	   shield = snd.spirituality_attacks[snd.giving_shield[i]]
	  end
   end
  end
  if shield == "none" then
   shield = "shield strike"
  end
  if snd.used.rebounding and shield ~= "facesmash" then
   shield = "shield raze"
  end
  for i in pairs(snd.giving_chasten) do
   if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
	  chasten = snd.giving_chasten[i]
	 end
  end
  if battle ~= "none" then
   if snd.toggles.affcalling and not snd.target_gone then
	  string = "wt Battle "..snd.target..": "..battle..snd.sep
	 end
   string = string.."angel battle "..battle.." "..snd.target..snd.sep
  end
  string = string..shield.." "..snd.target..snd.sep
  if shield ~= "slam" and shield ~= "overwhelm" then
   if chasten == "none" then
    string = string.."chasten "..snd.target
   else
	  if snd.toggles.affcalling and not snd.target_gone then
	   string = string.."wt Chasten "..snd.target..": "..chasten..snd.sep
	  end
    string = string.."chasten "..snd.target.." "..chasten
	 end
  end
 end
 
 if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then 
 	string = string..snd.sep.."quickwield left tower"
 end

 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ms$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group Affs - Used to lock someone in place</name>
								<script>-- The purpose of this is to lock someone down with disrupt so they cannot use lock-breakers to escape.
if snd.class == "Luminary" then
  snd.giving_shield = {"sight", "paresis", "weariness", "confusion", "writhe_transfix", "asthma", "misery"}
  snd.giving_battle = {"impatience", "stupidity", "sensitivity", "self_pity", "vertigo"}
  snd.giving_chasten = {"hypochondria", "stupidity", "recklessness", "lethargy", "masochism", "dementia", "paranoia", "anorexia",}
  snd.starting_attack()

  function snd.attack_function()
    local total_aff_count = snd.aff_count_all()
    local mental_aff_count = snd.aff_count_mental()
  
    local string = "contemplate " .. snd.target .. snd.sep
    if not string.find(gmcp.Char.Vitals.wield_right, "mace") then
      string = string .. "quickwield right mace" .. snd.sep
    end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then
      string = string .. "quickwield left buckler" .. snd.sep
    end
    local shield = "none"
    local battle = "none"
    local chasten = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
    else
      --battle aff pick
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end
      --If they have shield we can do nothing
      if snd.used.shield then
        shield = "shield raze"
        --If they are prone/psuedo prone and have 5 affs, smack them
      elseif total_aff_count &gt;= 5 and snd.proned() then
        shield = "shield overwhelm " .. snd.target
        --We need to build up disrupt/affs.
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.spirituality_attacks[snd.giving_shield[i]]
          end
        end
        --If they have 2 mental affs and confusion is one of them, disrupt ASAP to lock them in place.
        if
          mental_aff_count &gt;= 2 and
          snd.checkAff("confusion") and
          not snd.checkAff("disrupted") and
          total_aff_count &lt; 7
        then
          shield = "shield crash"
        end
      end
      --Dazzle can hit through rebounding, check if they have confusion first and a few affs
      if snd.used.rebounding then
        if snd.checkAff("confusion") or total_aff_count &lt; 3 then
          shield = "shield raze"
        else
          shield = "perform dazzle"
        end
      end
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      --Start building our attack - battle first
      if battle ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep
        end
        string = string .. "angel battle " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/evoke/perform attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
      --Add chasten choice
      if not (shield:find("slam") or shield:find("transfix") or shield:find("dazzle") or shield:find("crash") or shield:find("facesmash")) then
        if chasten == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "chasten " .. snd.target .. " " .. chasten
        end
      end
    end
    --Are we gonna smack them with overwhelm? Let's make it hurt.
    if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = string..snd.sep.."quickwield left tower"
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mana drain</name>
								<script>if snd.class == "Luminary" then
  snd.giving_battle = {"stupidity", "vertigo", "self_pity", "migraine", "sensitivity", "impatience"}
  snd.giving_chasten =
    {
      "lethargy",
      "loneliness",
      "stupidity",
      "hypochondria",
      "dementia",
      "recklessness",
      "masochism",
      "paranoia",
    }
  snd.starting_attack()

  function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local battle = "none"
    local chasten = "none"
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
    elseif snd.mana_percent &lt; 40 and snd.used.shield then
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      string = "shield raze " .. snd.target .. snd.sep
      if snd.toggles.affcalling and not snd.target_gone then
        string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
      end
      string = string .. "chasten " .. snd.target .. " " .. chasten
    else
      string = string.."angel sap " .. snd.target
    end
		
    if snd.balance.battle then
      for i in pairs(snd.giving_battle) do
        if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
          battle = snd.giving_battle[i]
        end
      end
    end
    string = "angel battle " .. battle .. " " .. snd.target .. snd.sep .. string
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep .. string
    end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^mana$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group Impale/Tfix</name>
								<script>--This is for quick kills with sensitivity/transfix/impale/overwhelm/disembowel.
--May have tougher time on hardier opponents.
--May vary in usefulness depending on damage output.
if snd.class == "Luminary" then
  snd.giving_shield = {"paresis", "weariness", "sight", "asthma"}
  snd.giving_battle = {"impatience", "sensitivity", "self_pity", "stupidity", "vertigo"}
  snd.giving_chasten =
    {
      "hypochondria",
      "loneliness",
      "recklessness",
      "stupidity",
      "lethargy",
      "masochism",
      "dementia",
      "paranoia",
      "anorexia",
    }
  snd.starting_attack()

  function snd.attack_function()
    local total_aff_count = snd.aff_count_all()
    local mental_aff_count = snd.aff_count_mental()
  
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local shield = "none"
    local battle = "none"
    local chasten = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
      --They've hit our aff count limit, let's lock them down/kill them.
    elseif total_aff_count &gt;= 4 and snd.checkAff("sight") and not snd.used.shield then
      if not snd.checkAff("writhe_transfix") then
        string = "evoke transfixion " .. snd.target
      else
        string = "shield overwhelm " .. snd.target
        if snd.checkAff("hearing") and not snd.checkAff("sensitivity") then
          string = "angel battle " .. snd.target .. " sensitivity" .. snd.sep .. string
        end
      end
      --Need to pile a few affs on still. Aiming for at least 4 before overwhelm so by the time
      --we get to overwhelm, they're in the overwhelm aff/damage scaling range.	
    else
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end
      if snd.used.shield then
        shield = "shield raze"
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.spirituality_attacks[snd.giving_shield[i]]
          end
        end
      end
      if shield == "none" then
        shield = "shield strike"
      end
      if snd.used.rebounding and shield ~= "facesmash" then
        shield = "shield raze"
      end
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      --Start building our attack - battle first
      if battle ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep
        end
        string = string .. "angel battle " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/evoke/perform attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
      --Add chasten choice
      if shield ~= "slam" then
        if chasten == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "chasten " .. snd.target .. " " .. chasten
        end
      end
    end
    --Are we gonna smack them with overwhelm? Let's make it hurt.
    if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = "quickwield left tower"..string..snd.sep
    end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^git$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Lumi damage</name>
								<script>if snd.class == "Luminary" then
  snd.giving_battle = {"impatience", "sensitivity","vertigo", "stupidity", "self_pity", "berserking", "migraine", "anorexia"}
  snd.giving_chasten =
    {
      "hypochondria",
      "self_loathing",
      "agony",
      "lethargy",
      "recklessness",
      "masochism",
	    "dementia",
	    "stupidity",
	    "anorexia",
      "paranoia",
      "lethargy",
    }
  snd.starting_attack()

  function snd.attack_function()
  local string = "contemplate "..snd.target..snd.sep
     if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
  
  local battle = "none"
  local chasten = "none"
    
  if snd.balance.battle then
    for i in pairs(snd.giving_battle) do
      if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
        battle = snd.giving_battle[i]
      end
    end
  end
  
  for i in pairs(snd.giving_chasten) do
    if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
      chasten = snd.giving_chasten[i]
    end
  end  
  
  if snd.balance.battle then
    string = string..snd.sep.."angel battle "..battle.." "..snd.target..snd.sep
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep .. string
    end
  end

  if snd.used.shield then
  	string = string.."shield raze " .. snd.target .. snd.sep
  elseif snd.mana_percent &lt; 40 then
      string = string.."angel absolve " .. snd.target
  elseif snd.proned() then
    string = string.."quickwield left tower"..snd.sep.."shield overwhelm "..snd.target..snd.sep
  elseif snd.used.rebounding then
  	string = string.."shield raze " .. snd.target .. snd.sep
  else
    string = string.."smite " .. snd.target .." secret"..snd.sep.."angel power"..snd.sep
  end

  if snd.toggles.affcalling and not snd.target_gone then
    string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
  end
  string = string .. " chasten " .. snd.target .. " " .. chasten
        
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Oneiromancer</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Oneiromancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "touch hammer "..snd.target
  else
   	string = "starlight "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Deform Damage</name>
								<script>-- Note: this alias was placed as an example and haw flaws - parts may not work. Toy with at your discrection.

if snd.class == "Oneiromancer" then
 
	snd.giving = {
		"asthma",
		"aeon",
		"impatience",
		"clumsiness",
		"perplexed",
		"weariness",
		"stupidity",
		"anorexia",
		"epilepsy",
		"sensitivity",
		"vomiting",
		"lethargy",
		"confusion",
		"recklessness",	
		"superstition",
		"berserking",
		"hypersomnia",
	}
 
	snd.starting_attack()
 
	function snd.attack_function() 
		local string = ""
		local raw_affs_to_fling = {}
		local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
 
		if not snd.waiting.queue then
 
			if snd.used.shield then
				string = "order cerberus attack "..snd.target..snd.sep
			elseif snd.theytumbling then
				string ="unfurl hourglass and favor at "..snd.target..snd.sep
			elseif snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled", "leeched_aura"}, 5) then
				string = "vanquish "..snd.target
			elseif not snd.need_deform then
				string = "starlight "..snd.target..snd.sep  
			elseif snd.checksomeAffs({"anorexia", "asthma"}, 2) and not snd.checkAff("slickness") then
				string = "impel athame at "..snd.target.." gecko"..snd.sep
			else -- No special attacks, time to run through our aff list defined above and see what we want to give most.
				for i in pairs(snd.giving) do
					if not snd.checkAff(snd.giving[i]) then
						if snd.giving[i] == "aeon" then
							if snd.balance.aeon then
								if snd.checkAff("clumsiness") or snd.checkAff("weariness") then
									table.insert(raw_affs_to_fling, snd.giving[i])
								end
							end
						elseif not table.contains(raw_affs_to_fling, snd.giving[i]) then
							table.insert(raw_affs_to_fling, snd.giving[i]) -- insert into a raw aff list that they don't have, based on priority chosen above
						end
					end
				end
 
				for k, v in ipairs(raw_affs_to_fling) do -- run through the raw affs
					if cards.one.affliction == "" then -- fill in card one, could start with card two if you want to work around dodge CD
						if snd.cardshapes.oneiromancer[v].card == "diamond" then
							if not snd.adder_attached then-- Make sure that if we're picking an adder venom, we haven't already thrown adder
								cards.one.affliction = v
								cards.one.card = snd.cardshapes.oneiromancer[v].card
							end
						else
							cards.one.affliction = v
							cards.one.card = snd.cardshapes.oneiromancer[v].card
						end
					elseif cards.one.card ~= snd.cardshapes.oneiromancer[v].card and cards.two.affliction == "" then -- if card types are different and haven't already set card two
						if snd.cardshapes.oneiromancer[v].card == "diamond" then
							if not snd.adder_attached then -- Make sure that if we're picking an adder venom, we haven't already thrown adder
								cards.one.affliction = v
								cards.one.card = snd.cardshapes.oneiromancer[v].card
							end
						else
							cards.two.affliction = v
							cards.two.card = snd.cardshapes.oneiromancer[v].card
						end
					end
				end
 
				-- If the card is an adder venom affliction, convert the affliction to the venom.
				if cards.one.card == "diamond" then cards.one.affliction = snd.effects[cards.one.affliction] end
				if cards.two.card == "diamond" then cards.two.affliction = snd.effects[cards.two.affliction] end
 
			end
 
			if not snd.loyalsattacking then
				string = "order loyals kill "..snd.target..snd.sep..string
			end
 
			if snd.need_leech_aura then
				string = "unspool "..snd.target
			end
 
			if snd.balance.soulmaster and not snd.checkAff("slickness") then
				string = "order "..snd.target.." apply epidermal to head"..snd.sep
			end
 
			if snd.balance.envelop then
				if not snd.checksomeAffs({"anorexia", "slickness", "asthma"}, 1) then
					string = "order blob envelop"..snd.sep
				end
			end
 
			if not snd.need_deform then
				string = string..snd.sep.."order quetzal wingbeat "..snd.target..snd.sep
			end
 
			if snd.need_deform then
				if snd.aff_count_all() &gt; 11 then
					string = "disjunct "..snd.target..snd.sep
				end
			end
 
			if snd.adder_ready then
				string = string..snd.sep.."activate diamond "..snd.target..snd.sep
			end
 
			string = string..snd.sep.."unfurl "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
 
			if snd.toggles.affcalling and not snd.target_gone then
				call = "wt Afflicting "..snd.target..": "..cards.one.affliction..", "..cards.two.affliction..snd.sep
				string = call..snd.sep..string
			end
 
 
			if string ~= snd.last_attack and not snd.waiting.queue then
				snd.last_attack = string
				snd.attack(snd.last_attack)
				snd.waiting.queue = true
				tempTimer(snd.delay(), [[snd.waiting.queue = false]])
			end
		end
	end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg2$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Afflictions</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Group Affliction</name>
								<script>if snd.class == "Oneiromancer" then
  snd.giving =
    {
      "asthma",
      "aeon",
      "perplexed",
      "impatience",
      "clumsiness",
      "weariness",
      "stupidity",
      "anorexia",
      "epilepsy",
      "sensitivity",
      "vomiting",
      "lethargy",
      "confusion",
      "recklessness",
      "superstition",
      "hypersomnia",
    }
  snd.starting_attack()

  function snd.attack_function()
    local string = ""
    local raw_affs_to_fling = {}
    local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
    if not snd.waiting.queue then
      -- all instakill conditions(deform/vivi) or other add ons should go here as elseif.
      if snd.used.shield then
        string = "touch hammer " .. snd.target
        -- vivi/deform checks would prolly go here
      elseif snd.theytumbling then
        string = "impel athame at "..snd.target.." prefarar"..snd.sep    
      elseif snd.aff_count_all() &gt; 10 then
        string = "starlight " .. snd.target
      else

        for i in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[i]) then
            if snd.giving[i] == "aeon" then
              if snd.balance.aeon then
                table.insert(raw_affs_to_fling, snd.giving[i])
              end
            elseif not table.contains(raw_affs_to_fling, snd.giving[i]) then
              table.insert(raw_affs_to_fling, snd.giving[i])
              -- insert into a raw aff list that they don't have, based on priority chosen above
            end
          end
        end
        for k, v in ipairs(raw_affs_to_fling) do
          -- run through the raw affs
          if cards.one.affliction == "" then
            -- fill in card one, could start with card two if you want to work around dodge CD
            if snd.cardshapes.oneiromancer[v].card == "diamond" then
              if not snd.adder_attached then
                -- Make sure that if we're picking an adder venom, we haven't already thrown adder
                cards.one.affliction = v
                cards.one.card = snd.cardshapes.oneiromancer[v].card
              end
            else
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.oneiromancer[v].card
            end
          elseif
            cards.one.card ~= snd.cardshapes.oneiromancer[v].card and cards.two.affliction == ""
          then
            -- if card types are different and haven't already set card two
            if snd.cardshapes.oneiromancer[v].card == "diamond" then
              if not snd.adder_attached then
                -- Make sure that if we're picking an adder venom, we haven't already thrown adder
                cards.one.affliction = v
                cards.one.card = snd.cardshapes.oneiromancer[v].card
              end
            else
              cards.two.affliction = v
              cards.two.card = snd.cardshapes.oneiromancer[v].card
            end
          end
        end
        -- If the card is an adder venom affliction, convert the affliction to the venom.
        if cards.one.card == "diamond" then
          cards.one.affliction = snd.effects[cards.one.affliction]
        end
        if cards.two.card == "diamond" then
          cards.two.affliction = snd.effects[cards.two.affliction]
        end
        if snd.need_leech_aura then
          string = "unspool " .. snd.target
        end
        if snd.adder_ready then
          string = string .. snd.sep .. "activate diamond " .. snd.target
        end
        -- Syntax should be the same unless you have arti deck/regular deck, change next line as necessary
        -- Similarly, if you're using config auto_outc, feel free to remove outcping paper
        string = string..snd.sep.."outc sheet as "..cards.one.card..snd.sep.."outc sheet as "..cards.two.card
        string = string..snd.sep.."unfurl "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
        if snd.toggles.affcalling and not snd.target_gone then
          call = "wt Afflicting "..snd.target..": "..cards.one.affliction ..", "..cards.two.affliction..snd.sep
          string = call .. string
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>limbs</name>
								<script>if snd.class == "Oneiromancer" then

  snd.giving = {"left_leg_crippled", "right_leg_crippled","left_arm_crippled", "right_arm_crippled",}
  
  snd.starting_attack()
  
  function snd.attack_function()
    local string = ""
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer "..snd.target
      elseif snd.theytumbling then
        string = "impel athame at "..snd.target.." prefarar"..snd.sep    
      elseif snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled", "leeched_aura"}, 5) then
        string = "vanquish "..snd.target
      elseif not snd.checksomeAffs(snd.giving, 4) then
        for v in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[v])  then
            string = "misfortune "..snd.target.." "..snd.giving[v]:gsub("_", " "):gsub("crippled", "")
            break
          end
        end
      else
        string = "starlight "..snd.target
      end
      
      if snd.need_leech_aura then
        string = "unspool "..snd.target..snd.sep..string
      end 

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
  
    end
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limb$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Vivi 2.0</name>
								<script>if snd.class == "Oneiromancer" then

  snd.giving = {"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled",}
  
  snd.starting_attack()
  
  function snd.attack_function()
  
  local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  local string = ""
  if not snd.waiting.queue then
    if hp &lt;= 40 and snd.balance.crystal then
      string = "touch crystal"
    elseif snd.used.shield then
  		string = "touch hammer "..snd.target
    elseif snd.theytumbling then
        string = "impel athame at "..snd.target.." prefarar"..snd.sep    
    elseif hp &lt;= 75 then
      string = "unfurl flower at me"
    elseif snd.aff_tally() &gt; 3 and snd.balance.fool then
      string = "unfurl fire at me"
    elseif snd.used.shield then
      string = "touch hammer "..snd.target
    elseif snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled", "leeched_aura"}, 5) then
      string = "vanquish "..snd.target
    elseif not snd.checksomeAffs(snd.giving, 4) then
      for v in pairs(snd.giving) do
        if not snd.checkAff(snd.giving[v])  then
          string = "misfortune "..snd.target.." "..snd.giving[v]:gsub("_", " "):gsub("crippled", "")
          break
        end
      end
    elseif snd.aff_count_all() &gt; 10 then
      string = "disjunct "..snd.target    
    else
      string = "chill "..snd.target
    end
      
      if snd.need_leech_aura then
        string = "unspool "..snd.target..snd.sep..string
      end 

      if snd.balance.chimera then
          string = "order quetzal croon"..snd.sep..string
      end

      if snd.balance.envelop and snd.balance.soulmaster and string.find(string, "anorexia") then
        string = "order blob envelop"..snd.sep..string..snd.sep.."order "..snd.target.." apply restoration to arms"
      end

    if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
       end
      

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
  
    end
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^vivi$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Runecarver</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Afflictions</name>
								<script>if snd.class == "Runecarver" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."hex imperil "..snd.target
  elseif not snd.checkAff("gloom") then
		if hasSkill("Malady") then
			if gmcp.Char.Vitals.spiritpact &lt; "2" then
				string = string.."spiritpact despair "..snd.target..snd.sep.."hex malady "..snd.target
			else
				string = string.."hex despair "..snd.target
			end
		else
			if gmcp.Char.Vitals.spiritpact &lt; "2" then
				string = string.."shadowprice despair "..snd.target
			else
				string = string.."spiritpact despair "..snd.target
			end
		end
	elseif not snd.checksomeAffs({"clumsiness", "weariness", "lethargy", "paresis"}, 1) then
		if gmcp.Char.Vitals.spiritpact &lt; "2" then
			string = string.."spiritpact enervate "..snd.target
		else
			string = string.."hex enervate "..snd.target
		end
  elseif snd.checkAff("sight") and not snd.checkAff("mystified") then
		string = string.."hex mystify " ..snd.target..snd.sep
	elseif not snd.checksomeAffs({"vomiting", "haemophilia"}, 1) and hasSkill("Malady") then
		string = string.."hex malady "..snd.target
  else
   	string = string.."hex jinx "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group Aff</name>
								<script>if snd.class == "Runecarver" then
  snd.starting_attack()
    function snd.attack_function()
     if not snd.waiting.queue then
      local string = ""
      local gstring = ""
      local call = ""
      local astring = ""
      local paystring = ""
    	local health = 100*(gmcp.Char.Vitals.maxhp)
      
      cecho("&lt;red&gt;\n"..snd.gravity.." " ..tonumber(gmcp.Char.Vitals.spiritpact))
    		
    	if not snd.checksomeAffs({"fungal_invasion","inoculated"}, 2) and not snd.used.shield then 
        gstring = "spore inoculate " ..snd.target..snd.sep.."spore infect " ..snd.target..snd.sep 
      else 
        gstring = "" 
      end
      if snd.repay  &lt; 2 and tonumber(gmcp.Char.Vitals.spiritpact) &gt;= 3 and not snd.checkAff("gloom") then 
        paystring = "hex obeisance"..snd.sep 
      elseif snd.repay &lt;1 and tonumber(gmcp.Char.Vitals.spiritpact) == 4 then
        paystring = "hex obeisance"..snd.sep
      else 
        paystring = "" 
      end
    
    	if snd.used.shield then
        if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact imperil "..snd.target..snd.sep
          else
       	astring = astring.."hex imperil "..snd.target..snd.sep
        end
    	elseif not snd.checkAff("voidgaze") and tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact mystify "..snd.target..snd.sep
      elseif not snd.checksomeAffs({"nyctophobia","haemophilia"},2) then
          astring = astring.."hex anathemise " ..snd.target..snd.sep     
      elseif not snd.checksomeAffs({"vomiting","haemophilia"},1) then
        if not snd.checkAff("gloom") and tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact despair " ..snd.target..snd.sep.."hex malady " ..snd.target..snd.sep
        else
          astring = astring.."hex malady " ..snd.target..snd.sep
        end
      elseif not snd.checksomeAffs({"clumsiness","weariness","lethargy","paresis"},2) then
        if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 3 and not snd.checkAff("gloom") then
          astring = astring.."spiritpact despair " ..snd.target..snd.sep.."spiritpact enervate " ..snd.target..snd.sep
        elseif tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact enervate " ..snd.target..snd.sep
        else
          astring = astring.."hex enervate " ..snd.target..snd.sep
        end
       else
        if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact anathemise " ..snd.target..snd.sep
          else
          string = astring.."hex anathemise " ..snd.target..snd.sep
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
      string = paystring..gstring..astring
       snd.last_attack = string
       snd.attack(snd.last_attack)
       snd.waiting.queue = true
       tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
     end
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Basic Damage</name>
								<script>if snd.class == "Runecarver" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."hex imperil "..snd.target
  elseif snd.checkAff("writhe_transfix") then
		if not snd.checkAff("gloom") then
			if hasSkill("Malady") then
				if gmcp.Char.Vitals.spiritpact &lt; "2" then
					string = string.."spiritpact despair "..snd.target..snd.sep.."hex malady "..snd.target
				else
					string = string.."hex despair "..snd.target
				end
			else
				if gmcp.Char.Vitals.spiritpact &lt; "2" then
					string = string.."spiritpact despair "..snd.target
				else
					string = string.."hex despair "..snd.target
				end
			end
		end
  else
   		if hasSkill("Bewitch") and snd.balance.sorcery_transfix then
				string = string.."runecarve bewitch "..snd.target
			elseif not snd.checkAff("rot_benign") then
				string = string.."hex revile "..snd.target
			end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group Dmg</name>
								<script>if snd.class == "Runecarver" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local gstring = ""
  local call = ""
  local astring = ""
  local paystring = ""
	local health = 100*(gmcp.Char.Vitals.maxhp)
  
  	cecho("&lt;red&gt;\n"..snd.gravity.." " ..tonumber(gmcp.Char.Vitals.spiritpact))
		
--			if not snd.checksomeAffs({"fungal_invasion","inoculated"}, 2) and not snd.used.shield then gstring = "spore inoculate " ..snd.target..snd.sep.."spore infect " ..snd.target..snd.sep else gstring = "" end
      if snd.repay  &lt; 2 and tonumber(gmcp.Char.Vitals.spiritpact) &gt;= 3 and not snd.checkAff("gloom") then paystring = "hex obeisance"..snd.sep elseif snd.repay&lt;1 and tonumber(gmcp.Char.Vitals.spiritpact) == 4 then paystring = "hex obeisance"..snd.sep else paystring = "" end

	if snd.used.shield then
    if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact imperil "..snd.target..snd.sep
      else
   	astring = astring.."hex imperil "..snd.target..snd.sep
    end
	elseif not snd.checkAff("voidgaze") and tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact mystify "..snd.target..snd.sep
  elseif not snd.checksomeAffs({"nyctophobia","haemophilia"},2) then
      astring = astring.."hex anathemise " ..snd.target..snd.sep     
  elseif not snd.checksomeAffs({"vomiting","haemophilia"},1) then
    if not snd.checkAff("gloom") and tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact despair " ..snd.target..snd.sep.."hex malady " ..snd.target..snd.sep
    else
      astring = astring.."hex malady " ..snd.target..snd.sep
    end
  elseif not snd.checksomeAffs({"clumsiness","weariness","lethargy","paresis"},2) then
    if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 3 and not snd.checkAff("gloom") then
      astring = astring.."spiritpact despair " ..snd.target..snd.sep.."spiritpact enervate " ..snd.target..snd.sep
    elseif tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact enervate " ..snd.target..snd.sep
    else
      astring = astring.."hex enervate " ..snd.target..snd.sep
    end
   else
    if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact anathemise " ..snd.target..snd.sep
      else
      string = astring.."hex anathemise " ..snd.target..snd.sep
  end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
  string = paystring..astring
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gdmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limb</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Limbs</name>
								<script>if snd.class == "Runecarver" then
  snd.starting_attack()  
  function snd.attack_function()
  
    local string = ""
    if not snd.waiting.queue then
      limbs = {"left leg", "right leg", "left arm", "right arm"}
      for limb in pairs(limbs) do
      -- ignore last hit and any limbs being resto'd
        if
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == nil then
            targ = limbs[limb]
          end
        end
      end

	if snd.used.shield then
   string = string.."hex imperil "..snd.target
	elseif gmcp.Char.Vitals.morass == "" then
		if hasSkill("Colonisation") then
			string = string.."spore colonise clutchgill"
		else
			string = string.."spore germinate"
		end
  elseif snd.gravity &lt; 5 then
		string = string.."spore ensnare "..snd.target
  else
		if not snd.checkAff(targ:gsub(" ","_").."_crippled") then 
			string = string.."spore degrade "..snd.target.." "..targ
		else
			if hasSkill("Bewitch") and snd.balance.sorcery_transfix  then
				string = string.."runecarve bewitch "..snd.target
			else
				string = string.."hex numb "..snd.target
			end
		end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Combination (Limb and Aff)</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Combo from Enebish</name>
								<script>if snd.class == "Runecarver" then

  local string = ""
  local paystring = ""
  shadowprice = tonumber(gmcp.Char.Vitals.spiritpact)
  
  local scourgecount = 0
  for aff in pairs(snd.scourge_affs) do
    if table.contains(snd.target_has, snd.scourge_affs[aff]) then
      scourgecount = scourgecount + 1
    end
  end
  if snd.used.shield then
    if shadowprice &lt; 2 then
      string = string .. "spiritpact imperil " .. snd.target .. snd.sep
    else
      string = string .. "hex imperil " .. snd.target
    end
 
  elseif snd.checksomeAffs({"prone", "nyctophobia"}, 2) and shadowprice &lt; 4 then
    string = "spiritpact mortis " .. snd.target
  elseif snd.checkAff("voidtrapped") then
    if snd.vt == true then
      string = "spore omophagia consume"
    else
      string = "spore omophagia spread"
    end
  elseif not snd.checkAff("gloom") and shadowprice &lt; 2 then
    string = "spiritpact despair " .. snd.target .. snd.sep .. "spiritpact mystify " ..snd.target
  elseif not snd.checkAff("voidgaze") and shadowprice &lt; 4 then
    string = "spiritpact mystify " ..snd.target
  elseif not snd.checksomeAffs({"clumsiness", "weariness", "lethargy", "paresis"}, 4) then
    if shadowprice &lt; 4 then
      string = "spiritpact enervate " .. snd.target
    else
      string = "hex enervate " .. snd.target
    end
  else
    string = "hex jinx " ..snd.target
  end
 
  if shadowprice &gt;= 4 then
    send("qeb hex obeisance")
  else
    send("qeb " ..string)
  end 
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^combo$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Aliases</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Sing Summon</name>
								<script>
if snd.class == "Runecarver" then
  snd.send("qeb spore colonise clutchgill hartsblood stormstem ravencap greycrown")
 end</script>
								<command></command>
								<packageName></packageName>
								<regex>^sing1$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Gravity Cannon</name>
								<script>
if snd.class == "Runecarver" then
  snd.send("qeb spore mortify "..snd.target)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gc$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Sentinel</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mouse mode</name>
								<script>if snd.class == "Sentinel" then
snd.giving = {
"sight",
"paresis",
"clumsiness",
"asthma",
"sensitivity",
"vomiting",
"allergies",
"haemophilia",
"slickness",
--"anorexia",
--"stupidity",
--"recklessness",
--"weariness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  call = ""
  left = "none"
  right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
	 if snd.giving[i] ~= "paresis" or not table.contains(snd.target_has, "paralysis") then
     if right == "none" then
      right = snd.effects[snd.giving[i]]
     elseif left == "none" then
      left = snd.effects[snd.giving[i]]
		end
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
  if snd.used.rebounding and snd.used.shield then
   string = "dhuriv dualraze "..snd.target
  elseif snd.used.shield or snd.used.rebounding then
	 string = "dhuriv combo "..snd.target.." reave stab "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..right..snd.sep
	end
  else
   string = "dhuriv combo "..snd.target.." slash stab "..left.." "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	end
  end
	string = call..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ms$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Venom Lock</name>
								<script>if snd.class == "Sentinel" then
snd.current_offense = "SentVLock"

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then
    snd.giving = {
		  "clumsiness",
			"asthma",
			"slickness",
			"confusion",
      "slickness",
      "anorexia",
			"left_leg_crippled",
			"right_leg_crippled",
      "heartflutter",
			"vomiting",
			"dizziness",
			"sight",
			"hearing",
			"sensitivity",}

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "dhuriv combo "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = "wipe dhurive"..snd.sep..call..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	--snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Transfix + Sensitivity</name>
								<script>if snd.class == "Sentinel" then
snd.current_offense = "SentLumiSupport"
if snd.target_locked() then
			snd.giving = {
			"left_leg_crippled",
			"right_leg_crippled",
      "confusion",
      "impairment",
			"weariness",
			"dizziness",
			"hearing",
			"sensitivity",}
		else
      snd.giving = {
      "clumsiness",
      "hearing",
      "sight",
      "asthma",
      "slickness",
      "anorexia",
			"left_leg_crippled",
			"right_leg_crippled",
      "confusion",
      "weariness",
      "vomiting",
      "shyness",
      "dizziness",
      }
		end

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end

		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..snd.sep.."order loyals attack "..snd.target..snd.sep..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^lumi$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Mentals</name>
								<script>if snd.class == "Sentinel" then
snd.current_offense = "SentMental"
local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

snd.giving = {

"impatience",
"stupidity",
"agoraphobia",
"claustrophobia",
"weariness",
"clumsiness",
"asthma",
"slickness",
"confusion",
"left_leg_crippled",
"right_leg_crippled",
"anorexia",
"heartflutter",
"sight",
"hearing",
"sensitivity",
}

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
			
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ment$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Bleeding</name>
								<script>if snd.class == "Sentinel" then
snd.current_offense = "bleed"

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then
		if snd.target_locked() then
			snd.giving = {
			"impairment",
			"confusion",
			"left_leg_crippled",
			"right_leg_crippled",
			"weariness",
			"dizziness",
      }
		else
			snd.giving = {
			"paresis",
		  "clumsiness",
			"haemophilia",
			"hearing",
			"sensitivity",
      "asthma",
      "weariness",
      "slickness",

      }
		end

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
    local second_attack = "slice"

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "dhuriv combo "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..snd.sep.."order loyals attack "..snd.target..snd.sep..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bleed$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limbs / Salves</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Group Impale/Frozen</name>
								<script>if snd.class == "Sentinel" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentImpale"
snd.giving = {

"frozen",
"left_leg_crippled",
"right_leg_crippled",
"left_arm_crippled",
"right_arm_crippled",
"asthma",
"slickness",
"paresis",
"confusion",
"vomiting",
"dizziness",
"sight",
"hearing",
"sensitivity",
}

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

	string = ""
	call = ""
	left = "none"
	right = "none"

	left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.target_impaled then
			string = "dhuriv gorge "..snd.target
			
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("left_leg_crippled") and snd.limb_status["left leg"] == "healed" and (snd.parried_limb ~= "left leg" or snd.no_parry()) then
			string = "dhuriv pierce "..snd.target.." left"
		
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("right_leg_crippled") and snd.limb_status["right leg"] == "healed" and (snd.parried_limb ~= "right leg" or snd.no_parry()) then
			string = "dhuriv pierce "..snd.target.." right"

  	elseif snd.proned() then         
      if not snd.checkAff("writhe_impaled") then
      	string = "dhuriv impale "..snd.target
       else
        string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." trample "..snd.target
      end	
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
						
		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") or string:find("pierce") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
	snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gimp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Salves</name>
								<script>if snd.class == "Sentinel" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentSalve"

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

    if snd.checkAff("destroyed_throat") then
    snd.giving = {
    "slickness",
    "asthma",
    "left_leg_crippled",
    "right_leg_crippled",
    "paresis",
    "confusion",
    "vomiting",
    "dizziness",
    "sight",
    "hearing",
    "sensitivity",
    }
    else
    snd.giving = {
    
    "frozen",
    "left_leg_crippled",
    "right_leg_crippled",
    "left_arm_crippled",
    "right_arm_crippled",
    "anorexia",
    "stupidity",
    "asthma",
    "slickness",
    "paresis",
    "confusion",
    "vomiting",
    "dizziness",
    "sight",
    "hearing",
    "sensitivity",
    }
    end	

	string = ""
	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target

		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("left_leg_crippled") 
			and snd.limb_status["left leg"] == "healed" and (snd.parried_limb ~= "left leg" or snd.no_parry()) and snd.limb_status["right leg"] == "healed" then
				string = "dhuriv pierce "..snd.target.." left"
		
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("right_leg_crippled") 
			and snd.limb_status["right leg"] == "healed" and (snd.parried_limb ~= "right leg" or snd.no_parry()) and snd.limb_status["left leg"] == "healed" then
				string = "dhuriv pierce "..snd.target.." right"

		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		elseif snd.proned() and not snd.checksomeAffs({"left_leg_crippled", "left_arm_crippled", "right_arm_crippled", "right_leg_crippled"}, 2) then
			string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." trample "..snd.target

		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end
		
		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") or string:find("pierce") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^salve$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group spinecut</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex>^gsc$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Shaman</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mouse mode</name>
								<script>if snd.class == "Shaman" then
snd.giving = {
"sight",
"sensitivity",
"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "commune leafstorm "..snd.target
  elseif tonumber(gmcp.Char.Vitals.energy) then
   string = "commune boost"..snd.sep.."commune vinelash "..snd.target.." "..venom
  else
   string = "commune vinelash "..snd.target.." "..venom
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ms$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Stormtouched</name>
								<script>if snd.class == "Shaman" then
snd.giving = {

"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

	call = ""
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
 	 string = "fetish attune "..snd.target..snd.sep.."commune leafstorm "..snd.target
  elseif snd.checkAff("stormtouched") then
 	 if tonumber(gmcp.Char.Vitals.energy) then
  	string = "fetish attune "..snd.target..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.target
 	 else
 	 	string = "fetish attune "..snd.target..snd.sep.."commune lightning "..snd.target
  	end
 	else
  	string = "fetish attune "..snd.target..snd.sep.."commune vinelash "..snd.target.." "..venom
  	call = "wt Vinelash "..snd.target..": "..venom..snd.sep
  	if tonumber(gmcp.Char.Vitals.energy) &gt;= 4 then
  		string = "commune boost "..snd.sep..string  
  	end
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^storm$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Aff support</name>
								<script>if snd.class == "Shaman" then
snd.giving = {

"clumsiness",
"asthma",
"slickness",
"anorexia",
"stupidity",
"weariness",
"allergies",
"vomiting",
"haemophilia",
"sensitivity",
"recklessness",
"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

	call = ""
--local boosting = false -- this is like templar vorpal
-- if tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then boosting = true -- yesss
-- end
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "commune leafstorm "..snd.target
	elseif tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		if not snd.checkAff("impatience") and not snd.checkAff("confusion") then
			string = "commune sporulation "..snd.target
		elseif not snd.checkAff("paresis") and not snd.checkAff("stupidity") then
			string = "commune overload "..snd.target
		else
			string = "commune vinelash "..snd.target.." "..venom
	 		call = "wt Vinelash "..snd.target..": "..venom..snd.sep
		end	
  else
   string = "commune vinelash "..snd.target.." "..venom
	 call = "wt Vinelash "..snd.target..": "..venom..snd.sep
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^supp$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Naturalism Utility</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Surge</name>
								<script>if snd.class == "Shaman" then
	if matches[2] == "" then
		snd.attack("nature surge "..snd.target)
	else
 		snd.attack("nature surge "..matches[2])
	end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ns (.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Canopy</name>
								<script>if snd.class == "Shaman" then
 snd.attack("nature canopy")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^can$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Screen</name>
								<script>if snd.class == "Shaman" then
 snd.attack("nature screen")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^scr$</regex>
							</Alias>
							<Alias isActive="no" isFolder="no">
								<name>Flow</name>
								<script>if snd.class == "Shaman" then
  if matches[2] == "" then
    snd.attack("nature flow "..snd.target)
  else
    snd.attack("nature flow "..matches[2])
  end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^fl(.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Thorncoat</name>
								<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature thorncoat me")
else
 snd.attack("nature thorncoat "..matches[2])
end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^tco(.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Displacement</name>
								<script>if snd.class == "Shaman" and not matches[1]:find("dispel") then
  if matches[2] == "" then
   snd.attack("nature displacement "..snd.target)
  else
   snd.attack("nature displacement "..matches[2])
  end
else
  send(matches[1])
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^disp(.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Pull</name>
								<script>if snd.class == "Shaman" then
  if matches[2] == "" then
    snd.attack("nature pull "..snd.target)
  else
    snd.attack("nature pull "..matches[2])
  end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^np(.*)$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Templar</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Wielding</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>wield bashing</name>
								<script>if snd.class == "Templar" then
snd.send("quickwield both longsword shield")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wbsh$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield zeal</name>
								<script>if snd.class == "Templar" then
snd.send("quickwield both warhammer")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wzl$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield pvp</name>
								<script>if snd.class == "Templar" then
snd.send("quickwield both shortsword shortsword.2")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wpvp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield limbs</name>
								<script>if snd.class == "Templar" then
snd.send("quickwield both mace mace.2")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wlb$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield longswords</name>
								<script>if snd.class == "Templar" then
snd.send("quickwield both longsword longsword.2")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wls$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield damage</name>
								<script>if snd.class == "Templar" then
snd.send("quickwield both bastard")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wdmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Righteousness</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>deliver</name>
								<script>if snd.class == "Templar" then
snd.send("qeb get monolith"..snd.sep.."aura deliverance "..matches[2])
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^del (.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>resurrection</name>
								<script>if snd.class == "Templar" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb aura resurrection "..matches[2])
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^rez (\w+)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>pilgrimage</name>
								<script>if snd.class == "Templar" then
  if snd.toggles.attacking then snd.toggle("attacking") end
  if snd.toggles.bashing then snd.toggle("bashing") end
  if snd.toggles.fasthunt then snd.toggle("fasthunt") end
  if snd.have_aff("paresis") then
   snd.send("firstaid elevate paresis")
  end
  snd.send("undefend")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."aura pilgrimage")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^pilg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>latency</name>
								<script>if snd.class == "Templar" then
  if snd.toggles.attacking then snd.toggle("attacking") end
  if snd.toggles.bashing then snd.toggle("bashing") end
  if snd.toggles.fasthunt then snd.toggle("fasthunt") end
  if snd.have_aff("paresis") then
   snd.send("firstaid elevate paresis")
  end
  snd.send("undefend")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."aura pilgrimage aura")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^pil$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>retribution stack</name>
								<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		
		local vorpal = false -- can we use vorpal?

		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end

		if snd.target_locked() then
			snd.giving = {
			"left_leg_crippled",
			"right_leg_crippled",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"asthma",
			"clumsiness",
			"paresis",
			"slickness",
			"stupidity",
			"anorexia",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled_body", "mental_disruption","physical_disruption" },4) then
			string = "retribution "..snd.target
    else -- if not...
			-- see if we can lock this round, in any of three possible ways
      local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ret$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>legs</name>
								<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "hemorrhage" 
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 100 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 100 then
			iceblast = true
		end
		-- set the affs we want to use
			snd.giving = {
			"left_arm_crippled",
			"right_arm_crippled",    
			"left_leg_crippled",
			"right_leg_crippled",
      "stupidity",
			"anorexia",
			"slickness",
			"asthma",
			"paresis",
      "clumsiness",
      "weariness",
			}
			
		-- pick affs from the list above
		for i in pairs(snd.giving) do
			-- make sure not to double up paresis and paralysis
			if not snd.checkAff(snd.giving[i]) then
				-- and don't add an aff we've already got in the list!
				if not table.contains(touse, snd.giving[i]) then
					table.insert(touse, snd.giving[i])
				end
			end
		end
			
		-- first and foremost, check if we can retri!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		elseif snd.proned() and not snd.checkAff("writhe_impaled") then 
			string = "penance "..snd.target..snd.sep.."impale "..snd.target
		else 
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif iceblast then
				string = "blade release right iceblast "..snd.target..snd.sep.."blade release left iceblast "..snd.target..snd.sep.."dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^lgs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>impale mode</name>
								<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local physcount = 0
		for aff in pairs(snd.physical_affs) do
			if table.contains(snd.target_has, snd.physical_affs[aff]) then
				physcount = physcount + 1
			end
		end
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      "left_leg_crippled",
			"right_leg_crippled",
      "anorexia",
      "stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and vorpal then
			string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep.."penance "..snd.target..snd.sep.."impale "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif vorpal then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^im$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>newbie mode</name>
								<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- set the affs we want to use
			snd.giving = {
      --"oculus",
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      "anorexia",
      "stupidity",
      "recklessness",
      "weariness",
      "dizziness",
      "voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and not snd.checksomeAffs({"writhe_thighlock", "writhe_necklock", "writhe_armpitlock"}, 1) then
			string = "impale "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^newb$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>senti mode</name>
								<script>if snd.class == "Templar" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      local call = ""
      local touse = {}
      local tohit = {}
      local extraaff = "sacrifice"
      if snd.checksomeAffs({"asthma", "slickness"}, 2) and snd.checksomeAffs({"weariness", "clumsiness", "hypochondria", "baldness"}, 1) then
        snd.giving = {            
            "left_leg_crippled",
			      "right_leg_crippled",
            "asthma",
            "weariness",
            "clumsiness",
            "stupidity",
            "recklessness",
            "vomiting",
            "allergies",
            "haemophilia",
            "dizziness",} 
      else
        snd.giving =
          {
            "asthma",
            "weariness",
            "clumsiness",
            "slickness",
            "left_leg_crippled",
			      "right_leg_crippled",
            "stupidity",
            "recklessness",
            "vomiting",
            "allergies",
          }
      end
      for i in pairs(snd.giving) do
        if not snd.checkAff(snd.giving[i]) then
          if not table.contains(touse, snd.giving[i]) then
            table.insert(touse, snd.giving[i])
          end
        end
      end

      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end

      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
      else
        string = "dsk " .. snd.target .. " " .. tohit[2] .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[2] .. ", " .. tohit[1] .. snd.sep
      end

      if snd.toggles.affcalling and not snd.target_gone then
        string = call .. string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^sent$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>retri but its legit only retri lmao</name>
								<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			"sensitivity",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled_body", "mental_disruption","physical_disruption" },4) then
			string = "retribution "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^cheese$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = ""
		if snd.used.rebounding or snd.used.shield then
			string = "raze "..snd.target
		elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 then
			string = "blade release left crescent "..snd.target
    end
			string = string..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."zeal "..snd.target
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group Impale</name>
								<script>-- Hello. This route requires a warhammer, as well as you setting up what type of weapon you're using.
-- There is a variable in the script 'PvP variables', which you need to change to be whatever weapon you use.
-- We need this so we can switch to a warhammer/switch back at will without having to put in lots of
-- weird checks to see what kind of weapon you use. Templar has many!

if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal? set to false until we check
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end

    local wield = ""
		if not string.find(gmcp.Char.Vitals.wield_left, snd.templar_weapon_one) then 
      wield = "quickwield left "..snd.templar_weapon_one
      if not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
        wield = wield..snd.sep.."quickwield right "..snd.templar_weapon_two..snd.sep 
      end
    elseif not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
      wield = "quickwield right "..snd.templar_weapon_two..snd.sep 
    end

    
		-- set the affs we want to use
     snd.giving = {
      "sight",
		  "paresis",
	    "sensitivity",
			"asthma",
      "vomiting",
      "allergies",
      "slickness",
			"left_leg_crippled",
			"right_leg_crippled",
      "anorexia",
      "stupidity",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") then
				string = "penance "..snd.target..snd.sep.."impale "..snd.target
		elseif snd.checkAff("writhe_impaled") and snd.checkAff("sensitivity") then
				string = "penance "..snd.target..snd.sep.."relax grip"..snd.sep.."quickwield both warhammer"..snd.sep.."grip"..snd.sep.."dsw "..snd.target.." sacrifice sacrifice"		
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			if string.find(string, "impale") or string.find(string, "dsw") and vorpal then -- Do we have vorpal and are we finishing someone off?
					string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep..string
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		
		--check if we need to re-wield our speed weps
		if wield ~= "" then string = wield..snd.sep..string end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gimp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group Aff - Requires 1 Luminary</name>
								<script>-- Hello. This route requires a warhammer, as well as you setting up what type of weapon you're using.
-- There is a variable in the script 'PvP variables', which you need to change to be whatever weapon you use.
-- We need this so we can switch to a warhammer/switch back at will without having to put in lots of
-- weird checks to see what kind of weapon you use. Templar has many!

if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal? set to false until we check
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
   
    local wield = ""
		if not string.find(gmcp.Char.Vitals.wield_left, snd.templar_weapon_one) then 
      wield = "quickwield left "..snd.templar_weapon_one
      if not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
        wield = wield..snd.sep.."quickwield right "..snd.templar_weapon_two..snd.sep 
      end
    elseif not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
      wield = "quickwield right "..snd.templar_weapon_two..snd.sep 
    end
    
    -- set the affs we want to use
		snd.giving = {
			"paresis",
			"asthma",
			"weariness",
			"sight",
			"sensitivity",
			"slickness",
			"anorexia",
			"stupidity",
			"left_leg_crippled",
			"right_leg_crippled",
			"clumsiness",
			"haemophilia",
			"allergies",
			"vomiting",
			"recklessness",
			"dizziness"
      }
		-- Since we're with a Luminary, we're banking on them using the Penance proc on overwhelm to instantly kill someone. Deleted!
		if snd.checkAff("writhe_transfix") and snd.checkAff("sensitivity") then
			if  snd.health_percent &lt;= 75 then
				string = "penance "..snd.target
			else -- Okay, their health isn't low enough to kill them straight out. Let's just make sure we hit them some more.
				string = "penance "..snd.target..snd.sep.."relax grip"..snd.sep.."quickwield both warhammer"..snd.sep.."grip"..snd.sep.."dsw "..snd.target.." sacrifice sacrifice"		
				if vorpal then
					string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep..string
				end
			end
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Bleed/Hemm</name>
								<script>if snd.class == "Templar" then
  snd.starting_attack()

  function snd.attack_function()
    local string = ""-- we'll load this with our attack string
    local call = ""  -- and this with our affliction call
    
                     -- next, the afflictions we want to give
    local touse = {}
    local tohit = {}
    local extraaff = "hemorrhage" -- and in case we don't find enough of them
    
    local left_crescent = ""
    if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 85 then left_crescent = "blade release left crescent "..snd.target end
    
    local right_crescent = "" 
    if tonumber(gmcp.Char.Vitals.charge_right) &gt;= 85 then right_crescent = "blade release right crescent "..snd.target end

    
    if not snd.waiting.queue then
      
      snd.giving = {   -- set the affs we want to use
      "hearing", 
      --"haemophilia", 
      "clumsiness",
      "sensitivity"}
       
      -- We really only care about the sensitivity/haemophilia
      -- If they have both, go straight into damage
      if snd.checksomeAffs({"haemophilia", "sensitivity"}, 2) then
        table.insert(touse, "hemorrhage")
        table.insert(touse, "hemorrhage")
        
      else
        -- If that condition isn't met, pick affs from the list above
        for i in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[i]) then
            -- Don't add an aff we've already got in the list!
            if not table.contains(touse, snd.giving[i]) then
              table.insert(touse, snd.giving[i])
            end
          end
        end
      end
      
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      
      -- if we didn't find enough stuff to hit with, stick in hemorrhage.
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end

      if (snd.used.shield and snd.used.rebounding) then -- Double barrier, try to break through both with rsk/blaze.
        string = "razestrike " .. snd.target .. " blaze"
        
      elseif (snd.used.shield or snd.used.rebounding) then -- One layer of barrier, rsk w/venom.
        string = "razestrike " .. snd.target .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[1]
        
      else -- Send 2 hits with venoms/empowerments
        string = "dsk " .. snd.target .. " " .. tohit[2] .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[2] .. ", " .. tohit[1]
        
        if left_crescent ~= "" and snd.checkAff("sensitivity") then string = left_crescent..snd.sep..string end
        if right_crescent ~= "" and snd.checkAff("sensitivity") then string = right_crescent..snd.sep..string end 
      end
      
    end
    
    -- prepend our affliction call, if we need one
    if snd.toggles.affcalling and not snd.target_gone then
      string = call .. snd.sep .. string
    end
    
    -- handle anti-spam and the actual attacking now
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bleed$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limb Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>limbs</name>
								<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  -- list what limbs to hit
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can rupture now!
  local rupture = "none"
	local vorpal = false
	local call = ""
  
  for limb in ipairs(limbs) do
   if snd.limb_bruising[limbs[limb]] &gt;= 3 then
    rupture = limbs[limb]
   end
  end
  
  if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
    vorpal = true
  else
    vorpal = false
  end
  
  if rupture ~= "none" and not snd.used.shield then -- if rupture is go
   string = "penance "..snd.target..snd.sep.."rupture "..snd.target.." "..rupture
  else -- can't rupture, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg" 
		 left = "left leg"
	  end
	 else -- target not prone
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.templar_last_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- if we have vorpal and can use it with impunity
			 if vorpal and not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
			  if right == "nothing" then
			   right = limbs[limb]
			  elseif left == "nothing" then
			   left = limbs[limb]
			  end
				-- otherwise leave the prepped leg alone!
		   end
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" and snd.limb_dmg[limbs[limb]] &lt; 70 then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right and snd.limb_dmg[limbs[limb]] &lt; 70 then
	     left = limbs[limb]
		  end
	   end
	  end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 -- end limb picking logic
	 -- on to attacking logic!
	 if snd.used.shield and snd.used.rebounding then -- baddie is turtling
    string = "razestrike "..snd.target.." blaze"
	 elseif snd.used.shield or snd.used.rebounding then
    string = "target nothing with left"..snd.sep.."target "..right.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
	 -- here's the tricky part, we're checking for optimal conditions
	 -- we need vorpal ready, a leg about to break, and resto poultice off balance
	 elseif vorpal and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
	  if left == "left leg" then right = "right leg" end
	  if left == "right leg" then right = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." trauma numbing"
	 -- we could also meet the same conditions, but on the other limb we picked
	 elseif vorpal and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
	  if right == "left leg" then left = "right leg" end
	  if right == "right leg" then left = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." numbing trauma"
	 else -- we can't do a Big Bad Break, run normal logic
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dsk "..snd.target.." trauma trauma"
   end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>ice blast limbs</name>
								<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
  local left = "nothing"
  local right = "nothing"
	local vorpal = false
	local rupture = "none"
	if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
	 vorpal = true
	else
	 vorpal = false
	end
	if table.contains(snd.target_has, "frozen") then
	 if snd.limb_dmg["left leg"] &gt;= snd.limb_dmg["right leg"] then
	  left = "left leg"
		right = "left leg"
	 else
	  left = "right leg"
		right = "right leg"
	 end
	else
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb then
	   if right == "nothing" then
	    right = limbs[limb]
	   elseif left == "nothing" and limbs[limb] ~= right and limbs[limb] ~= snd.last_hit_limb then
	    left = limbs[limb]
		 end
	  end
	 end
	end
  for limb in ipairs(limbs) do
	 if snd.limb_bruising[limbs[limb]] &gt;= 3 then
	  rupture = limbs[limb]
	 end
  end
  if snd.used.shield and snd.used.rebounding then
   string = "razestrike "..snd.target .." blaze"
	elseif snd.used.shield then
	 string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
  elseif rupture ~= "none" then
	 string = "penance "..snd.target..snd.sep.."rupture "..snd.target.." "..rupture
	elseif snd.used.rebounding then
   string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
	elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade release left iceblast "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	elseif tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade release right iceblast "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	elseif vorpal then
	 string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	else
   string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dsk "..snd.target.." trauma trauma"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^lb$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Warden</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>venoms only</name>
								<script>if snd.class == "Warden" then
snd.giving = {
"paresis",
"clumsiness",
"asthma",
"slickness",
"stupidity",
"anorexia",
"allergies",
--"weariness",
--"haemophilia",
--"sensitivity",
--"vomiting",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then left = "epteth" end
  if right == "none" then right = "epseth" end
  
	x = ""
  
  if snd.used.rebounding and snd.used.shield then
   string = "warden raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "warden bypass "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
   string = "warden lacerate "..snd.target.." "..left.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	 end
	end
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end

</script>
								<command></command>
								<packageName></packageName>
								<regex>^venom$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>affs</name>
								<script>if snd.class == "Warden" then
  snd.giving = {
  "paresis",
  "asthma",
  "clumsiness",
  "slickness",
  "stupidity",
  "anorexia",
  "dizziness",
  --"weariness",
  --"sensitivity",
  --"haemophilia",
  --"vomiting",
  --"allergies",
  --"recklessness",
  --"voyria",
  }
  snd.hound_queue = {
  "mark",
  "dizziness",
  "berserking",
  "weariness",
  "impairment",
  }
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    local string = ""
    local left = "none"
    local right = "none"
  
    for i in pairs(snd.giving) do
     if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
      if right == "none" then
       right = snd.effects[snd.giving[i]]
      elseif left == "none" then
       left = snd.effects[snd.giving[i]]
      end
     end
    end
    
    if left == "none" then left = "epseth" end
    if right == "none" then right = "epseth" end
  	x = ""
    
    if snd.used.rebounding and snd.used.shield then
     string = "warden raze "..snd.target
    elseif snd.used.rebounding or snd.used.shield then
     string = "warden bypass "..snd.target.." "..right
  	 if snd.toggles.affcalling and not snd.target_gone then
  	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
  	 end
    else
  	 if snd.checkAff("fallen") and snd.target_locked() then
  	  if table.contains(snd.target_has, "crushed_chest") then
  		 string = "warden decimate "..snd.target
  		else
  	   string = "warden pummel "..snd.target.." chest"
  		end
  	 else
      string = "warden lacerate "..snd.target.." "..left.." "..right
  	  if snd.toggles.affcalling and not snd.target_gone then
  	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
  	  end
  	 end
  	end
    
  	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "ancestral_portent") then
  	 string = string..snd.sep.."ancest portent "..snd.target
  	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "inhibited") then
  	 string = string..snd.sep.."ancest inhibit "..snd.target
  	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
  	 string = string..snd.sep.."ancest ambush "..snd.target
  	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
  	 if snd.target_locked() then
  	  string = string..snd.sep.."ancest attune "..snd.target.." aconite slike"
  	 end
  	end
    
  	string = "wipe left"..snd.sep..x..string..snd.sep.."warden release "..snd.target
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>legs</name>
								<script>if snd.class == "Warden" then
  snd.giving = {
	"left_leg_crippled",
	"right_leg_crippled",
	"left_arm_crippled",
	"right_arm_crippled",    
  "stupidity",
	"anorexia",
	"slickness",
	"asthma",
  "recklessness",
  "dizziness",
  "weariness",
  "sensitivity",
  }
  snd.hound_queue = {
  "frozen",
  }
  
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    local string = ""
    local left = "none"
    local right = "none"
  
    for i in pairs(snd.giving) do
     if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
      if right == "none" then
       right = snd.effects[snd.giving[i]]
      elseif left == "none" then
       left = snd.effects[snd.giving[i]]
      end
     end
    end
    
    if left == "none" then left = "epseth" end
    if right == "none" then right = "epseth" end
  	local x = ""
    
    if snd.used.rebounding and snd.used.shield then
     string = "warden raze "..snd.target
    elseif snd.used.rebounding or snd.used.shield then
     string = "warden bypass "..snd.target.." "..right
  	 if snd.toggles.affcalling and not snd.target_gone then
  	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
  	 end
    else
  	 if snd.checkAff("fallen") then
  	  if table.contains(snd.target_has, "crushed_chest") then
  		 string = "warden decimate "..snd.target
  		else
  	   string = "warden pummel "..snd.target.." chest"
  		end
  	 else
      string = "warden lacerate "..snd.target.." "..left.." "..right
  	  if snd.toggles.affcalling and not snd.target_gone then
  	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
  	  end
  	 end
  	end

    
  	string = "wipe left"..snd.sep..x..string..snd.sep.."warden release "..snd.target
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^legs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>stuff</name>
								<script>if snd.class == "Warden" then
  snd.giving = {
  --push recklnessness/focus balance to try and make locks easier for others
  "recklessness",
  "slickness",
  "stupidity",
  "anorexia",
  "dizziness",
  "weariness",
  "sensitivity",
  "haemophilia",
  "vomiting",
  "allergies",
  --"voyria",
  }
  snd.hound_queue = {
  "dizziness",
  "berserking",
  "weariness",
  "impairment",
  }
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    local string = ""
    local left = "none"
    local right = "none"
  
    for i in pairs(snd.giving) do
     if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
      if right == "none" then
       right = snd.effects[snd.giving[i]]
      elseif left == "none" then
       left = snd.effects[snd.giving[i]]
      end
     end
    end
    
    if left == "none" then left = "epseth" end
    if right == "none" then right = "epseth" end
  	x = ""
    
    if snd.used.rebounding and snd.used.shield then
     string = "warden raze "..snd.target
    elseif snd.used.rebounding or snd.used.shield then
     string = "warden bypass "..snd.target.." "..right
  	 if snd.toggles.affcalling and not snd.target_gone then
  	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
  	 end
    else
  	 if snd.checkAff("fallen") then
  	  if table.contains(snd.target_has, "crushed_chest") then
  		 string = "warden decimate "..snd.target
  		else
  	   string = "warden pummel "..snd.target.." chest"
  		end
  	 else
      
      string = "warden lacerate "..snd.target.." "..left.." "..right
  	  if snd.toggles.affcalling and not snd.target_gone then
        x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
  	  end
  	 end
  	end
    
  	string = "wipe left"..snd.sep..x..string..snd.sep.."warden release "..snd.target
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^support$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Warden" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "ancest carve "..snd.target
  else
   	string = "warden maul "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limb Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>limbs</name>
								<script>if snd.class == "Warden" then
  snd.hound_queue = {"frozen"}
  snd.current_offense = "WardenLimbs"
  snd.starting_attack()

  function snd.attack_function()
    snd.handle_hounds()
    if not snd.waiting.queue then
      limbs = {"left leg", "right leg", "left arm", "right arm"}
      if table.contains(snd.target_has, "crushed_chest") and snd.proned() then
        string = "warden decimate " .. snd.target
      elseif snd.proned() and snd.resto_limb ~= "none" then
        string = "warden pummel " .. snd.target .. " chest"
      else
        left = "nothing"
        right = "nothing"
        if snd.proned() then
          if snd.parried_limb == "right leg" then
            right = "left leg"
          elseif snd.parried_limb == "left leg" then
            right = "right leg"
          else
            right = "right leg"
            left = "left leg"
          end
        elseif
          snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and
          (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
          string = "target left leg with left" ..snd.sep .."target right leg with right" ..snd.sep .."warden maul " ..snd.target
        else
          for limb in pairs(limbs) do
            if
              limbs[limb] ~= snd.parried_limb and
              limbs[limb] ~= snd.last_hit_limb and
              (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33)
            then
              if
                (limbs[limb] == "left leg" or limbs[limb] == "right leg") and
                (snd.limb_dmg[limbs[limb]] + snd.limb_dmg_done &gt;= 33.3)
              then
              elseif right == "nothing" then
                right = limbs[limb]
              elseif left == "nothing" and limbs[limb] ~= right then
                left = limbs[limb]
              end
            end
          end
          if left == "nothing" then
            left = right
          end
          if snd.used.shield or snd.used.rebounding then
            string = "warden raze " .. snd.target
          else
            string = "warden maul " .. snd.target .. " " .. left .. " " .. right
            if snd.soul &lt;= 80 and not table.contains(snd.target_has, "debilitated") then
              string = string .. snd.sep .. "ancest debilitate " .. snd.target
            end
          end
        end
      end
      
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
							<Alias isActive="no" isFolder="no">
								<name>legs</name>
								<script>if snd.class == "Warden" then
  snd.hound_queue = {
  "frozen",
  }
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    -- list what limbs to hit
    limbs = {"left leg", "right leg", "left arm", "right arm"}
  
    if snd.checkAff("crushed_chest") and snd.proned() then	-- check if we can pulverize now!
     string = "warden decimate "..snd.target
  
  	elseif snd.proned() and ((snd.limb_dmg["left leg"] &gt;= 33.33 and snd.limb_dmg["right leg"] &gt;= 33.33)  	-- or if they're prone and staying that way
    or snd.limb_dmg["left leg"] &gt;= 66.66 or snd.limb_dmg["right leg"] &gt;= 66.66) then
  
  	 if table.contains(snd.target_has, "distortion") and snd.soul &lt;= 70 then 	 -- are they distorted?
  	  string = "warden pummel "..snd.target.." chest"	 
  	 elseif snd.used.shield or snd.used.rebounding then -- do we need to raze?
  	  string = "warden raze "..snd.target
  	
  	 else 
  	  string = "warden pummel "..snd.target.." chest"
  	 end
  	elseif snd.proned() then -- at least they're prone
  	 if (snd.used.shield or snd.used.rebounding) and not table.contains(snd.target_has, "distortion") then -- bleh!
  	  string = "warden raze "..snd.target
  	 else -- make sure they stay down
  	  if table.contains(snd.target_has, "frozen") or table.contains(snd.target_has, "distortion") then
  		 string = "warden maul "..snd.target.." left leg right leg"
  	  elseif snd.parried_limb == "left leg" then
  		 string = "warden maul "..snd.target.."right leg right leg"
  		elseif snd.parried_limb == "right leg" then
  		 string = "warden maul "..snd.target.."left leg left leg"
  		else
  	   string = "warden maul "..snd.target.." left leg right leg"
  		end
  	 end
  	-- did they apply resto?
  	--elseif not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
  	-- string = "target nothing with left"..snd.sep.."target nothing with right"..snd.sep.."warden lacerate "..snd.target.." epseth epseth"
    else -- can't pulverize, needs logic
  	 -- pick what limbs to hit
  	 left = "nothing"
  	 right = "nothing"
  	 if snd.proned() then -- focus legs hard on prone
  	  if snd.parried_limb == "right leg" then
  	   right = "left leg"
  	  elseif snd.parried_limb == "left leg" then
  	   right = "right leg"
  	  else
  	   right = "right leg"
  		 left = "left leg"
  	  end
  	 -- are the legs prepped?
  	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
      string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."warden maul "..snd.target
  	 else -- target not prone, legs not prepped
  	  for limb in pairs(limbs) do
  		 -- ignore last parried, last hit, and any limbs being resto'd
  	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
  		  if right == "nothing" then
  		   right = limbs[limb]
  	    elseif left == "nothing" and limbs[limb] ~= right then
  	     left = limbs[limb]
  		  end
  	   end
  	  end
  	  if left == "nothing" then -- we only found one limb to hit
  	   left = right -- double up!
  	  end
  	  -- end limb picking logic
  	  -- on to attacking logic!
  	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
       string = "warden raze "..snd.target -- raze has static balance cost
  	  else
  	   string = "warden maul "..snd.target.." "..left.." "..right
      end
  	 end
  	end
  	if snd.soul &lt;= 90 and not snd.checkAff("inhibited") then
  	 string = string..snd.sep.."ancest inhibit "..snd.target
  	elseif snd.soul &lt;= 90 and not snd.checkAff("eluded") then
  	 string = string..snd.sep.."ancest elude "..snd.target
    elseif snd.soul &lt;= 80 and not snd.checkAff("debilitated") then
     string = string..snd.sep.."ancest debilitate "..snd.target
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^legs$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Zealot</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Immolation support</name>
								<script>if snd.class == "Zealot" then
  snd.starting_attack()

  function snd.attack_function()
    -- This checks for a present Firefist defense. This is used later during a Firefist check.
    local firefist = false
    if snd.defenses.def_firefist.state == "deffed" then
      firefist = true
    end
    -- This checks for a present Zenith defense. It is used later in Zenith/Flow Handling.
    local zenith = false
    if snd.defenses.def_zenith.state == "deffed" then
      zenith = true
    end
    -- This is a failsafe to take crispy off of a target that has cured ablaze.
    if snd.checkAff("crispy") then
      if not snd.checkaff("ablaze") then
        snd.target_cured("crispy")
      end
    end
    -- This uses crispy to check if they're at the right flame level.
    local immolation_ready = false
    if snd.checkAff("ablaze") then
      if snd.checkAff("crispy") then
        immolation_ready = true
      end
    end
    -- In this mode, we're going to only rely on Purification. It's built to support a quick Immolate.
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer " .. snd.target
        -- OK, so if immolation is ready... we should cast it!	
      elseif immolation_ready then
        string = "enact immolation " .. snd.target
        -- OK, so if immolation isn't ready, what next? Heatspear!
      elseif not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
        string = "enact heatspear " .. snd.target
        -- OK, what if they have heatspear? Are they ablaze?! Quicken!
        --	elseif snd.checkAff("ablaze") then
        --		string = "enact quicken "..snd.target
        -- OK, so we've done all of this, but they don't have ablaze! Ez fix..
      else
        string = "enact scorch " .. snd.target
      end
      -- Flow Handling/Zenith Handling
      -- In this mode, we only Flow when we have Zenith, otherwise we are casting.
      -- This means our Flow handling IS our Zenith handling.
      -- Our Flow attacks should always be punches to take advantage of Firefist.
      if zenith then
        if snd.used.shield then
          string = "touch hammer " .. snd.target
        elseif snd.parried_limb ~= "torso" then
          string = "flow " .. snd.target .. " clawtwist clawtwist" .. snd.sep .. string
        elseif snd.parried_limb ~= "left arm" then
          string = "flow " .. snd.target .. " pummel left pummel left" .. snd.sep .. string
        else
          string = "flow " .. snd.target .. " pummel right pummel right" .. snd.sep .. string
        end
      end
      -- Hackles handling
      -- In this mode, we really just hackles whipburst.
      -- We will Whipburst even in lieu of a Flow combo.
      -- First, we should check if we have hackles balance.	
      if gmcp.Char.Vitals.ability_bal == "1" then
        string = "hackles " .. snd.target .. " whipburst " .. snd.sep .. string
      end
    end
    -- We want to turn on firefist if we have Zenith up, because that's the only time we're punching and it needs to count.
    if not firefist then
      if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
        if zenith then
          string = "enact firefist"
        else
          string = "enact zenith" .. snd.sep .. string
        end
      end
    end
    -- I am leaving this failsafe in... below checks if we're g2g with the immolate button.
    if immolation_ready then
      string = "enact immolation " .. snd.target
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^fire$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Bleed/Damage</name>
								<script>if snd.class == "Zealot" then
  snd.starting_attack()

  function snd.attack_function()
    local firefist = false
    if snd.defenses.def_firefist.state == "deffed" then
      firefist = true
    end
    local zenith = false
    if snd.defenses.def_zenith.state == "deffed" then
      zenith = true
    end
    if snd.checkAff("crispy") then
      if not snd.checkaff("ablaze") then
        snd.target_cured("crispy")
      end
    end
    local immolation_ready = false
    if snd.checkAff("ablaze") then
      if snd.checkAff("crispy") then
        immolation_ready = true
      end
    end
    -- Flow Handling
    -- Consider writing a check for different combos on firefist?
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer " .. snd.target
      elseif snd.parried_limb ~= "torso" then
        string = "flow " .. snd.target .. " clawtwist clawtwist"
      elseif snd.parried_limb ~= "head" then
        if not snd.checkAff("crippled_throat") then
          string = "flow " .. snd.target .. " edgekick heelrush head"
        else
          string = "flow " .. snd.target .. " sunkick heelrush head"
        end
      elseif snd.parried_limb ~= "left leg" and snd.parried_limb ~= "right leg" then
        string = "flow " .. snd.target .. " wanekick left wanekick right"
      elseif snd.parried_limb ~= "left leg" and snd.parried_limb == "right leg" then
        string = "flow " .. snd.target .. " wanekick left wanekick left"
      elseif snd.parried_limb ~= "right leg" and snd.parried_limb == "left leg" then
        string = "flow " .. snd.target .. " wanekick right wanekick right"
      else
        if snd.parried_limb ~= "left arm" then
          string = "flow " .. snd.target .. " pummel left pummel left"
        end
      end
      -- Hackles handling
      -- Jawcrack &gt; Rive ...  rive to maximize the bleeding.
      -- Prioritize Whipburst during firefist?
      -- First, we should check if we have hackles balance.	
      if gmcp.Char.Vitals.ability_bal == "1" then
        -- Cool! What are we doing with it? Let's figure that out and put it before our flow string!
        if snd.parried_limb ~= "head" and not snd.checkAff("stuttering") then
          string = "hackles " .. snd.target .. " jawcrack " .. snd.sep .. string
        else
          string = "hackles " .. snd.target .. " rive " .. snd.sep .. string
        end
      end
      -- Zenith handling
      -- Immolation &gt; Pyromania &gt; Infernal &gt; Heatspear &gt; Quicken &gt; Scorch
      -- handle pyromania with a variable?
      -- use the limb state checker from templar limbs script for infernal check?
      -- handle heatspear as an aff..
      -- check if immolate not possible ... if not, quicken or scorch
      if zenith then
        if not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
          string = string .. snd.sep .. "enact heatspear " .. snd.target
        elseif snd.checkAff("ablaze") then
          string = string .. snd.sep .. "enact quicken " .. snd.target
        else
          string = string .. snd.sep .. "enact scorch " .. snd.target
        end
      end
      if not firefist then
        if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
          string = "enact firefist"
        end
      end
      if immolation_ready then
        string = "enact immolation " .. snd.target
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Tidesage</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Afflictions</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Basic Aff</name>
								<script>if snd.class == "Tidesage" then
  snd.starting_attack()

  function snd.attack_function()
    local apparition = tonumber(gmcp.Char.Vitals.apparition)
    local string = ""
    
    if not snd.waiting.queue then
      if not table.isMember(gmcp.Room.Info.details, "fogged") then
        string = "fog inundate"
      -- If you don't have apparition up, let's do it.
      elseif apparition == 0 and hasSkill("Apparition") then
        string = "fog apparition"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."tide harpoon "..snd.target
      -- If shielded or rebounding, strip it.
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Abyss") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          if snd.used.shield and snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."fog abyss "..snd.target
          else
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."tide clobber " .. snd.target
          end
        else
          string = "fog abyss " .. snd.target
        end
      -- Let's get slough going to limit usage of poultices.
      elseif not snd.checkAff("slough") and hasSkill("Terrors") then -- slough prevents poultices from being applied, like slickness
        -- Let's try to give heartflutter and stun if we can. 
        -- If we have apparition, let's give some affs and damage torso.
        -- If all else fails, let's just give those affs.
        if (snd.balance.earthenwill and hasSkill("Engulf")) and (apparition &gt;= 3 and hasSkill("Apparition")) and hasSkill("Ram") then
          string = "tide engulf trammel"..snd.sep.."fog terrors "..snd.target.." apparition"..snd.sep.."tide ram "..snd.target
        elseif (apparition &gt;= 3 and hasSkill("Apparition")) and hasSkill("Ram") then
          string = "fog terrors "..snd.target.." apparition"..snd.sep.."tide ram "..snd.target
        else
          string = "fog terrors "..snd.target
        end
      -- if they are proned, let's go ahead and try to give collapsed lung to punish for smoking
      elseif (snd.proned() and hasSkill("Wreck")) and not snd.checkAff("collapsed_lung") then
         string = string.."tide wreck "..snd.target
      -- If we get slough up, let's throw out some useful group affs going.
      elseif snd.checksomeAffs({"recklessness", "dizziness", "sensitivity", "epilepsy", "stupidity"},4) and hasSkill("Gnash") then
        string = "fog gnash "..snd.target
      -- If we have gotten slough on the target, let's break some limbs. Those are affs too.
      elseif not snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},4) and hasSkill("Unseen") then
        string = "fog unseen " .. snd.target
      -- All else, let's just smack
      else
        string = "tide clobber " .. snd.target
      end
    
      -- If your synth isn't attacking, get it attacking.
      if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
      end
      
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Basic Damage</name>
								<script>if snd.class == "Tidesage" then
  snd.starting_attack()
  
  function snd.attack_function()
    local apparition = tonumber(gmcp.Char.Vitals.apparition)
    local string = ""
    
    if not snd.waiting.queue then
      -- if they are impaled, let's do some damage
      if snd.target_impaled and hasSkill("Eviscerate") then
        string = "tide eviscerate"
      -- If there is no fog, let's get it going.
      elseif not table.isMember(gmcp.Room.Info.details, "fogged") then
        string = "fog inundate"
      -- If you don't have apparition up, let's do it.
      elseif apparition == 0 and hasSkill("Apparition") then
        string = "fog apparition"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."tide harpoon "..snd.target
      -- They shielded and rebounded? Try to remove both. But if they only have one, strip it and then strip levitation. 
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Abyss") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          if snd.used.shield and snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."fog abyss "..snd.target
          elseif snd.used.shield or snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."tide breach " .. snd.target            
          end
        else
          string = "fog abyss " .. snd.target
        end
      -- Did you happen to strip their lev and they are not proned? Let's prone them!
      elseif not snd.proned() and snd.lev_gone and hasSkill("Capsize") then
         string = string.."tide capsize "..snd.target      
    	-- If you can impale them, let's do it, so long as no one else has.
      elseif not snd.target_impaled and snd.proned() and hasSkill("Harpoon") then
        if apparition &gt;= 3 then
          string = "fog unseen "..snd.target.." apparition"..snd.sep.."tide harpoon"
        else
          string = "tide harpoon"
        end
      -- They prone and have two limbs broken? Cool, let's try to damage some limbs more and generally damage them cause of it.
      elseif snd.proned() and snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},2) and hasSkill("Undulation") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          string = "fog unseen "..snd.target.." apparition"..snd.sep.."tide undulation"
        else
          string = "tide undulation"
        end
      -- Let's go ahead and start damaging their head if they aren't parrying it.
      elseif snd.parried_limb ~= "head" and hasSkill("Feelers") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          string = "fog feelers "..snd.target.." head apparition"..snd.sep.."tide clobber "..snd.target
        else
          string = "fog feelers "..snd.target.." head"
        end
      -- Otherwise, let's just clobber them.
      else
        string = "tide clobber "..snd.target
      end
  
    -- If your synth isn't attacking, get it attacking.
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep..string
    end
    
    if snd.balance.earthenwill and hasSkill("Engulf") then
      string = "tide engulf"..snd.sep..string
    end
  
    if snd.balance.momentum and hasSkill("Hightide") then
      string = "tide hightide"..snd.sep..string
    end
  
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limbs</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Basic Limbs</name>
								<script>if snd.class == "Tidesage" then -- Note that this is intended for groups, not 1v1
  snd.starting_attack()
  
  function snd.attack_function()
    local apparition = tonumber(gmcp.Char.Vitals.apparition)
    local string = ""
    local hammer = "none"
	  local how_many_moderate = 0
    for k,v in pairs(snd.limb_bruising) do
      if v &gt;= 2 then
        how_many_moderate = how_many_moderate + 1
      end
    end
    
    if not snd.waiting.queue then
    
      -- If target is impaled, let's do some damage.
 		  if snd.target_impaled and hasSkill("Eviscerate") then
        string = "tide eviscerate"
      -- If there is no fog, let's get it going.
      elseif not table.isMember(gmcp.Room.Info.details, "fogged") then
        string = "fog inundate"
      -- If you don't have apparition up, let's do it.
      elseif apparition == 0 and hasSkill("Apparition") then
        string = "fog apparition"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."tide harpoon "..snd.target
      elseif how_many_moderate &gt;= 3 and not snd.used.shield then
         string = string.."tide keelhaul "..snd.target
      -- They shielded and rebounded? Try to remove both. But if they only have one, strip it and then strip levitation. 
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Abyss") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          if snd.used.shield and snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."fog abyss "..snd.target
          elseif snd.used.shield or snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."tide breach " .. snd.target            
          end
        else
          string = "fog abyss " .. snd.target
        end
      -- We want levitation gone for more damage. Let's try undertow to make it so they can't put it up fast if it's not gone yet.
      -- If we can't undertow, roll with breach.
      elseif not snd.lev_gone then
        if hasSkill("Undertow") and snd.proned() then
          string = string.."fog undertow "..snd.target
        elseif hasSkill("Breach") then
         string = string.."tide breach "..snd.target
        end
      -- If they are not prone and no levitation, capsize them. This'll break 3 limbs regardless of bruises.
      elseif (not snd.proned() and snd.lev_gone) and hasSkill("Capsize") then
         string = string.."tide capsize "..snd.target     
      -- Let's try to give them slough, that way it's harder to heal limbs. Also, clobber if you can apparition it.
    	elseif (not snd.checkAff("slough") and hasSkill("Terrors")) then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          string = string.."fog terrors "..snd.target.." apparition"..snd.sep.."tide clobber "..snd.target
        else
          string = string.."fog terrors "..snd.target
        end
      -- Straight try to break all four limbs to help support limbs in the group.
      elseif not snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},4) and hasSkill("Unseen") then
        string = string.."fog unseen " .. snd.target
      else 
        string = "tide clobber "..snd.target
  	  end
  
      -- If your synth isn't attacking, get it attacking.
      if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
      end
    
      -- If we can engulf, let's do it.
      if snd.balance.earthenwill and hasSkill("Engulf") then
        string = "tide engulf"..snd.sep..string
      end
      
      -- If we can hightide, let's do that as well.
      if snd.balance.momentum and hasSkill("Hightide") then
        string = "tide hightide"..snd.sep..string
      end
		
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end
  
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Shadow</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Alchemist</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>mouse</name>
							<script>if snd.class == "Alchemist" then
snd.giving = {
"sight",
"sensitivity",
"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
    if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "alchemy corrosive "..snd.target
  elseif tonumber(gmcp.Char.Vitals.energy) then
   string = "alchemy catalyse"..snd.sep.."alchemy virulent "..snd.target.." "..venom
  else
   string = "alchemy virulent "..snd.target.." "..venom
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^ms$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>stormtouched</name>
							<script>if snd.class == "Alchemist" then
snd.giving = {

"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

    call = ""
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
 	 string = "compound exposure "..snd.target..snd.sep.."alchemy corrosive "..snd.target
  elseif snd.checkAff("stormtouched") then
 	 if tonumber(gmcp.Char.Vitals.energy) then
  	string = "compound exposure "..snd.target..snd.sep.."alchemy catalyse"..snd.sep.."alchemy static  "..snd.target
 	 else
 	 	string = "compound exposure "..snd.target..snd.sep.."alchemy static "..snd.target
  	end
 	else
  	string = "compound exposure "..snd.target..snd.sep.."alchemy virulent "..snd.target.." "..venom
  	call = "wt Virulent "..snd.target..": "..venom..snd.sep
  	if tonumber(gmcp.Char.Vitals.volatility) &gt;= 4 then
  		string = "alchemy catalyse "..snd.sep..string  
  	end
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^storm$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>vlock</name>
							<script>if snd.class == "Alchemist" then
snd.giving = {

"clumsiness",
"asthma",
"slickness",
"anorexia",
"stupidity",
"weariness",
"allergies",
"vomiting",
"haemophilia",
"sensitivity",
"recklessness",
"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

    call = ""
--local boosting = false -- this is like templar vorpal
-- if tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then boosting = true -- yesss
-- end
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "alchemy corrosive "..snd.target
	elseif tonumber(gmcp.Char.Vitals.volatility) &gt;= 3 then
		if not snd.checkAff("impatience") and not snd.checkAff("confusion") then
			string = "alchemy neurotic  "..snd.target
		elseif not snd.checkAff("paresis") and not snd.checkAff("stupidity") then
			string = "alchemy electroshock "..snd.target
		else
			string = "alchemy virulent "..snd.target.." "..venom
	 		call = "wt Virulent "..snd.target..": "..venom..snd.sep
		end	
  else
   string = "alchemy virulent "..snd.target.." "..venom
	 call = "wt Virulent "..snd.target..": "..venom..snd.sep
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^supp$</regex>
						</Alias>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Utility Aliases</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Pull (Allure)</name>
								<script>if snd.class == "Alchemist" then
  if matches[2] == "" then
    snd.attack("botany allure "..snd.target)
  else
    snd.attack("botany allure "..matches[2])
  end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^np(.*)$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Archivist</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>newbie damage</name>
								<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local bioessence = tonumber(gmcp.Char.Vitals.bio) or 0
 local biostring = "" 
  
  if bioessence &gt; 1 then
    biostring = "bio stimulant"..snd.sep
  end


 if not snd.waiting.queue then
  if snd.used.shield then
   	string = "incite fork "..snd.target
	else
		string = "incite crux "..snd.target..snd.sep..biostring
    
  end
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^newb$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>vet damage</name>
								<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local bioessence = tonumber(gmcp.Char.Vitals.bio) or 0
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end 
 
 local biostring = "" 

      if bioessence &gt; 0 then
      	biostring = "bio stimulant"..snd.sep
      end

      cecho("\n&lt;red&gt;Phys:"..physcount.."&lt;red&gt;Ment: "..mentcount)

 if not snd.waiting.queue then
  if snd.used.shield then
   	string = "incite fork "..snd.target
	elseif not snd.geoinvert then
    string = "drop " ..snd.my_token.. "" ..snd.sep.. "geo invert" ..snd.sep    
  elseif not snd.geotrace then
    string = "geo trace"

   else

     if snd.checkAff("blackout") then
        if not snd.checkAff("patterns") then
           string = "geo pattern "..snd.target..snd.sep
        elseif snd.checkAff("patterns") and snd.balance.madness then
           string = "empower jhako"..snd.sep.."elicit madness "..snd.target..snd.sep
        elseif snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 1) then
           --string = "geo impress rod"..snd.sep.."incite hex "..snd.target..snd.sep
           string = "goggle scan "..snd.target..snd.sep.."geo impress rod"..snd.sep.."incite crux "..snd.target..snd.sep..biostring..biostring  
        end
 
      elseif snd.my_incite == "Crescent" then
        string = "geo impress rod"..snd.sep.."incite crux "..snd.target..snd.sep..biostring..snd.sep..biostring  
                    
     elseif snd.my_incite ~= "" and snd.crescentable then
       string = "geo impress star"..snd.sep.."incite crescent " ..snd.target 
       
     else
      string = "geo impress star"..snd.sep.."incite crux "..snd.target..snd.sep..biostring..snd.sep..biostring..snd.sep.."quickassess "..snd.target 
    end 
        
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end

snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Afflictions</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Basic group affs</name>
								<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
			local touse = {}
      local string = "" 
      local biostring = "" 
      local call = "" 
      local bioessence = tonumber(gmcp.Char.Vitals.bio) or 0

      if bioessence &gt; 1 then
      	biostring = "bio stimulant"..snd.sep
      end
				
			snd.giving = {
			"laxity",
      "dizziness",
			"faintness",
      "epilepsy",
      "shyness",
      "merciful",
			"berserking",
      "masochism",
			"recklessness",
      "lovers_effect",
      "peace",
			"magnanimity",
			}
			
	
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			
      if snd.used.shield then -- check for shield
      	string = string.."incite fork "..snd.target
        
      elseif snd.geoinvert == false then -- make sure token is in room and following us
        string = "drop " ..snd.my_token.. "" ..snd.sep.. "geo invert" ..snd.sep
        
      elseif not snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 2) and snd.balance.madness then 
                                           -- madness is good bang for buck, use if 2 or more affs available
                                           -- Swirl is used as we're giving multiple affs that may trigger its special condition
                                           
          if snd.empowerready == true then -- if we can empower, do so to strip clarity
            string = "empower jhako"..snd.sep.."geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep..biostring
            
					else
						string = "geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep..biostring
					end
          
			else 
        if snd.health_percent &lt;= 75 and snd.my_impress ~= "star" then  -- Take advantage of the threshold from star 25/50/75 to give paresis
					string = "geo impress star"..snd.sep

				elseif not snd.my_impress == "hex" and not snd.checkAff("hypochondria") then -- make them gain hypochondria on diagnose, if they don't have it already
					string = "geo impress hex"..snd.sep	
        end
        
				string = string.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep..biostring -- our shape from our priority list will be used
        call = "wt Afflicting "..snd.target..": "..touse[1]
      end

      if snd.toggles.affcalling and not snd.target_gone and call~= "" then
          string = call..snd.sep..string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
          snd.last_attack = string
          snd.attack(snd.last_attack)
          snd.waiting.queue = true
          tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Carnifex</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Wielding</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>wield bashing</name>
								<script>if snd.class == "Carnifex" then
snd.send("quickwield both greatmaul")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wbsh$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield pvp</name>
								<script>if snd.class == "Carnifex" then
snd.send("quickwield both bardiche")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wpvp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield limbs</name>
								<script>if snd.class == "Carnifex" then
snd.send("quickwield both warhammer")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wlb$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Deathlore</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>rez</name>
								<script>if snd.class == "Carnifex" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb soul call "..matches[2])
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^rez (\w+)$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>venoms only</name>
								<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"clumsiness",
"asthma",
"slickness",
"stupidity",
"anorexia",
"allergies",
--"weariness",
--"haemophilia",
--"sensitivity",
--"vomiting",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epteth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.used.rebounding and snd.used.shield then
   string = "pole raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
   string = "pole spinslash "..snd.target.." "..left.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^vn$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>affs</name>
								<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"asthma",
"clumsiness",
"slickness",
"stupidity",
"anorexia",
"dizziness",
--"weariness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}
snd.hound_queue = {
"mark",
"dizziness",
"berserking",
"weariness",
"impairment",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"

  for i in pairs(snd.giving) do
   if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.used.rebounding and snd.used.shield then
   string = "pole raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.checkAff("fallen") and snd.target_locked() then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end
	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "soul_disease") then
	 string = string..snd.sep.."soul disease "..snd.target
	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
	 string = string..snd.sep.."soul poison "..snd.target
	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
	 if snd.target_locked() then
	  string = string..snd.sep.."soul implant "..snd.target.." aconite slike"
	 end
	end
	string = x..string..snd.sep.."hammer throw "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>legs</name>
								<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  if snd.used.rebounding or snd.used.shield then
   string = "hammer raze "..snd.target
  elseif snd.proned() then
   if table.contains(snd.target_has, "crushed_chest") then
	  string = "hammer pulverize "..snd.target
	 else
	  string = "hammer crush "..snd.target.." chest"
	 end
  else
   string = "pole spinslash "..snd.target.." epseth epseth"
  end
	if snd.soul &lt;= 90 then
	 string = string..snd.sep.."soul distort "..snd.target
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^legs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>magic</name>
								<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"asthma",
"weariness",
"slickness",
"stupidity",
"anorexia",
"dizziness",
--"clumsiness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}
snd.hound_queue = {
"stupidity",
"weariness",
"confusion",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  left = "none"
  right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.used.rebounding and snd.used.shield then
   string = "pole raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.proned() then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end
	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "soul_disease") then
	 string = string..snd.sep.."soul disease "..snd.target
	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
	 string = string..snd.sep.."soul poison "..snd.target
	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
	 if snd.target_locked() and table.contains(snd.target_has, "stupidity") then
	  string = string..snd.sep.."soul implant "..snd.target.." kalmia gecko"
	 end
	elseif snd.soul &lt;= 20 then
	 string = string..snd.sep.."soul sacrifice "..snd.target
	end
	string = x..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^mg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Carnifex" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "soul erode "..snd.target
  else
   	string = "hammer doublebash "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limb Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>limbs</name>
								<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can pulverize now!
  if table.contains(snd.target_has, "crushed_chest") and snd.proned() then
   string = "hammer pulverize "..snd.target
	-- or if we should set up pulverize...
	elseif snd.proned() and snd.resto_limb ~= "none" then
	 string = "hammer crush "..snd.target.." chest"
  else -- can't pulverize, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 -- are the legs prepped?
	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
		 string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."hammer doublebash "..snd.target
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- don't do anything!
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	  if left == "nothing" then -- we only found one limb to hit
	   left = right -- double up!
	  end
	  -- end limb picking logic
	  -- on to attacking logic!
	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
     string = "hammer raze "..snd.target -- raze has static balance cost
	  else
	   string = "hammer doublebash "..snd.target.." "..left.." "..right
		 if snd.soul &lt;= 80 and not table.contains(snd.target_has, "glasslimb") then
		  string = string..snd.sep.."soul frailty "..snd.target
		 end
    end
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
							<Alias isActive="no" isFolder="no">
								<name>legs</name>
								<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can pulverize now!
  if table.contains(snd.target_has, "crushed_chest") and snd.proned() then
   string = "hammer pulverize "..snd.target
	-- or if they're prone and staying that way
	elseif snd.proned() and ((snd.limb_dmg["left leg"] &gt;= 33.33 and snd.limb_dmg["right leg"] &gt;= 33.33) or snd.limb_dmg["left leg"] &gt;= 66.66 or snd.limb_dmg["right leg"] &gt;= 66.66) then
	 -- are they distorted?
	 if table.contains(snd.target_has, "distortion") and snd.soul &lt;= 70 then
	  string = "hammer crush "..snd.target.." chest"
	 -- do we need to raze?
	 elseif snd.used.shield or snd.used.rebounding then
	  string = "hammer raze "..snd.target
	 -- can they parry?
	 else
	  string = "hammer crush "..snd.target.." chest"
	 end
	elseif snd.proned() then -- at least they're prone
	 if (snd.used.shield or snd.used.rebounding) and not table.contains(snd.target_has, "distortion") then -- bleh!
	  string = "hammer raze "..snd.target
	 else -- make sure they stay down
	  if table.contains(snd.target_has, "frozen") or table.contains(snd.target_has, "distortion") then
		 string = "hammer doublebash "..snd.target.." left leg right leg"
	  elseif snd.parried_limb == "left leg" then
		 string = "hammer doublebash "..snd.target.."right leg right leg"
		elseif snd.parried_limb == "right leg" then
		 string = "hammer doublebash "..snd.target.."left leg left leg"
		else
	   string = "hammer doublebash "..snd.target.." left leg right leg"
		end
	 end
	-- did they apply resto?
	--elseif not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
	-- string = "target nothing with left"..snd.sep.."target nothing with right"..snd.sep.."pole spinslash "..snd.target.." epseth epseth"
  else -- can't pulverize, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 -- are the legs prepped?
	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
    string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."hammer doublebash "..snd.target
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  if right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	  if left == "nothing" then -- we only found one limb to hit
	   left = right -- double up!
	  end
	  -- end limb picking logic
	  -- on to attacking logic!
	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
     string = "hammer raze "..snd.target -- raze has static balance cost
	  else
	   string = "hammer doublebash "..snd.target.." "..left.." "..right
    end
	 end
	end
	if snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif snd.soul &lt;= 90 then
	 string = string..snd.sep.."soul distort "..snd.target
  elseif snd.soul &lt;= 80 and not table.contains(snd.target_has, "glasslimb") then
   string = string..snd.sep.."soul frailty "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^legs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Carnifex Limb Aff Support (need Tundralhowl dog)</name>
								<script>if snd.class == "Carnifex" then
snd.giving = {
"left_leg_crippled",
"right_leg_crippled",
"left_arm_crippled",
"right_arm_crippled",
"paresis",
"asthma",
"slickness",
"stupidity",
"anorexia",
"dizziness",
"clumsiness",
--"weariness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}

  snd.hound_queue = {
  "frozen",
  }
  
snd.starting_attack()
function snd.attack_function()
   snd.handle_hounds()
if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"
  local hound_aff = "frozen"  
  local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)  
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  
  if snd.used.rebounding and snd.used.shield then
   string = "raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.checkAff("fallen") then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end

	string = x..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Earthcaller</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Random aliases</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>beckon</name>
								<script>if snd.class == "Earthcaller" then
if matches[2] == "" then
 snd.send("qeb osso lurch "..snd.target)
elseif matches[2] == "all" then
 snd.send("qeb osso lurch")
else
 snd.send("qeb osso lurch "..matches[2])
end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bk(.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>force stop</name>
								<script>if snd.class == "Earthcaller" then
 if snd.toggles.attacking then snd.toggle("attacking") end
 if matches[2] == "" then
  snd.send("qeb dirge ordain "..snd.target.." stop")
 else
  snd.send("qeb dirge ordain "..matches[2].." stop")
 end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^fs(.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>resurrection</name>
								<script>if snd.class == "Earthcaller" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb dirge imperishable "..matches[2])
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^rez (\w+)$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mouse mode</name>
								<script>if snd.class == "Earthcaller" then
snd.giving_shield = {
"sight",
"paresis",
"weariness",
"asthma",
}
snd.giving_spur = {
"impatience",
"sensitivity",
"stupidity",
"vertigo",
"self_pity",
"migraine",
}
snd.giving_subdue = {
"loneliness",
"hypochondria",
"stupidity",
"lethargy",
"dementia",
"recklessness",
"masochism",
"paranoia"
}
snd.starting_attack()
function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
 local shield = "none"
 local spur = "none"
 local subdue = "none"
 if snd.mana_percent &lt; 40 and not snd.used.shield then
  string = "osso fragment "..snd.target
 elseif snd.proned() then
  string = "shield deface "..snd.target
 elseif table.contains(snd.target_has, "sight") then
  string = "tectonic transfixion "..snd.target
 else
  if snd.balance.battle then
   for i in pairs(snd.giving_spur) do
	  if not snd.checkAff(snd.giving_spur[i]) and battle == "none" then
	   spur = snd.giving_spur[i]
	  end
	 end
  end
  if snd.used.shield then
   shield = "shield raze"
  else
   for i in pairs(snd.giving_shield) do
    if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
	   shield = snd.subjugation_attacks[snd.giving_shield[i]]
	  end
   end
  end
  if shield == "none" then
   shield = "shield strike"
  end
  if snd.used.rebounding and shield ~= "facesmash" then
   shield = "shield raze"
  end
  for i in pairs(snd.giving_subdue) do
   if not snd.checkAff(snd.giving_subdue[i]) and subdue == "none" and snd.giving_subdue[i] ~= battle then
	  subdue = snd.giving_subdue[i]
	 end
  end
  if spur ~= "none" then
   if snd.toggles.affcalling and not snd.target_gone then
	  string = "wt Spur "..snd.target..": "..spur..snd.sep
	 end
   string = string.."osso spur "..spur.." "..snd.target..snd.sep
  end
  string = string..shield.." "..snd.target..snd.sep
  if shield ~= "slam" and shield ~= "overwhelm" then
   if subdue == "none" then
    string = string.."subdue "..snd.target
   else
	  if snd.toggles.affcalling and not snd.target_gone then
	   string = string.."wt Subdue "..snd.target..": "..subdue..snd.sep
	  end
    string = string.."subdue "..snd.target.." "..subdue
	 end
  end
 end
 
 if string.find(string, "deface") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then 
 	string = string..snd.sep.."quickwield left tower"
 end

 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^ms$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Earthcaller Group Manadrain Affs</name>
								<script>local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
local mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

if snd.class == "Earthcaller" then

snd.starting_attack()
function snd.attack_function()

if not snd.waiting.queue then
 local string = ""
 local astring = "" 
 local shield = "none"
 local battle = "none"
 local chasten = "none"
 local tohit = {}
 local string = "contemplate " .. snd.target .. snd.sep 
 local missing = snd.missingAff("stupidity/paresis/anorexia/asthma", "/")
 local total_aff_count = 0
 local mental_aff_count = 0 
 
    for aff in pairs(snd.all_affs) do
      if table.contains(snd.target_has, snd.all_affs[aff]) then total_aff_count = total_aff_count + 1 end
    end
    
    for aff in pairs(snd.mental_affs) do
	   if table.contains(snd.target_has, snd.mental_affs[aff]) then mental_aff_count = mental_aff_count + 1 end
    end
    
    if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string .. "quickwield right "..snd.crozier.. snd.sep end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string .. "quickwield left buckler" .. snd.sep end	
	
  snd.giving_shield = {
  "paresis",
  "asthma",    
  "weariness", 
  "berserking",
  "allergies",
  "confusion",   
  "disrupted",   
  "sight",  
  "writhe_transfix",  

   }
   
  snd.giving_battle = {
  "stupidity",
  "anorexia",   
  "vertigo",  
  "self-pity",  
  "berserking",
  "impatience",    
  "migraine",    
  "sensitivity",
  }
  
  if snd.checkAff("impatience") and not snd.checkAff("agony") then

  snd.giving_chasten = {
  "agony", 
  "hypochondria",
  "stupidity",
  "lethargy",    
  "recklessness",
  "anorexia",  
  "masochism",
  "dementia",
  "paranoia",
   
  }
  else
    
  snd.giving_chasten = {
  "hypochondria",
  "stupidity",
  "lethargy",    
  "recklessness",
  "anorexia",  
  "masochism",
  "dementia",
  "paranoia",
  "agony",      

  }

end
	snd.giving = {
		--"sight",
        "asthma",
		"paresis",
		"clumsiness",
		"squelched",
		"shyness",
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		"haemophilia",
		"recklessness",
		"weariness",
		"voyria",
		"dizziness",

		}

    cecho("&lt;yellow&gt; Affs: "..#snd.target_has)

    if mp &gt;= 70 and gmcp.Char.Vitals.hp &lt; gmcp.Char.Vitals.mp and cansip == false then
        string = "nimbleness"..snd.sep.."shift"..snd.sep
    end	

    --Absolve check
    if snd.mana_percent &lt;= 43 and not snd.used.shield then
      string = "osso fragment " .. snd.target..snd.sep
    end
	
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
          chasten = snd.giving_chasten[i]
        end
      end

      --Battle aff pick
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end	  
	  
      --Shield aff pick
      if snd.used.shield then
        shield = "shield raze"
        -- If they are prone/psuedo prone and have 5 affs, smack them
      elseif #snd.target_has &gt;= 5 and snd.proned() then
        shield = "quickwield left tower"..snd.sep.."shield deface " .. snd.target
        -- We need to build up disrupt/affs.
      else
        for i in pairs(snd.giving_shield) do
      --    if not snd.checksomeAffs({"hypochondria","stupidity","agony"}, 1) and #snd.target_has &gt; 3 then   -- added this to test
      --      shield = ""
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.subjugation_attacks[snd.giving_shield[i]]
          end
        end
      end
	  
      if snd.used.rebounding then
        if snd.checkAff("confusion") or #snd.target_has &lt; 3 then
          shield = "shield raze"
        else
          shield = "dirge hysteria"
        end
      end
 
    if snd.infiltrate == false or snd.infiltrate == "nil" then		
        string = "osso infiltrate "..snd.target..snd.sep  
      
--    elseif #snd.target_has &gt;= 7 then
--      string = "osso bleach " ..snd.target..snd.sep

     elseif snd.checkAff("accursed") and not snd.checkAff("hellsight") then
       string = "dirge reckoning "..snd.target..snd.sep     
 
     elseif snd.checksomeAffs({"stupidity", "paresis", "anorexia", "asthma"}, 3) and not snd.checkAff("slickness") then
       string = "dirge reckoning "..snd.target..snd.sep
                  
    end
 
      if battle ~= "none" then
        string = string .. "osso spur " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/tectonics/dirge attacks
         string = string .. shield .. " " .. snd.target .. snd.sep
	  
      --Add chasten choice
      if not shield:find("slam") or shield:find("transfix") or shield:find("hysteria") or shield:find("crash") then
        if chasten == "none" then
          string = string .. "subdue " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Subdue " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .."contemplate "..snd.target..snd.sep.."subdue " .. snd.target .. " " .. chasten..snd.sep
        end
      end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
end
  snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mana drain</name>
								<script>if snd.class == "Earthcaller" then
  snd.giving_spur = {"stupidity", "vertigo", "self_pity", "migraine", "sensitivity", "impatience"}
  snd.giving_subdue =
    {
      "lethargy",
      "loneliness",
      "stupidity",
      "hypochondria",
      "dementia",
      "recklessness",
      "masochism",
      "paranoia",
    }
  snd.starting_attack()

  function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local spur = "none"
    local subdue = "none"
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "osso fragment " .. snd.target
    elseif snd.mana_percent &lt; 40 and snd.used.shield then
      for i in pairs(snd.giving_subdue) do
        if
          not snd.checkAff(snd.giving_subdue[i]) and
          subdue == "none" and
          snd.giving_subdue[i] ~= battle
        then
          subdue = snd.giving_subdue[i]
        end
      end
      string = "shield raze " .. snd.target .. snd.sep
      if snd.toggles.affcalling and not snd.target_gone then
        string = string .. "wt subdue " .. snd.target .. ": " .. subdue .. snd.sep
      end
      string = string .. "subdue " .. snd.target .. " " .. subdue
    else
      string = string.."osso bleach " .. snd.target
    end
		
    if snd.balance.battle then
      for i in pairs(snd.giving_spur) do
        if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
          spur = snd.giving_spur[i]
        end
      end
    end
    string = "osso spur " .. spur .. " " .. snd.target .. snd.sep .. string
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt spur " .. snd.target .. ": " .. spur .. snd.sep .. string
    end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^mana$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Group Impale/Tfix</name>
								<script>if snd.class == "Earthcaller" then
  snd.giving_shield = {"paresis", "weariness", "sight", "asthma"}
  snd.giving_spur = {"impatience", "sensitivity", "self_pity", "stupidity", "vertigo"}
  snd.giving_subdue =
    {
      "hypochondria",
      "loneliness",
      "recklessness",
      "stupidity",
      "lethargy",
      "masochism",
      "dementia",
      "paranoia",
      "anorexia",
    }
  snd.starting_attack()

  function snd.attack_function()
  local total_aff_count = snd.aff_count_all()
  local mental_aff_count = snd.aff_count_mental()
  
  local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local shield = "none"
    local spur = "none"
    local subdue = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "osso fragment " .. snd.target
      --They've hit our aff count limit, let's lock them down/kill them.
    elseif total_aff_count &gt;= 4 and snd.checkAff("sight") and not snd.used.shield then
      if not snd.checkAff("writhe_transfix") then
        string = "tectonic transfixion " .. snd.target
      else
        string = "shield deface " .. snd.target
        if snd.checkAff("hearing") and not snd.checkAff("sensitivity") then
          string = "osso spur " .. snd.target .. " sensitivity" .. snd.sep .. string
        end
      end
    else
      if snd.balance.battle then
        for i in pairs(snd.giving_spur) do
          if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
            spur = snd.giving_spur[i]
          end
        end
      end
      if snd.used.shield then
        shield = "shield raze"
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.subjugation_attacks[snd.giving_shield[i]]
          end
        end
      end
      if shield == "none" then
        shield = "shield strike"
      end
      if snd.used.rebounding and shield ~= "facesmash" then
        shield = "shield raze"
      end

      for i in pairs(snd.giving_subdue) do
        if
          not snd.checkAff(snd.giving_subdue[i]) and
          subdue == "none" and
          snd.giving_subdue[i] ~= spur
        then
          subdue = snd.giving_subdue[i]
        end
      end

      if spur ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt spur " .. snd.target .. ": " .. spur .. snd.sep
        end
        string = string .. "osso spur " .. spur .. " " .. snd.target .. snd.sep
      end

      string = string .. shield .. " " .. snd.target .. snd.sep

      if not shield:find("slam") then
        if subdue == "none" then
          string = string .. "subdue " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Subdue " .. snd.target .. ": " .. subdue .. snd.sep
          end
          string = string .. "subdue " .. snd.target .. " " .. subdue
        end
      end
    end

    if string.find(string, "deface") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = "quickwield left tower"..string..snd.sep
    end


    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^git$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Smite - Straight damage</name>
								<script>if snd.class == "Earthcaller" then
  snd.giving_spur = {"sensitivity", "stupidity", "vertigo", "self_pity", "migraine", "impatience"}
  snd.giving_subdue =
    {
      "dementia",
      "loneliness",
      "stupidity",
      "hypochondria",
      "recklessness",
      "masochism",
      "paranoia",
      "lethargy",
    }
  snd.starting_attack()

  function snd.attack_function()
  local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
  
  local spur = "none"
  local subdue = "none"
  local overwhelm = false
    
  if snd.balance.battle then
    for i in pairs(snd.giving_spur) do
      if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
        spur = snd.giving_spur[i]
      end
    end
  end
  
  for i in pairs(snd.giving_subdue) do
    if not snd.checkAff(snd.giving_subdue[i]) and subdue == "none" and
      snd.giving_subdue[i] ~= battle
    then
      subdue = snd.giving_subdue[i]
    end
  end  
  
  if snd.checksomeAffs(snd.entangleaffs, 1) then
      overwhelm = true
  end
  
  if snd.balance.battle then
    string = string..snd.sep.."osso spur "..spur.." "..snd.target..snd.sep
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt spur " .. snd.target .. ": " .. spur .. snd.sep .. string
    end
  end

  if snd.mana_percent &lt; 40 and not snd.used.shield then
    string = "osso fragment " .. snd.target
  elseif snd.mana_percent &lt; 40 and snd.used.shield then
    string = "shield raze " .. snd.target .. snd.sep
  elseif overwhelm then
    string = "deface "..snd.target..snd.sep
  else
    string = string.."quash " .. snd.target ..snd.sep
  end
  
  if snd.toggles.affcalling and not snd.target_gone then
    string = string .. "wt subdue " .. snd.target .. ": " .. subdue .. snd.sep
  end
  string = string .. " subdue " .. snd.target .. " " .. subdue
		
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Earthcaller Group Dmg</name>
								<script>local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
local mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

if snd.class == "Earthcaller" then

snd.starting_attack()
function snd.attack_function()

if not snd.waiting.queue then
 local string = ""
 local astring = "" 
 local shield = "none"
 local battle = "none"
 local chasten = "none"
 local tohit = {}
 local string = "contemplate " .. snd.target .. snd.sep 
 local missing = snd.missingAff("stupidity/paresis/anorexia/asthma", "/")
 local total_aff_count = 0
 local mental_aff_count = 0 
 
    for aff in pairs(snd.all_affs) do
      if table.contains(snd.target_has, snd.all_affs[aff]) then total_aff_count = total_aff_count + 1 end
    end
    
    for aff in pairs(snd.mental_affs) do
	   if table.contains(snd.target_has, snd.mental_affs[aff]) then mental_aff_count = mental_aff_count + 1 end
    end
    
    if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string .. "quickwield right "..snd.crozier.. snd.sep end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string .. "quickwield left buckler" .. snd.sep end	
    if not string.find(gmcp.Char.Vitals.wield_left, "tower") then string = string .. "quickwield left tower" .. snd.sep end	
	
  snd.giving_shield = {
  "paresis",
  "asthma",  
  "weariness",
  "confusion",
  "berserking",
  "sight",  
  "writhe_transfix",  
   }
   
  snd.giving_battle = {
   "sensitivity",
   "vertigo",
   "impatience",
   "berserking",   
   "stupidity",
   "self-pity",
   "migraine",
   "anorexia",
  }
  
  snd.giving_chasten = {
   "loneliness",   
   "lethargy",
   "dementia",
   "stupidity",   
   "recklessness",
   "hypochondria",   
   "paranoia",
   "masochism",
   "agony",   
   "anorexia",
  }

	snd.giving = {
		--"sight",
        "asthma",
		"paresis",
		"clumsiness",
		"squelched",
		"shyness",
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		"haemophilia",
		"recklessness",
		"weariness",
		"voyria",
		"dizziness"

		}

    cecho("&lt;yellow&gt; Affs: "..#snd.target_has)


    if mp &gt;= 70 and gmcp.Char.Vitals.hp &lt; gmcp.Char.Vitals.mp and cansip == false then
        string = "nimbleness"..snd.sep.."shift"
    end	

    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "osso fragment " .. snd.target
    end

      --Battle aff pick
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end	  
      	
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
          chasten = snd.giving_chasten[i]
        end
      end
	  
      --Shield aff pick
      if snd.used.shield then
        shield = "shield raze"
        -- If they are prone/psuedo prone and have 5 affs, smack them
      elseif #snd.target_has &gt;= 5 and snd.proned() then
        if not string.find(gmcp.Char.Vitals.wield_left, "tower") then
           shield = "quickwield left tower"..snd.sep.."shield deface " .. snd.target
        else
           shield = "quickwield left buckler"..snd.sep.."shield deface " .. snd.target
        end
        -- We need to build up disrupt/affs.
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.subjugation_attacks[snd.giving_shield[i]]
          end
        end
      end
    	  
      if snd.used.rebounding then
        if snd.checkAff("confusion") or #snd.target_has &lt; 3 then
          shield = "shield raze"
        else
          shield = "dirge hysteria"
        end
      end

    if snd.infiltrate == false or snd.infiltrate == "nil" then		
       string = "osso infiltrate "..snd.target..snd.sep

    elseif snd.checksomeAffs({"agony", "accursed"}, 1) and not snd.checkAff("faulted") then
       string = "tectonic fault "..snd.target..snd.sep  
       
--    elseif snd.checkAff("accursed") and not snd.checkAff("hellsight") then
--       string = "dirge reckoning "..snd.target..snd.sep     
    end
 
      if battle ~= "none" then
        string = string .. "osso spur " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/tectonics/dirge attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
	  
      --Add chasten choice
      if not shield:find("slam") or shield:find("transfix") or shield:find("hysteria") or shield:find("crash") then
        if chasten == "none" then
          string = string .. "subdue " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Subdue " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "subdue " .. snd.target .. " " .. chasten..snd.sep.."contemplate "..snd.target
        end
      end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
end
  snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^gdmg$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Indorani</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Indorani" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "touch hammer "..snd.target
  else
   	string = "decay "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Afflictions</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Group Affliction</name>
								<script>if snd.class == "Indorani" then

  snd.giving = {
  "asthma",
  "aeon",
  "perplexed",
  "impatience",
  "clumsiness",
  "weariness",
  "stupidity",
  "anorexia",
  "epilepsy",
  "sensitivity",
  "vomiting",
  "lethargy",
  "confusion",
  "recklessness",	
  "superstition",
  "hypersomnia",
}
  
  snd.starting_attack()
  
  function snd.attack_function() 
   local string = ""
   local raw_affs_to_fling = {}
   local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
   
   if not snd.waiting.queue then -- all instakill conditions(deform/vivi) or other add ons should go here as elseif.
   
    if snd.used.shield then
  		string = "touch hammer "..snd.target
    -- vivi/deform checks would prolly go here
    
    elseif snd.aff_count_all() &gt; 10 then
      string = "deform "..snd.target
      
    else -- No special attacks, time to run through our aff list defined above and see what we want to give most.
  		for i in pairs(snd.giving) do
  			if not snd.checkAff(snd.giving[i]) then
          if snd.giving[i] == "aeon" then
            if snd.balance.aeon then
              table.insert(raw_affs_to_fling, snd.giving[i])
            end
  				elseif not table.contains(raw_affs_to_fling, snd.giving[i]) then
  					table.insert(raw_affs_to_fling, snd.giving[i]) -- insert into a raw aff list that they don't have, based on priority chosen above
  				end
  			end
  		end
     
      for k, v in ipairs(raw_affs_to_fling) do -- run through the raw affs
        if cards.one.affliction == "" then -- fill in card one, could start with card two if you want to work around dodge CD
          if snd.cardshapes.indorani[v].card == "adder" then
            if not snd.adder_attached then-- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.indorani[v].card
            end
          else
            cards.one.affliction = v
            cards.one.card = snd.cardshapes.indorani[v].card
          end
        elseif cards.one.card ~= snd.cardshapes.indorani[v].card and cards.two.affliction == "" then -- if card types are different and haven't already set card two
          if snd.cardshapes.indorani[v].card == "adder" then
            if not snd.adder_attached then -- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.indorani[v].card
            end
          else
            cards.two.affliction = v
            cards.two.card = snd.cardshapes.indorani[v].card
          end
        end
      end

      -- If the card is an adder venom affliction, convert the affliction to the venom.
      if cards.one.card == "adder" then cards.one.affliction = snd.effects[cards.one.affliction] end
      if cards.two.card == "adder" then cards.two.affliction = snd.effects[cards.two.affliction] end
      
      if snd.need_leech_aura then
  	    string = "leech "..snd.target
      end
      
      if snd.adder_ready then
        string = string..snd.sep.."activate adder "..snd.target
      end
      
      -- Syntax should be the same unless you have arti deck/regular deck, change next line as necessary
  		string = string..snd.sep.."outc blank as "..cards.one.card..snd.sep.."outc blank as "..cards.two.card..snd.sep.."fling "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
  
  	end
    
    	if snd.toggles.affcalling and not snd.target_gone then
    	 call = "wt [Indorani] Afflicting "..snd.target..": "..cards.one.affliction..", "..cards.two.affliction..snd.sep
       string = call..string
    	end
  
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>limbs</name>
								<script>if snd.class == "Indorani" then

  snd.giving = {"left_leg_crippled", "right_leg_crippled","left_arm_crippled", "right_arm_crippled",}
  
  snd.starting_attack()
  
  function snd.attack_function()
    local string = ""
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer "..snd.target
      elseif snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled", "leeched_aura"}, 5) then
        string = "vivsect "..snd.target
      elseif not snd.checksomeAffs(snd.giving, 4) then
        for v in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[v])  then
            string = "shrivel "..snd.target.." "..snd.giving[v]:gsub("_", " "):gsub("crippled", "")
            break
          end
        end
      else
        string = "decay "..snd.target
      end
      
      if snd.need_leech_aura then
        string = "leech "..snd.target..snd.sep..string
      end 

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
  
    end
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Indorani Group Affs</name>
								<script>if snd.class == "Indorani" then

  snd.giving = {
  "asthma",
  "aeon",
  "perplexed",
  "impatience",
  "clumsiness",
  "weariness",
  "stupidity",
  "anorexia",
  "epilepsy",
  "sensitivity",
  "vomiting",
  "lethargy",
  "confusion",
  "recklessness",	
}
  
  snd.starting_attack()
  
  function snd.attack_function()

    local command = ""
    local call = ""
    local touse = {}
    local cstring = ""
    local slstring = ""
    local lstring = ""
    local astring = ""
    local tohit = {}
    local missing = snd.missingAff("stupidity/paresis/anorexia/asthma", "/")  
    local string = ""
    local raw_affs_to_fling = {}
    local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
   
 cecho("&lt;yellow&gt; Affs: "..#snd.target_has)
  
   if not snd.waiting.queue then -- all instakill conditions(deform/vivi) or other add ons should go here as elseif.
   
    if snd.used.shield then
  		string = "touch hammer "..snd.target
    -- vivi/deform checks would prolly go here
      	  
    elseif snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled", "left_arm_crippled", "right_arm_crippled"}, 4) and snd.checkAff("leeched_aura") then 
        string = "vivisect "..snd.target..snd.sep  
	
	elseif not snd.need_leech_aura and snd.deform and snd.aff_count_all() &gt;= 10 then
        string = string..snd.sep.."deform "..snd.target..snd.sep
      
    elseif not snd.deform and snd.checksomeAffs({"paresis", "stupidity", "fallen", "dizziness"}, 2) then
        string = "decay " ..snd.target..snd.sep
      
  	else -- No special attacks, time to run through our aff list defined above and see what we want to give most.
  		for i in pairs(snd.giving) do
  			if not snd.checkAff(snd.giving[i]) then
          if i == "aeon" then
            if snd.balance.aeon then
              table.insert(raw_affs_to_fling, snd.giving[i])
            end
  				elseif not table.contains(raw_affs_to_fling, snd.giving[i]) then
  					table.insert(raw_affs_to_fling, snd.giving[i]) -- insert into a raw aff list that they don't have, based on priority chosen above
  				end
  			end
  		end
     
      for k, v in ipairs(raw_affs_to_fling) do -- run through the raw affs
        if cards.one.affliction == "" then -- fill in card one, could start with card two if you want to work around dodge CD
          if snd.cardshapes.indorani[v].card == "adder" then
            if not snd.adder_attached then-- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.indorani[v].card
            end
          else
            cards.one.affliction = v
            cards.one.card = snd.cardshapes.indorani[v].card
          end
        elseif cards.one.card ~= snd.cardshapes.indorani[v].card and cards.two.affliction == "" then -- if card types are different and haven't already set card two
          if snd.cardshapes.indorani[v].card == "adder" then
            if not snd.adder_attached then -- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.indorani[v].card
            end
          else
            cards.two.affliction = v
            cards.two.card = snd.cardshapes.indorani[v].card
          end
        end
      end

      -- If the card is an adder venom affliction, convert the affliction to the venom.
      if cards.one.card == "adder" then cards.one.affliction = snd.effects[cards.one.affliction] end
      if cards.two.card == "adder" then cards.two.affliction = snd.effects[cards.two.affliction] end
      
      if snd.need_leech_aura then
  	    string = "leech "..snd.target
      end
	  
      if snd.adder_ready then
        string = string..snd.sep.."activate adder "..snd.target
      end
   

      if snd.balance.envelop == true and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled", "left_arm_crippled", "right_arm_crippled", "anorexia", "indifference"}, 2) then
        slstring = string.."order slime envelop "..snd.target..snd.sep
	  end
      
      if snd.balance.chimera == true then cstring = string.."order hound kill "..snd.target..snd.sep.."order chimera headbutt "..snd.target..snd.sep

      elseif snd.balance.chimera == false and snd.deformed == true then cstring = string.."order hound kill " ..snd.target..snd.sep

      elseif snd.balance.chimera == true and snd.deformed == false then cstring = string.."order chimera roar " ..snd.target..snd.sep
	  
	  end

      -- Syntax should be the same unless you have arti deck/regular deck, change next line as necessary
--  		string = string..snd.sep.."outc blank as "..cards.one.card..snd.sep.."outc blank as "..cards.two.card..snd.sep.."fling "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
      string = slstring..cstring..string..snd.sep.."outc blank as "..cards.one.card..snd.sep.."outc blank as "..cards.two.card..snd.sep.."fling "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
      
      call = "wt [Indorani] Afflicting "..snd.target..": "..cards.one.affliction..", "..cards.two.affliction
  
  	end
  
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Praenomen</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
   	string = "frenzy "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Mes feast</name>
								<script>if snd.class == "Praenomen" then
snd.giving_whisper = {
			"impatience",
			"lovers",
			"berserking",
			"stupidity",
			"confusion",
			"recklessness",
			"masochism",
			"anorexia",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"paranoia",
	}
	snd.akkari_lovers(snd.giving_whisper)
snd.starting_attack()
function snd.attack_function()
  local string = ""
  local corpus = "none"
  local touse = {}
  if not table.contains(snd.target_has, "writhe_transfix") then
 		string = "mesmerize "..snd.target
	elseif not table.contains(snd.target_has, "feast") then
		string = "blood feast "..snd.target
	else
    for i in pairs(snd.giving_whisper) do
      if not snd.checkAff(snd.giving_whisper[i]) then
        if not table.contains(touse, snd.giving_whisper[i]) then
      	  table.insert(touse, snd.giving_whisper[i])
        end
      end
    end
  
		string = "feed "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
	end
	
  string = "contemplate "..snd.target..snd.sep..string
 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^feast$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Praenomen Group Dmg</name>
								<script>if snd.class == "Praenomen" then
    snd.giving_whisper = {
        "lovers",
        "impatience",
        "stupidity",
        "recklessness",
        "epilepsy",
        "anorexia",
        "confusion",
        "dementia",
        "berserking",
        "masochism",
        "peace",
        "vertigo",
        "indifference",
        "agoraphobia",
    }
	snd.akkari_lovers(snd.giving_whisper)

    snd.starting_attack()

    function snd.attack_function()

        local string = ""
        local corpus = "none"
        local touse = {}
        local call = ""

        if snd.mana_percent &lt; 35 and not snd.used.shield then --Checking if we could annihilate the last time we contemplated, and trying if we can. Need to add logic to announce mana calls
            string = "annihilate "..snd.target
        else
            for i in pairs(snd.giving_whisper) do
                if not snd.checkAff(snd.giving_whisper[i]) then
                    if not table.contains(touse, snd.giving_whisper[i]) then
                    table.insert(touse, snd.giving_whisper[i])
                    end
                end
            end
        
            string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
        end

    string = "contemplate "..snd.target..snd.sep.."order loyals attack "..snd.target..snd.sep..string --Contemplate target and order loyal to attack it before attacking
    call = "wt Afflicting "..touse[1].." "..touse[2]

    if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
    end

    snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^gdmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Afflictions</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Group Afflictions</name>
								<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local touse = {}
 snd.giving_whisper = {
			"impatience",
			"lovers",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",

	}
  	snd.akkari_lovers(snd.giving_whisper)

			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
			
	if not snd.waiting.queue then
		string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Annhilate and Mesmerize</name>
								<script>if snd.class == "Praenomen" then
snd.giving_whisper = {
			"impatience",
			"lovers",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",
	}
	snd.akkari_lovers(snd.giving_whisper)

snd.starting_attack()
function snd.attack_function()
  local string = ""
  local corpus = "none"
  local touse = {}
  if snd.mana_percent &lt; 35 and not snd.used.shield then
 		string = "annihilate "..snd.target
  elseif snd.proned() then
 		string = "siphon "..snd.target
  elseif table.contains(snd.target_has, "sight") then
 		string = "mesmerize "..snd.target
	else
    for i in pairs(snd.giving_whisper) do
      if not snd.checkAff(snd.giving_whisper[i]) then
        if not table.contains(touse, snd.giving_whisper[i]) then
      	  table.insert(touse, snd.giving_whisper[i])
        end
      end
    end
  
		string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
	end

  string = "contemplate "..snd.target..snd.sep..string
 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^mez$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Praenomen Group Affs</name>
								<script>if snd.class == "Praenomen" then
snd.starting_attack()

function snd.attack_function()
 local string = ""
 local touse = {}
 local gashaff = {}
 local call = ""
 
 snd.giving_whisper = {
 		"lovers",
		"impatience",
 		"recklessness",
		"stupidity", 
 		"masochism",
		"agoraphobia",
 		"confusion",
		"epilepsy",
 		"anorexia",
		"berserking",
 		"vertigo",
 		"dementia",
 		"peace",
		"paranoia",
 		"indifference",

		}
		
snd.scythe_gash = {
		"paralysis",
		"asthma",
		"slickness",
		"anorexia",
		"clumsiness",
		"dizziness",
		"stupidity",
		"weariness",
		
	    }
			snd.akkari_lovers(snd.giving_whisper)


			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end

			for i in pairs(snd.scythe_gash) do
				if not snd.checkAff(snd.scythe_gash[i]) then
					if not table.contains(gashaff, snd.scythe_gash[i]) then
						table.insert(gashaff, snd.scythe_gash[i])
					end
				end
			end

        if snd.mana_percent &lt; 35 and not snd.used.shield then 
            string = "annihilate "..snd.target
        else
		       if snd.used.shield or snd.used.rebounding then
              string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
              call = "Afflicting "..snd.target..": "..touse[1]..snd.sep..", "..touse[2]		   
           else
			        string = "wipe weapon "..snd.sep.."gash "..snd.target.." "..gashaff[1].." lightly"..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target..snd.sep
			        call = "Afflicting "..snd.target..": " ..gashaff[1]..". Whispering: "..touse[1]..", "..touse[2]
			     end
        end

	if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
		string = call..snd.sep.."contemplate "..snd.target..snd.sep.."order loyals attack "..snd.target..snd.sep..string
	end

    if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
    snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Ravager</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Immolation support</name>
								<script>if snd.class == "Ravager" then
  snd.starting_attack()

  function snd.attack_function()
    -- This checks for a present Firefist defense. This is used later during a Firefist check.
    local firefist = false
    if snd.defenses.def_ravage.state == "deffed" then
      firefist = true
    end
    -- This checks for a present Zenith defense. It is used later in Zenith/Flow Handling.
    local zenith = false
    if snd.defenses.def_delirium.state == "deffed" then
      zenith = true
    end
    -- This is a failsafe to take crispy off of a target that has cured ablaze.
    if snd.checkAff("crispy") then
      if not snd.checkaff("ablaze") then
        snd.target_cured("crispy")
      end
    end
    -- This uses crispy to check if they're at the right flame level.
    local immolation_ready = false
    if snd.checkAff("ablaze") then
      if snd.checkAff("crispy") then
        immolation_ready = true
      end
    end
    -- In this mode, we're going to only rely on Purification. It's built to support a quick Immolate.
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer " .. snd.target
        -- OK, so if immolation is ready... we should cast it!	
      elseif immolation_ready then
        string = "invoke extinguish " .. snd.target
        -- OK, so if immolation isn't ready, what next? Heatspear!
      elseif not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
        string = "invoke lance " .. snd.target
      else
        string = "invoke torment " .. snd.target
      end

      if zenith then
        if snd.used.shield then
          string = "touch hammer " .. snd.target
        elseif snd.parried_limb ~= "torso" then
          string = "onslaught " .. snd.target .. " plexus plexus" .. snd.sep .. string
        elseif snd.parried_limb ~= "left arm" then
          string = "onslaught " .. snd.target .. " bully left bully left" .. snd.sep .. string
        else
          string = "onslaught " .. snd.target .. " bully right bully right" .. snd.sep .. string
        end
      end
	
      if gmcp.Char.Vitals.ability_bal == "1" then
        string = "assail " .. snd.target .. " tenderise " .. snd.sep .. string
      end
    end

    if not firefist then
      if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
        if zenith then
          string = "invoke ravage"
        else
          string = "invoke delirium" .. snd.sep .. string
        end
      end
    end

    if immolation_ready then
      string = "invoke extinguish " .. snd.target
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^fire$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Bleed/Damage</name>
								<script>if snd.class == "Ravager" then
  snd.starting_attack()

  function snd.attack_function()
    local firefist = false
    if snd.defenses.def_ravage.state == "deffed" then
      firefist = true
    end
    local zenith = false
    if snd.defenses.def_delirium.state == "deffed" then
      zenith = true
    end
    if snd.checkAff("crispy") then
      if not snd.checkaff("ablaze") then
        snd.target_cured("crispy")
      end
    end
    local immolation_ready = false
    if snd.checkAff("ablaze") then
      if snd.checkAff("crispy") then
        immolation_ready = true
      end
    end
    
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer " .. snd.target
      elseif snd.parried_limb ~= "torso" then
        string = "onslaught " .. snd.target .. " plexus plexus"
      elseif snd.parried_limb ~= "head" then
        if not snd.checkAff("crippled_throat") then
          string = "onslaught " .. snd.target .. " windpipe overpower head"
        else
          string = "onslaught " .. snd.target .. " concussion overpower head"
        end
      elseif snd.parried_limb ~= "left leg" and snd.parried_limb ~= "right leg" then
        string = "onslaught " .. snd.target .. " kneecap left kneecap right"
      elseif snd.parried_limb ~= "left leg" and snd.parried_limb == "right leg" then
        string = "onslaught " .. snd.target .. " kneecap left kneecap left"
      elseif snd.parried_limb ~= "right leg" and snd.parried_limb == "left leg" then
        string = "onslaught " .. snd.target .. " kneecap right kneecap right"
      else
        if snd.parried_limb ~= "left arm" then
          string = "onslaught " .. snd.target .. " bully left bully left"
        end
      end
      
      
      if gmcp.Char.Vitals.ability_bal == "1" then
        if snd.parried_limb ~= "head" and not snd.checkAff("stuttering") then
          string = "assail " .. snd.target .. " slug " .. snd.sep .. string
        else
          string = "assail " .. snd.target .. " butcher " .. snd.sep .. string
        end
      end
      
      
      if zenith then
        if not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
          string = string .. snd.sep .. "invoke lance " .. snd.target
        elseif snd.checkAff("ablaze") then
          string = string .. snd.sep .. "invoke intensify " .. snd.target
        else
          string = string .. snd.sep .. "invoke torment " .. snd.target
        end
      end
      
      if not firefist then
        if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
          if zenith then
            string = "invoke ravage"
          else
            string = "invoke delirium" .. snd.sep .. string
          end
        end
      end
    
      if immolation_ready then
        string = "invoke extinguish " .. snd.target
      end
      
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Revenant</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Wielding</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>wield bashing</name>
								<script>if snd.class == "Revenant" then
snd.send("quickwield both longsword shield")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wbsh$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield zeal</name>
								<script>if snd.class == "Revenant" then
snd.send("quickwield both warhammer")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wzl$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield pvp</name>
								<script>if snd.class == "Revenant" then
snd.send("quickwield both shortsword shortsword.2")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wpvp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield limbs</name>
								<script>if snd.class == "Revenant" then
snd.send("quickwield both mace mace.2")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wlb$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield longswords</name>
								<script>if snd.class == "Revenant" then
snd.send("quickwield both longsword longsword.2")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wls$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>wield damage</name>
								<script>if snd.class == "Revenant" then
snd.send("quickwield both bastard")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^wdmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Righteousness</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>deliver</name>
								<script>if snd.class == "Revenant" then
snd.send("qeb get monolith"..snd.sep.."phantasm retrieve "..matches[2])
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^del (.*)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>resurrection</name>
								<script>if snd.class == "Revenant" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb phantasm reanimate "..matches[2])
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^rez (\w+)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>pilgrimage</name>
								<script>if snd.class == "Revenant" then
  if snd.toggles.attacking then snd.toggle("attacking") end
  if snd.toggles.bashing then snd.toggle("bashing") end
  if snd.toggles.fasthunt then snd.toggle("fasthunt") end
  if snd.have_aff("paresis") then
   snd.send("firstaid elevate paresis")
  end
  snd.send("undefend")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."phantasm sidestep")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^pilg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>latency</name>
								<script>if snd.class == "Revenant" then
  if snd.toggles.attacking then snd.toggle("attacking") end
  if snd.toggles.bashing then snd.toggle("bashing") end
  if snd.toggles.fasthunt then snd.toggle("fasthunt") end
  if snd.have_aff("paresis") then
   snd.send("firstaid elevate paresis")
  end
  snd.send("undefend")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."phantasm sidestep")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^pil$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>retribution stack</name>
								<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"left_leg_crippled",
			"right_leg_crippled",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			"sensitivity",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"asthma",
			"clumsiness",
			"paresis",
			"slickness",
			"stupidity",
			"anorexia",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled_body", "mental_disruption","physical_disruption" },4) then
			string = "cull "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "deceive "..snd.target.." wasi"
      elseif snd.used.shield or snd.used.rebounding then
				string = "deceive "..snd.target..snd.rev_empower(tohit[1])
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade scribe right atdum "..snd.target.." "..snd.rev_empower(tohit[1])..snd.sep.."dpl "..snd.target.." "..snd.rev_empower(tohit[3]).." "..snd.rev_empower(tohit[2])
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ret$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>legs</name>
								<script>if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
  	if not snd.waiting.queue then
  		local string = "" -- we'll load this with our attack string
  		local call = "" -- and this with our affliction call
  		-- next, the afflictions we want to give
  		local touse = {}
  		local tohit = {}
  		-- and in case we don't find enough of them
  		local extraaff = "hemorrhage" 
  		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 100 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 100 then
  			telvi = true
  		end
  		-- set the affs we want to use
  			snd.giving = {
  			"left_arm_crippled",
  			"right_arm_crippled",    
  			"left_leg_crippled",
  			"right_leg_crippled",
        "stupidity",
  			"anorexia",
  			"slickness",
  			"asthma",
  			"paresis",
        "clumsiness",
        "weariness",
  			}
  			
  		-- pick affs from the list above
  		for i in pairs(snd.giving) do
  			-- make sure not to double up paresis and paralysis
  			if not snd.checkAff(snd.giving[i]) then
  				-- and don't add an aff we've already got in the list!
  				if not table.contains(touse, snd.giving[i]) then
  					table.insert(touse, snd.giving[i])
  				end
  			end
  		end
  			
  		-- first and foremost, check if we can retri!
  		if snd.target_impaled then
  			string = "extirpate "..snd.target
  		elseif snd.proned() and not snd.checkAff("writhe_impaled") then 
  			string = "lurk "..snd.target..snd.sep.."transpierce "..snd.target
  		else 
  			-- now let's convert affs to venoms/empowerments
  			for aff in pairs(touse) do
  				table.insert(tohit, snd.effects[touse[aff]])
  			end
  			-- if we didn't find enough stuff to hit with, stick in our filler
  			while #tohit &lt; 3 do
  				table.insert(tohit, extraaff)
  			end
  			-- now to decide what attack to use!
  			if snd.used.shield and snd.used.rebounding then
  				string = "deceive "..snd.target.." wasi"
        elseif snd.used.shield or snd.used.rebounding then
  				string = "deceive "..snd.target..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
  			elseif telvi then
  				string = "blade scribe right telvi "..snd.target..snd.sep.."blade scribe left telvi "..snd.target..snd.sep.."dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
  			else
  				string = "dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
  			end
  		end
  		-- prepend our affliction call, if we need one
  		if snd.toggles.affcalling and not snd.target_gone then
  			string = call..string
  		end
  		-- handle anti-spam and the actual attacking now
  		if string ~= snd.last_attack and not snd.waiting.queue then
  			snd.last_attack = string
  			snd.attack(snd.last_attack)
  			snd.waiting.queue = true
  			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  		end
  	end
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^lgs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>impale mode</name>
								<script>
if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
  	if not snd.waiting.queue then
  		local string = "" -- we'll load this with our attack string
  		local call = "" -- and this with our affliction call
  		local physcount = 0
  		for aff in pairs(snd.physical_affs) do
  			if table.contains(snd.target_has, snd.physical_affs[aff]) then
  				physcount = physcount + 1
  			end
  		end
  		-- next, the afflictions we want to give
  		local touse = {}
  		local tohit = {}
  		-- and in case we don't find enough of them
  		local extraaff = "duskosa"
  		local atdum = false -- can we use atdum?
  		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
  			atdum = true -- yesssssss
  		end
  		-- set the affs we want to use
  			snd.giving = {
        "paresis",
        "clumsiness",
        "asthma",
        "sensitivity",
        "vomiting",
        "allergies",
        "haemophilia",
        "slickness",
        "left_leg_crippled",
  			"right_leg_crippled",
        "anorexia",
        "stupidity",
        --"recklessness",
        --"weariness",
        --"dizziness",
        --"voyria",
        }
  		-- first and foremost, check if we can disembowel!
  		if snd.target_impaled then
  			string = "extirpate "..snd.target
  		-- otherwise, see if we can impale
  		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and atdum then
  			string = "blade scribe left lawid "..snd.target..snd.sep.."blade scribe right lawid "..snd.target..snd.sep.."lurk "..snd.target..snd.sep.."transpierce "..snd.target
  		else -- if not...
  			-- pick affs from the list above
  			for i in pairs(snd.giving) do
  				-- make sure not to double up paresis and paralysis
  				if not snd.checkAff(snd.giving[i]) then
  					-- and don't add an aff we've already got in the list!
  					if not table.contains(touse, snd.giving[i]) then
  						table.insert(touse, snd.giving[i])
  					end
  				end
  			end
  			-- now let's convert affs to venoms/empowerments
  			for aff in pairs(touse) do
  				table.insert(tohit, snd.effects[touse[aff]])
  			end
  			-- if we didn't find enough stuff to hit with, stick in our filler
  			while #tohit &lt; 3 do
  				table.insert(tohit, extraaff)
  			end
  			-- now to decide what attack to use!
  			if snd.used.shield and snd.used.rebounding then
  				string = "deceive "..snd.target.." wasi"
        elseif snd.used.shield or snd.used.rebounding then
  				string = "deceive "..snd.target..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
  			elseif atdum then -- vorpal equiv
  				string = "blade scribe right atdum "..snd.target.." "..snd.rev_empower(tohit[1])..snd.sep.."dpl "..snd.target.." "..snd.rev_empower(tohit[3]).." "..snd.rev_empower(tohit[2])
  				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
  			else
  				string = "dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
  			end
  		end
  		-- prepend our affliction call, if we need one
  		if snd.toggles.affcalling and not snd.target_gone then
  			string = call..string
  		end
  		-- handle anti-spam and the actual attacking now
  		if string ~= snd.last_attack and not snd.waiting.queue then
  			snd.last_attack = string
  			snd.attack(snd.last_attack)
  			snd.waiting.queue = true
  			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  		end
  	end
  end
  snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^im$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>newbie mode</name>
								<script>if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
  	if not snd.waiting.queue then
  		local string = "" -- we'll load this with our attack string
  		local call = "" -- and this with our affliction call
  		-- next, the afflictions we want to give
  		local touse = {}
  		local tohit = {}
  		-- and in case we don't find enough of them
  		local extraaff = "duskosa" -- sacrifice
  		-- set the affs we want to use
  			snd.giving = {
        "oculus",
        "paresis",
        "clumsiness",
        "asthma",
        "sensitivity",
        "vomiting",
        "allergies",
        "haemophilia",
        "slickness",
        "anorexia",
        "stupidity",
        "recklessness",
        "weariness",
        "dizziness",
        "voyria",
        }
  		-- first and foremost, check if we can disembowel!
  		if snd.target_impaled then
  			string = "extirpate "..snd.target
  		-- otherwise, see if we can impale
  		elseif not snd.checkAff("writhe_impaled") and snd.proned() and not snd.checksomeAffs({"writhe_thighlock", "writhe_necklock", "writhe_armpitlock"}, 1) then
  			string = "transpierce "..snd.target
  		else -- if not...
  			-- pick affs from the list above
  			for i in pairs(snd.giving) do
  				-- make sure not to double up paresis and paralysis
  				if not snd.checkAff(snd.giving[i]) then
  					-- and don't add an aff we've already got in the list!
  					if not table.contains(touse, snd.giving[i]) then
  						table.insert(touse, snd.giving[i])
  					end
  				end
  			end
  			-- now let's convert affs to venoms/empowerments
  			for aff in pairs(touse) do
  				table.insert(tohit, snd.effects[touse[aff]])
  			end
  			-- if we didn't find enough stuff to hit with, stick in our filler
  			while #tohit &lt; 3 do
  				table.insert(tohit, extraaff)
  			end
  			-- now to decide what attack to use!
  			if snd.used.shield and snd.used.rebounding then
  				string = "deceive "..snd.target.." wasi"
        elseif snd.used.shield or snd.used.rebounding then
  				string = "deceive "..snd.target..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
  			else
  				string = "dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
  			end
  		end
  		-- prepend our affliction call, if we need one
  		if snd.toggles.affcalling and not snd.target_gone then
  			string = call..string
  		end
  		-- handle anti-spam and the actual attacking now
  		if string ~= snd.last_attack and not snd.waiting.queue then
  			snd.last_attack = string
  			snd.attack(snd.last_attack)
  			snd.waiting.queue = true
  			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  		end
  	end
  end
  snd.attack_function()
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^newb$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>damage</name>
								<script>if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
  	if not snd.waiting.queue then
  		local string = ""
  		if snd.used.rebounding or snd.used.shield then
  			string = "raze "..snd.target
  		elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 then
  			string = "blade scribe left lawid "..snd.target
      end
  			string = string..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."harrow "..snd.target
  		if string ~= snd.last_attack and not snd.waiting.queue then
  			snd.last_attack = string
  			snd.attack(snd.last_attack)
  			snd.waiting.queue = true
  			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  		end
  	end
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>iceblast</name>
								<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  if snd.used.rebounding and snd.used.shield then
--   snd.send("deceive "..snd.target.." wasi")
   string = "raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "deceive "..snd.target.." duskosa"
  else
   string = "blade scribe left telvi "..snd.target..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."harrow "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
--snd.send("engage "..snd.target)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ib$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Bleed/Hemm</name>
								<script>if snd.class == "Revenant" then
  snd.starting_attack()

  function snd.attack_function()
    local string = ""-- we'll load this with our attack string
    local call = ""  -- and this with our affliction call
    
                     -- next, the afflictions we want to give
    local touse = {}
    local tohit = {}
    local extraaff = "wilave" -- and in case we don't find enough of them
    
    local left_crescent = ""
    if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 85 then left_crescent = "blade scribe left lawid "..snd.target end
    
    local right_crescent = "" 
    if tonumber(gmcp.Char.Vitals.charge_right) &gt;= 85 then right_crescent = "blade scribe right lawid "..snd.target end

    
    if not snd.waiting.queue then
      
      snd.giving = {   -- set the affs we want to use
      "hearing", 
      --"haemophilia", 
      "clumsiness",
      "sensitivity"}
       
      -- We really only care about the sensitivity/haemophilia
      -- If they have both, go straight into damage
      if snd.checksomeAffs({"haemophilia", "sensitivity"}, 2) then
        table.insert(touse, "wilave")
        table.insert(touse, "wilave")
        
      else
        -- If that condition isn't met, pick affs from the list above
        for i in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[i]) then
            -- Don't add an aff we've already got in the list!
            if not table.contains(touse, snd.giving[i]) then
              table.insert(touse, snd.giving[i])
            end
          end
        end
      end
      
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      
      -- if we didn't find enough stuff to hit with, stick in hemorrhage.
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end

      if (snd.used.shield and snd.used.rebounding) then -- Double barrier, try to break through both with rsk/wasi.
        string = "deceive " .. snd.target .. " wasi"
        
      elseif (snd.used.shield or snd.used.rebounding) then -- One layer of barrier, rsk w/venom.
        string = "deceive " .. snd.target .. " " .. snd.rev_empower(tohit[1])
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[1]
        
      else -- Send 2 hits with venoms/empowerments
        string = "dpl " .. snd.target .. " " .. snd.rev_empower(tohit[2]) .. " " .. snd.rev_empower(tohit[1])
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[2] .. ", " .. tohit[1]
        
        if left_crescent ~= "" and snd.checkAff("sensitivity") then string = left_crescent..snd.sep..string end
        if right_crescent ~= "" and snd.checkAff("sensitivity") then string = right_crescent..snd.sep..string end 
      end
      
    end
    
    -- prepend our affliction call, if we need one
    if snd.toggles.affcalling and not snd.target_gone then
      string = call .. snd.sep .. string
    end
    
    -- handle anti-spam and the actual attacking now
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bleed$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limb Offenses</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>limbs</name>
								<script>if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
   if not snd.waiting.queue then
    local string = ""
    -- list what limbs to hit
    local limbs = {"left leg", "right leg", "left arm", "right arm"}
  	-- check if we can rupture now!
    local rupture = "none"
  	local atdum = false
  	local call = ""
    local left = "nothing"
  	local right = "nothing"
  
    for limb in ipairs(limbs) do
     if snd.limb_bruising[limbs[limb]] &gt;= 3 then
      rupture = limbs[limb]
     end
    end
    if rupture ~= "none" and not snd.used.shield then -- if rupture is go
     string = "lurk "..snd.target..snd.sep.."hemoclysm "..snd.target.." "..rupture
    else -- can't rupture, needs logic
     -- but can we atdum tho!
     if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
      atdum = true
  	 else
  	  atdum = false
  	 end

  	 if snd.proned() then -- focus legs hard on prone
  	  if snd.parried_limb == "right leg" then
  	   right = "left leg"
  	  elseif snd.parried_limb == "left leg" then
  	   right = "right leg"
  	  else
  	   right = "right leg"
  		 left = "left leg"
  	  end
  	 else -- target not prone
  	  for limb in pairs(limbs) do
  		 -- ignore last parried, last hit, and any limbs being resto'd
  	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
  		  -- if it's a leg that's about to break
  	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
  		   -- if we have atdum and can use it with impunity
  			 if atdum and not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
  			  if right == "nothing" then
  			   right = limbs[limb]
  			  elseif left == "nothing" then
  			   left = limbs[limb]
  			  end
  				-- otherwise leave the prepped leg alone!
  		   end
  			 -- if it's not a leg about to break, go for it
  		  elseif right == "nothing" then
  		   right = limbs[limb]
  	    elseif left == "nothing" and limbs[limb] ~= right then
  	     left = limbs[limb]
  		  end
  	   end
  	  end
  	 end
  	 if left == "nothing" then -- we only found one limb to hit
  	  left = right -- double up!
  	 end
  	 -- end limb picking logic
  	 -- on to attacking logic!
  	 if snd.used.shield and snd.used.rebounding then -- baddie is turtling
      string = "raze "..snd.target -- raze has static balance cost
  	 elseif snd.used.shield or snd.used.rebounding then
      string = "target nothing with left"..snd.sep.."target "..right.." with right"..snd.sep.."deceive "..snd.target.." lura"
  	 -- here's the tricky part, we're checking for optimal conditions
  	 -- we need atdum ready, a leg about to break, and resto poultice off balance
  	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
  	  if left == "left leg" then right = "right leg" end
  	  if left == "right leg" then right = "left leg" end
  	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." lura baludu"
  	 -- we could also meet the same conditions, but on the other limb we picked
  	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
  	  if right == "left leg" then left = "right leg" end
  	  if right == "right leg" then left = "left leg" end
  	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." baludu lura"
  	 else -- we can't do a Big Bad Break, run normal logic
  	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dpl "..snd.target.." lura lura"
     end
  	end
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
  snd.send("engage "..snd.target)
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>ice blast limbs</name>
								<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  -- list what limbs to hit
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can rupture now!
  local rupture = "none"
	local atdum = false
	local call = ""
  local left = "nothing"
	local right = "nothing"
  
  for limb in ipairs(limbs) do
   if snd.limb_bruising[limbs[limb]] &gt;= 3 then
    rupture = limbs[limb]
   end
  end
  if rupture ~= "none" and not snd.used.shield then -- if rupture is go
   string = "lurk "..snd.target..snd.sep.."hemoclysm "..snd.target.." "..rupture
  else -- can't rupture, needs logic
   -- but can we atdum tho!
   if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
    atdum = true
	 else
	  atdum = false
	 end

	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 else -- target not prone
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- if we have atdum and can use it with impunity
			 if atdum and not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
			  if right == "nothing" then
			   right = limbs[limb]
			  elseif left == "nothing" then
			   left = limbs[limb]
			  end
				-- otherwise leave the prepped leg alone!
		   end
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 -- end limb picking logic
	 -- on to attacking logic!
	 if snd.used.shield and snd.used.rebounding then -- baddie is turtling
    string = "raze "..snd.target -- raze has static balance cost
	 elseif snd.used.shield or snd.used.rebounding then
    string = "target nothing with left"..snd.sep.."target "..right.." with right"..snd.sep.."deceive "..snd.target.." lura"
	 -- here's the tricky part, we're checking for optimal conditions
	 -- we need atdum ready, a leg about to break, and resto poultice off balance
	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
	  if left == "left leg" then right = "right leg" end
	  if left == "right leg" then right = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." lura baludu"
	 -- we could also meet the same conditions, but on the other limb we picked
	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
	  if right == "left leg" then left = "right leg" end
	  if right == "right leg" then left = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." baludu lura"
	 else -- we can't do a Big Bad Break, run normal logic
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dpl "..snd.target.." lura lura"
   end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^lb$</regex>
							</Alias>
						</AliasGroup>
						<Alias isActive="yes" isFolder="no">
							<name>Revenant Group Dmg Stun (Get Vardrax Venom)</name>
							<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local physcount = 0
		for aff in pairs(snd.physical_affs) do
			if table.contains(snd.target_has, snd.physical_affs[aff]) then
				physcount = physcount + 1
			end
		end
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "wilave"
		local atdum = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "clumsiness",
      "paresis",     
      "sensitivity",
      "left_leg_crippled",
      "right_leg_crippled",      
      "asthma",      
      "vomiting",
      "allergies",
      "sensitivity",
      "haemophilia",
      "slickness",

      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "extirpate"
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and atdum then
			string = "chirography blade scribe left lawid "..snd.target..snd.sep.."chirography blade scribe right lawid "..snd.target..snd.sep.."chirography lurk "..snd.target..snd.sep.."transpierce "..snd.target
		elseif snd.balance.anguish and not snd.checksomeAffs({"deadening", "hearing"}, 2) then
      string = "DPL "..snd.target.." prefarar vardrax"..snd.sep.."anguish " ..snd.target
        
        else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "deceive "..snd.target.. " "..snd.rev_empower(tohit[1])
			elseif snd.used.rebounding then
				string = "DPL "..snd.target.." wasi "..snd.rev_empower(tohit[1])
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif atdum then
				string = "blade scribe right atdum "..snd.target.." "..snd.rev_empower(tohit[1])..snd.sep.."DPL "..snd.target.." "..snd.rev_empower(tohit[3]).." "..snd.rev_empower(tohit[2])
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "DPL "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^gdmg$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Revenant Group Dmg Stun (No Vardrax Venom)</name>
							<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local physcount = 0
		for aff in pairs(snd.physical_affs) do
			if table.contains(snd.target_has, snd.physical_affs[aff]) then
				physcount = physcount + 1
			end
		end
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "wilave"
		local atdum = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 90 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 90 then
			iyedlo = true -- yesssssss      
		end
          
		end
		-- set the affs we want to use
			snd.giving = {
      "clumsiness",
      "paresis",     
      "sensitivity",
      "asthma",      
      "vomiting",
      "allergies",
      "sensitivity",
      "haemophilia",
      "slickness",
      "left_leg_crippled",
      "right_leg_crippled",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "extirpate"
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and atdum then
			string = "chirography blade scribe left lawid "..snd.target..snd.sep.."chirography blade scribe right lawid "..snd.target..snd.sep.."chirography lurk "..snd.target..snd.sep.."transpierce "..snd.target
		elseif snd.balance.anguish and not snd.checkAff("hearing") then
      string = "DPL "..snd.target.." prefarar prefarar"..snd.sep.."anguish " ..snd.target
        
        else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "deceive "..snd.target.. " "..snd.rev_empower(tohit[1])
			elseif snd.used.rebounding then
				string = "DPL "..snd.target.." wasi "..snd.rev_empower(tohit[1])
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif iyedlo then      
				string = "blade scribe iyedlo"..snd.sep.."DPL "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])..snd.sep   
      else
				string = "DPL "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
      end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^gimp$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Blender Alias (Wield a 2-handed)</name>
							<script>if snd.class == "Revenant" then
   snd.send("riving umbrage wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave")
end
   
</script>
							<command></command>
							<packageName></packageName>
							<regex>^arc$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Sciomancer</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Affliction</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Group Affliction</name>
								<script>if snd.class == "Sciomancer" then
  snd.starting_attack()
    function snd.attack_function()
     if not snd.waiting.queue then
      local string = ""
      local gstring = ""
      local call = ""
      local astring = ""
      local paystring = ""
    	local health = 100*(gmcp.Char.Vitals.maxhp)
      
      cecho("&lt;red&gt;\n"..snd.gravity.." " ..tonumber(gmcp.Char.Vitals.shadowprice))
    		
    	if not snd.checksomeAffs({"impede","imbued"}, 2) and not snd.used.shield then 
        gstring = "gravity imbue " ..snd.target..snd.sep.."gravity impede " ..snd.target..snd.sep 
      else 
        gstring = "" 
      end
      if snd.repay  &lt; 2 and tonumber(gmcp.Char.Vitals.shadowprice) &gt;= 3 and not snd.checkAff("gloom") then 
        paystring = "cast repay"..snd.sep 
      elseif snd.repay &lt; 1 and tonumber(gmcp.Char.Vitals.shadowprice) == 4 then
        paystring = "cast repay"..snd.sep
      else 
        paystring = "" 
      end
    
    	if snd.used.shield then
        if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice hew "..snd.target..snd.sep
          else
       	astring = astring.."cast hew "..snd.target..snd.sep
        end
    	elseif not snd.checkAff("voidgaze") and tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice voidgaze "..snd.target..snd.sep
      elseif not snd.checksomeAffs({"nyctophobia","haemophilia"},2) then
          astring = astring.."cast falter " ..snd.target..snd.sep     
      elseif not snd.checksomeAffs({"vomiting","haemophilia"},1) then
        if not snd.checkAff("gloom") and tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice gloom " ..snd.target..snd.sep.."cast fever " ..snd.target..snd.sep
        else
          astring = astring.."cast fever " ..snd.target..snd.sep
        end
      elseif not snd.checksomeAffs({"clumsiness","weariness","lethargy","paresis"},2) then
        if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 3 and not snd.checkAff("gloom") then
          astring = astring.."shadowprice gloom " ..snd.target..snd.sep.."shadowprice ruin " ..snd.target..snd.sep
        elseif tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice ruin " ..snd.target..snd.sep
        else
          astring = astring.."cast ruin " ..snd.target..snd.sep
        end
       else
        if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice falter " ..snd.target..snd.sep
          else
          string = astring.."cast falter " ..snd.target..snd.sep
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
      string = paystring..gstring..astring
       snd.last_attack = string
       snd.attack(snd.last_attack)
       snd.waiting.queue = true
       tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
     end
  end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gaff$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Afflictions</name>
								<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."cast hew "..snd.target
  elseif not snd.checkAff("gloom") then
		if hasSkill("Fever") then
			if gmcp.Char.Vitals.shadowprice &lt; "2" then
				string = string.."shadowprice gloom "..snd.target..snd.sep.."cast fever "..snd.target
			else
				string = string.."cast gloom "..snd.target
			end
		else
			if gmcp.Char.Vitals.shadowprice &lt; "2" then
				string = string.."shadowprice gloom "..snd.target
			else
				string = string.."cast gloom "..snd.target
			end
		end
	elseif not snd.checksomeAffs({"clumsiness", "weariness", "lethargy", "paresis"}, 1) then
		if gmcp.Char.Vitals.shadowprice &lt; "2" then
			string = string.."shadowprice ruin "..snd.target
		else
			string = string.."cast ruin "..snd.target
		end
  elseif snd.checkAff("sight") and not snd.checkAff("voidtrapped") then
		string = string.."cast voidgaze " ..snd.target..snd.sep
	elseif not snd.checksomeAffs({"vomiting", "haemophilia"}, 1) and hasSkill("Fever") then
		string = string.."cast fever "..snd.target
  else
   	string = string.."cast scourge "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Sciomancer Group Dmg</name>
								<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local gstring = ""
  local call = ""
  local astring = ""
  local paystring = ""
	local health = 100*(gmcp.Char.Vitals.maxhp)
  
  	cecho("&lt;red&gt;\n"..snd.gravity.." " ..tonumber(gmcp.Char.Vitals.shadowprice))
		
--			if not snd.checksomeAffs({"impede","imbued"}, 2) and not snd.used.shield then gstring = "gravity imbue " ..snd.target..snd.sep.."gravity impede " ..snd.target..snd.sep else gstring = "" end
      if snd.repay  &lt; 2 and tonumber(gmcp.Char.Vitals.shadowprice) &gt;= 3 and not snd.checkAff("gloom") then paystring = "cast repay"..snd.sep elseif snd.repay&lt;1 and tonumber(gmcp.Char.Vitals.shadowprice) == 4 then paystring = "cast repay"..snd.sep else paystring = "" end

	if snd.used.shield then
    if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice hew "..snd.target..snd.sep
      else
   	astring = astring.."cast hew "..snd.target..snd.sep
    end
	elseif not snd.checkAff("voidgaze") and tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice voidgaze "..snd.target..snd.sep
  elseif not snd.checksomeAffs({"nyctophobia","haemophilia"},2) then
      astring = astring.."cast falter " ..snd.target..snd.sep     
  elseif not snd.checksomeAffs({"vomiting","haemophilia"},1) then
    if not snd.checkAff("gloom") and tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice gloom " ..snd.target..snd.sep.."cast fever " ..snd.target..snd.sep
    else
      astring = astring.."cast fever " ..snd.target..snd.sep
    end
  elseif not snd.checksomeAffs({"clumsiness","weariness","lethargy","paresis"},2) then
    if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 3 and not snd.checkAff("gloom") then
      astring = astring.."shadowprice gloom " ..snd.target..snd.sep.."shadowprice ruin " ..snd.target..snd.sep
    elseif tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice ruin " ..snd.target..snd.sep
    else
      astring = astring.."cast ruin " ..snd.target..snd.sep
    end
   else
    if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice falter " ..snd.target..snd.sep
      else
      string = astring.."cast falter " ..snd.target..snd.sep
  end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
  string = paystring..astring
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gdmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Basic Damage</name>
								<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."cast hew "..snd.target
  elseif snd.checkAff("writhe_transfix") then
		if not snd.checkAff("gloom") then
			if hasSkill("Fever") then
				if gmcp.Char.Vitals.shadowprice &lt; "2" then
					string = string.."shadowprice gloom "..snd.target..snd.sep.."cast fever "..snd.target
				else
					string = string.."cast gloom "..snd.target
				end
			else
				if gmcp.Char.Vitals.shadowprice &lt; "2" then
					string = string.."shadowprice gloom "..snd.target
				else
					string = string.."cast gloom "..snd.target
				end
			end
		end
  else
   		if hasSkill("Transfix") then
				string = string.."cast transfix "..snd.target
			else
				string = string.."cast rot "..snd.target
			end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limb</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Limbs</name>
								<script>if snd.class == "Sciomancer" then
  snd.starting_attack()
  function snd.attack_function()
    local string = ""
    if not snd.waiting.queue then
      limbs = {"left leg", "right leg", "left arm", "right arm"}
      for limb in pairs(limbs) do
      -- ignore last hit and any limbs being resto'd
        if
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end

	if snd.used.shield then
   string = string.."cast hew "..snd.target
	elseif gmcp.Char.Vitals.singularity == "" then
		if hasSkill("Genesis") then
			string = string.."gravity genesis tether"
		else
			string = string.."gravity singularity"
		end
  elseif snd.gravity &lt; 5 then
		string = string.."gravity grip "..snd.target
  else
		if not snd.checkAff(targ:gsub(" ","_").."_crippled") then
			string = string.."gravity erupt "..snd.target..targ
		else
			if hasSkill("Transfix") then
				string = string.."cast transfix "..snd.target
			else
				string = string.."cast chill "..snd.target
			end
		end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Teradrim</name>
						<script>--If checking for sand in room use the following 

-- table.contains(gmcp.Room.Info.details, "sandy")</script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Afflictions</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Basic Aff</name>
								<script>if snd.class == "Teradrim" then
  snd.starting_attack()

  function snd.attack_function()
    local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm)
    local string = ""
    
    if not snd.waiting.queue then
      if not table.contains(gmcp.Room.Info.details, "sandy") then
        string = "sand flood"
      -- If you don't have sandstorm up, let's do it.
      elseif sandstorm == 0 and hasSkill("Sandstorm") then
        string = "sand storm"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."earth impale "..snd.target
      -- If shielded or rebounding, strip it.
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Slice") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          if snd.used.shield and snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."sand slice "..snd.target
          else
            string = "sand slice "..snd.target.." storm"..snd.sep.."earth batter " .. snd.target
          end
        else
          string = "sand slice " .. snd.target
        end
      -- Let's get slough going to limit usage of poultices.
      elseif not snd.checkAff("slough") and hasSkill("Curse") then -- slough prevents poultices from being applied, like slickness
        -- Let's try to give heartflutter and stun if we can. 
        -- If we have sandstorm, let's give some affs and damage torso.
        -- If all else fails, let's just give those affs.
        if (snd.balance.earthenwill and hasSkill("Engulf")) and (sandstorm &gt;= 3 and hasSkill("Sandstorm")) and hasSkill("Gutsmash") then
          string = "prepare earthenwill heartpunch"..snd.sep.."sand curse "..snd.target.." storm"..snd.sep.."earth gutsmash "..snd.target
        elseif (sandstorm &gt;= 3 and hasSkill("Sandstorm")) and hasSkill("Gutsmash") then
          string = "sand curse "..snd.target.." storm"..snd.sep.."earth gutsmash "..snd.target
        else
          string = "sand curse "..snd.target
        end
      -- if they are proned, let's go ahead and try to give collapsed lung to punish for smoking
      elseif (snd.proned() and hasSkill("Pulp")) and not snd.checkAff("collapsed_lung") then
         string = string.."earth pulp "..snd.target
      -- If we get slough up, let's throw out some useful group affs going.
      elseif snd.checksomeAffs({"recklessness", "dizziness", "sensitivity", "epilepsy", "stupidity"},4) and hasSkill("Whip") then
        string = "sand whip "..snd.target
      -- If we have gotten slough on the target, let's break some limbs. Those are affs too.
      elseif not snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},4) and hasSkill("Scourge") then
        string = "sand scourge " .. snd.target
      -- All else, let's just smack
      else
        string = "earth  batter " .. snd.target
      end
    
      -- If your golem isn't attacking, get it attacking.
      if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
      end
      
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^aff$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Basic Group Damage</name>
								<script>if snd.class == "Teradrim" then
  snd.starting_attack()
  
  function snd.attack_function()
    local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm)
    local string = ""
    
    if not snd.waiting.queue then
      -- if they are impaled, let's do some damage
      if snd.target_impaled and hasSkill("Stonevice") then
        string = "earth stonevice"
      -- If there is no fog, let's get it going.
      elseif not table.contains(gmcp.Room.Info.details, "sandy") then
        string = "sand flood"
      -- If you don't have sandstorm up, let's do it.
      elseif sandstorm == 0 and hasSkill("Sandstorm") then
        string = "sand storm"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."earth impale "..snd.target
      -- If shielded or rebounding, strip it.
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Slice") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          if snd.used.shield and snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."sand slice "..snd.target
          elseif snd.used.shield or snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."earth overhand " .. snd.target            
          end
        else
          string = "sand slice " .. snd.target
        end
      -- Did you happen to strip their lev and they are not proned? Let's prone them!
      elseif not snd.proned() and snd.lev_gone and hasSkill("Shockwave") then
         string = string.."earth shockwave "..snd.target      
    	-- If you can impale them, let's do it, so long as no one else has.
      elseif not snd.target_impaled and snd.proned() and hasSkill("Impale") then
        if sandstorm &gt;= 3 then
          string = "sand scourge "..snd.target.." storm"..snd.sep.."earth impale"
        else
          string = "earth impale"
        end
      -- They prone and have two limbs broken? Cool, let's try to damage some limbs more and generally damage them cause of it.
      elseif snd.proned() and snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},2) and hasSkill("Quake") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          string = "sand scourge "..snd.target.." storm"..snd.sep.."earth quake"
        else
          string = "earth quake"
        end
      -- Let's go ahead and start damaging their head if they aren't parrying it.
      elseif snd.parried_limb ~= "head" and hasSkill("Shred") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          string = "sand shred "..snd.target.." head storm"..snd.sep.."earth batter "..snd.target
        else
          string = "sand shred "..snd.target.." head"
        end
      -- Otherwise, let's just batter them.
      else
        string = "earth batter "..snd.target
      end
  
    -- If your golem isn't attacking, get it attacking.
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep..string
    end
    
    if snd.balance.earthenwill and hasSkill("Earthenwill") then
      string = "prepare earthenwill"..snd.sep..string
    end
  
    if snd.balance.momentum and hasSkill("Momentum") then
      string = "earth momentum"..snd.sep..string
    end
  
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Limbs</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Basic Group Limbs</name>
								<script>if snd.class == "Teradrim" then -- Note that this is intended for groups, not 1v1
  snd.starting_attack()
  
  function snd.attack_function()
    local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm)
    local string = ""
    
    if not snd.waiting.queue then
    
      -- If target is impaled, let's do some damage.
 		  if snd.target_impaled and hasSkill("Stonevice") then
        string = "earth stonevice"
      -- If there is no fog, let's get it going.
      elseif not table.contains(gmcp.Room.Info.details, "sandy") then
        string = "sand flood"
      -- If you don't have sandstorm up, let's do it.
      elseif sandstorm == 0 and hasSkill("Sandstorm") then
        string = "sand storm"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."earth impale "..snd.target
      -- They shielded and rebounded? Try to remove both. But if they only have one, strip it and then strip levitation. 
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Slice") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          if snd.used.shield and snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."sand slice "..snd.target
          elseif snd.used.shield or snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."earth overhand " .. snd.target            
          end
        else
          string = "sand slice " .. snd.target
        end
      -- We want levitation gone for more damage. Let's try quicksand to make it so they can't put it up fast if it's not gone yet.
      -- If we can't quicksand, roll with overhand.
      elseif not snd.lev_gone then
        if hasSkill("Quicksand") and snd.proned() then
          string = string.."sand quicksand "..snd.target
        elseif hasSkill("Overhand") then
         string = string.."earth overhand "..snd.target
        end
      -- If they are not prone and no levitation, capsize them. This'll break 3 limbs regardless of bruises.
      elseif (not snd.proned() and snd.lev_gone) and hasSkill("Shockwave") then
         string = string.."earth shockwave "..snd.target      
    	-- Let's try to give them slough, that way it's harder to heal limbs. Also, batter if you can storm it.
    	elseif (not snd.checkAff("slough") and hasSkill("Curse")) then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          string = string.."sand curse "..snd.target.." storm"..snd.sep.."earth batter "..snd.target
        else
          string = string.."sand curse "..snd.target
        end
      -- Straight try to break all four limbs to help support limbs in the group.
      elseif not snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},4) and hasSkill("Scourge") then
        string = string.."sand scourge " .. snd.target
      else 
        string = "earth batter "..snd.target
  	  end
  
      -- If your synth isn't attacking, get it attacking.
      if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
      end
    
      if snd.balance.earthenwill and hasSkill("Earthenwill") then
        string = "prepare earthenwill"..snd.sep..string
      end
  
      if snd.balance.momentum and hasSkill("Momentum") then
        string = "earth momentum"..snd.sep..string
      end
		
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end
  
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^limbs$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Bloodborn</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Damage Offense</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>order loyals aggro</name>
								<script>send("order cholerisk kill "..snd.target)</script>
								<command></command>
								<packageName></packageName>
								<regex>^ock</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>order loyals passive</name>
								<script>send("order loyals passive")</script>
								<command></command>
								<packageName></packageName>
								<regex>^ocp</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Freeze</name>
								<script>if snd.class == "Bloodborn" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      -- next, the afflictions we want to give
      local touse = {}
      local tohit = {}
      local stalled = false
      if snd.defenses.def_arrhythmia.state == "deffed" then
        stalled = true
      end

      local extraaff = ""
      snd.giving = {"anorexia"}
      for i in pairs(snd.giving) do
        -- make sure not to double up paresis and paralysis
        if not snd.checkAff(snd.giving[i]) then
          -- and don't add an aff we've already got in the list!
          if not table.contains(touse, snd.giving[i]) then
            table.insert(touse, snd.giving[i])
          end
        end
      end
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      -- if we didn't find enough stuff to hit with, stick in our filler
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("excess_phlegm") then
        string = "well imbrue "
      elseif snd.glimpse == "none" and snd.checkAff("excess_phlegm") then
        string = "well actualize " .. snd.target .. " phlegm"
      elseif snd.used.shield or 
			(snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"},1) or snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned() then
				string = "humour perforate " .. snd.target
      elseif snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "well palpitate " .. snd.target
        end
        if gmcp.Char.Vitals.aspect == "phlegm" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "well arrhythmia 3 plunge " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("frostbite") and not snd.checkAff("excess_phlegm") then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            else
              string = string .. snd.sep .. "humour plunge " .. snd.target
						end
          end
        elseif gmcp.Char.Vitals.aspect == "yellow" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "well arrhythmia 3 brainfreeze " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("frostbite") and not snd.checkAff("excess_phlegm") then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "humour revulsion " .. snd.target .. " euphoriant"
						else
							string = string .. snd.sep .. "humour swathe " .. snd.target
            end
          end
        elseif gmcp.Char.Vitals.aspect == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "well arrhythmia 3 swathe " .. snd.target
            end
          elseif stalled then
           if snd.checkAff("shivering") and not snd.checkAff("frostbite") and not snd.checkAff("excess_phlegm") then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "humour revulsion " .. snd.target .. " euphoriant"
						elseif not snd.checkAff("masochism") then
							string = string .. snd.sep .. "humour brainfreeze " ..snd.target
						else
							string = string .. snd.sep .. "humour swathe " ..snd.target
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^freeze</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Damage</name>
								<script>if snd.class == "Bloodborn" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
			
	if snd.glimpse == "none" and snd.checkAff("stormtouched") and not snd.glimpsing then
		string = "well suffocate"
	elseif snd.glimpse == "none" and not snd.checkAff("stormtouched") then
		string = "well profane"
	end

	if snd.checkAff("stormtouched") and not snd.used.shield then
		string = string..snd.sep.."humour synape "..snd.target
  elseif snd.used.shield or snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) or (snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned() then
				string = "humour perforate " .. snd.target
	else
  	if snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
  	
  		if gmcp.Char.Vitals.ability_bal == "1" then
  			string = "well palpitate "..snd.target
  		end
  		
  		if gmcp.Char.Vitals.aspect == "none" or gmcp.Char.Vitals.aspect == "phlegm" then
  			string = string..snd.sep.."well contaminate yellowbile"
  		end
  
  		if gmcp.Char.Vitals.aspect == "yellow" then
  			string = string..snd.sep.."humour perforate "..snd.target
  		end
  
  		if gmcp.Char.Vitals.aspect == "black" then
  			string = string..snd.sep.."humour retch "..snd.target
  		end
	end
end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dmg</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Single Shatter</name>
								<script>if snd.class == "Bloodborn" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      local limbs = {"left leg", "right leg", "left arm", "right arm"}
      local targ = "nothing"
      local stalled = false
      if snd.defenses.def_arrhythmia.state == "deffed" then
        arrhythmia = true
      end
      for limb in pairs(limbs) do
        -- ignore last parried, last hit, and any limbs being resto'd
        if
          limbs[limb] ~= snd.parried_limb and
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbite") then
        string = "well imbrue"
      elseif snd.glimpse == "none" and snd.checkAff("frostbite") then
        string = "well actualize " .. snd.target .. " phlegm"
      elseif snd.used.shield == true then
        string = "humour perforate " .. snd.target
      elseif snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "well palpitate " .. snd.target
        end
        if gmcp.Char.Vitals.aspect == "phlegm" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("frostbite") and
              not snd.checkAff("excess_phlegm")
            then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            else
              string = string .. snd.sep .. "humour disgorge " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.aspect == "yellow" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("frostbite") and
              not snd.checkAff("excess_phlegm")
            then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            else
              string = string .. snd.sep .. "humour disgorge " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.aspect == "black" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " " .. targ
            end
          elseif stalled then
            --not snd.direfrost and not snd.checkAff("frostbrand") then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("frostbite") and
              not snd.checkAff("excess_phlegm")
            then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            else
              string = string .. snd.sep .. "humour disgorge " .. snd.target .. " " .. targ
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^sshatter</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Affs</name>
								<script>if snd.class == "Bloodborn" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}

		local extraaff = ""
		
			snd.giving = {
			"clumsiness",
			"paresis",
			"haemophilia",
			"asthma",
			"slickness",
			"anorexia",
			"stupidity",
			}
			
	for i in pairs(snd.giving) do
		-- make sure not to double up paresis and paralysis
		if not snd.checkAff(snd.giving[i]) then
			-- and don't add an aff we've already got in the list!
			if not table.contains(touse, snd.giving[i]) then
				table.insert(touse, snd.giving[i])
			end
		end
	end
	-- now let's convert affs to venoms/empowerments
	for aff in pairs(touse) do
		table.insert(tohit, snd.effects[touse[aff]])
	end
	-- if we didn't find enough stuff to hit with, stick in our filler
	while #tohit &lt; 3 do
		table.insert(tohit, extraaff)
	end
			
	if snd.glimpse == "none" and not snd.checkAff("excess_melancholic") and not snd.glimpsing then
		string = "well suffocate"
	elseif snd.glimpse == "none" and snd.checkAff("excess_melancholic") then
		string = "well actualize "..snd.target.." black"
	end

	if snd.checkAff("stormtouched") then
		string = string..snd.sep.."humour synape "..snd.target
	elseif snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
	
		if snd.checkAff("vertigo") then
			string = "well palpitate "
		end
		
		if gmcp.Char.Vitals.aspect == "" or gmcp.Char.Vitals.aspect == "none" or gmcp.Char.Vitals.aspect == "yellow" then
			string = "well contaminate blackbile"
		end

		if gmcp.Char.Vitals.aspect == "phlegm" then
			if snd.defenses.def_arrhythmia.state ~= "deffed" then
				string = string..snd.sep.."well arrhythmia 3 equilibrium "..snd.target
			elseif snd.defenses.def_arrhythmia.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."humour perforate "..snd.target
				else
					if snd.checksomeAffs({"dizziness", "stupidity"},2) then
						string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."humour synape "..snd.target
					end
				end
			end

		elseif gmcp.Char.Vitals.aspect == "black" then
			if snd.defenses.def_arrhythmia.state ~= "deffed" then
				if snd.checksomeAffs({"dizziness", "stupidity"},2) and not snd.proned then
					string = string..snd.sep.."well arrhythmia 3 flense "..snd.target.." "..tohit[2]
				else
					string = string..snd.sep.."well arrhythmia 3 stupor "..snd.target
				end
			elseif snd.defenses.def_arrhythmia.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."humour perforate "..snd.target
				elseif snd.proned then
					if snd.checksomeAffs({"lethargy", "confusion"},2) then
						string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."humour swathe "..snd.target
					end
				elseif not snd.proned then
					if snd.checksomeAffs({"masochism", "stupidity"},2) then
						string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."humour brainfreeze "..snd.target
					end
				end
			end
		end

end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^affs</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Fire</name>
								<script>if snd.class == "Bloodborn" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local limbs = {"head", "left leg", "torso", "right leg", "left arm", "right arm"}
		local targ = "nothing"
		
		for limb in pairs(limbs) do
			-- ignore last parried, last hit, and any limbs being resto'd
			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and limbs[limb] ~= snd.resto_limb then
				if targ == "nothing" then
					targ = limbs[limb]
				end
			end
		end
			
	if snd.used.shield then
		string = string..snd.sep.."humour perforate "..snd.target
	end
			
	if snd.glimpse == "none" and not snd.glimpsing then
		string = "well profane"
	end

	if snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
	
		if gmcp.Char.Vitals.ability_bal == "1" then
			string = "well palpitate "..snd.target
		end
		
		if gmcp.Char.Vitals.aspect ~= "yellow" then
			string = string..snd.sep.."well contaminate yellow"
		end
		
		if gmcp.Char.Vitals.aspect == "yellow" then
			if snd.defenses.def_arrhythmia.state ~= "deffed" then
				string = string..snd.sep.."well arrhythmia 3 disgorge "..snd.target.." "..targ
			else
				string = string..snd.sep.."humour disgorge "..snd.target.." "..targ
			end
		end

	end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
	
end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^fire$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Retch</name>
								<script>send("qeb humour retch "..snd.target..""..snd.sep.."humour retch "..snd.target)</script>
								<command></command>
								<packageName></packageName>
								<regex>^retch</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Group</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Group</name>
								<script>if snd.class == "Ascendril" then
  snd.starting_attack()
  function snd.attack_function()
    if not snd.waiting.queue then
  		local string = ""
  		local call = "" 
      local can_we_stall = false; if snd.defenses.def_arrhythmia.state ~= "deffed" then can_we_stall = true end
  		local can_we_flare = false; if gmcp.Char.Vitals.ability_bal ==  "1" then can_we_flare = true end
      local aspect = gmcp.Char.Vitals.aspect
      local random_limb = {"right leg", "right arm", "left leg", "left arm", "head", "torso"}
  		local touse = {}
  		local tohit = {}
      
  		local extraaff = "epseth"
  		
  		snd.giving = {                                             
  			"asthma",
  			"slickness",
  			"anorexia",
  			"stupidity",
        "weariness",
        "dizziness",
        "vomiting",
        "recklessness",
        }
  			
    	for i in pairs(snd.giving) do
    		if not snd.checkAff(snd.giving[i]) then
    			if not table.contains(touse, snd.giving[i]) then
    				table.insert(touse, snd.giving[i])
    			end
    		end
    	end
     
    	for aff in pairs(touse) do
    		table.insert(tohit, snd.effects[touse[aff]])
    	end
     
    	while #tohit &lt; 3 do
    		table.insert(tohit, extraaff)
    	end
    			
    	if snd.glimpse == "none" and not snd.glimpsing then
    		--string = "well suffocate"
    	end
    
    	if snd.glimpse == "none" then
    	
    		if can_we_flare and snd.checkAff("vertigo") and not snd.checkAff("muddled") then
    			string = "well palpitate"
    		end
  
    		if (aspect == "" or aspect == "none" or aspect == "yellow") and snd.balance.enrich then
    			string = "well suffocate"
    		 end
        
        if snd.used.shield then
    			string = string..snd.sep.."cast windlance "..snd.target
          
    		elseif aspect == "phlegm" then
    			if can_we_stall then
            string = string..snd.sep.."well arrhythmia 3 "
            if not snd.checksomeAffs({"vertigo", "confusion"}, 1) and not snd.checkAff("weariness") then
    				  string = string.." humour equilibrium "..snd.target
            elseif not snd.checksomeAffs({"dizziness", "stupidity"}, 2) then
              string = string.."humour stupor "..snd.target
            else  
              string = string.."humour disgorge  "..snd.target..random_limb[math.random(#random_limb)]
            end 
    			else
  					if not snd.checksomeAffs({"dizziness", "stupidity"},2) then
            	string = string..snd.sep.."humour synape "..snd.target
  					else
  						string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
  					end
    			end
    
    		elseif aspect == "black" then
    			if can_we_stall then
            string = string..snd.sep.."well arrhythmia 3 "
    				if not snd.checksomeAffs({"stupidity, masochism"}, 2) then
              string = string.."humour brainfreeze "..snd.target
    				elseif not snd.checkAff("lethargy") then
    					string = string.."humour swathe "..snd.target
            else
    					string = string.."humour disgorge  "..snd.target..random_limb[math.random(#random_limb)]
    				end
    			else            
    				if not snd.checksomeAffs({"lethargy", "confusion"},2) and snd.proned and snd.stalled_skill ~= "swathe" then
    					string = string..snd.sep.."humour swathe "..snd.target
    				elseif not snd.checksomeAffs({"masochism", "stupidity"},2) and snd.stalled_skill ~= "brainfreeze" then
    					string = string..snd.sep.."humour brainfreeze "..snd.target
            else
              string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
    				end
          end
  			elseif aspect ==  "yellow" then
    			if can_we_stall then
            string = string..snd.sep.."well arrhythmia 3 "
    				if not snd.checksomeAffs({"vertigo", "confusion"},2) and not snd.checkAff("clumsiness") then
    					string = string.."humour equilibrium "..snd.target
    				elseif not snd.checksomeAffs({"stupidity, recklessness"}, 2) then
              string = string.."humour brainfreeze "..snd.target
            else
    					string = string.."humour disgorge  "..snd.target..random_limb[math.random(#random_limb)]
    				end
    			else            
    				if snd.timer_check("restoration", .5) and not snd.checksomeAffs({"anorexia", "indifference"}, 2) then
    					string = string..snd.sep.."humour revulsion "..snd.target
    				elseif not snd.checksomeAffs({"masochism", "stupidity"},2) and snd.stalled_skill ~= "brainfreeze" then
    					string = string..snd.sep.."humour brainfreeze "..snd.target
            else
              string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
    				end
          end
    		end
      end
  
    	if string ~= snd.last_attack and not snd.waiting.queue then
    		snd.last_attack = string
    		snd.attack(snd.last_attack)
    		snd.waiting.queue = true
    		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    	end
      end
    end
  snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
				</AliasGroup>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Ylem</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>move on</name>
					<script>ylm.active = true
if ylm.next_zone == "none" then
 ylm.next_zone = "1680"
end
snd.moving_to = ylm.next_zone
send(" ")
if ylm.next_zone == "city" then
  ylm.active = false
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^goylem$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>move to next</name>
					<script>ylm.active = true
if ylm.next_zone == "none" then
  ylm.next_zone = "5730"
end
ylm.next_zone = ylm.path["v" .. ylm.next_zone]
snd.moving_to = ylm.next_zone
send(" ")
if ylm.next_zone == "city" then
  ylm.active = false
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^goylem next$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>move on start</name>
					<script>ylm.active = true
ylm.next_zone = "1680"
snd.moving_to = ylm.next_zone
send(" ")</script>
					<command></command>
					<packageName></packageName>
					<regex>^goylem start$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>stop ylem</name>
					<script>ylm.next_zone = "city"
snd.moving_to = ylm.next_zone
ylm.active = false
send(" ")</script>
					<command></command>
					<packageName></packageName>
					<regex>^goylem stop$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Utilities</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Toxicology</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>sacs</name>
						<script>snd.send("harvest sac from "..matches[2]..snd.sep.."drop "..matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^sac (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>milking</name>
						<script>snd.send("qeb milk "..matches[2].." into fluidcache")</script>
						<command></command>
						<packageName></packageName>
						<regex>^milk (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>cask</name>
						<script>snd.send("qeb milk "..matches[2].." into cask")</script>
						<command></command>
						<packageName></packageName>
						<regex>^cask (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>unvenom</name>
						<script>local venoms = {
"epteth",
"gecko",
"epseth",
"prefarar",
"delphinium",
"digitalis",
"curare",
"darkshade",
"hepafarin",
"monkshood",
"oculus",
"selarnia",
"kalmia",
"xentio",
"eurypteria",
"aconite",
"vernalius",
"slike",
"euphorbia",
"larkspur",
"oleander",
"voyria",
}
for venom in pairs(venoms) do
 snd.send("fc consume "..venoms[venom])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^unvenom$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>venoms</name>
						<script>local venoms = {
"epteth",
"gecko",
"epseth",
"prefarar",
"aconite",
"vernalius",
"slike",
"digitalis",
"curare",
"darkshade",
"oculus",
"selarnia",
"kalmia",
"xentio",
"hepafarin",
"monkshood",
"eurypteria",
"delphinium",
"euphorbia",
"larkspur",
"oleander",
"voyria",
}
for venom in pairs(venoms) do
 snd.send("fc fill "..venoms[venom])
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^venoms$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>rag</name>
						<script>snd.send("qeb craft rag")</script>
						<command></command>
						<packageName></packageName>
						<regex>^rag$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Sunder Shop Aliases</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Buying Fluids</name>
						<script>local fluid_types = {
  venoms = {
  "epteth",
  "gecko",
  "epseth",
  "prefarar",
  "delphinium",
  "digitalis",
  "curare",
  "darkshade",
  "hepafarin",
  "monkshood",
  "oculus",
  "selarnia",
  "kalmia",
  "xentio",
  "eurypteria",
  "aconite",
  "vernalius",
  "slike",
  "euphorbia",
  "larkspur",
  "oleander",
  "voyria",
  },
  
  elixirs = {
  "health",
  "mana",
  "immunity",
  "levitation",
  "antivenin",
  "frost",
  "speed",
  "vigor",
  },
  
  poultices = {
  "mending",
  "mass",
  "restoration",
  "caloric",
  "epidermal",
  },
}
for _, v in ipairs(fluid_types[matches[3]]) do
  currentamount = 0
  while currentamount &lt; tonumber(matches[2]) do
    snd.send("buy refill of " .. v .. " for fluidcache")
    currentamount = currentamount + 1
  end
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^fillcache (\d+) (elixirs|poultices|venoms)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Filling Elixirs!</name>
						<script>local elixirs = {
"health",
"mana",
"immunity",
"levitation",
"antivenin",
"frost",
"speed",
"vigor",
}
for elixir in pairs(elixirs) do
 snd.send("fc fill "..elixirs[elixir])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^fillvials$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Consuming Elixirs</name>
						<script>local elixirs = {
"health",
"mana",
"immunity",
"levitation",
"antivenin",
"frost",
"speed",
"vigor",
}
for elixir in pairs(elixirs) do
 snd.send("fc consume "..elixirs[elixir])
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^unfillvials$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Filling Poultices</name>
						<script>local poultices = {
"mending",
"mass",
"restoration",
"caloric",
"epidermal",
}
for poultice in pairs(poultices) do
 snd.send("fc fill "..poultices[poultice])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^fillbandages$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Consuming Poultices</name>
						<script>local poultices = {
"mending",
"mass",
"restoration",
"caloric",
"epidermal",
}
for poultice in pairs(poultices) do
 snd.send("fc consume "..poultices[poultice])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^unfillbandages$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>priceall</name>
						<script>snd.shopitem = matches[2]
snd.shopprice = matches[3]
snd.shopshelf = matches[4]
snd.shopih = true
snd.send("ih "..snd.shopitem)</script>
						<command></command>
						<packageName></packageName>
						<regex>^priceall (\w+) (\d+) (\d+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Buying pills</name>
						<script>pills = {
"waterbreathing",
"kawhepil",
"acuity",
"steroid",
"stimulant",
"coagulation",
"thanatonin",
"paste",
"somnium",
"ototoxin",
"decongestant",
"amaurosis",
"depressant",
"antipsychotic",
"panacea",
"euphoriant",
"anabiotic",
"opiate",
"eucrasia",
}
for pillname in pairs(pills) do
 snd.send("buy "..matches[2].." "..pills[pillname])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^buypills (\d+)$</regex>
					</Alias>
				</AliasGroup>
				<Alias isActive="yes" isFolder="no">
					<name>rockcrush</name>
					<script>snd.send("qeb rockcrush rock for ink")</script>
					<command></command>
					<packageName></packageName>
					<regex>^rc$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>harvest rock</name>
					<script>snd.send("qeb harvest rock")</script>
					<command></command>
					<packageName></packageName>
					<regex>^hr$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Check stuff</name>
					<script>send("pull "..matches[2])
send("look in "..matches[2])
send("push "..matches[2])
send("turn "..matches[2])
send("enter "..matches[2])
send("read "..matches[2])
send("touch "..matches[2])
send("ponder "..matches[2])
send("probe "..matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^check (\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Separator changing</name>
					<script>enableTrigger("Separator Check/Update")
if matches[2]~= nil then send("config separator"..matches[2]) else send("config separator") end
</script>
					<command></command>
					<packageName></packageName>
					<regex>^config separator( (.+))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Who Parsing</name>
					<script>snd.parse_who()</script>
					<command></command>
					<packageName></packageName>
					<regex>^who groups$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Easy logging</name>
					<script>local name_table = string.split(matches[3], " ")
local name_string = ""
local city_logging = {["Duiran"] = "Dion", ["Enorian"] = "Enorian", ["Spinesreach"] = "Command", ["Bloodloch"] = "Raiders",}
table.sort(name_table, function(a, b) return a:lower() &lt; b:lower() end)
for _, v in pairs(name_table) do
  if name_string ~= "" then
    name_string = name_string..", "..v
  else
    name_string = v
  end
end
send("writelog "..city_logging[gmcp.Char.Status.city].." "..matches[2]..": "..name_string)</script>
					<command></command>
					<packageName></packageName>
					<regex>^logfoci (\w+) (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>re-show windows</name>
					<script>if matches[2] == "chat" then
  yatcoContainer:load()
  yatcoContainer:show()

elseif matches[2] == "map" then
  mapContainer:load()
  mapContainer:show()

end</script>
					<command></command>
					<packageName></packageName>
					<regex>^reload window (\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>gauntlet change</name>
					<script>if matches[3] then
  cecho("&lt;red&gt;You have set your gauntlet level to:&lt;orange_red&gt; "..matches[3].."&lt;red&gt;.")
  snd.toggles.gauntlet_level = tonumber(matches[3])
else
  cecho("&lt;red&gt;You have set your gauntlet level to:&lt;orange_red&gt; "..snd.toggles.gauntlet_level.."&lt;red&gt;.")
end
</script>
					<command></command>
					<packageName></packageName>
					<regex>^(mygauntlet|mygauntlet (\d+))$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Sunder Name DB</name>
				<script></script>
				<command></command>
				<packageName>Sunder Name DB</packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Sunder Ndb Aliases</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Configurations</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Toggle Highlighting</name>
							<script>if sndNDB.highlightNames then
	--Remove any highlights, and turn off the toggle.
	sndNDB.highlightNames = false
	sndNDB_Unhighlight()
	snd.message("Disabled name highlighting.")
else
	--Begin highlighting again, and enable them all.
	sndNDB.highlightNames = true
	sndNDB_loadHighlights()
	snd.message("Enabled name highlighting.")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndb hl$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Set Org Colours</name>
							<script>local cities = {"Bloodloch", "Duiran", "Enemies", "Enorian", "Rogues", "Spinesreach"}

local city, colour = "", ""

if table.contains(cities, matches[2]:title()) then
	city = matches[2]:title()
	colour = matches[3]
elseif table.contains(cities, matches[3]:title()) then
	city = matches[3]:title()
	colour = matches[2]
else
	snd.message("That is not a valid option, please choose from: &lt;green&gt;Bloodloch, Duiran, Enemies, Enorian, Rogues or Spinesreach")
end

if city ~= "" then
	if table.contains(color_table, colour) then
		snd.message(city.." will now be highlighted in &lt;"..colour.."&gt;"..colour..".")
		if city ~= "Enemies" then
			sndNDB_updateHighlights(city, colour)
		else
			sndNDB_enemyHighlights()
		end
	else
		snd.message("That is not a valid colour to choose from.")
	end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndb hl (\w+) (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Show Settings</name>
							<script>local count = 0
for i,v in pairs(sndNDB.players) do
	count = count + 1
end

snd.message("       snd Name Database Settings")
echo("\n ")
snd.message((sndNDB.highlightNames and "&lt;green&gt;We are" or "&lt;red&gt;We are not").."&lt;NavajoWhite&gt; currently highlighting names.")
cecho("\n       &lt;NavajoWhite&gt;      Total of &lt;white&gt;"..count.."&lt;NavajoWhite&gt; names!\n\n")

snd.message("       Highlight settings:")
for city, colour in pairs(sndNDB.highlighting) do
	cecho("\n &lt;"..colour.."&gt;"..city.."&lt;white&gt;"..string.rep(" ", 12-string.len(city)).."citizens will be highlighted in &lt;"..colour.."&gt;"..colour..".")
end

cecho("\n ")
snd.message("       Enemy settings:")
cecho("\n "..(sndNDB.highlightPriority == "enemies" and "&lt;green&gt;Prioritising" or "&lt;red&gt;Not prioritising").."&lt;NavajoWhite&gt; highlighting of enemies.")
cecho("\n &lt;LightSkyBlue&gt;Enemies will be highlighted in &lt;"..sndNDB.highlighting.Enemies.."&gt;"..sndNDB.highlighting.Enemies..".")
cecho("\n    &lt;LightSkyBlue&gt;-Special-")
cecho("\n  "..(sndNDB.enemySettings.bold and "&lt;green&gt;" or "&lt;red&gt;")..string.char(7).." &lt;NavajoWhite&gt;Bolded letters.")
cecho("\n  "..(sndNDB.enemySettings.underline and "&lt;green&gt;" or "&lt;red&gt;")..string.char(7).." &lt;NavajoWhite&gt;Underlined letters.")
cecho("\n  "..(sndNDB.enemySettings.italics and "&lt;green&gt;" or "&lt;red&gt;")..string.char(7).." &lt;NavajoWhite&gt;Italicized letters.")
</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndb settings$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Set Highlight Priority</name>
							<script>local type, colour = matches[2], matches[3]

if sndNDB.highlightPriority ~= matches[2] then
	sndNDB.highlightPriority = matches[2]
	snd.message("Highlighting will give priority to "..sndNDB.highlightPriority..".")
	sndNDB_enemyHighlights()
else
	snd.message("Already prioritising highlighting of that.")
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndb hlprio (enemies|city)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Toggle Highlighting Options For Enemies</name>
							<script>local x = { i = "italics", b = "bold", u = "underline" }
local opt = x[matches[2]]
if not sndNDB.enemySettings[opt] then
	sndNDB.enemySettings[opt] = true
	snd.message("Enemies &lt;green&gt;will now have &lt;NavajoWhite&gt;"..opt.." applied to it.")
else
	sndNDB.enemySettings[opt] = false
	snd.message("Enemies &lt;red&gt;will no longer have &lt;NavajoWhite&gt;"..opt.." applied to it.")
end
sndNDB_enemyHighlights()</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndb ehl (i|u|b)$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Actions</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Install</name>
							<script>sndNDB_Install()</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndb install$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Parse Names Online</name>
							<script>if not sndNDB.installed then
	snd.message("Please install name database first.")
else
  ndbCity = ""
	parsingQW = true
	peopleOnline = {}
	if matches[2] then
		parsingCity = matches[2]
	end
	sendGMCP("Comm.Channel.Players")
	send(" ")
	if tonumber(snd.toggles.goggle_level) == 20 then
    snd.true_who = {}
    enableTrigger("QWP for level 20 goggles")
    send("qw")
  else  
    sndNDB_GetOnline()
  end
end
	</script>
							<command></command>
							<packageName></packageName>
							<regex>^qwp(?: (\w+)|)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Honours Person</name>
							<script>checkingPlayerCity = tempTimer(2, [[; checkingPlayerCity = nil;]])
ndbCity = ""
sndNDB_Acquire(matches[2]:title(),false)
send(matches[1])</script>
							<command></command>
							<packageName></packageName>
							<regex>^honou?r?s (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Whois Person</name>
							<script>local name = matches[2]:title()
local x, c
if not sndNDB_Exists(name) then
	snd.message(name.." isn't tracked by database.")
else
	x = sndNDB.players[name]
	c = sndNDB_getColour(name)

	cecho("\n&lt;blue&gt;- &lt;NavajoWhite&gt;"..x.title.." &lt;blue&gt;"..string.rep("-", 70-(string.len(x.title)+3)).."\n")
	cecho("\n&lt;DimGrey&gt; City :   &lt;"..c.."&gt;"..x.city..string.rep(" ", 31-string.len(x.city)).."&lt;DimGrey&gt; Tether:  &lt;white&gt;"..x.tether)
	cecho("\n\n&lt;blue&gt;"..string.rep("-", 70))
	cecho("\n ")
	send(" ",false)
end	</script>
							<command></command>
							<packageName></packageName>
							<regex>^whois (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Remove Low/Unranked</name>
							<script>local remove = {}

for i,v in pairs(sndNDB.players) do
	if v.xp_rank == nil or v.level &lt; 50 or v.xp_rank == 0 then
		table.insert(remove, v.name)
		sndNDB.players[v.name] = nil
	end
end
table.sort(remove)

snd.message("Removed a total of &lt;green&gt;"..#remove.."&lt;NavajoWhite&gt; unranked people from the database:\n - "..
	table.concat(remove, ", ")..".")
send(" ")
</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndb clearout$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Remove single person</name>
							<script>local remove = (matches[2]:lower()):title()

sndNDB.players[remove] = nil

snd.message("Removed &lt;NavajoWhite&gt;from the database:\n - "..remove..".")

</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndb remove (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Re-honours everyone</name>
							<script>local count = 0
ndbCity = ""
snd.message("Updating everyone who's currently in the database.")
for i,v in pairs(sndNDB.players) do
	count = count + 1
	sndNDB_Acquire(v.name:title(),false)
end
snd.message("This may take a minute or two. Total of "..count.." people are being re-checked.")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndb redo$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Individual Update</name>
							<script>-- Allow users to update names individually
local valid_fields = {"guild","city",}
local name = (matches[3]:lower()):title()
local field = matches[4]:lower()
local value = (matches[5]:lower()):title()
local tether = ""

if table.contains(valid_fields, field) then
  if field == "city" then
    local valid_cities = {"Enorian","Spinesreach","Bloodloch","Duiran","None"}
    if not table.contains(valid_cities, value) then
      snd.message("Invalid city. Your options are: "..table.concat(valid_cities, ", "))
      return
    end
  end
  sndNDB.players[name][field] = value

  if sndNDB.players[name].city == "Duiran" or sndNDB.players[name].city == "Enorian" then 
    tether2 = "Spirit"
  elseif sndNDB.players[name].city == "Spinesreach" or sndNDB.players[name].city == "Bloodloch" then 
    tether2 = "Shadow" 
  else
    tether2 = "none"
  end

  sndNDB.players[name]["tether"] = tether2

  snd.message("Changed "..field.." to "..value.." for "..name..". You may check WHOIS &lt;name&gt; to confirm.")
  sndNDB_saveSettings(false)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(U|u)pdate (\w+) (\w+) (\w+)$</regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>War</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Set Division</name>
					<script>snd.current_division = matches[2]
snd.message("Current Division is "..matches[2], "atk")</script>
					<command></command>
					<packageName></packageName>
					<regex>^war division (\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>March Troops</name>
					<script>snd.send("order "..snd.current_division.." march " .. matches[2])
snd.send("qeb " .. matches[2]..snd.sep.."path find "..snd.marching_destination)
</script>
					<command></command>
					<packageName></packageName>
					<regex>^mt (\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Set March Destination</name>
					<script>snd.marching_destination = matches[2]
snd.message("New troop destination is: "..matches[2], "atk")</script>
					<command></command>
					<packageName></packageName>
					<regex>^war destination (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Fortify</name>
					<script>snd.send("order " .. snd.current_division .. " fortify")</script>
					<command></command>
					<packageName></packageName>
					<regex>^war fort$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Attack Division</name>
					<script>snd.send("order " .. snd.current_division .. " attack "..matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^war kill (\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Order Division</name>
					<script>snd.send("order "..snd.current_division.." "..matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^war order (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Sunder Help War</name>
					<script>cecho("\n&lt;CadetBlue&gt;Sunder War")
cecho("\n&lt;MediumSeaGreen&gt;---------------")
cecho("\n")
cecho("\n&lt;MediumTurquoise&gt;The commands are as follows")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;war division &lt;divisionNumber&gt;  &lt;ForestGreen&gt;Set your tracked division")
cecho("\n&lt;DeepSkyBlue&gt;war destination &lt;vNum&gt;         &lt;ForestGreen&gt;Set the room number for your division's destination")
cecho("\n&lt;DeepSkyBlue&gt;mt &lt;dir&gt;                       &lt;ForestGreen&gt;March division in direction")
cecho("\n&lt;DeepSkyBlue&gt;war kill &lt;enemyDivision&gt;       &lt;ForestGreen&gt;Start the slaughter")
cecho("\n&lt;DeepSkyBlue&gt;war fort                       &lt;ForestGreen&gt;Order your division to fortify")
cecho("\n&lt;DeepSkyBlue&gt;war order &lt;order&gt;              &lt;ForestGreen&gt;General catchall, will order your division anything you give it")
cecho("\n&lt;DeepSkyBlue&gt;War package created by &lt;purple&gt;Teflin Vyktaire")</script>
					<command></command>
					<packageName></packageName>
					<regex>^(S|s)under (H|h)elp (W|w)ar$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Vermin</name>
				<script></script>
				<command></command>
				<packageName>Vermin</packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Vermin Basher</name>
					<script>snd.send("vermin")
if snd.toggles.vermin then
	snd.toggles.vermin = false
	bot.going = false
  disableTimer("moveroom")
	cecho("&lt;red&gt;----------------\n   &lt;red&gt;VERMIN OFF\n&lt;red&gt;----------------")
else
	snd.toggles.vermin = true
	local area = gmcp.Room.Info.area 
  if not sunder_areaPaths then
    snd.message("No area path list found, please check it is in the correct directory.")
  elseif not sunder_areaPaths[area] then
    snd.message("Path not found for current area.")
  else
    snd.message("Let's kill some vermin in: "..area.."!")
    bot.going = true
    bot.path = sunder_areaPaths[area]
  end
	cecho("\n&lt;green&gt;----------------\n   &lt;green&gt;VERMIN ON\n&lt;green&gt;----------------")
	enableTimer("moveroom")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^toggle vermin$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Auto Targeting</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Add Target List</name>
					<script>local list = matches[2]:gsub(" ", ", ")

snd.addTargetList(list)
snd.callTargetList()</script>
					<command></command>
					<packageName></packageName>
					<regex>^atl (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Add Target Position</name>
					<script>local tar = matches[2]:title()
local pos = matches[3] or nil

snd.addSingleTarget(tar, pos)

if snd.toggles.calling then
	if pos then
		send("wt Target priority: " .. tar .. " " .. pos)
	else
		send("wt Target priority: " .. tar)
	end
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^atp (\w+)(?:\s)?(\d+)?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>List Targets</name>
					<script>snd.displayTargetList()
snd.callTargetList()</script>
					<command></command>
					<packageName></packageName>
					<regex>^tlist$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Clear Target List</name>
					<script>snd.clearTargetList()</script>
					<command></command>
					<packageName></packageName>
					<regex>^atlc$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Remove Target</name>
					<script>local who = matches[2]:title()

snd.removeTarget(who)

if snd.toggles.calling then 
	send("wt Target removed: " .. who)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^atr (\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Skip current target</name>
					<script>snd.targeting.skip = true
snd.get_new_target()</script>
					<command></command>
					<packageName></packageName>
					<regex>^nt$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Snd Autopaths</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Using Paths</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Bash areas of your choice</name>
						<script>snd_bashAreas(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^bashpath (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Single Area Path</name>
						<script> snd_bashArea() </script>
						<command></command>
						<packageName></packageName>
						<regex>^goarea$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Creating</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Compile Pather</name>
						<script> snd_patherCompile() </script>
						<command></command>
						<packageName></packageName>
						<regex>^path compile$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Add Path Room</name>
						<script> snd_patherAdd() </script>
						<command></command>
						<packageName></packageName>
						<regex>^path addroom$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Start Pather</name>
						<script> snd_createPather() </script>
						<command></command>
						<packageName></packageName>
						<regex>^path create$</regex>
					</Alias>
				</AliasGroup>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Fishing</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>FishingGo</name>
					<script>local results = get_fishing_holes(matches[2], true)
if #results == 1 then
    echo("Pathing to " .. results[1].name .. ".\n")
    results[1].rooms = results[1].rooms or {}
    if #results[1].rooms &lt;= 0 then
      echo("That fishing hole has no rooms saved. Aborting.\n")
      return
    else
      send("path find " .. results[1].rooms[1])
    end
    if snd.toggles.gallop == true then
      send("path go gallop")
    elseif gmcp.Char.Vitals.mounted == "0" then
      send("path go dash")
    else
      send("path go")
    end
else
    echo("Please specify a unique fishing location.\n")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^fgo (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>FishSearch</name>
					<script>get_fishing_holes(matches[3], true, (matches[2] ~= ""))</script>
					<command></command>
					<packageName></packageName>
					<regex>^fishing search\s*(full|info)*\s*(.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>ToggleAutoFish</name>
					<script>if auto_fish then
	snd.fishmsg("&lt;red&gt;Autofishing disabled.")
	auto_fish = false
	if currently_fishing then snd.send("qeb fishing cut") end
	currently_fishing = false
  snd.fishmsg("&lt;red&gt;CUTTING LINE!")
else
	snd.fishmsg("&lt;green&gt;Autofishing enabled.")
  fishbucket = fishbucket or {}
  expandAlias("sunder maxfish", false)
  expandAlias("sunder fishbucket", false)
	auto_fish = true
	if not currently_fishing then snd.send("qeb fishing cast") end
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^afish$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Fishing Bucket</name>
					<script>if not snd.fishinginfo then
  load_fishinginfo_db()
end

if matches[3] then
  snd.fishmsg("&lt;SeaGreen&gt;You have set your fishing bucket capacity to:&lt;green&gt; "..matches[3].."&lt;SeaGreen&gt;.")
  snd.fishinginfo.bucket_capacity = tonumber(matches[3])
else
  snd.fishinginfo.bucket_capacity = snd.fishinginfo.bucket_capacity or {}
  snd.fishmsg("&lt;SeaGreen&gt;You have set your fishing bucket capacity to:&lt;green&gt; "..snd.fishinginfo.bucket_capacity.."&lt;SeaGreen&gt;.")
end

save_fishinginfo_db()</script>
					<command></command>
					<packageName></packageName>
					<regex>^(sunder maxfish|sunder maxfish (\d+))$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Bucket Amount</name>
					<script>if not snd.fishinginfo then
  load_fishinginfo_db()
end

if matches[3] == "clear" then
  snd.fishinginfo.currentfish = "0"
  snd.fishmsg("&lt;SeaGreen&gt;Fishing bucket(s) CLEARED!")
  snd.fishmsg("&lt;SeaGreen&gt;You have &lt;green&gt;"..snd.fishinginfo.currentfish.." &lt;SeaGreen&gt;fish in your bucket(s)!")
elseif matches[3] then
  snd.fishmsg("&lt;SeaGreen&gt;You have &lt;green&gt;"..matches[3].."&lt;SeaGreen&gt; fish in your bucket(s)!")
  snd.fishinginfo.currentfish = tonumber(matches[3])
else
  snd.fishinginfo.currentfish = snd.fishinginfo.currentfish or {}
  snd.fishmsg("&lt;SeaGreen&gt;You have &lt;green&gt;"..snd.fishinginfo.currentfish.. "&lt;SeaGreen&gt; fish in your bucket(s)!")
--  demonnic.chat:cecho("Misc", "&lt;LightSeaGreen&gt;FISHBUCKET: &lt;SeaGreen&gt;You have &lt;green&gt;" ..snd.fishinginfo.currentfish.. "&lt;SeaGreen&gt; fish in your bucket(s)!\n")
end


save_fishinginfo_db()</script>
					<command></command>
					<packageName></packageName>
					<regex>^(sunder fishbucket|sunder fishbucket (.+))$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Sunder</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Core</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="no" isFolder="no">
					<name>Changelog</name>
					<packageName></packageName>
					<script>--5.533
--Fixed Wayfarer Assault adding/removing the extra damage on the first hit.
--Fixed the extra damage from assault adding to ranged attacks
--Added virulent to match vinelash calls
--Added Akkari and all its bits and bobs
--Added Ravager and all its components
--Fixed some Wayfarer patterns and inconsistencies (Lerad)
--Fixed references to limbs being 'broken' as a state instead of 'damaged' (aka 33% break) (Lerad)
--Updated path for Ollin for bashing/autowalking
--Updated the chatbox and map windows to allow for adjustable size/movements
--Fixed some pattern matching for Ascendril (Church)
--Fixed naming conventions where they'd been left the same as their mirror
--Condensed def tracking by 250+ triggers
--Went through GUI toggling and ensured it will load properly if snd.gui is not enabled.
--Fixed clawtwist/plexus limb damage
--Fixed autowalking to conform to mudlet mapper updates
--Added another prone line for rooms w/shallow water
--Fixed wayfaring shield usage order
--Added aff capture for cardinal + updated the namefix function to account for it being sent "a broken left leg" etc.
--Added lines for hellsight initial aff
--Added shadow to all attacks for luminaries
--Fixed some triggers being accidentally turned off on download
--Updated wayfarer bashing to use sustain even when shielding
--Updated epidermal to account for head/torso usage

--5.52
--Fixed a few sciomancer defenses
--Updated sciomancer and Ascendril bashing alias to more reliably utilize reflect
--Fixed a rather bad pattern matching bug for firelash that rendered its tracking useless
--Updated the color table ot better work with more addons/packages
--Updated some shadow side offenses/triggers/etc thanks to a package they were giving out.
--Added all info for Tidesage and Alchemist, though work in progress to ensure all is correct.
--Fixed an issue with one portion of the restoration tracking

--5.51
--Updated various Bard lines to match.
--Added shock/burnout to aff table.
--Removed firstaid elevation of certain affs - Sunder should be interacting directly with firstaid as little as possible in the generic download.
--Updated Bard aliases with a bit of extra calling and refined overall.
--Fixed inhibit/wraith triggers not removing shield.

--5.5 BRADS 
-- Added Bard skill tracking to 'all attacks'.
-- Added Bravado and Inspire to snd.cooldowns.
-- Added defense tracking (and all triggers) to scripts.
-- Added Song Timers to manage song-heavy Bard scripts.
-- Added 1 Bard 'support' route as a template.
-- Added 1 Bard 'team affs' route as a template.
-- Added 1 Bard 'team dmg' route as a template.
-- Between the above 3, someone should be able to figure out how to make SunderBard work for them on more personal levels. Hopefully.
-- Added defup and defenses for Bards.
-- We've tried to capture as much information as possible but there is a good chance not everything you need/want will be captured.

--5.4
-- Added an additional line to the variety of prones
-- Updated Elemancy Scorch to acknowledge emberbrand for limb breaks
-- Illumination Lightning aff corrected to allergies
-- Tweaked some Luminary/Earthcaller aliases that had incorrect or inefficient portions
-- Fixed the Warden version of glass limb, had the wrong matches.
-- Updated the aff called trigger to better support your random, weird formats for calling.
-- Fixed Ancestry Annul not checking proper class/skills.
-- Updated Elemancy Direfrost to include its failed case aff
-- Fixed the Lemniscate cure trigger.
-- Rage updated to include Templar, Revenant and Shapeshifter.
-- Added a balance variable for Sorcery Transfix
-- Added mobs for the Dyisen-Ashtan Memoryscape
-- Added a path for the Dyisen-Ashtan Memoryscape
-- Added exclusions on the 'got hit' trigger to not accidentally change curesets against 1 person
-- Added which limb was being hit to certain Sentinel attacks to better track parries
-- Support added for all current level 200 classes at the time of this changelog
-- Added support for all the new eucrasia affs

--5.36
--Updated Revenant items to use DPL instead of duplicity, missed in earlier transition of syntax updates
--Added doubleswing to Templar attacks
--Fixed superstition typo in pill cure order
--Added last_hit_limb to some sentinel attacks
--Added many more lines for templar/rev DSW/Fell
--Went through first pass of updating triggers to be more slim and less greedy for minor trigger engine matching speed boost
--Updated how often certain functions are called, removed superfluous checks
--Updated parameters for fitness/purge (Czcibor)
--Added Contort/Discord per changelog 1966
--Added timer functions to be used in scripting
--Added epilepsy line for Revenant
--Fixed rend always being given on 1p hits
--Added crippled/crippled_body aff relationship similar to paresis/paralysis
--Fixed destroyed_throat not having a check for the spot applied to

--5.35
--Added support for elemancy changes from announce 3245
--if you use flamewreathed_limb in anything make sure to reference flamewreathed.limb as a table value since we will also track current resonance used
--Changed "prone" to "fallen" for sentinel attacks to conform with previous changes
--Added shapeshifter to valid classes that can use rage
--Fixed starlight glaciaition proc having the wrong pattern
--Added more full support for generic mending applies to legs/arms for tracking
--Fixed some bad logic with rebounding proc not adding it back in all the time
--Updated items to comply with changelogs 1941 and 1943
--Fixed name database absolutely krangling itself w/regard to tethers

--5.34
--Added support for Earthcaller and mirrored triggers/aliases
--Added support for Earthcaller defenses and afflictions
--Added system wide support for aff counting functions
---- See snd.aff_count_all(), snd.aff_count_mental(), snd.aff_count_physical()
--Revised the alertness function to not spew forth errors if a name isn't tracked
--Fixed some odd behavior with Dhuriv, specifically dodge 1st hit and non venom second hit
--Tidied up snd.target_locked with cleaner logic
--Added parry being available to Dhuriv Crosscut
--Worked on attack picking logic for Sentinel, tried to tidy up. Will re-write when we have more time.
--Added support for Oneiromancer and mirrored triggers/aliases
--Added support for Oneiromancer defenses and afflictions
--Added support for self-affs for all mirror class afflictions
--Added more support for divulgence in 1p and 3p
--Reworked inspiration defense to be able to handle all stats appropriately and similar for battlehymn
--Added cooldown check to aeon/hourglass usage in indo/oneiro alias
--Updated lines/defenses for Oneiromancer that had been missed
--Updated 'a broken leg/arm' to 'a_crippled_(leg/arm)' to stay in line with other affs
--Fixed up some logic with dodge and sun/sphere moon/hypercube

--5.23
-- Updated API handling to handle changes due to changelog 1918
-- Added the alias 'update &lt;who&gt; (guild/city) &lt;value&gt;'
-- Added mining enemies in for use with bashing commands 
-- Added a "walkarea" command to walk around the current area without hitting stuff
-- Fixed some vampire deffing issues
-- Updated snd ndb handling on honors to not remove info it already has, though it may be outdated since it isn't in API

--5.22
-- Added eucrasia pill to basic tracking and aff list for worrywart
-- Fixed bending defense line ( had an extra space at the start ).
-- Added mobs for Eftehl
-- Added pah for Eftehl
-- Added weaponry lines for mace/morningstar that should alleviate non tracking of parry for Templar/Rev blunt
-- Fixed some logic issues with snd.last_limb_hit
-- Fixed a minor typo with overwatch defense
-- Added update to variable for purge usage
-- Fixed a bug with no_parry logic
-- Added a line for 3p weasel defense stripping
-- Updated skullbash and soulfire/soulburn to new affs
-- Fixed soulthirst and soulharvest
-- Added a 3p tracking line for accursed
-- Fixed skill usage per changelog 1915
-- Added mobs for Tak-re
-- Added path for Tak-re
-- Added mobs for Kkirrrr'shi Hive
-- Added path for Kkirrrr'shi Hive
-- Added a cooldown/balance tracker for crystal tattoo


--5.2 
-- Updated some toggles that weren't updating the gui
-- Updated handle_hounds to include blurry vision, separate frozen levels and ability to give/not give houndmark/tacticianmark
-- Added a line for paresis from warden version of reckless
-- Dstab wasn't tracking 3p correctly if the first attack was dodged, this has been fixed
-- Fixed revenant bashing function, had an extra letter
-- Removed assault_damage (extra damage after using tenacity assault) properly when applied
-- Fixed some matching issues with Ascendril (esp Firelash)
-- Fixed some revenant checks still looking for Templar
-- Fixed revenant skills not having 'chiro' before them in one alias
-- Added some situational affs for Ascendril skills (church)
-- Added lines for ice_encased, thunderbrand and emberbrand (church)
-- Fixed a damaged limb line setting the wrong table value
-- Removed the necessity of the bashing paths file as it is now in the system, all 10000 lines of numbers

--5.1
--Removed shadowslip from active defenses
--Added an alias to remove a single person from the database, no questions asked (Val)
--Changed alertness procs to only call if different tether or rogue(Sryaen)
--Updated cwho trigger based on suggestions(Deva)
--Fixed enemy name still showing up, was missing gui check(Deva)
--Added Indorani defenses to the priority queue, oops
--Added shivering/frozen 1p line from decay
--Added a missing battleaxe hit confirm line
--Removed the silly old trigger to re-wield a shortsword if you lost wielding of anything
--Fixed teradrim bashing function
--updated some untargetted mending lines and logic
--Added a check for heatspear to ablaze curing
--Made some updates to QWP and related functions to accomodate level 20 goggle users.
----It checks the current QW instead of pinging the website, offering a clearer view.
--Went through Teradrim attacks, all values are the base without inks and work properly with my testing (alone, so maybe not perfect). If you want to change numbers to accomodate those, go for it.
--Went through Indorani deffing to try and make it not so spammy. I was dumb, don't ask.
--Added an alias to move to next area while using custom bashing routes if you want to skip the current one for whatever reason.
--Fixed sand swelter trying to defup without having sand down
--Fixed absorb ylem queue for those who don't have the gauntlet w/insta absorb lmao 400 credits well spent amirite 
--Removed oberglot from Djeir catacombs targets as you can't kill it or something (Rhine)
--Fixed the bio steroid trigger to remove qeb, needs to be used while off balance
--Fixed matching cases for battleaxe (same as previous weapon types in 5.07, just missed) (Sryaen)
--Added new mobs to Dovan which suck and make you bleed way too much to be worthwhile
--Fixed Augerweald path to run the whole area
--Added path for basilisk den and targets
--Added path for maul and updated targets
--Added path for forgotten depths of mount helba and targets
--Added path for bakal chasm and targets
--Went through many triggers that delete lines or substitute and curated to try and cut down on losing information that is helpful in logs
--Similar to above, changed some echos to be a bit more reading friendly and have key information pop.
--Added a cooldown tracker for fulcrum enrich for Ascendril, yay resonance nonsense
--Worked on Ascendril affliction stuff for groups
--converted people in room(group only check) to function for easier usage in more areas
--I made some big changes to called affs to combat removing affs on dodge that were already on target from previous round. It was a weird edge case that required some silly solutions but it works great.
--Updated Tenacity Devastate to account for all the messages+maybe venom application
--Fixed the exp trigger to account for config prettynumbers(Charica)
--Updated one of the monk parry lines(charica)
--Added rebounding removal to boosted threaten(Valeria)
--Fixed survival restore to actually fix all limbs applicable instead of just one, oops
--Converted the snd.target_prone boolean variable to instead apply the "fallen" affliction, helping to separate cases where this distinction is necessary
--Converted all writhe affs to be preceded by writhe_ to better work with the affliction names in game.
--Updated no_parry() and proned() to include all affs that should be applicable
--Changed all instances of "a broken right/left leg/arm" to instead use the aetolian variant, left_leg_crippled and etc.
--Self-pity will be recognized in the system as self_pity for conformity reasons
--Added a function to more easily fix aff names so they don't need to be fixed in every instance
--Templar affs mental/physical disrupt and crippled body similarly use _ instead of spaces
--Added an alias to make logging lessers less of a chore! loglesser (names with spaces) will sort and log for you.
--Fixed some of the matching cases associated with limb breaks
--Fixed check for cracked_ribs not using the right match
--Updated mending, soothing and restoration to work with angel sear
--Added a level check to raceskill list
--Moved empowerments to their own table to better handle revenant/templar swapsies
--Added all items for revenant
--Added all items for warden
--Fixed up hound functions to work for both wardn/carni without adding too much bloat
--Removed snd.hounds for hound switching since it was no longer necessary
--Fixed up warding maul wargauntlets matching to fit 1p and 3p
--Fixed poultice trigger having commented out the cure method for salves, oops
--Added trigger for frost hits from warding anoint
--Fixed Revenant maingauche trying to def improperly based on a typo
--There was a change in syntax from the original version of chirography skills compared to what was released. 
--     As a result, some offense aliases won't scribe releases (vorpal/crescent etc) correctly and has been fixed.
-- Fixed an issue with Warding Terrorize not tracking appropriately.
-- Fixed Sunder not checking certain skills for whether or not you had access, had commented it out for testing purposes.
-- Fixed handle_hounds not giving houndmark/tacticianmark, also commented out for test purposes.
-- Tidied up one more line for Warding Maul.
-- Converted places where toggles were hard set to true or false to use the toggle function so the GUI could update appropriately.
-- Added renown farming for Wardens
-- Updated shaman bear spirit to regex type matching, was set to substring
-- Fixed a remaining instance of gui_loaded to the proper handling
-- Updated another warding line. Why are the 1st and 3rd person messages so different?
-- Added the fallen line for when roaring procs on warding attacks
-- Made sure voidgaze secondary aff trigger was always on
-- Altered a resistance trigger that was checking snd.getting_hit instead of the name in the line

--5.07
--Fixed matching cases for rapier, flyssa and scimitars for templar attacks (Drystin)
--Fixed consistency issues with lovers effect (Illidan)
--Added fury expunge cure tracking and updated the physical aff list to the correct order (Illidan)
--Fixed tenacity attacks not tracking appropriately as they were calling snd.effects instead of venomeffects (Drystin)

--5.06
--Fixed a small error in the line for desiccation shred (limb) vs (limb storm) to account for either(Ipz)
--Added a toggle to automatically reject lust or not (toggle reject) (Illidan)
--Fixed a wrong matches check in deliverance trigger (Rhine)
--Fixed the baying trigger trying to afflict damage howl (Rhine)
--Fixed the lycan resisting breaks trigger, had wrong matches (Rhine)
--Changed up some monk defenses to try and fix issue with deffing up(Courene)

--5.05
--Added the Squal area mobs and area path
--Whitelisting off names for chatting proves not great for newbies/divine/admin changed to any one word name to weed out most npcs (Czcibor)
--Added lines to shapeshifter defs to make sure they're accurately tracked (Saybre)
--Modified the honors/auto highlighting function based off suggestions (Czcibor)
--Added hypersight defense (Drystin)
--Added toggle/namedatabase/bashing save functions to QQ since sometimes Mudlet is closed before disconnect event


--5.04
--Added the bending defense for Zealots, added bending and mindspark to priorities
--Fixed up the defense list options a bit

--5
--Added "generic broken arm/leg" affs and ways to track such things
--Fixed config groupmove -&gt; leading skill
--Changed up the way ferality is tracked to make it a bit easier going forward
--Removed a gag for deleting lines that deleted the lines that affs would be added on
--Added class checking via GMCP to make Sunder always know
--Added some extra rebounding checks to ensure tracked on 3rd party attacks
--Transitioned to name database instead of hard coded table
--Removed the usage of snd.allies, snd.enemies, snd.set_faction to instead use gmcp and name database tether checks
--Above possible thanks to Sanir's foundation for the database. Thanks, Sanir!
--Updated target calling to use target list given, if no targets in list then it tracks first target of opposite tether in room
--Added checks to see if the Sunder GUI was enabled for all containers, chat and updating mechanisms
--Converted defenses to check if your character has the skill before trying to execute the defense
--** Some items are noted as having "Generic" as their skill, such as plants and elixirs. It is auto assumed you have those.
--Will automatically check Raceskills to use those if you have them
--Will automatically check Tattoos to use those if you have them
--Will not try to parry unless you are able to with the skills associated
--Archivist basic group aff route updated and fleshed out 
--Archivist madness moved to the snd.balance frame
--Fixed Sentinel triggers not getting the dodge/parry to remove affs on venoms appropriately
--Won't try to grab staked corpsed
--Somehow didn't have 3p syssin bite, only had 1p
--Added some extra flay lines to confirm def loss
--Added 3p swagger removing paresis
--Fixed up tenacity attacks to have more check for venom calls
--Rejoice, for I have changed it to utilize GMCP for tells/etc tracking
--Questing toggle put in. NO MORE KESTREL WHISTLING FFS
--Changed the numpad keys to be a bit easier and also add a LOOK option without typing it
--Re-sized GUI elements, including making the people sort much taller to account for 15-20 people in a room on one tether
--Removed scepter toggle and bashing, shit was nerfed a while ago
--Added easier way to toggle many things, via just 'toggle &lt;item&lt;' that works in addition to regular aliases
--Removed zeal for the same reason as sceptre
--Moved where aegis is checked onto gmcp instead of randomly thrown into the queue
--Added lipreading to Syssin defenses + priority queue
--Made def options into separate of generic vs class based, will add both when you defup
--Worked on GMCP for wielding weapons to be more specific and not randomly assign values
--Changed how it handles sileris deffing because of separator shenanigans
--Updated guarding line for all attacks that may hit it
--Added helpfiles for many aspects of sunder along with expected behaviors and examples
--Removed the manual sorting button under shadow/spirit to give more space
--Updated indorani stuff cause the old one was booty
--fixed removing the wrong people from room on death
--added more areas to bashing + added them to be auto-pathable
--fixed angel battle to use combat messages
--added angel battle to balance tracking
--fixed snd.target_gone to set properly on not finding target to hit
--luminary smite for pure damage alias done
--updated experience gain trigger to work on player kills
--fixed the balance echo trigger to actually show balance times
--added gagged lines to reduce on spam, including gagging non-target general cures(focus, tree, etc)
--fixed templars being able to use many kinds of weapons for some of the aliases
--going through darkside to take out things they may have that I don't
----pulled over a bunch of quests, some random defenses, vermin auto movement
--Updated restoration handling to be able to kill process when we switch targets
--Added support to track sTuPiDItY bUlLsHiT over webtells for target calls and affs both
--GMCP communication spruced up and tightened to not capture erroneous data
--Fixed display of self prone being colored on target prone
--Added names to ignore for highlighting -- fixed further below
--Added next target with skip for targets in room that caller wants to bypass
--toggle for aegis added
--Added howl tracking, thanks Saybre!
--Fixed inadvertent hit messages on weapon hits without target in line
--Fixed venoms given from dhuriv hits
--Fixed up rebounding issues and tracking from dhuriv hits
--Sunder aff table now has support for all afflictions on AFFLICT LIST if someone messes with the curing
--Updated wayfarer tracking to account for limb damage
--Made a basic execute focused limb alias for wayfarers
--Fixed caloric tracking due to changes in hypothermia/ice_encased
--Removed hidden/phase checks on backstab
--fixed some typos in displays
--made 'sunder help' update the name/class display at the top if it ever gets wonky
--Changed how doublestab is being tracked to make it a bit more smoothe..so far at least
--Fixed shaman effusion pattern
--Added the lifebane removal line rather than using a timer
--added checks for removing affs/defs if you die/are dead
--Added aegis rope writhe aff
--Added a small check to auto target functionality
--Added a check to dispersing so that you don't try to disperse yourself or get an error while doing so
--Fixed sentinel bear-&gt;direwolf for daunt
--Changed gmcp communication to whitelist off of names in database for capturing rather than blacklisting all the talkative npcs
--Updated the gui
--Added fury sustain to wayfarer bashing because it's amazing


--4.18
--Added regenerate tracking to restoration salve
--Removed extra ironskin defense line trigger
--Fixed ironskin defense command 
--Fixed spheres not working properly for Archivist
--Added an alias to check score to fix snd.class not properly getting set 
--Updated the Vortex path to include the area with treants
--Added the def line for zealot resurgence
--Added Zealot indifference via Psionics Dull
--Added telepathy affs and states (attempting lock, locked, clamped)
--Added telepathy balances (command, cleanse, push)
--Added kaido balances (strike, cripple)
--Added kaido aff lines and updates old ones
--Added Tekura tracking for aff attacks and numb_arms tracking
--Added fend to self-parry trigger
--Added a few catches to quickwield/quickunwield to update GUI
--Added flame tattoo as a defense that you can use (flame_tattoo)
--Potentially fixed tracking for Zealot limb damage 3p on parried attacks, need to keep track
--Fixed direblow trigger not working correctly for 1p
--Removed haven point on experience gain if not above level 99
--Added who group parsing ("who groups") via Czcibor
--Fixed rend tracking to have a bit more leeway between venoms or actual rend
--Added more room suggestions for a different farsee
--Fixed tree line (apparently it changed?)
--Tentative counterattack protection
--Added an aetolia specific line to water mudletmap movement

--4.17
--Aegis function, assumes your city has it turned on (why wouldn't they?)
--Will auto aegis if you're attacking and meet certain criteria
--Fixed a few kaido triggers based on changelog 1670
--Fixed Sentinel reave due to undocumented change making the trigger different
--Fleshed out Sentinel offense to incorporate more attacks and not just spam trample

--4.16
--Updated wayfare defs
--Added tree/salve_seared

--4.15
--Added a fishing trigger that was missing
--Fixed shaman deffing

--4.14
--Added automatic dispersing with a toggle

--4.13
--Updated some Zealot attacks/triggers that were previously missed
--Updated/strenghtened restoration handling
--Went through each updated trigger with the pronoun change to account for (the racename) and fixed the matches on each.

--4.12
--Fixing random triggers that broke because of the changes below for pronouns
--Added survivor mobs and some weird eld to global targets

--4.11
--Conform to CONFIG PRONOUN - changed every he|her his|her etc to just be \w+.
--Fixed relic entangle/webspray not properly working

--4.10
--Added a safety to QL if it tries to target someone who it hasn't caught as leaving (evade, etc)
--Fixed deepwound not applying correctly for 1p
--Fixed dislocate on mending trigger, was using wrong function name.
--Updated to a new version of ascendril offenses courtesy of Hallis

--4.09
--Just debugging. Nothing major changed.

--4.08
--Alright, I swear to whatever god may listen to text rants, if the calling hasn't been fixed because GMCP is a POS at times, I'm going to 
--Fixed raloth limb breaking trigger to correctly capture breaks
--Updated Ascendril offenses

--4.07
--Fixed miasma/warmth/safeguard to not overlap each other constantly
--Made some changes to target calling w/debugging information to try and track down some problems

--4.06
--Fixed target calling AGAIN. Used the wrong variable.
--Fixed the route for gogo low
--Updated defenses to auto add miasma/safeguard/warmth based on race

--4.05
--Updated crippled_throat to 'crippled throat' for ease of use/tracking.
--Added sparklight into tables of mobs
--Fixed basher not actually changing the correct path

--4.04
--Updated the bashing loop to include two options. You can either choose an easier, longer path, or an endgame, xp focused path.
--Checks automatically if you don't pick either.
--Continued working on Ascendril.
--Fixed/changed method of target call over web changing target.

--4.03
--Fixed a bug with enemy aff displaying multiples of the same
--Fixed up ascendril offenses
--Added fulcrum flare triggers
--Focus now properly cures muddled
--Made a force to use miasma/warmth based on endgame race, it was just way easier this way

--4.02
--Updated ascendril aliases to use the already made system for defenses to check if a spell is stalled
--Fixed target affliction tracker which was messing up the removing of affs
--Fixed up the ylem path to remove an inaccessible location

--4.0
--Changed the "people in room" area to separate to shadow/spirit.
--It uses snd.shadow and snd.spirit primarily.
--WARNING - if there is someone that is not on the list, it will pull information from the Aetolia API to check their city.
--To do this, the function creates a small document (that it deletes once finished) in your home directory - use getMudletHomeDir() to check.
--Fixed soothing trigger to not proc on mending, whoops
--Changed ldd to also accept 'defup'. Will load based on class if no argument specified.
--halp has been updated and fleshed out
--?pk has been made and will show aliases for different modes with basic descriptions based on snd.class
--Added timing delays to 'fake call' and 'prismatic barrier' as spam is a friend of nobody, except..vegans or something? idk nobody reads changelogs anyways
--Lycan tracking should be fixed for the case of it retaining affs and removing the wrong ones on parry/resist
--Fixed an issue with Kai Cripple where we were using the wrong match and it wasn't tracking properly
--Updated checking target list with GMCP instead of who here.
--I think deffing is fixed after death? Maybe?
--The "people here" box in the bottom left should accurately update now. -dirty rotten lies but ITS FIXED maybe -- double fix, see below
--Fixed up the wayfarer aff support to utilize a bit more of the kit
--Added 1p shaman vinelash tracking
--Updated Carnifex hound handling with proper affs and it uses stuff other than contagion
--Combined Carnifex hound aff triggers into 1 so it'll track 1p and 3p affs
--Fixed a typo in the zeal chain attacks
--Fixed Zealot affs not clearing properly on new attacks, which would let parries on attack 2 clear attack 1
--Added Zealot Rejection to rebounding lines
--Opened up the bite trigger so it didn't break on artifact fangs and etc
--The goylem functions shouldn't loop now if you try it while in a city. You will need to GOYLEM START to restart it.
--Added a mounted check based on gmcp to above movement function.
--Added/updated area mobs to the bashing table: 
--Arbothia, Drakuum, Ollin, Kalydian, Maghuir Fissure, Torturer's Caverns, Mamashi, Three Rock, Ia'shal, Tcanna
--Shadow has weird calling habits and likes to call their class. Sunder will now recognize those aff calls appropriately.
--Added swirl/mental disrupt to 1p tracking
--Added research disperse to clear all writhes upon use on target by their ally
--Changed 'on' and 'off' to 'sndon' and 'sndoff' after a suggestion by Ehtias, thanks! No more accidentally turning stuff off or being unable to do certain things.
--The Shadowfiends are upon us. Huge influx of triggers for shadow based classes, including defenses and afflictions.
--Made the defense table a bit easier to navigate by separating most of the defenses per class
--Fixed up vinelash 3rd person hit confirmation
--Added finesse to track and undo properly
--Added the ability to call mobs by number with taget calling enabled (alias 'tcl')
--Fixed up the tracking of folks in room to separate shadow and spirit.
--If it finds someone that it doesn't have in snd.spirit/snd.shadow, it will download a text file of their information to your mudlet directory
--And check their city upon completion, as well as add them to a list. Click on the "New people to sort" to get info of who they are and where they go!
--Updated enemy affs to properly change colors for the lock affs (paralysis, asthma, stupidity, anorexia), as well as prone/pseudo prone
--Updated enemy limb tracker to display different colors for levels of breaks

--Added the function snd.checksomeAffs. 
--It accepts a list of affs in a table, along with a 2nd argument of a number of affs it needs to hit to return true
--For example: snd.checksomeAffs({"slickness","clumsiness", "hypochondria", "weariness", "paresis"}, 2)
--This will return true if 2 of the affs are hit, at minimum. This allows you to open up your aff checking and not be rigid.
--

--3.7 We did stuff here, a lot of stuff, but it got lost somewhere.

--3.6 (The Sentinel update)
--Moved where afflictions are added in snd.target_got so the display panel on left is updated for affs as they are on hit, rather than missing the last aff hit with
--Added prone to the display panel using snd.target_prone and checks in adding/removing affs
--Added ways to have display update removing prone because it's a pain in the neck ('not prone' and 'stood' triggers)
--Added sentinel defs (barksin, flexibility, lifesap, maskedscent, conceal, hardiness) and def lines
--Added sent defup option
--Added more limb break lines
--Added daunt and flourish handling along with daunt aff tracking
--Moved Sentinel aff picking to script to better facility special cases if they want to be made, an example is included
--Added icebreath/salve(trample for groups) offense for sentinels
--Removed some code from tfix+sensi for sentinel so it is more in line with the other modes
--Switched to GMCP for webtell target checking, removing the need to color check.
--Added tenacity/fury tracking
--Switched around and updated the target list

--3.5 (Templuminary additions)
--Updated vine entangle/webspray lines to confirm with changes in changelog 1505
--Implementing better group offenses - Templar/Luminary - Group impale and group aff
--Rewrote some handling of Luminary attacks, added crash, 1p dazzle
--Added snd.all_affs to easier check how many affs are on target
--Added Dhuriv Weaken to tracking

--3.4 (Anti-illusion crusade)
--Added in more customizable Sentinel offense
--Added/fixed Dhuriv attacks to track
--Added some Dhuriv specific curing to appropriate methods
--Updated prismatic handling to include another Templar specific attack
--Added hourglass handling including checking if an hourglass is inked on login
--Added automatic webtell color check and target call check to try to stop illusions -- this has been updated again in 3.6
--Added and fixed some raze tracking issues
--Will start calling affs again on new target switch instead of previous methodology
--Added a Shaman prone, another transfix line which may be overkill

--v3.3
--Added a counter for neckdrag.
--Fixed a bug that occasionally doubled up venoms if you only needed one to lock.
--Updated the lists of spirit/shadow players.
--Fixed a bug with void and ineffective cures in the same prompt as real ones.
--Added angel sacrifice to both 1p and 3p aff tracking cures.
--Added evoke cleansing for luminaries.
--Totally reworked the luminary group offenses.
--Fixed a bug that prevented accurately tracking class/faction on login.
--Added special onslaught eld to the top of the global target list.
--Added a very basic wayfarer offense.
--Expanded the 'halp' alias to include a lot of useful commands.
--Fixed a bug preventing targets from loading in the Shattered Vortex.

--v3.2
--Reworked afftracking for venoms/effects that give more than one aff.
--Improved tracking of flay for syssin.
--Cleaned up all syssin and a bunch of templar offenses.
--Updated how sunder tracks afflictions on target.
--Finished adding all of the weaponry hit lines.
--Further improved 3p affliction tracking with safety checks for luminaries.
--Improved re-queuing logic to avoid hitting rebounding, specifically.

--v3.1
--Improved the parrying even further.
--Expanded the templar 'ret' offense a little more.
--Fixed a bug that occasionally broke the system under certain parry conditions.
--Tidied and updated the templar dmg and zl aliases.
--Added more templar wielding options.
--Made some changes to how target_locked and missingAff functions work.
--Completely revamped third person attack tracking.
--Totally redid how sunder chooses which effects to use in a given round.

--v3.0: Daren's coup
--Reorganized a bunch of folders.
--Added a feature where FC will display missing venoms.
--Hooked up the exit-tracking window in the GUI.
--Added tracking of cube sigils in room.
--Fixed several minor bugs in affliction and prone tracking.
--Fixed some issues with the my and enemy affs windows, they display properly now.
--Updated the bashing table to reflect the previous changes from IH to GMCP.
--Made the melting call a little less obnoxious/frequent.
--Added some new tools like missingAff and target_locked for building offenses.
--Made some major changes to the 3p curing tracking, it's much more accurate now.
--Completely revamped the templar 'ret' offense.
--Improved the parry handling a little.

--v2.3
--Improved the attack queuing to update better as target status changes.
--Added a couple of syssin affliction-based offenses.
--Cleaned up a bunch of junk with global variables, converting to local where possible.
--Added monk defenses and a monk defense profile. Thanks Kalinaar!
--Expanded the alerts to include some other important conditions.
--Sunder will now attempt to automatically set your faction, making it more plug-and-play.

--v2.2
--Cleaned up handling of the toggles window, it should be more accurate now.
--Added some syssin defenses and QOL stuff. Thanks Daren!
--Added a basic syssin damage offense (dmg) for opportunistic garrotes.
--Added some firstaid elevate functionality for panicky stages in a few affs.
--The basher now runs off GMCP - may be some lingering bugs with this change, let me know.
--Apothecaries rejoice! There's not a 'global' target list!
--Added a questing module and some quest triggers and handling. Neat stuff.
--Added a new landmark system, you can set as many as you like now and pt &lt;landmark&gt;.
--  o Find the list in scripts-&gt;sunder-&gt;core-&gt;variables-&gt;landmarks
--Defended attacks will no long have their afflictions tracked.
--Sunder will now handle shrugging for syssin.

--v2.1
--Corrected a syntax error in absolve for lumis. Thanks Oonagh!
--Dramatically improved shifter tracking and offense. Thanks Taaroshi!
--Mjoll linked up the myaff and enemy aff windows. Thanks Mjoll!
--Fixed up some stuff with a couple of the templar offenses.
--Added some more 1p sentinel tracking. Thanks Stine!
--Also woodlore aff tracking. Also from Stine!
--Added more Carnifex defenses. Thanks Dagun!
--Added a new alias, 'grp', which lets you set a bashing group. Use grp none to clear it.
--Improved the 'wielded' tracking window, it's ALMOST always accurate now.
--Got the toggles windows working on the GUI - it's now officially over halfway functional!

--v2.0
--Fixed a bug with handling necromancy shrivel. Sorry :(
--Added some QOL aliases for lumi, like beckon and stuff.
--Added 3p dstab afftracking.
--Fixed an issue with looped target calling if listening to each other.
--Added mindnet and fullsense calls.
--Cleaned up alertness logic.
--Added directional keys.
--Target calling will now also make you pick up/drop monos on movement.
--Fixed a bug with shield swapping for lumi.
--Subjected myself to geyser :( Cleaned up the chat box a lot.
--Sunder now has an actual GUI. Not all of it works yet! COMING SOON (TM).
--Added tracking for monolith sigil in room.
--Added wielding tracking. Still slightly buggy, working on it!
--Added a new utilities folder with some stuff for toxicology.
--Sunder is now packaged in modules, though I'll also maintain a full package.
  --NOTE! I'm expecting bugs with this, please try it out and report errors!
--Fixed a bug with tekura bashing. Apparently there was no cobra toggle.
--The ls alias now supports multiple target callers.

--v1.6
--Added luminary class defenses and ldd lumi option.
--Fixed some stuff to make lumi shield-swapping cleaner.
--Added a couple of basic group offenses for monks.
--Removed blind/deaf from def options as firstaid handles it.
--Adjusted 'newb' mode for templars to cheese impale instead of just affs.
--Fixed a bug with uncalled 3p attacks adding random affs.
--Added first and third person aff tracking for sentinels.
--Made a sentinel version of ms and dmg both.

--v1.5
--Added chasten after overwhelm for lumi offenses.
--Added another zealot group offense, dmg.
--Added ln as a lunge alias.
--Added some serious alerts and echoes for radiance.
--Added an echo for parsing alertness.
--Fixed a bug with class tracking.
--Fixed a bug with rejecting lust tarot.
--Added some stuff to try and rescue allies in need.
--Added a luminary alias 'fs' to perform force stop.
--Added luminary perform force kick on prismatic barrier.
--Luminary group mode will now swap between shields as needed.
--Zealots and monks will GUARD instead of PARRY.
--Added a dmg alias for shapeshifters, too.

--v1.4
--Fixed a bug with shaman afftracking.
--Added a newb offense for Ascendril.
--Added auto class tracking, no more need to change.
--Cleaned up fitness handling, won't try it if you can't now.
--Added basic zealot support and mouse mode.
--Added a couple zones to the basher. Thanks Aeraisentesh!
--Added some support for firstaid to handle shrivel better.

--v1.3
--Cleaned up luminary first-person tracking.
--Added a mouse mode for luminary.
--Added mouse mode for ascendril, too.
--Affcalling will call blaze now for templars.
--Afftracking will track said blaze calls from templars.
--Added minimal shaman support, with mouse mode.
--Cleaned up some stuff with melting calls.
--Fixed an issue with web re-invite spam.

--v1.2
--Added support for shapeshifter defenses.
--Added shifter bashing.
--Fixed a bug with the fangbarrier defense.
--Added an alert for high madness while shifter.
--MUTATE/REVERT will now swap snd.class automatically.
--Fixed the spam issue with arti pipes when lighting is toggled on.

--v1.1.1 (hotfixes)
--Added a better cooldown to panic alerts.
--Added some more checks to the auto-web-invite.
--Removed PvE target calls.
--Fitness toggle will now actually toggle use of fitness.
--Added a scepter toggle for bashing.

--v1.1
--Fixed a major issue with afftracking and rebounding aura.
--Added a new ms alias to templars.
--Expanded afftracking to allow for prone conditions.
--Added a dummy mode generic offense that just punches repeatedly.
--Added entanglement tracking.
--Distinguished between paresis and paralysis for afftracking.
--Added a panic toggle that cries for help as needed.
--Added class-based auto-defend for panicking allies.
--Added some UNDEFEND checks, too.
--Made impale attempts check for physical affs to extend writhe.
--Added auto-web-invite if an ally web quits while attacking.

--v1.0 (out of alpha!)
--Added support for Carnifex.
--Added Carnifex limb and aff routes.
--Added Carnifex third person tracking for limbs and affs.
--Added snd.faction to toggle faction-based functions.
--Added warhound handling! Woo puppies!
--Corrected some errors in tracking a couple defenses.
--Fixed a bug with clearing affs on re-targeting.
--Expanded the list of spirit-side players.
--Added target following with the ls alias (ls off to turn off).
--Added Ayhesa to the pather for bashing.
--Cleaned up some offense options and checks for easier use.

--v0.7
--Fixed several tracking issues with people leaving the room.
--Added a new templar offense route, mg, for magic-based classes.
--Combined the iceblast and stun limb offenses. Super offense!
--Added proper tracking of shivering/frozen affs on target.
--Dramatically changed limb route logic - again.
--Fixed a bug with auto-calling and lyres. Oh the spam.

--v0.6
--Dramatically cleaned up 1p attack echoes. Whew.
--Tweaked templar bashing to support DSK too.
--Added fitness toggle and use of it.
--Started working on the questing module.
--Fixed a bug with the ylem hunter not using leylines.
--Added basic luminary offense stuff.

--v0.5 (beta!)
--Did a total rewrite. Omg.
--Fixed so many bugs. Can't remember them all.
--Cleaned up a lot of unnecessary or redundant variables.
--Added a wield alias for limb weapons.
--Made some major adjustments to limb offense, much nicer now.
--Added some toggles, like newbie and parrying.
--Added third-person luminary aff tracking.

--v0.4.1
--Added basic templar limb offense.

--v0.4 (alpha)
--Cleaned up eld shackling, it's pretty smart now.
--Removed the pile of manure from the ylem hunter.
--Added Nal'jin Depths to the auto basher.
--Added soul substitute for resetting offense.
--Replaced a bunch of ylem-related lines to reduce spam.
--Added a more obvious alert for prismatic barriers.
--Added lower Tiyen to the basher too.
--Added sight as a valid aff. Yay transfix.
--Added new offense options: mana, jesus, legs, and arms.
--Added rudimentary auto-calling.
--Cleaned up a bunch of spammy junk.

--v0.3 (pre-alpha)
--Added a bunch of dead people checks to stop the offense junk.
--Seriously cleaned up the ylem hunter. Like a lot.
--Sank some time into optimizing the zeal offense.
--Added target calling, and an anti-illusion check for it.
--Tweaked the scent calling to ignore your current room.

--v0.2 (pre-pre-alpha)
--Added lots more paths to the basher. Yay bashing.
--Added elemancy reflection to razing, and third person aff tracking.
--Also, added razing to third person tracking, to avoid doing it double.
--Refined some of the venom stacks, specifically the 'ret' one.
--Added more subs, colors, and echoes to reduce spam.
--Put in a prone check to STAND while bashing.
--Worked up a currently primitive ylem hunter thing.
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>init</name>
					<packageName></packageName>
					<script>
snd = snd or {}

setConsoleBufferSize("main", 100000, 1000)

snd.gui = snd.gui or {
  enabled = true,
  }
 

fish = fish or {}</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>login</name>
					<packageName></packageName>
					<script>function snd.login()
  tempTimer(0, function()
  sendGMCP([[Core.Supports.Add ["Comm.Channel 1", "IRE.Time 1"] ]]) -- allows us to use GMCP for communication and time tracking
  snd.pipes_lit = false
  
  raiseEvent("sunder_update_toggles")
  
  if snd.class == "Ascendril" then send("simultaneity") end
  if snd.class == "Bloodborn" then send("prowess") end
  if snd.class == "Sciomancer" then send("channel shadow") end
  if snd.class == "Runecarver" then send("straddle line") end
  if snd.class == "Archivist" then send("empower jhako") end
  
  enableTrigger("Separator Check/Update")
  send("config separator", false)
  
  tempTimer(1, function() raiseEvent("sunder_login") end)
  tempTimer(2.5, function() snd.changeClass() sendGMCP("Char.Skills.get") send("") end)
  tempTimer(4, [[send("tattoos", false)]])
  snd.registerCityMarks()
  local x, y = string.match(gmcp.Char.Status.level, "(.*) (.*)")
  local level = tonumber(x)
  if level &gt;= 99 then
    tempTimer(5, [[send("raceskill list", false)]])
  end
                
  --tempTimer(10, [[if not sndNDB.highlightNames then expandAlias("sndb hl") end]])
  end)
end


registerAnonymousEventHandler("gmcp.Char.Name", "snd.login")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Death handling</name>
					<packageName></packageName>
					<script>function snd.deathCheck()
  if gmcp.Char.Afflictions.Add.name == "dead" then
    snd.reset_me()
    snd.toggles.active = false
    raiseEvent("sunder_update_toggles")
    for i in pairs(snd.my_limb_damage) do
      snd.my_limb_damage[i] = 0
    end
  end
end

function snd.deathClear()
  for _, aff in pairs(gmcp.Char.Afflictions.Remove) do
    if aff == "dead" then
      snd.reset_me()
      for i in pairs(snd.defenses) do
        snd.defenses[i].needit = false
      end
      snd.toggles.active = true
      raiseEvent("sunder_update_toggles")
    end
  end
end

registerAnonymousEventHandler("gmcp.Char.Afflictions.Add", "snd.deathCheck")
registerAnonymousEventHandler("gmcp.Char.Afflictions.Remove", "snd.deathClear")</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Variables</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>options</name>
						<packageName></packageName>
						<script>snd.sep = snd.sep or "\\" -- important! CONFIG SEPARATOR value
--snd.mount = snd.mount or "79667" -- your horse's ID number


snd.faction = snd.faction or "" -- your faction, spirit or shadow
snd.class = snd.class or "" -- your class, used for bashing
snd.limb_dmg_done = snd.limb_dmg_done or 6.5 -- really only for Templars

snd.stats = snd.stats or { 
  xp = 0,
  last_xp = 0,
  max_xp = 0,
}

snd.toggles = snd.toggles or {
active = true, -- is the system running?
healing = false, -- keep off, incomplete
parrying = true, -- parry most-damaged limb
defenses = true, -- maintain defenses like cloak and density
calling = false, -- call targets on web chat
listening = false, -- listening to targets on web chat
affcalling = false, -- announce afflictions as you hit
chameleon = false, -- use chameleon to change name on qw/who
chameleonPeople = {"Benedicto"},
standing = true, -- like healing, also incomplete
clotting = true, -- incomplete
bashing = false, -- bashing! Woo!
fasthunt = false, -- automatically clear bashing rooms as you enter
generics = false, -- target by name instead of number while bashing
gathering = true, -- pick up corpses/items/gold while bashing
lighting = true, -- light pipes
attacking = false, -- attacking with a PvP function
balecho = true, -- replace balance lines with shorthand
atkecho = true, -- replace attack lines with shorthand
newbie = false, -- use newbie bashing attacks
cobra = false, -- use of tekura cobra stance
lightning = false, -- use Luminary lightning for bashing
gallop = false, -- use gallop while pathing around
dash = false, -- use of dash while pathing around
rockharvest = false, -- are you harvesting rocks?
disperse = false, -- use disperse to remove writhes from allies
questing = false, -- Used to stop you from randomly questing while doing other stuff
vermin = false, -- Toggle vermin walker/basher
goggles = false, -- Do you have the antiquated artifact goggles?
goggle_level = 0,
gauntlet_level = 0,
diagaffs = 3,
nontargetgags = true, -- spam filter for removing non-target curing
fitness = true, -- have access to the fitness ability
shrug = false, -- have access to shrug
purge = false, -- have access to Carnifex/Revenant purge
purify = false, -- have access to Praenomen/Akkari purify
panacea = false, -- have access to Shaman/Alchemist panacea
dome = false,
auto_reject = false,
fastwalk = false,
prism = false,
enrich = false,
gags = true,
targetrune = false,
alerts = false,
ascendedtype = "none",
mount = "123456",
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>toggles</name>
						<packageName></packageName>
						<script>function snd.toggle(toggle)
  if snd.toggles[toggle] then
    snd.toggles[toggle] = false
    snd.message(string.title(toggle) .. " &lt;red&gt;OFF&lt;white&gt;!", "toggle")
    if toggle == "chameleon" then
      snd.defenses["def_chameleon"].needit = false
    end
  else
    snd.toggles[toggle] = true
    snd.message(string.title(toggle) .. " &lt;green&gt;ON&lt;white&gt;!", "toggle")
    if toggle == "chameleon" then
      snd.defenses["def_chameleon"].needit = true
    end
  end
  
  raiseEvent("sunder_update_toggles")

  send(" ")
end

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>vitals</name>
						<packageName></packageName>
						<script>snd.balance = snd.balance or {
  fitness = true,
  shrug = true,
  battle = true,
  hound = true,
  implant = true,
  soulpoison = true,
  purge = true,
  panacea = true,
  cleanse = true,
  fool = true,
  mend = true,
  expunge = true,
  purify = true,
  nimbleness = true,
  momentum = true,
  absorb = true,
  earthenwill = true,
  morph = true,
  ethereal = false,
  furor = true,
  vitality = true,
  kaistrike = true,
  mindcommand = true,
  blackout = true,
  mindpush = true,
  mindcleanse = true,
  madness = true,
  numbness = true,
  pendulum = true,
  battle = true,
  backstab = true,
  rage = true,
  enrich = true,
  regenerate = true,
  crystal = true,
  aeon = true,
  chimera = true,
  envelop = true,
  soulmaster = true,
  sorcery_transfix = true,
  inspire = true,
  bravado = true,
  might = true,
  leech = true,
  shadowsphere = true,
  unbroken = true,
  soulcage = true,
  wand = true,
  fury = true
}

snd.waiting = snd.waiting or {
balance = false,
equilibrium = false,
rarm = false,
larm = false,
quest_get = false,
lighting = false,
elixir = false,
herb = false,
vial = false,
salve = false,
moss = false,
writhe = false,
concentrate = false,
tree = false,
focus = false,
clot = false,
parry = false,
queue = false,
who_here = false,
hound = false,
purge = false,
purify = false,
panacea = false,
melting = false
}
snd.hidden_afflictions = snd.hidden_afflictions or 0

snd.my_limb_damage = snd.my_limb_damage or {
head = 0,
torso = 0,
["left arm"] = 0,
["right arm"] = 0,
["left leg"] = 0,
["right leg"] = 0
}

snd.parrying = snd.parrying or "none"
snd.pipes_lit = snd.pipes_lit or false
snd.emptypipes = snd.emptypipes or
{
  willow = false,
  yarrow = false,
  reishi = false,
}
snd.smokedpipe = snd.smokedpipe or "none"

snd.sent = {

}

snd.cur = snd.cur or {
herb = "",
drink = "",
vial = "",
salve = "",
pipe = ""
}

snd.last = snd.last or {
elixir = "",
herb = "",
smoke = "",
salve = "",
tattoo = "",
focus = "",
tree = ""
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>misc</name>
						<packageName></packageName>
						<script>
snd.queued = snd.queued or nil
snd.target = snd.target or "none"
snd.target_gone = snd.target_gone or false
snd.moving_to = snd.moving_to or "none"
snd.can_path = snd.can_path or true
snd.scented = snd.scented or {}
snd.items = snd.items or {}
snd.group = snd.group or {}
snd.wielded = snd.wielded or {left =  {name="", id=""}, right = {name="", id=""}}
snd.eld = snd.eld or 0
snd.pathing = snd.pathing or false
snd.need_fitness = snd.need_fitness or false
snd.need_dome = snd.need_dome or false
snd.shopih = snd.shopih or false
snd.toparry = snd.toparry or "none"
snd.counterattack_active = snd.counterattack_active or false
snd.ylem_check = snd.ylem_check or false
snd.pushattack = snd.pushattack or false
snd.probed = false
snd.punisher = false

snd.delete_prompt = snd.delete_prompt or false

snd.used = snd.used or {
shield = false,
rebounding = false,
paste = false
}

snd.my = snd.my or {
area = "",
room = "",
room_name = "",
room_exits = "",
}

snd.new = snd.new or {
room = false,
area = false
}

snd.pills = {
acuity = "a pill of acuity",
amaurosis = "a pill of amaurosis",
anabiotic = "an anabiotic pill",
antipsychotic = "an antipsychotic pill",
coagulation = "a coagulation pill",
decongestant = "a decongestant pill",
depressant = "a depressant pill",
euphoriant = "an euphoriant pill",
kawhe = "a kawhe pill",
opiate = "an opiate pill",
ototoxin = "an ototoxin pill",
panacea = "a panacea pill",
steroid = "a steroid pill",
stimulant = "a stimulant pill",
thanatonin = "a thanatonin pill",
eucrasia = "an eucrasia pill",
waterbreathing = "a pill of waterbreathing",
}


snd.balance_pills = {
"antipsychotic",
"amaurosis",
"steroid",
"opiate",
"panacea",
"euphoriant",
"ototoxin",
"decongestant",
"stimulant",
"depressant",
"waterbreathing",
"eucrasia",
}

snd.outred = snd.outred or {
ash = 0,
bayberry = 0,
bellwort = 0,
bloodroot = 0,
cohosh = 0,
echinacea = 0,
elm = 0,
ginseng = 0,
goldenseal = 0,
hawthorn = 0,
help = 0,
kola = 0,
lobelia = 0,
moss = 0,
pear = 0,
sileris = 0,
skullcap = 0,
valerian = 0,
antipsychotic = 0,
eucrasia = 0,
amaurosis = 0,
steroid = 0,
opiate = 0,
panacea = 0,
euphoriant = 0,
ototoxin = 0,
decongestant = 0,
stimulant = 0,
depressant = 0,
waterbreathing = 0,
}

snd.physical_affs = {
"paralysis",
"paresis",
"right_arm_crippled",
"left_arm_crippled",
"right_leg_crippled",
"left_leg_crippled",
"haemophilia",
"asthma",
"impairment",
"clumsiness",
"vomiting",
"sensitivity",
"ringing_ears",
"lethargy",
"blood_poison",
"blood_curse",
"crippled_throat",
"slough",
"disfigurement",
"blisters",
"lightwound",
"ablaze",
"hypothermia",
"shivering",
"frozen",
"limp_veins",
"rend",
"exhausted",
"allergies",
"addiction",
"hypersomnia",
"heartflutter",
"whiplash",
"backstrain",
"sore_wrist",
"sore_ankle", 
"burnt_eyes",
"blurry_vision",
"migraine",
"deadening",
"ice_encased",
}

snd.mental_affs = {
"egocentric",
"stupidity",
"anorexia",
"epilepsy",
"mirroring",
"mental_disruption",
"peace",
"paranoia",
"hallucinations",
"dizziness",
"indifference",
"berserking",
"pacifism",
"lovers_effect",
"laxity",
"hatred",
"generosity",
"claustrophobia",
"vertigo",
"faintness",
"loneliness",
"agoraphobia",
"masochism",
"recklessness",
"weariness",
"impatience",
"confusion",
"dementia",
"dread"
}

snd.all_affs =  table.n_union(snd.physical_affs, snd.mental_affs, { "hypochondria",})

snd.anxieties = {
"sadness",
"self_pity",
"baldness",
"commitment_fear",
"body_odor",
"hubris",
"worrywart",
"itchy",
}

snd.other_affs = {
"stuttering",
"hypochondria",
"patterns",
"stormtouched",
"rot_body",
"rot_wither",
"rot_heat",
"rot_spirit",
"rot_benign",
"idiocy",
"plodding",
"crippled",
"crippled_body",
"accursed",
"agony",
"superstition",
"justice",
"magnanimity",
"thin_blood",
"merciful",
"shyness",
"dissonance",
"infested",
"blighted",
"misery",
"hollow",
"narcolepsy",
"perplexed",
"self_loathing",
"aeon",
"hellsight",
"deadening",
"withering",
"squelched",
"gloom",
"muddled",
}

snd.real_all_affs =  table.n_union(snd.physical_affs, snd.mental_affs, snd.anxieties, snd.other_affs)

snd.circle_affs = {
"merciful",
"masochism",
"berserking",
"recklessness",
"sealing_circle"
}
snd.triangle_affs = {
"laxity",
"lovers_effect",
"peace",
"magnanimity",
"sealing_triangle"
}
snd.square_affs = {
"dizziness",
"faintness",
"epilepsy",
"shyness",
"sealing_square"
}

snd.weapon_types = {
"club",
"flail",
"mace",
"morningstar",
"greatmaul",
"warhammer",
"handaxe",
"javelin",
"battleaxe",
"broadsword",
"dagger",
"stiletto",
"dirk",
"falchion",
"falcata",
"flyssa",
"longsword",
"rapier",
"sarissa",
"scimitar",
"shortsword",
"spear",
"trident",
"whip",
"bardiche",
"bastard",
"falx",
"glaive",
"halberd",
"scythe",
"shotel",
"gladius",
"manta",

"banded",
"buckler",
"cavalry",
"kite",
"tower",
"shield",
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>landmarks</name>
						<packageName></packageName>
						<script>snd.landmarks = snd.landmarks or {}
--tear of lleis
snd.landmarks.tear = 19296

--pk objective thing.
snd.landmarks.orrery = 62642

--Fengard mobs
snd.landmarks.tara = 18815
snd.landmarks.cosmina = 18838
snd.landmarks.derryk = 18829
snd.landmarks.sylvos = 18826
snd.landmarks.tiber = 18843
snd.landmarks.gladius = 18852
snd.landmarks.gloom = 19083
snd.landmarks.derban = 19072
snd.landmarks.grothgar = 19060
snd.landmarks.grollum = 19094
snd.landmarks.smirnick = 19065
snd.landmarks.smythe = 18766
snd.landmarks.helfga = 18798
snd.landmarks.naggamantex = 18773
snd.landmarks.glixx = 18774
snd.landmarks.quelzar = 18792
snd.landmarks.sisters = 18789
snd.landmarks.hecuba = 19100

--turnin for tellimerius
snd.landmarks.kerrach = 23219

--milestone mobs
snd.landmarks.tellimerius = 23236 --one north of telli
snd.landmarks.broondac = 26627 --in the spire leading to the prison.
snd.landmarks.belmith = 60083
snd.landmarks.marcello = 27124 --This is north of marcello's guards.
snd.landmarks.axel = 17606
snd.landmarks.makkali = 4438
snd.landmarks.mamba = 11162
snd.landmarks.tolonar = 3999 --west of tolonar
snd.landmarks.gorgon = 36814

--other milestone things
snd.landmarks.herolt = 57296
snd.landmarks.farkle = 61403
snd.landmarks.lineconnect = 66482
snd.landmarks.poker = 53397
snd.landmarks.safari = 52786

snd.landmarks.boggard = 53409 --turning for black ylem

snd.landmarks.hg = 4746

snd.landmarks.nighteye = 9342
snd.landmarks.claw = 9341
snd.landmarks.shade = 6090
snd.landmarks.staghelm = 9348
snd.landmarks.silence = 4614
snd.landmarks.rose = 9341
snd.landmarks.ivory = 6842
snd.landmarks.rowan = 6842
snd.landmarks.hgshrine = 23489


local citymarks =
  {
    Enorian = {staging = 56509, training = 55768},
    Bloodloch = {staging = 65913, training = 9330},
    Spinesreach = {staging = 73174, training = 52748},
    Duiran = {staging = 52260, training = 52260},
  }
function snd.registerCityMarks()
  if citymarks[gmcp.Char.Status.city] then
    for name, num in pairs(citymarks[gmcp.Char.Status.city]) do
      snd.landmarks[name] = num
    end
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>class_catch</name>
						<packageName></packageName>
						<script>function class_catch()

  if snd.class == "Luminary" then
    snd.defenses.def_constitution = snd.alternative_class_defenses.Luminary_constitution
  end
  
  if snd.class == "Earthcaller" then
    snd.defenses.def_constitution = snd.alternative_class_defenses.Earthcaller_constitution
  end
  
  if snd.class == "Syssin" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Syssin_shroud
  end
  
  if snd.class == "Carnifex" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Carnifex_shroud
  end
  
  if snd.class == "Warden" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Warden_shroud
    snd.defenses.def_fearless = snd.alternative_class_defenses.Warden_fearless
  end
  
   if snd.class == "Indorani" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Indorani_shroud
  end
  
   if snd.class == "Oneiromancer" then
    snd.defenses.def_shroud = snd.alternative_class_defenses.Oneiromancer_shroud
  end

   if snd.class == "Revenant" then
    snd.defenses.def_maingauche = snd.alternative_class_defenses.Revenant_maingauche
  end
  
   if snd.class == "Ascendril" then
    snd.defenses.def_empowered_moon = snd.alternative_class_defenses.Ascendril_empowered_moon
  end
  
   if snd.class == "Bloodborn" then
    snd.defenses.def_empowered_moon = snd.alternative_class_defenses.Bloodborn_empowered_moon
  end
  
   if snd.class == "Sciomancer" then
    snd.defenses.def_empowered_moon = snd.alternative_class_defenses.Sciomancer_empowered_moon
  end
  
   if snd.class == "Runecarver" then
    snd.defenses.def_empowered_moon = snd.alternative_class_defenses.Runecarver_empowered_moon
  end

  if snd.class == "Akkari" then
    snd.defenses.def_stalking = snd.alternative_class_defenses.Akkari_stalking
    snd.defenses.def_hiding = snd.alternative_class_defenses.Akkari_hiding
  end
  
  if snd.class == "Praenomen" then
    snd.defenses.def_stalking = snd.alternative_class_defenses.Praenomen_stalking
    snd.defenses.def_hiding = snd.alternative_class_defenses.Praenomen_hiding
  end
  
  if hasSkill("Insomnia") then
    snd.defenses.def_insomnia = snd.alternative_class_defenses.Skill_insomnia
  end
  
  if snd.assumed_class ~= nil then return end
	local stats = gmcp.Char.Vitals.charstats
	for i,v in ipairs(stats) do
 		stat = string.split(v, ": ")
 		if stat[1] == "Class" then
   			snd.class = stat[2]
  		end
	end
  
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Vitals</string>
						</eventHandlerList>
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Events</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>gmcp_room</name>
						<packageName></packageName>
						<script>function gmcp_room()
  --Check current room
  if snd.my.room ~= gmcp.Room.Info.num then
    --Clear room effects
    --Set current room
    snd.my.room = gmcp.Room.Info.num
    snd.my.room_name = gmcp.Room.Info.name
    snd.my.room_exits = {}
    for ex in pairs(gmcp.Room.Info.exits) do
      table.insert(snd.my.room_exits, ex)
    end
    raiseEvent("sunder_room_updated")
    if snd.toggles.rockharvest then
      snd.send("harvest rock")
    end
    if snd.toggles.plants then
      snd.send("plants")
    end
    if snd.bashing_loaded then
      snd.vermin = 0
      if snd.toggles.vermin then
        enableTimer("moveroom")
      end
      --Initiate fasthunt if necessary
      snd.need_loot = false
      snd.new.room = true
      snd.room_clear = false
      if (snd.my.room == 56222 or snd.my.room == 55185) and snd.toggles.fasthunt then
        -- snd.send("pull lever")
        -- snd.send("west")
      end
      if snd.my.room == 55187 and snd.toggles.fasthunt then
        -- snd.send("pull lever196935")
        -- snd.send("east")
      end
      if snd.my.room == 16941 then
        snd.send("push bookcase")
      end
      if snd.my.room == 16949 then
        snd.send("pull lever")
      end
    end
    if snd.offense_loaded then
      snd.class_hitting = "none"
      snd.person_hitting = "none"
    end
    if snd.ylem_loaded then
      if snd.my.room == tonumber(ylm.next_zone) then
        snd.send("leylines")
      end
    end
  end
  --Check current area
  if snd.my.area ~= gmcp.Room.Info.area then
    if
      snd.my.area ~= "Eld" and
      (
        not (snd.my.area:find("Vortex") and gmcp.Room.Info.area == "the Shattered Vortex") or
        (snd.my.area:find("Vortex") and gmcp.Room.Info.area ~= "the Shattered Vortex")
      )
    then
      --have exceptions for fracture and vortex then
      snd.my.area = gmcp.Room.Info.area
      --Initiate new area targets, if necessary
      snd.new.area = true
      --Set current area
    end
  end
end</script>
						<eventHandlerList>
							<string>gmcp.Room.Info</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>gmcp_vitals</name>
						<packageName></packageName>
						<script>function gmcp_vitals()
  -- snd.core()
  if gmcp.Char.Vitals.prone == "1" and snd.not_entangled() and snd.not_aff("paralysis") then
    snd.aff_have("prone")
  else
    snd.aff_remove("prone")
  end
  if snd.can_cast() then
    snd.last_attack = "none"
  end
  if tonumber(gmcp.Char.Vitals.bleeding) &gt;= 200 then
    snd.aff_have("bleeding")
  else
    snd.aff_remove("bleeding")
  end
  hp = (100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)) or 100
  if hp &lt; 10 then
    snd.aff_have("health_10")
  elseif hp &lt; 35 then
    snd.aff_remove("health_10")
    snd.aff_have("health_35")
  elseif hp &lt; 55 then
    snd.aff_remove("health_10")
    snd.aff_remove("health_35")
    snd.aff_have("health_55")
  elseif hp &lt; 75 then
    snd.aff_remove("health_10")
    snd.aff_remove("health_35")
    snd.aff_remove("health_55")
    snd.aff_have("health_75")
  else
    snd.aff_remove("health_10")
    snd.aff_remove("health_35")
    snd.aff_remove("health_55")
    snd.aff_remove("health_75")
  end
  if hp &lt; 65 then
    snd.aff_have("health_low")
  else
    snd.aff_remove("health_low")
  end
  mp = 100 * (gmcp.Char.Vitals.mp / gmcp.Char.Vitals.maxmp)
  if mp &lt; 10 then
    snd.aff_have("mana_10")
  elseif mp &lt; 35 then
    snd.aff_remove("mana_10")
    snd.aff_have("mana_35")
  elseif mp &lt; 55 then
    snd.aff_remove("mana_10")
    snd.aff_remove("mana_35")
    snd.aff_have("mana_55")
  elseif mp &lt; 75 then
    snd.aff_remove("mana_10")
    snd.aff_remove("mana_35")
    snd.aff_remove("mana_55")
    snd.aff_have("mana_75")
  else
    snd.aff_remove("mana_10")
    snd.aff_remove("mana_35")
    snd.aff_remove("mana_55")
    snd.aff_remove("mana_75")
  end
  if mp &lt; 65 then
    snd.aff_have("mana_low")
  else
    snd.aff_remove("mana_low")
  end
  hp = 100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)
  if
    snd.toggles.attacking and snd.offense_loaded and snd.check_dome() and snd.toggles.dome
    and (snd.count(snd.people_hitting_me) &gt;= 3 or snd.aff_tally() &gt;= 5 or hp &lt; 50)
  then
    snd.need_dome = true
  else
    snd.need_dome = false
  end
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Vitals</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>gmcp_items</name>
						<packageName></packageName>
						<script>
function gmcp_items()
 if gmcp.Char.Items.List.location == "room" then
  snd.items = {}
  snd.agros = {}
  for _, v in ipairs(gmcp.Char.Items.List.items) do
   if not snd.items[v.name] then snd.items[v.name] = {} end
   if v.icon == "face-angry-horns" then
    if not snd.agros[v.name] then snd.agros[v.name] = {} end
      table.insert(snd.agros[v.name], v.id) --insert to agros table
      table.insert(snd.items[v.name], 1, v.id) --insert at start of table
    else
     table.insert(snd.items[v.name], v.id) --insert at end of table
   end
  end 
  snd.updateMonolith()
 elseif gmcp.Char.Items.List.location == "inv" then
  snd.wielded = {left =  {name="", id=""}, right = {name="", id=""}}
  if gmcp.Char.Vitals.wield_left ~= "empty" then
    snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
    snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
  end
  if gmcp.Char.Vitals.wield_right ~= "empty" then
    snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
    snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
  end
 end
 snd.updateItems()
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Items.List</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>gmcp_item_add</name>
						<packageName></packageName>
						<script>
function gmcp_item_add()
 v = gmcp.Char.Items.Add.item
 if gmcp.Char.Items.Add.location == "room" then
  if not snd.items[v.name] then snd.items[v.name] = {} end
  if v.icon == "face-angry-horns" then
    if not snd.agros[v.name] then snd.agros[v.name] = {} end
    table.insert(snd.agros[v.name], v.id)
  end
  table.insert(snd.items[v.name], v.id)
  snd.updateMonolith()
 elseif gmcp.Char.Items.List ~= nil then
  if gmcp.Char.Vitals.wield_left ~= "empty" then
    snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
    snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
  end
  if gmcp.Char.Vitals.wield_right ~= "empty" then
    snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
    snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
  end
 end
 snd.updateItems()
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Items.Add</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>gmcp_item_remove</name>
						<packageName></packageName>
						<script>function gmcp_item_remove()
  v = gmcp.Char.Items.Remove.item
  if gmcp.Char.Items.Remove.location == "room" then
    if v == snd.bashing.target and snd.toggles.fasthunt then
      snd.runBasher()
    end
    for item in pairs(snd.items) do
      for id in pairs(snd.items[item]) do
        if snd.items[item][id] == v.id then
          table.remove(snd.items[item], id)
          if #snd.items[item] == 0 then
            snd.items[item] = nil
          end
        end
      end
    end
    for item in pairs(snd.agros) do
      for id in pairs(snd.agros[item]) do
        if snd.agros[item][id] == v.id then
          table.remove(snd.agros[item], id)
          if #snd.agros[item] == 0 then
            snd.agros[item] = nil
          end
        end
      end
    end
    snd.updateMonolith()
  elseif gmcp.Char.Items.List ~= nil then
    if gmcp.Char.Items.List.location == "inv" then
      if gmcp.Char.Vitals.wield_left ~= "empty" then
        snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
        snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
      end
      if gmcp.Char.Vitals.wield_right ~= "empty" then
        snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
        snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
      end
    end
  end
  snd.updateItems()
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Items.Remove</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>gmcp_item_update</name>
						<packageName></packageName>
						<script>function gmcp_item_update()
  v = gmcp.Char.Items.Update.item
  --echo(v.name)
  if gmcp.Char.Items.Update.location == "inv" then
    if gmcp.Char.Vitals.wield_left ~= "empty" then
      snd.wielded.left.name = string.match(gmcp.Char.Vitals.wield_left, "%a+")
      snd.wielded.left.id = string.match(gmcp.Char.Vitals.wield_left, "%d+")
    end
    if gmcp.Char.Vitals.wield_left ~= "empty" then
      snd.wielded.right.name = string.match(gmcp.Char.Vitals.wield_right, "%a+")
      snd.wielded.right.id = string.match(gmcp.Char.Vitals.wield_right, "%d+")
    end
  else
    if snd.wielded.left.id == v.id then
      snd.wielded.left.name = ""
      snd.wielded.left.id = ""
    elseif snd.wielded.right.id == v.id then
      snd.wielded.right.name = ""
      snd.wielded.right.id = ""
    end
  end
  snd.updateItems()
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Items.Update</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>gmcp_people_update</name>
						<packageName></packageName>
						<script>function gmcp_people_update()
  snd.players_here = {}
  for k, v in ipairs(gmcp.Room.Players) do
    if not table.contains(snd.players_here, gmcp.Room.Players[k].name) then
      table.insert(snd.players_here, gmcp.Room.Players[k].name)
    end
  end
  snd.are_we_checking_ql = false
  raiseEvent("sunder_people_update")
end</script>
						<eventHandlerList>
							<string>gmcp.Room.Players</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>gmcp_people_remove</name>
						<packageName></packageName>
						<script>function gmcp_people_remove()

local removePlayer = gmcp.Room.RemovePlayer
  if table.contains(snd.players_here, removePlayer) then
      table.remove(snd.players_here, table.index_of(snd.players_here, removePlayer))   
  end
  raiseEvent("sunder_people_update")
end


</script>
						<eventHandlerList>
							<string>gmcp.Room.RemovePlayer</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>gmcp_people_add</name>
						<packageName></packageName>
						<script>function gmcp_people_add()
  local newPlayers = gmcp.Room.AddPlayer.name
  if not table.contains(snd.players_here, newPlayers) then
    table.insert(snd.players_here, newPlayers)
    raiseEvent("sunder_people_update")
  end
end</script>
						<eventHandlerList>
							<string>gmcp.Room.AddPlayer</string>
						</eventHandlerList>
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Misc</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Skill Checking</name>
						<packageName></packageName>
						<script>	snd.skills = snd.skills or {}
  snd.skills.tattoos_on_me = snd.skills.tattoos_on_me or {}
  snd.skills.raceskills = snd.skills.raceskills or {}</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>parse_skillsets</name>
							<packageName></packageName>
							<script>function parse_skillsets()
  local tattoos = {}
  local racials = {}
  if snd.skills.tattoos_on_me ~= nil then
    tattoos = snd.skills.tattoos_on_me
  end
  if snd.skills.raceskills ~= nil then
    racials = snd.skills.raceskills
  end

	snd.skills = {}
  
  snd.skills.raceskills = racials
  snd.skills.tattoos_on_me = tattoos

	for _, set in ipairs(gmcp.Char.Skills.Groups) do
		local skills = string.format("Char.Skills.Get %s", yajl.to_string({ group = set.name }))
		sendGMCP(skills)
	end
	send("\n")
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Skills.Groups</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>populate_skills</name>
							<packageName></packageName>
							<script>function populate_skills()

	local group = gmcp.Char.Skills.List.group
	local list = gmcp.Char.Skills.List.list
	local newlist = {}
	for i, val in ipairs(list) do
		list[i] = val:gsub("* ", "")
	end

	if group then
		if not snd.skills then snd.skills = {} end
			snd.skills[group] = list
	end
end</script>
							<eventHandlerList>
								<string>gmcp.Char.Skills.List</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>has_skill</name>
							<packageName></packageName>
							<script>function hasSkill(skill, tree)

	if not snd.skills then return false end

  if skill == "Generic" or skill == "Goggle" then return true end
  
  if snd.assumed_class ~= nil then return true end

	if tree then
		if snd.skills[tree:lower()] and table.contains(snd.skills[tree:lower()], skill) then
			return true
		else
			return false
		end
	else
		if table.contains(snd.skills, skill) then
			return true
		else
			return false
		end
	end
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>message</name>
						<packageName></packageName>
						<script>
function snd.message(string, type)
  if snd.toggles.gags then
    if type == "atk" then
      color = "magenta"
    elseif type == "death" then
      color = "red"
    elseif type == "q" then
      color = "brown"
    elseif type == "balance" then
      color = "orange"
    elseif type == "level" then
      color = "yellow"
    elseif type == "reset" then
      color = "brown"
    elseif type == "affliction" then
      color = "DeepSkyBlue"
    elseif type == "dendara" then
      color = "green"
    else
      color = "white"
    end
    if type == "toggle" or type == "echo" then
      line = ""
    else
      line = "\n"
    end
    cecho(line.."&lt;green&gt;[&lt;white&gt;SND&lt;green&gt;]&lt;"..color.."&gt; "..string)
    if type == "reset" then
      send(" ")
    end
  end
end

function snd.attack_hit(attack, target)
 snd.message("You: &lt;green&gt;HIT&lt;magenta&gt; "..attack.."&lt;white&gt; "..target.."&lt;magenta&gt;!", "atk")
end

function snd.got_hit(attack, attacker)
 snd.message(attacker..": &lt;red&gt;HIT&lt;magenta&gt; "..attack.."&lt;white&gt; you&lt;magenta&gt;!", "atk")
end

function snd.third_hit(attack, attacker, target)
 snd.message("&lt;white&gt;"..attacker..": &lt;red&gt;HIT&lt;white&gt; "..attack.." "..target)
end

function snd.target_hit(attack, attacker, target)
 snd.message("&lt;grey&gt;"..attacker..": &lt;red&gt;HIT&lt;grey&gt; "..attack.." "..target)
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>able</name>
						<packageName></packageName>
						<script>function snd.functional()
  if snd.have_aff("stun") or snd.have_aff("petrified") or snd.have_aff("asleep") then
    return false
  else
    return true
  end
end

function snd.wielding(weapon)
  if
    snd.weaponType(snd.wielded.left.name) == weapon or
    snd.weaponType(snd.wielded.right.name) == weapon
  then
    return true
  else
    return false
  end
end

function snd.full_balance()
  if gmcp.Char == nil then
    return false
  end
  if
    gmcp.Char.Vitals.balance == "1" and
    gmcp.Char.Vitals.equilibrium == "1" and
    gmcp.Char.Vitals.left_arm == "1" and
    gmcp.Char.Vitals.right_arm == "1" and
    not snd.waiting.balance and
    not snd.waiting.equilibrium
  then
    return true
  else
    return false
  end
end

function snd.have_aff(affliction)
  if not string.find(affliction, "aff_") then
    affliction = "aff_" .. affliction
  end
  if snd.afflictions[affliction] == nil then
    return false
  end
  if snd.afflictions[affliction].state ~= "healed" then
    return true
  else
    return false
  end
end

function snd.aff_tally()
  count = 0
  for aff in pairs(snd.afflictions) do
    if snd.have_aff(aff) then
      if
        snd.afflictions[aff]["cures"]["herb"] ~= nil or
        snd.afflictions[aff]["cures"]["salve"] ~= nil or
        snd.afflictions[aff]["cures"]["smoke"] ~= nil
      then
        count = count + 1
      end
    end
  end
  return count
end

function snd.aff_tally_specific(afflictions, number)
  --aff_tally checks all affs, aff_tally_specific requires you send it the specific affs you want to check
  if number == 0 then
    return true
  end
  if number == nil then
    number = 1
  end
  if type(afflictions) == "string" then
    return snd.have_aff(afflictions)
  elseif type(afflictions) == "table" then
    local count = 0
    for i, v in ipairs(afflictions) do
      if snd.have_aff(v) then
        count = count + 1
        if count &gt;= number then
          return true
        end
      end
    end
    -- if the count of how many returned true didn't meet or exceed the number given, return false
    return false
  end
end

function snd.not_aff(affliction)
  if not string.find(affliction, "aff_") then
    affliction = "aff_" .. affliction
  end
  if snd.afflictions[affliction].state == "healed" then
    return true
  else
    return false
  end
end

function snd.can_cast()
  if
    snd.full_balance() and
    snd.functional() and
    snd.not_aff("paralysis") and
    snd.not_aff("pacifism") and
    gmcp.Char.Vitals.prone == "0"
  then
    return true
  else
    return false
  end
end

function snd.can_tattoo()
  if snd.not_aff("paresis") then
    return true
  else
    return false
  end
end

function snd.can_eat()
  if snd.not_aff("anorexia") and snd.not_aff("destroyed_throat") then
    return true
  else
    return false
  end
end

function snd.can_apply()
  if snd.not_aff("slickness") then
    return true
  else
    return false
  end
end

function snd.can_smoke()
  if snd.not_aff("asthma") then
    return true
  else
    return false
  end
end

function snd.can_focus()
  if snd.not_aff("impatience") and snd.not_aff("muddled") then
    return true
  else
    return false
  end
end

function snd.can_fitness()
  if
    snd.not_aff("destroyed_throat") and
    hasSkill("Fitness") and
    snd.balance.fitness
  then
    return true
  else
    return false
  end
end

function snd.can_shrug()
  if snd.class == "Syssin" and hasSkill("Shrugging") and snd.balance.shrug then
    return true
  else
    return false
  end
end

function snd.can_rage()
  if
    (snd.class == "Templar" or snd.class == "Revenant" or snd.class == "Shapeshifter") and
    hasSkill("Rage") and
    snd.balance.rage and
    snd.not_aff("besilence")
  then
    return true
  else
    return false
  end
end

function snd.not_entangled()
  if
    snd.have_aff("grappled") or
    snd.have_aff("writhe_web") or
    snd.have_aff("writhe_impaled") or
    snd.have_aff("writhe_grappled")
  then
    return false
  else
    return true
  end
end

function snd.not_slow()
  if snd.not_aff("aeon") then
    return true
  else
    return false
  end
end

function snd.have_slow()
  if snd.have_aff("aeon") then
    return true
  else
    return false
  end
end

function snd.can_arms()
  if
    snd.have_aff("left_arm_crippled") or
    snd.have_aff("left_arm_broken") or
    snd.have_aff("left_arm_mangled") or
    snd.have_aff("right_arm_crippled") or
    snd.have_aff("right_arm_broken") or
    snd.have_aff("right_arm_mangled")
  then
    return false
  else
    return true
  end
end

function snd.can_legs()
  if
    snd.have_aff("left_leg_crippled") or
    snd.have_aff("left_leg_broken") or
    snd.have_aff("left_leg_mangled") or
    snd.have_aff("right_leg_crippled") or
    snd.have_aff("right_leg_broken") or
    snd.have_aff("right_leg_mangled")
  then
    return false
  else
    return true
  end
end

function snd.self_prone()

  if not snd.have_aff("frozen") or snd.have_aff("indifference") or snd.have_aff("paralysis") or 
      snd.have_aff("writhe_transfix") or snd.have_aff("writhe_web") or snd.have_aff("writhe_impaled") or
      snd.have_aff("writhe_thighlock") or snd.have_aff("writhe_armpitlock") or 
      snd.have_aff("writhe_necklock") or snd.have_aff("writhe_ropes") or snd.have_aff("writhe_vines") or 
      snd.have_aff("fallen") or snd.have_aff("asleep") then
    return false
  
  else
    return true
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>delay</name>
						<packageName></packageName>
						<script>
function snd.delay()
 if snd.not_slow() then
  return 0.5
 else
  return 1.5
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>queue</name>
						<packageName></packageName>
						<script>
function snd.set_queue(action)
 if snd.can_cast() then
  snd.send_attack(action)
 else
  snd.queued = action
  snd.message("Queued: "..string.upper(action), "q")
  send(" ")
 end
end

function snd.send_attack(action)
 if snd.can_cast() then
  snd.send(action)
  if action == snd.queued then
   snd.queued = nil
  end
 end
end

function snd.send(action)

 send(action, false)
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>movement</name>
						<packageName></packageName>
						<script>function snd.get_moving()
  hp = 100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)
  if snd.can_path and snd.can_cast() and hp &gt;= 85 and snd.moving_to ~= "none" then
    if snd.toggles.gallop then
      if gmcp.Char.Vitals.mounted == "0" then
        expandAlias("mnt", false)
      end
      snd.send("path find " .. snd.moving_to .. snd.sep .. "path go gallop")
    elseif snd.toggles.dash then
      snd.send("path find " .. snd.moving_to .. snd.sep .. "path go dash")
    else
      snd.send("path track " .. snd.moving_to)
    end
    snd.moving_to = "none"
    if ylm.active and ylm.next_zone == "city" then
      ylm.active = false
    end
  end
end

function snd.parseDir(direction)
  if direction == "north" then
    return "n"
  elseif direction == "south" then
    return "s"
  elseif direction == "east" then
    return "e"
  elseif direction == "west" then
    return "w"
  elseif direction == "northeast" then
    return "ne"
  elseif direction == "northwest" then
    return "nw"
  elseif direction == "southeast" then
    return "se"
  elseif direction == "southwest" then
    return "sw"
  elseif direction == "up" then
    return "up"
  elseif direction == "down" then
    return "d"
  else
    return direction
  end
end

function snd.swapDir(direction)
  directions =
    {
      north = "south",
      south = "north",
      east = "west",
      west = "east",
      northeast = "southwest",
      southwest = "northeast",
      northwest = "southeast",
      southeast = "northwest",
      ["in"] = "out",
      out = "in",
      up = "down",
      down = "up",
    }
  return directions[direction]
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>no target</name>
						<packageName></packageName>
						<script>function snd.no_target()
  --deleteLine()
  --snd.message("Need new targets!")
  if snd.offense_loaded then
    snd.target_gone = true
    snd.get_new_target()
  end
  if snd.bashing_loaded then
    snd.untarget()
    snd.waiting.balance = false
    snd.waiting.equilibrium = false
    snd.bashing.target_priority = 10000
  end
end

function snd.untarget()
  snd.bashing.engaged = false
  snd.bashing.targeted = false
  snd.last_attack = "none"
  if snd.bashing.stopping then
    snd.message("Bashing OFF!")
    if snd.toggles.bashing then
      snd.toggle("bashing")
    end
    snd.bashing.stopping = false
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>reset me</name>
						<packageName></packageName>
						<script>function snd.reset_me()
  for i in pairs(snd.afflictions) do
    snd.aff_remove(i)
  end
  for i in pairs(snd.defenses) do
    snd.def_remove(i)
  end
  for i in pairs(snd.balance) do
    snd.balance[i] = true
  end
  snd.hidden_afflictions = 0
  snd.parrying = "none"
  snd.crescentable = true
  
  snd.runemarkMajor = "none"
  snd.runemarkMinor = "none"
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>misc</name>
						<packageName></packageName>
						<script>function snd.changeClass()
  if snd.assumed_class ~= nil then
    snd.class = snd.assumed_class
  else
    snd.class = gmcp.Char.Status.class
    if snd.class == "(None)" then snd.class = "None" end
  end
  snd.city = gmcp.Char.Status.city
  if snd.city == "Spinesreach" or snd.city == "Bloodloch" then
    snd.faction = "shadow"
  elseif snd.city == "Enorian" or snd.city == "Duiran" then
    snd.faction = "spirit"
  end
  raiseEvent("sunder_update_vitals")
  expandAlias("ldd none", false)
end

function snd.updateMonolith()
  if snd.items["a monolith sigil"] ~= nil then
    snd.monolith = true
  else
    snd.monolith = false
  end
end

function snd.updateItems()
  raiseEvent("sunder_item_update")
  if snd.questing_loaded then
    snd.runQuests()
  end
end

function snd.weaponType(weapon)
  for wtype in pairs(snd.weapon_types) do
    if string.find(weapon, snd.weapon_types[wtype]) then
      return snd.weapon_types[wtype]
    end
  end
  return weapon
end

function snd.skillrankcheck(rank)
  local skillranks = {"Transcendent", "Mythical", "Fabled", "Virtuoso"}
  for _, v in pairs(skillranks) do
    if string.find(rank, v) then
      return true
    end
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Who groups parser</name>
						<packageName></packageName>
						<script>function snd.parse_who()
  snd.who_list = {}
  snd.true_who = {}
  enableTrigger("Who parser")
  send("who")
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>random functions</name>
						<packageName></packageName>
						<script>function round(num, idp)
  local mult = 10 ^ (idp or 0)
  return math.floor(num * mult + 0.5) / mult
end

function table.isMember(table, member)
  for i, m in ipairs(table) do
    if m == member then
      return true
    end
  end
  return false
end

function snd.count(table)
  local count = 0
  for i, v in ipairs(table) do
    count = count + 1
  end
  return count
end

function tablelength(T)
  local count = 0
  for _ in pairs(T) do count = count + 1 end
  return count
end

function deleteFull()
  deleteLine()
  tempLineTrigger(1,1,[[if isPrompt() then
    deleteLine()
  end]])
end

function padLeft(s, l, c)
  return string.rep(c or ' ', l - #s) .. s
end

function padRight(s, l, c)
  return s .. string.rep(c or ' ', l - #s)
end

function snd.goggle_update()

  local goggle_defenses = {
    --heatsight = {level = 1, non_goggle_method = {needybalancetake = "heatsight"}, non_goggle_skill = "Heatsight"},
    nightsight = {level = 1, non_goggle = {special = "nightsight"} , non_goggle_skill = "Nightsight"},
    mindseye_tattoo = {level = 2, non_goggle = {balanceequilibrium = "touch allsight"}, non_goggle_skill = "Generic"},
    thirdeye = {level = 2, non_goggle = {eat = "acuity"}, non_goggle_skill = "Generic"},
    overwatch = {level = 5, non_goggle = {""}, non_goggle_skill = "Generic"},
    insight = {level = 8, non_goggle = {needyequilibriumtake = "mind insight on"}, non_goggle_skill = "Insight"},
    lifevision = {level = 9, non_goggle = {balanceequilibriumtake = "lifevision"}, non_goggle_skill = "Lifevision"},
    lipreading = {level = 17, non_goggle = {needybalancetake = "lipread"}, non_goggle_skill = "Lipread"},
}

  for k, v in pairs(goggle_defenses) do
    if tonumber(snd.toggles.goggle_level) &gt;= v.level and snd.toggles.goggles then
      snd.def_options.general_defs["def_"..k] = "on"
      snd.defenses["def_"..k].skill = "Goggle"
      if k:find("tattoo") then
        snd.defenses["def_"..k].balance = {special = "goggle toggle mindseye"}
      else
        snd.defenses["def_"..k].balance = {special = "goggle toggle "..k}
      end
    else
      snd.defenses["def_"..k].balance = goggle_defenses[k].non_goggle
      snd.defenses["def_"..k].skill = goggle_defenses[k].non_goggle_skill
    end
  end
end 

function snd.are_we_with_grouped()
    local good2go = true
    for _, name in pairs(snd.players_here) do
      if not table.contains(snd.group, name) and name ~= gmcp.Char.Status.name then
        good2go = false
      end
    end
    return good2go
 end   
 </script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Illusion checking functions</name>
						<packageName></packageName>
						<script>snd = snd or {}
snd.illusionChecks = snd.illusionChecks or {}

function snd.illusionChecks.abilityGate()
  if snd.illusion_found then
    return false
  end
  if snd.afflictions.aff_flash_blindness.state ~= "healed" then
    return true
  end
  --make sure word 1 and 3 of the line have different colors if you're not flash blinded
  local words = string.split(getCurrentLine(), " ")
  selectString(words[1], 1)
  local color1 = table.concat({getFgColor()}, "")
  selectString(words[3], 1)
  local color2 = table.concat({getFgColor()}, "")
  return color1 ~= color2
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Logic</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>core</name>
						<packageName></packageName>
						<script>function snd.core()

  if snd.toggles.active and not snd.waiting.lighting and snd.can_cast() and snd.not_aff("perplexed") and snd.not_aff("paresis") then
    local commandSent = false
    for pipe, isEmpty in pairs(snd.emptypipes) do
      if isEmpty then
        snd.send("outc " .. pipe .. snd.sep .. "put " .. pipe .. " in emptypipe")
        commandSent = true
      end
    end
    if commandSent then
      snd.waiting.lighting = true
      tempTimer(snd.delay(), [[snd.waiting.lighting = false]])
    end
  end
  
  snd.def_check()
  snd.aff_check()
  
  if snd.toggles.active and snd.healing_loaded and snd.have_aff("asleep") and snd.toggles.standing then
    snd.send("wake")
  end

  if snd.functional() then
    snd.do_queue()
    snd.do_stuff()
  end

end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>priorities</name>
						<packageName></packageName>
						<script>snd.queue = {}

snd.priorities =
  {
    "lighting",
    "def_speed",
    -- "aff_prone",
    -- "aff_adder_tarot",
    
    "fitness",
    "shrugging",
    "purge",
    "purify",
    "panacea",
    "rage",
    "dome",
    "def_safeguard",
    "def_miasma",
    "def_warmth",
    "def_cloak_tattoo",
    
    "diagnose",
    
    "barbed_arrow",

    "attack",
    
    -- "aff_bleeding",
    -- "aff_voyria",
    "def_spheres",
    "def_earthenform",
    "def_permafrost",
    "def_focalmark",
    -- "aff_health_10",
    -- "aff_health_35",
    -- "aff_health_55",
    -- "aff_health_low",
    -- "aff_health_75",
    -- "aff_mana_10",
    -- "aff_mana_35",
    -- "aff_mana_55",
    -- "aff_mana_low",
    -- "aff_mana_75",
    "def_chameleon",
    
    "loot",
    
    "queue",
    "bashing",
    "moving",
    
    -- "aff_aeon",
    -- "aff_paralysis",
    -- "aff_paresis",
    -- "aff_mirroring",
    -- "aff_crippled_body",
    -- "aff_crippled",
    -- "aff_heartflutter",
    -- "aff_slough",
    -- "def_firefly_tattoo",
    -- "aff_rot_body",
    -- "aff_rot_wither",
    -- "aff_baldness",
    -- "aff_clumsiness",
    -- "aff_hypochondria",
    -- "aff_weariness",
    -- "aff_asthma",
    -- "aff_sensitivity",
    -- "aff_blood_poison",
    -- "aff_limp_veins",
    -- "aff_slickness",
    -- "aff_disfigurement",
    -- "aff_squelched",
    -- "aff_migraine",
    -- "aff_self-pity",
    -- "aff_stupidity",
    -- "aff_dizziness",
    -- "aff_shyness",
    -- "aff_epilepsy",
    -- "aff_impatience",
    -- "aff_dissonance",
    -- "aff_infested",
    -- "aff_itchy",
    -- "aff_rot_heat",
    -- "aff_rot_spirit",
    -- "aff_accursed",
    -- "aff_agony",
    -- "aff_body_odor",
    -- "aff_haemophilia",
    -- "aff_mental_disruption",
    -- "aff_physical_disruption",
    -- "aff_allergies",
    -- "aff_vomiting",
    -- "aff_thin_blood",
    -- "aff_rend",
    -- "aff_lethargy",
    -- "aff_ringing_ears",
    -- "aff_addiction",
    -- "aff_exhausted",
    -- "aff_hubris",
    -- "aff_pacifism",
    -- "aff_peace",
    -- "aff_lovers_effect",
    -- "aff_superstition",
    -- "aff_generosity",
    -- "aff_justice",
    -- "aff_egocentric",
    -- "aff_commitment_fear",
    -- "aff_recklessness",
    -- "aff_masochism",
    -- "aff_agoraphobia",
    -- "aff_loneliness",
    -- "aff_berserking",
    -- "aff_vertigo",
    -- "aff_claustrophobia",
    -- "aff_nyctophobia",
    -- "aff_sadness",
    -- "aff_confusion",
    -- "aff_dementia",
    -- "aff_hallucinations",
    -- "aff_paranoia",
    -- "aff_hypersomnia",
    -- "aff_hatred",
    -- "aff_blood_curse",
    -- "aff_blighted",
    -- "aff_plodding",
    -- "aff_idiocy",
    -- "aff_withering",
    -- "aff_hellsight",
    -- "aff_deadening",
    -- "aff_anorexia",
    -- "aff_head_mangled",
    -- "aff_head_broken",
    -- "aff_head_bruised_critical",
    -- "aff_head_bruised_moderate",
    -- "aff_head_bruised",
    -- "aff_destroyed_throat",
    -- "aff_left_arm_amputated",
    -- "aff_left_arm_mangled",
    -- "aff_left_arm_broken",
    -- "aff_right_arm_amputated",
    -- "aff_right_arm_mangled",
    -- "aff_right_arm_broken",
    -- "aff_left_arm_crippled",
    -- "aff_right_arm_crippled",
    -- "aff_left_arm_bruised_critical",
    -- "aff_left_arm_bruised_moderate",
    -- "aff_crushed_elbows",
    -- "aff_left_arm_bruised",
    -- "aff_left_arm_dislocated",
    -- "aff_right_arm_bruised_critical",
    -- "aff_right_arm_bruised_moderate",
    -- "aff_right_arm_bruised",
    -- "aff_right_arm_dislocated",
    -- "aff_crippled_arm",
    -- "aff_left_leg_amputated",
    -- "aff_left_leg_mangled",
    -- "aff_left_leg_broken",
    -- "aff_right_leg_amputated",
    -- "aff_right_leg_mangled",
    -- "aff_right_leg_broken",
    -- "aff_left_leg_bruised_critical",
    -- "aff_right_leg_bruised_critical",
    -- "aff_left_leg_crippled",
    -- "aff_right_leg_crippled",
    -- "aff_left_leg_bruised_moderate",
    -- "aff_left_leg_bruised",
    -- "aff_left_leg_dislocated",
    -- "aff_right_leg_bruised_moderate",
    -- "aff_crippled_leg",
    -- "aff_right_leg_bruised",
    -- "aff_crushed_kneecaps",
    -- "aff_right_leg_dislocated",
    -- "aff_crushed_chest",
    -- "aff_voidgaze",
    -- "aff_torso_mangled",
    -- "aff_torso_broken",
    -- "aff_torso_bruised_critical",
    -- "aff_heatspear",
    -- "aff_cracked_ribs",
    -- "aff_torso_bruised_moderate",
    -- "aff_torso_bruised",
    -- "aff_spinal_rip",
    -- "aff_selarnia",
    -- "aff_mauled_face",
    -- "aff_burnt_skin",
    -- "aff_collapsed_lung",
    -- "aff_ablaze",
    -- "aff_crippled_throat",
    -- "aff_throatclaw",
    -- "aff_smashed_throat",
    -- "aff_deepwound",
    -- "aff_lightwound",
    -- "aff_pre_restore_head",
    -- "aff_pre_restore_left_arm",
    -- "aff_pre_restore_left_leg",
    -- "aff_pre_restore_right_arm",
    -- "aff_pre_restore_right_leg",
    -- "aff_pre_restore_torso",
    -- "aff_gorged",
    -- "aff_effused_blood",
    -- "aff_indifference",
    -- "aff_stuttering",
    -- "aff_blurry_vision",
    -- "aff_burnt_eyes",
    -- "aff_gloom",
    -- "aff_rot_benign",
    -- "aff_frozen",
    -- "aff_shivering",
    -- "aff_disrupted",
    -- "aff_fear",
    -- "aff_premonition",
    -- "aff_vinethorns",
    -- "aff_void",
    -- "aff_weakvoid",
    -- "aff_grappled",
    -- "aff_writhe_armpitlock",
    -- "aff_writhe_bind",
    -- "aff_writhe_grappled",
    -- "aff_writhe_gunk",
    -- "aff_writhe_hoist",
    -- "aff_writhe_impaled",
    -- "aff_writhe_lure",
    -- "aff_writhe_necklock",
    -- "aff_writhe_ropes",
    -- "aff_writhe_tar",
    -- "aff_writhe_thighlock",
    -- "aff_writhe_transfix",
    -- "aff_writhe_vines",
    -- "aff_writhe_web",
    -- "aff_dazed",
    -- "aff_embedded_axe",
    
    "def_gripping",
    "def_vigor",
    "def_divert_melee",
    "def_dodge_melee",
    "def_waterwalking",
    "def_mindseye_tattoo",
    "def_flame_tattoo",
    "def_fearless",
    "def_recklessness",
    "def_soulharvest",
    "def_soulthirst",
    "def_soul_fortify",
    "def_soul_fracture",
    "def_soul_body",
    "def_weathering",
    "def_bodyheat",
    "def_metabolize",
    "def_endurance",
    "def_thickhide",
    "def_corner",
    "def_salivate",
    "def_harden",
    "def_lightshield",
    "def_heatshield",
    "def_inspiration_strength",
    "def_inspiration_intelligence",
    "def_inspiration_dexterity",
    "def_inspiration_constitution",
    "def_battlehymn_strength",
    "def_battlehymn_intelligence",
    "def_battlehymn_dexterity",
    "def_battlehymn_constitution",
    "def_potence_strength",
    "def_potence_constitution",
    "def_potence_intelligence",
    "def_potence_dexterity",
    "def_ascetic",
    "def_ardour_constitution",
    "def_ardour_strength",
    "def_ardour_dexterity",
    "def_ardour_intelligence",
    "def_relentless",
    "def_resolved",
    "def_acuity",
    "def_transience",
    "def_retaliation",
    "def_suppressed",
    "def_entrench",
    "def_fireblock",
    "def_smothering",
    "def_toughness",
    "def_resistance",
    "def_warding",
    "def_corpus_warding",
    "def_finesse",
    "def_weaving",
    "def_shadowsight",
    "def_ghost",
    "def_hiding",
    "def_shroud",
    "def_shadowslip",
    "def_vinculum",  
    "def_ruthlessness", 
    "def_impenetrable", 
    "def_criticality", 
    "def_unfinished", 
    "def_exhilarate", 
    "def_reflexes",
    "def_contempt",
    "def_velocity", 
    "def_untouchable", 
    "def_inflated", 
    "def_ironskin",
    "def_fortify",
    "def_countercurrent",
    "def_rigor",
    "def_shadow_engulf",
    "def_shadow_mantle",
    "def_blurring",
    "def_thirdeye",
    "def_blindness",
    "def_deafness",
    "def_kola",
    "def_waterbreathing",
    "def_deathsight",
    "def_insomnia",
    "def_frost",
    "def_venom",
    "def_levitation",
    "def_caloric",
    --"def_fitness",
    "def_fangbarrier",
    "def_rebounding",
    "def_density",
    "def_nightsight",
    "def_clarity",
    "def_vitality",
    "def_kaido_regeneration",
    "def_constitution",
    "def_split_mind",
    "def_immunity",
    "def_boosted_regen",
    "def_soulmask",
    "def_maingauche",
    "def_pacing",
    "def_soulcage",
    "def_heatsight",
    "def_reveling",
    "def_herculeanrage",
    "def_initiative",
    "def_barkskin",
    "def_conceal",
    "def_hardiness",
    "def_flexibility",
    "def_lifesap",
    "def_maskedscent",
    "def_linked",
    "def_oneness",
    "def_eclipse",
    "def_sublimation",
    "def_ameliorate",
    "def_catabolism",
    "def_blindsense",
    "def_greenheart",
    "def_endure",
    "def_mountaineer",
    "def_dustcoat",
    "def_resilience",
    "def_desolation",
    "def_circulation",
    "def_shadowblow",
    "def_blurred",
    "def_elusion",
    "def_deathlink",
    "def_potence",
    "def_celerity",
    "def_lifescent",
    "def_lifevision",
    "def_stalking",
    "def_concentrate",
    "def_entwine",
    "def_devilpact",
    "def_ricochet",
    "def_twinsoul",
    "def_earth_resonance",
    "def_stonebind",
    "def_erosion",
    "def_imbue_stonefury",
    "def_sand_swelter",
    "def_sealegs",
    "def_wavebreaking",
    "def_tideflux",
    "def_lifebond",
    "def_shore_leave",
    "def_encrusted",
    "def_expose_brume",
    "def_expose_rime",
    "def_sirensong",
    "def_panoptic",
    "def_fog_obscure",
    "def_fluctuations",
    "def_arcaneskin",
    "def_countercurrent",
    "def_missiles",
    "def_firefist",
    "def_tempered_body",
    "def_lipreading",
    "def_swagger",
    "def_deflection",
    "def_discharge",
    "def_resurgence",
    "def_haste",
    "def_litheness",
    "def_disunion",
    "def_wrath",
    "def_bending",
    "def_mindspark",
    "def_spiritbond",
    "def_protection",
    "def_shaman_spiritsight",
    "def_lifebloom",
    "def_shaman_warding",
    "def_insight",
    "def_foreststride",
    "def_overwatch",
    "def_hypersight",
    "def_defiance",
    "def_glaciation",
    "def_remembrance",
    "def_redoubt",
    "def_gravechill",
    "def_vengeance",
    "def_hierophant",
    "def_chariot",
    "def_crane",
    "def_faerie",
    "def_cloud",
    "def_fan",
    "def_intoxication",
    "def_battleflow",
    "def_ancest_victory",
    "def_invocation",
    "def_ancest_blessing_safeguard",
    "def_ancestral_bolster",
    "def_homage",
    "def_cruelty",
    "def_intervention",
    "def_displacement",
    "def_severity",
    "def_roaring",
    "aff_magic_fire",
    "def_sheath",
    "def_charisma",
    "def_euphonia",
    "def_discordance", 
    "def_halfbeat", 
    "def_soul_spiritsight",
    "def_aurora", 
    "def_equipoise", 
    "def_stretching", 
    "def_destiny",
    "def_interposition",
    "def_obfuscation",
    "def_cognisance",
    "def_resuscitation",
    "def_conduit_crutch",
    "def_soulcage",
    "def_victimise",
    "def_empowered_moon",
    "def_panoply",
    "def_forestall",
    "def_prowess",
    "def_hex_stalk",
    "def_hex_preservation",
    "def_ironbark",
    "def_selfishness",
    "def_bloodrage",
    "def_transcendence",
    "def_featherstep",
    "def_rot_carpet",
    "def_warding_rigor",
    "def_greenfoot",
    "def_oath_durdalis",
    "def_oath_forestwalker",
    "def_oath_blade",
    "def_oath_shaman",
    "def_oath_tranquility",
    "def_oath_primeval",
    "def_oath_rhythm",
    
    "def_blightbringer",
    "def_discipline_fieldstudies",
    "def_discipline_compounding",
    "def_discipline_research",
    "def_discipline_experimentation",
    "def_discipline_pnp",
    "def_discipline_biology",
    "def_discipline_chemistry",
    
    "def_influence_phantasm",
    "def_congeal_phantasm",
    "def_leech_phantasm",
    "def_claw_phantasm",
    "def_mire_phantasm",
    "def_choke_phantasm",
    "def_wail_phantasm",
    "def_absorb_phantasm",
    "def_siphon_phantasm",
    "def_symbiosis_phantasm",
    
    "def_influence_chimera",
    "def_congeal_chimera",
    "def_leech_chimera",
    "def_claw_chimera",
    "def_mire_chimera",
    "def_choke_chimera",
    "def_wail_chimera",
    "def_absorb_chimera",
    "def_siphon_chimera",
    "def_symbiosis_chimera",
    
    "def_accuracy_aura",
    "def_protection_aura",
    "def_healing_aura",
    "def_purity_aura",
    "def_justice_aura",
    "def_pestilence_aura",
    "def_spellbane_aura",
    "def_cleansing_aura",
    "def_meditation_aura",
    "def_redemption_aura",
    
    "def_accuracy_blessing",
    "def_protection_blessing",
    "def_healing_blessing",
    "def_purity_blessing",
    "def_justice_blessing",
    "def_pestilence_blessing",
    "def_spellbane_blessing",
    "def_cleansing_blessing",
    "def_meditation_blessing",
    "def_redemption_blessing",
    
    "def_sand_conceal",
    "def_projection",
    "def_surefooted",
    "def_disturbances",
    
    --200 stuffs
    
    "def_adherent_barrier",
    "def_adherent_presence",
    "def_adherent_mortalfire",
    "def_adherent_mortalfire_stored",
    "def_adherent_synchroneity",
    
    "def_adherent_avengement",
    "def_adherent_turmoil",
    "def_adherent_malevolence",
    "def_adherent_ruination",
    "def_adherent_indomitable",
    "def_adherent_acid",
    
    "def_glacian_penumbra",
    "def_glacian_presence",
    "def_glacian_silhouette",
    "def_glacian_twilight",
    "def_glacian_adumbration",
    "def_glacian_adumbration_stored",
    
    "def_tiarna_bulwark",
    "def_tiarna_cultivation",
    "def_tiarna_presence",
    "def_tiarna_shelter",
    "def_tiarna_shelter_stored",
    "def_tiarna_unleash",
    
    "def_aetherial_bastion",
    "def_aetherial_presence",
    "def_aetherial_band",
    "def_aetherial_band_stored",
    "def_aetherial_agility",
    "def_aetherial_torment",
    
    "def_seraph_presence",
    "def_seraph_radiate",
    "def_seraph_corona",
    "def_seraph_corona_stored",
    "def_seraph_parhelion",
    "def_seraph_halo",
    
    "def_titan_disruption",
    "def_titan_irradiance",
    "def_titan_multicore",
    "def_titan_presence",
    "def_titan_remnant",
    "def_titan_remnant_stored",

    "def_astral_chaosspores",
    "def_astral_dreamtide",
    "def_astral_dreamtide_store",
    "def_astral_presence",
    "def_astral_recursion",
    "def_astral_refulgence",
    
    "def_nocturn_bloodcoat",
    "def_nocturn_double",
    "def_nocturn_haze",
    "def_nocturn_presence",
    "def_nocturn_shadow",
    "def_nocturn_shadow_stored",
    
    "def_sagani_epicentre",
    "def_sagani_helix",
    "def_sagani_helix_stored",
    "def_sagani_presence",
    "def_sagani_similitude",
    "def_sagani_wall",
    
    "def_chaos_entropy",
    "def_chaos_figment",
    "def_chaos_figment_stored",
    "def_chaos_fork",
    "def_chaos_presence",
    "def_chaos_shroud",
    
    "def_catching",
    "def_phalanx",
    "def_anthem",
    "def_rallied",
    "def_bolstered_morale",
  }</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>methods</name>
						<packageName></packageName>
						<script>
snd.method_priority = {
{balance = "special", func = function(current) snd.do_special(current) end},
{balance = "balanceneed", func = function(current) snd.do_balance_need(current) end},
{balance = "equilibriumneed", func = function(current) snd.do_equilibrium_need(current) end},
{balance = "balanceequilibrium", func = function(current) snd.do_balance_equilibrium_need(current) end},

{balance = "reject", func = function(current) snd.do_reject(current) end},
{balance = "concentrate", func = function(current) snd.do_concentrate(current) end},
{balance = "drink", func = function(current) snd.do_drink(current) end},
{balance = "vial", func = function(current) snd.do_vial(current) end},
{balance = "eat", func = function(current) snd.do_eat(current) end},
{balance = "smoke", func = function(current) snd.do_smoke(current) end},
{balance = "herb", func = function(current) snd.do_herb(current) end},
{balance = "salve", func = function(current) snd.do_salve(current) end},
{balance = "elixir", func = function(current) snd.do_elixir(current) end},
{balance = "moss", func = function(current) snd.do_moss(current) end},
{balance = "clot", func = function(current) snd.do_clot(current) end},
{balance = "stand", func = function(current) snd.do_stand(current) end},
{balance = "writhe", func = function(current) snd.do_writhe(current) end},
{balance = "focus", func = function(current) snd.do_focus(current) end},
{balance = "tree", func = function(current) snd.do_tree(current) end},

{balance = "tattoo", func = function(current) snd.do_tattoo(current) end},
{balance = "balancetake", func = function(current) snd.do_balance_take(current) end},
{balance = "equilibriumtake", func = function(current) snd.do_equilibrium_take(current) end},
{balance = "needybalancetake", func = function(current) snd.do_needy_balance_take(current) end},
{balance = "needyequilibriumtake", func = function(current) snd.do_needy_equilibrium_take(current) end},
{balance = "balanceequilibriumtake", func = function(current) snd.do_balance_equilibrium_take(current) end}
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>queue</name>
						<packageName></packageName>
						<script>function snd.do_queue()
  snd.queue = {}
  if snd.toggles.active then
    if not snd.pipes_lit and snd.toggles.lighting then
      table.insert(snd.queue, "lighting")
    end
    if snd.defenses_loaded and snd.toggles.defenses then
      for k in pairs(snd.defenses) do
        if snd.defenses[k].state == "down" and snd.defenses[k].needit then
          if k == "def_vitality" then
            if snd.balance.vitality then
              table.insert(snd.queue, k)
            end
          elseif (k == "def_shroud" or k == "def_ghost" or k == "def_hiding") then
            if snd.defenses.def_phase.state ~= "deffed" then
              table.insert(snd.queue, k)
            end
          elseif (k == "def_miasma" or k == "def_safeguard" or k == "def_warmth") then
            if
              not (
                snd.defenses.def_miasma.state == "deffed" or
                snd.defenses.def_safeguard.state == "deffed" or
                snd.defenses.def_warmth.state == "deffed"
              )
            then
              table.insert(snd.queue, k)
            end
          elseif k == "def_soulcage" then
            if snd.balance.soulcage then
              table.insert(snd.queue, k)
            end
          else
            table.insert(snd.queue, k)
          end
        end
      end
    end
    if snd.queued ~= nil then
      table.insert(snd.queue, "queue")
    end
    if snd.bashing_loaded then
      if #snd.gathering &gt; 0 or #snd.corpses &gt; 0 then
        table.insert(snd.queue, "loot")
      end
      if snd.toggles.bashing and snd.bashing_loaded then
        table.insert(snd.queue, "bashing")
      end
      if snd.moving_to ~= "none" then
        table.insert(snd.queue, "moving")
      end
      if snd.toggles.active and
      (snd.fitness_override and snd.fitness_override()) or
      (not snd.fitness_override and (snd.have_aff("asthma") and snd.have_aff("slickness") and gmcp.Char.Vitals.pipe == "1")) then
        snd.need_fitness = true
        table.insert(snd.queue, "fitness")
      else
        snd.need_fitness = false
      end
      if snd.toggles.parrying and snd.offense_loaded then -- remove the offense_loaded check if you want it to always parry
        snd.parry()
      end
      if ((hasSkill("Purge") and snd.class == "Carnifex") or (hasSkill("Annul") and snd.class == "Warden")) and snd.purge_check() then
        table.insert(snd.queue, "purge")
      end
        if ((hasSkill("Panacea") and snd.class == "Shaman") or (snd.class == "Alchemist" and hasSkill("Subversion"))) and snd.panacea_check() then
          table.insert(snd.queue, "panacea")
        end
        if ((hasSkill("Purify") and snd.class == "Praenomen") or (hasSkill("Succour") and snd.class == "Akkari")) and snd.purify_check() then
          table.insert(snd.queue, "purify")
        end
      if snd.rage_check() and snd.can_rage() then
        table.insert(snd.queue, "rage")
      end
      if snd.need_dome then
        table.insert(snd.queue, "dome")
      end
      
      if snd.toggles.diagaffs~= 0 and snd.hidden_afflictions &gt;= snd.toggles.diagaffs then
        table.insert(snd.queue, "diagnose")
      end
      
      if snd.have_aff("barbed_arrow") then
        table.insert(snd.queue, "barbed_arrow")
      end


    end
    if snd.toggles.attacking and snd.offense_loaded and snd.defenses.def_manipulation_dome.state ~= "deffed" then
      table.insert(snd.queue, "attack")
    end
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>stuff</name>
						<packageName></packageName>
						<script>
function snd.do_stuff()
 for _,i in ipairs(snd.priorities) do
  if table.contains(snd.queue, i) then
   if i == "queue" then
    snd.send_attack(snd.queued)
   elseif i == "barbed_arrow" then
    snd.pull_arrow()
   elseif i == "bashing" then
    snd.bashing_function()
   elseif i == "lighting" then
    snd.do_lighting()
   elseif i == "attack" then
    snd.attack_function()
   elseif i == "loot" then
    snd.do_loot()
   elseif i == "moving" then
    snd.get_moving()
  elseif i == "fitness" then
    snd.do_fitness()
    snd.do_shrug()
  elseif i == "rage" then
    snd.do_rage()
  elseif i == "purge" then
    snd.do_purge()
	 elseif i == "purify" then
	 	snd.do_purify()
   elseif i == "panacea" then
    snd.do_panacea()
  elseif i == "dome" then
    snd.do_dome()
  elseif i == "diagnose" then
    snd.do_diagnose()
  else
    for _,z in pairs(snd.method_priority) do
     if snd.afflictions[i] ~= nil then
      if snd.afflictions[i].cures[z.balance] ~= nil then
       z.func(i)
      end
     elseif snd.defenses[i] ~= nil then
      if snd.defenses[i].balance[z.balance] ~= nil then
       z.func(i)
      end
     end
    end
   end
  end
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>lighting</name>
						<packageName></packageName>
						<script>
function snd.do_lighting()
 if snd.can_cast() and (not snd.pipes_lit) and (not snd.waiting.lighting) then
  snd.light_up()
 end
end

function snd.light_up()
 snd.send("light pipes")
 snd.waiting.lighting = true
 tempTimer(snd.delay(), [[snd.waiting.lighting = false]])
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Tracking</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Afflictions</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>affliction table</name>
							<packageName></packageName>
							<script>
snd.afflictions = {
aff_health_75 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_health_55 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_health_35 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_health_10 = {state = "healed", cures = {elixir = "health"}, assess = false, timer = createStopWatch()},
aff_mana_75 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_55 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_35 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_35 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_mana_10 = {state = "healed", cures = {elixir = "mana"}, assess = false, timer = createStopWatch()},
aff_health_low = {state = "healed", cures = {moss = "send"}, assess = false, timer = createStopWatch()},
aff_mana_low = {state = "healed", cures = {moss = "send"}, assess = false, timer = createStopWatch()},
aff_bleeding = {state = "healed", cures = {clot = "send"}, assess = false, timer = createStopWatch()},

aff_oblivion = {state = "healed", effect = "Death unless you interrupt the bard", cures = {}, assess = false, timer = createStopWatch()},

aff_shock = {state = "healed",  effect = "less mobility", cures = {}, assess = false, timer = createStopWatch()},
aff_burnout = {state = "healed",  effect = "slower cds", cures = {}, assess = false, timer = createStopWatch()},

aff_prone = {state = "healed", effect = "cannot move or attack, must STAND", cures = {stand = "send"}, assess = false, timer = createStopWatch()},
aff_asleep = {state = "healed", effect = "cannot do anything other than WAKE", cures = {}, assess = false, timer = createStopWatch()},
aff_stun = {state = "healed", effect = "cannot do anything", cures = {}, assess = false, timer = createStopWatch()},
aff_aeon = {state = "healed", effect = "delays all actions", cures = {smoke = "elm"}, assess = false, timer = createStopWatch()},

aff_paresis = {state = "healed", effect = "prevents tattoos and movement", cures = {herb = "bloodroot"}, assess = false, timer = createStopWatch()},
aff_paralysis = {state = "healed", effect = "prevents attacks, movement, and tattoos", cures = {herb = "bloodroot"}, assess = false, timer = createStopWatch()},
aff_anorexia = {state = "healed", effect = "prevents eating", cures = {tree = "send", salve = "epidermal to torso", focus = "send"}, assess = false, timer = createStopWatch()},
aff_asthma = {state = "healed", effect = "prevents smoking", cures = {tree = "send", herb = "kelp"}, assess = false, timer = createStopWatch()},
aff_slickness = {state = "healed", effect = "prevents applying salves", cures = {tree = "send", smoke = "valerian", herb = "bloodroot"}, assess = false, timer = createStopWatch()},

aff_crippled_arm = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled_leg = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_adder_tarot = {state = "healed", effect = "", cures = {balanceequilibrium = "rip card from body"}, assess = false, timer = createStopWatch()},

aff_ablaze = {state = "healed", effect = "", cures = {salve = "mending to body", tree = "send"}, assess = false, timer = createStopWatch()},
aff_accursed = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_achromatopsia = {state = "healed", effect = "colors leeched away", cures = {}, assess = false, timer = createStopWatch()},
aff_addiction = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_aftershock = {state = "healed", effect = "gain affs if earthcaller seismicity hits you", cures = {}, assess = false, timer = createStopWatch()},
aff_agony = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_agoraphobia = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_allergies = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_amplify_asphyxiation = {state = "healed", effect = "more dmg from asphyx source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_blunt = {state = "healed", effect = "more dmg from blunt source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_cold = {state = "healed", effect = "more dmg from cold source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_cutting = {state = "healed", effect = "more dmg from cutting source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_electric = {state = "healed", effect = "more dmg from electric source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_fire = {state = "healed", effect = "more dmg from fire source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_magic = {state = "healed", effect = "more dmg from magic source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_poison = {state = "healed", effect = "more dmg from poison source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_psychic = {state = "healed", effect = "more dmg from psychic source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_shadow = {state = "healed", effect = "more dmg from shadow source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_spirit = {state = "healed", effect = "more dmg from spirit source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_amplify_unblockable = {state = "healed", effect = "more dmg from unblockable source per stack", cures = {}, assess = false, timer = createStopWatch()},
aff_airwreath = {state = "healed", effect = "dmg over time", cures = {}, assess = false, timer = createStopWatch()},
aff_arrow_wound = {state = "healed", effect = "delayed by stacks of arrows", cures = {}, assess = false, timer = createStopWatch()},
aff_asphyxiation_weakness = {state = "healed", effect = "more dmg from asphyx source", cures = {}, assess = false, timer = createStopWatch()},
aff_attuned = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_backstabbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_backstrain = {state = "healed", effect = "torso dmg on standing", cures = {tree = "send", salve = "soothing to torso"}, assess = false, timer = createStopWatch()},
aff_baldness = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_barbs = {state = "healed", effect = "dmg per stack of barbs", cures = {balanceequilibrium = "pull barbs from body"}, assess = false, timer = createStopWatch()},
aff_battle_hunger = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_besilence = {state = "healed", effect = "stops some actions", cures = {smoke = "reishi"}, assess = false, timer = createStopWatch()},
aff_berserking = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_blackout = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_blighted = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_blisters = {state = "healed", effect = "poison dmg/bleeding when using bal/eq", cures = {tree = "send", herb = "bloodroot"}, assess = false, timer = createStopWatch()},
aff_blood_curse = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_blood_poison = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_bloodlust = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_blunt_weakness = {state = "healed", effect = "more dmg from blunt source", cures = {}, assess = false, timer = createStopWatch()},
aff_blurry_vision = {state = "healed", effect = "", cures = {salve = "epidermal to body", tree = "send"}, assess = false, timer = createStopWatch()},
aff_body_odor = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_bulimia = {state = "healed", effect = "vomit the next thing you eat", cures = {}, assess = false, timer = createStopWatch()},
aff_burnt_eyes = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_burnt_skin = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_chaos_warp = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_claustrophobia = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_clumsiness = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_cold_weakness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_collapsed_lung = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_commitment_fear = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_confusion = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_conviction = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_corsin_weight = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_cracked_ribs = {state = "healed", effect = "", cures = {salve = "mending to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled_body = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crippled_throat = {state = "healed", effect = "", cures = {salve = "mending to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crushed_chest = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_crushed_elbows = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_crushed_kneecaps = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_cutting_weakness = {state = "healed", effect = "more dmg from cuttingsource", cures = {}, assess = false, timer = createStopWatch()},
aff_dazed = {state = "healed", effect = "can't regain balance normally", cures = {balanceequilibrium = "recoup"}, assess = false, timer = createStopWatch()},
aff_deadening = {state = "healed", effect = "", cures = {smoke = "elm", tree = "send"}, assess = false, timer = createStopWatch()},
aff_deepwound = {state = "healed", effect = "makes bleeding more impactful (cant clot immediately)", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_dementia = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_despair = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_destroyed_throat = {state = "healed", effect = "", cures = {salve = "mending to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_direfrost = {state = "healed", effect = "leads to frostbrand", cures = {}, assess = false, timer = createStopWatch()},
aff_disabled = {state = "healed", effect = "divine only? unsure", cures = {}, assess = false, timer = createStopWatch()},
aff_disfigurement = {state = "healed", effect = "", cures = {smoke = "valerian", tree = "send"}, assess = false, timer = createStopWatch()},
aff_disorientated = {state = "healed", effect = "delays cures by 1.5 seconds", cures = {}, assess = false, timer = createStopWatch()},
aff_disrupted = {state = "healed", effect = "", cures = {special = "concentrate"}, assess = false, timer = createStopWatch()},
aff_dissonance = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
aff_distortion = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_dizziness = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_effused_blood = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_eldritch_invocation = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_electric_weakness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_emberbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_egocentric = {state = "healed", effect = "can't help others", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_embedded_axe = {state = "healed", effect = "does major limb damage when pulled", cures = {balanceequilibrium = "pull axe from me"}, assess = false, timer = createStopWatch()},
aff_epilepsy = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_exhausted = {state = "healed", effect = "dodge cut in half, slower movement", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_farag_rot = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_faintness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_fear = {state = "healed", effect = "", cures = {special = "compose"}, assess = false, timer = createStopWatch()},
aff_fire_weakness = {state = "healed", effect = "more dmg from fire source", cures = {}, assess = false, timer = createStopWatch()},
aff_flamewreathed_limb = {state = "healed", effect = "extra limb damage if hit by fire spell", cures = {}, assess = false, timer = createStopWatch()},
aff_flared = {state = "healed", effect = "unable to stealth or go incorporeal", cures = {}, assess = false, timer = createStopWatch()},
aff_flash_blindness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_forestbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_frostbrand = {state = "healed", effect = "continually freezes over time", cures = {}, assess = false, timer = createStopWatch()},
aff_frostwreath = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_frozen = {state = "healed", effect = "", cures = {salve = "caloric to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_frozen_feet = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_generosity = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_glasslimb = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_gloom = {state = "healed", effect = "", cures = {salve = "epidermal to head"}, assess = false, timer = createStopWatch()},
aff_gorged = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_haemophilia = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hallucinations = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_halted = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_hatred = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_head_crippled = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_head_bruised = {state = "healed", effect = "", cures = {salve = "mending to head"}, assess = false, timer = createStopWatch()},
aff_head_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to head"}, assess = false, timer = createStopWatch()},
aff_head_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending  to head"}, assess = false, timer = createStopWatch()},
aff_head_broken = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_head_mangled = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_head_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_heartflutter = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hellsight = {state = "healed", effect = "", cures = {smoke = "elm", tree = "send"}, assess = false, timer = createStopWatch()},
aff_heatspear = {state = "healed", effect = "can't cure ablaze", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_hollow = {state = "healed", effect = "mana drain + aff if alone", cures = {herb = "eucrasia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hubris = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hypersomnia = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hypertension = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_hypochondria = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_hypothermia = {state = "healed", effect = "", cures = {salve = "epidermal to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_idiocy = {state = "healed", effect = "", cures = {moss = "send", tree = "send"}, assess = false, timer = createStopWatch()},
aff_impeded = {state = "healed", effect = "10% slower pills, cured by removing gravity", cures = {}, assess = false, timer = createStopWatch()},
aff_impairment = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_plodding = {state = "healed", effect = "", cures = {moss = "send", tree = "send"}, assess = false, timer = createStopWatch()},
aff_ice_encased = {state = "healed", effect = "longer salve bal, extra blunt dmg", cures = {}, assess = false, timer = createStopWatch()},
aff_imbued = {state = "healed", effect = "auto gravity from scio spells", cures = {}, assess = false, timer = createStopWatch()},
aff_impatience = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_indifference = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_infernal_seal = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_infernal_shroud = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_infested = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
aff_insomnia = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_itchy = {state = "healed", effect = "tree has to cure this first always", cures = { tree = "send" }, assess = false, timer = createStopWatch()},
aff_intimidated = {state = "healed", effect = "can't heal above 90%", cures = {}, assess = false, timer = createStopWatch()},
aff_justice = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_laxity = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_leeched_aura = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_left_arm_amputated = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_crippled = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_left_arm_bruised = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_broken = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_dislocated = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_mangled = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_left_arm_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_left_arm_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_left_leg_amputated = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_crippled = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_left_leg_bruised = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_broken = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_dislocated = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_mangled = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_left_leg_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_left_leg_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_lemniscate = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_lethargy = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_lifebane = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_lightwound = {state = "healed", effect = "extra bleeding", cures = {salve = "mending to body"}, assess = false, timer = createStopWatch()},
aff_limp_veins = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_loneliness = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_lovers_effect = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_magic_fire = {state = "healed", effect = "ablaze mask aff", cures = {salve = "mending"}, assess = false, timer = createStopWatch()},
aff_magic_weakness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_magnanimity = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_malevolence = {state = "healed", effect = "destroys shield, extra damage from weather", cures = {}, assess = false, timer = createStopWatch()},
aff_marked  = {state = "healed", effect = "marked by a mage", cures = {}, assess = false, timer = createStopWatch()},
aff_masochism = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_mauled_face = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_mental_disruption = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_mental_fatigue = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_merciful = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_migraine = {state = "healed", effect = "", cures = {smoke = "valerian", tree = "send"}, assess = false, timer = createStopWatch()},
aff_turmoil = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mind_clamped = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mirroring = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_misery = {state = "healed", effect = "messes with resist aff defenses", cures = {herb = "eucrasia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_mistbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_muddled = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_muscle_spasms = {state = "healed", effect = "chance to apply incorrectly", cures = {tree = "send", salve = "soothing to torso"}, assess = false, timer = createStopWatch()},
aff_mutagen = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mutation_sickness = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_narcolepsy = {state = "healed", effect = "makes you try to sleep every 6 sec", cures = {herb = "eucrasia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_nightmare  = {state = "healed", effect = "???", cures = {}, assess = false, timer = createStopWatch()},
aff_nyctophobia  = {state = "healed", effect = "can't move in to/out of darkness", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_numb_arms = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_numbed_skin = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_oiled = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_omen = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_pacifism = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_paranoia = {state = "healed", effect = "", cures = {herb = "ash", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_patterns = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_peace = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_penance = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_perplexed = {state = "healed", effect = "can't manipulate items", cures = {herb = "eucrasia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_petrified = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_physical_disruption = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_polymorph = {state = "healed", effect = "divine only? unsure", cures = {}, assess = false, timer = createStopWatch()},
aff_poison_weakness = {state = "healed", effect = "more dmg from poison source", cures = {}, assess = false, timer = createStopWatch()},
aff_pre_restore_head = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_pre_restore_left_arm = {state = "healed", effect = "", cures = {salve = "restoration to arms"}, assess = false, timer = createStopWatch()},
aff_pre_restore_left_leg = {state = "healed", effect = "", cures = {salve = "restoration to legs"}, assess = false, timer = createStopWatch()},
aff_pre_restore_right_arm = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_pre_restore_right_leg = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_pre_restore_torso = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_premonition = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_psi_tether = {state = "healed", effect = "hurts you if you walk too far from zealot", cures = {}, assess = false, timer = createStopWatch()},
aff_psychic_weakness = {state = "healed", effect = "more dmg from psychic source", cures = {}, assess = false, timer = createStopWatch()},
aff_punished_arms = {state = "healed", effect = "unable to parry", cures = {}, assess = false, timer = createStopWatch()},
aff_punished_legs = {state = "healed", effect = "movement has 33% chance to fail", cures = {}, assess = false, timer = createStopWatch()},
aff_quicksand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_undertow = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ravaged = {state = "healed", effect = "applying salves hurts you", cures = {}, assess = false, timer = createStopWatch()},
aff_recklessness = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_rend = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_resin_glauxe = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_resonance = {state = "healed", effect = "templar can assess/diagnose you for free", cures = {}, assess = false, timer = createStopWatch()},
aff_right_arm_amputated = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_right_arm_crippled = {state = "healed", effect = "", cures = {salve = "mending to arms", tree = "send"}, assess = false, timer = createStopWatch()},
aff_right_arm_bruised = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_broken = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_right_arm_dislocated = {state = "healed", effect = "", cures = {salve = "mending to arms"}, assess = false, timer = createStopWatch()},
aff_right_arm_mangled = {state = "healed", effect = "", cures = {salve = "restoration to right arm"}, assess = false, timer = createStopWatch()},
aff_right_arm_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_right_arm_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_right_leg_amputated = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_right_leg_crippled = {state = "healed", effect = "", cures = {salve = "mending to legs", tree = "send"}, assess = false, timer = createStopWatch()},
aff_right_leg_bruised = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_broken = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_right_leg_dislocated = {state = "healed", effect = "", cures = {salve = "mending to legs"}, assess = false, timer = createStopWatch()},
aff_right_leg_mangled = {state = "healed", effect = "", cures = {salve = "restoration to right leg"}, assess = false, timer = createStopWatch()},
aff_right_leg_numbed = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_right_leg_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_ringing_ears = {state = "healed", effect = "unable to become deaf until cured", cures = {herb = "lobelia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_ripped_groin = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ripped_spleen = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ripped_throat = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ruptured_eardrum = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sadness = {state = "healed", effect = "", cures = {herb = "ash", tree = "send"}, assess = false, timer = createStopWatch()},
aff_salve_seared = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sand_trapped = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_fog_trapped = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_slough = {state = "healed", effect = "", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_sapped_constitution = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_dexterity = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_intelligence = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_stats = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sapped_strength = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sealing_circle = {state = "healed", effect = "circle affs cant be cured by pill", cures = {}, assess = false, timer = createStopWatch()},
aff_sealing_square = {state = "healed", effect = "square affs cant be cured by pill", cures = {}, assess = false, timer = createStopWatch()},
aff_sealing_triangle = {state = "healed", effect = "triangle affs cant be cured by pill", cures = {}, assess = false, timer = createStopWatch()},
aff_selarnia = {state = "healed", effect = "", cures = {salve = "mending to torso", tree = "send"}, assess = false, timer = createStopWatch()},
aff_self_loathing = {state = "healed", effect = "5s bal knock if left on for 12s", cures = {herb = "eucrasia", tree = "send"}, assess = false, timer = createStopWatch()},
["aff_self-pity"] = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send"}, assess = false, timer = createStopWatch()},
aff_seduction = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_sensitivity = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send"}, assess = false, timer = createStopWatch()},
aff_rot_benign = {state = "healed", effect = "shaderot1 - no affs", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_rot_body = {state = "healed", effect = "shaderot5 - salve recovery doubled", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_rot_heat = {state = "healed", effect = "shaderot3 - can't apply caloric", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_rot_spirit = {state = "healed", effect = "shaderot2 - shadow damage", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_rot_wither = {state = "healed", effect = "shaderot4 - passive lethargy", cures = { herb = "panacea"}, assess = false, timer = createStopWatch()},
aff_shadow_coat = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_shadow_weakness = {state = "healed", effect = "more dmg from shadow source", cures = {}, assess = false, timer = createStopWatch()},
aff_shadowbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_shadowed = {state = "healed", effect = "gain affs if luminary shine hits you", cures = {}, assess = false, timer = createStopWatch()},
aff_shadowsphere = {state = "healed", effect = "hides scio affs and generally a bad time", cures = {}, assess = false, timer = createStopWatch()},
aff_shivering = {state = "healed", effect = "", cures = {salve = "caloric", tree = "send"}, assess = false, timer = createStopWatch()},
aff_shyness = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_slough = {state = "healed", effect = "no salves", cures = {herb = "bloodroot", tree = "send"}, assess = false, timer = createStopWatch()},
aff_smashed_throat = {state = "healed", effect = "", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_sore_ankle = {state = "healed", effect = "leg dmg on movement", cures = {tree = "send", salve = "soothing to legs"}, assess = false, timer = createStopWatch()},
aff_sore_wrist = {state = "healed", effect = "arm dmg on parry", cures = {tree = "send", salve = "soothing to arms"}, assess = false, timer = createStopWatch()},
aff_soul_disease = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soul_poison = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soulchill = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soulpuncture = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_soulroot = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_spinal_rip = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_spiritbane = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_spiritbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_spirit_weakness = {state = "healed", effect = "more dmg from spirit source", cures = {}, assess = false, timer = createStopWatch()},
aff_squelched = {state = "healed", effect = "", cures = {smoke = "valerian", tree = "send"}, assess = false, timer = createStopWatch()},
aff_stiffness = {state = "healed", effect = "lower dodge/divert, soothing cured affs can break bones", cures = {tree = "send", salve = "soothing to torso"}, assess = false, timer = createStopWatch()},
aff_stonebrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_stonevice = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_stormtouched = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_stupidity = {state = "healed", effect = "", cures = {herb = "goldenseal", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_stuttering = {state = "healed", effect = "", cures = {salve = "epidermal to head", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_superstition = {state = "healed", effect = "", cures = {herb = "bellwort", tree = "send"}, assess = false, timer = createStopWatch()},
aff_temptation = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_taunted = {state = "healed", effect = "can only hit who taunted you", cures = {}, assess = false, timer = createStopWatch()},
aff_terror = {state = "healed", effect = "prevents ability to compose", cures = {}, assess = false, timer = createStopWatch()},
aff_thin_blood = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_thorns = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_throatclaw = {state = "healed", effect = "", cures = {salve = "mending to head", tree = "send"}, assess = false, timer = createStopWatch()},
aff_throatslice = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_thunderstorm = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_torso_bruised = {state = "healed", effect = "", cures = {salve = "mending to torso"}, assess = false, timer = createStopWatch()},
aff_torso_bruised_critical = {state = "healed", effect = "", cures = {salve = "mending to torso"}, assess = false, timer = createStopWatch()},
aff_torso_bruised_moderate = {state = "healed", effect = "", cures = {salve = "mending to torso"}, assess = false, timer = createStopWatch()},
aff_torso_broken = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_torso_mangled = {state = "healed", effect = "", cures = {salve = "restoration to torso"}, assess = false, timer = createStopWatch()},
aff_torso_ravaged = {state = "healed", effect = "not sure it's actually used since ravage is untargetted now", cures = {}, assess = false, timer = createStopWatch()},
aff_tree_seared = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_trick_flame = {state = "healed", effect = "doubles ablaze stacks, easier re-application of stacks", cures = {}, assess = false, timer = createStopWatch()},
aff_troubled_breathing = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_vertigo = {state = "healed", effect = "", cures = {herb = "lobelia", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_vinethorns = {state = "healed", effect = "", cures = {special = "pull thorn from body"}, assess = false, timer = createStopWatch()},
aff_vitalbane = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_void = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_voidgaze = {state = "healed", effect = "gives stacking affs while active", cures = {salve = "restoration to head"}, assess = false, timer = createStopWatch()},
aff_voidtrapped = {state = "healed", effect = "stuck prone for a bit via voidgaze", cures = {}, assess = false, timer = createStopWatch()},
aff_vomiting = {state = "healed", effect = "", cures = {herb = "ginseng", tree = "send"}, assess = false, timer = createStopWatch()},
aff_voyria = {state = "healed", effect = "", cures = {vial = "immunity"}, assess = false, timer = createStopWatch()},
aff_weak_grip = {state = "healed", effect = "bypass fist sigil", cures = {tree = "send", salve = "soothing to arms"}, assess = false, timer = createStopWatch()},
aff_weakvoid = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_whiplash = {state = "healed", effect = "head dmg", cures = {tree = "send", salve = "soothing to legs"}, assess = false, timer = createStopWatch()},
aff_weariness = {state = "healed", effect = "", cures = {herb = "kelp", tree = "send", focus = "send"}, assess = false, timer = createStopWatch()},
aff_windbrand = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_withering = {state = "healed", effect = "", cures = {smoke = "elm", tree = "send"}, assess = false, timer = createStopWatch()},
aff_worrywart = {state = "healed", effect = "eucrasia anxiety", cures = {herb = "eucrasia", tree = "send"}, assess = false, timer = createStopWatch()},
aff_wraith = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_writhe_armpitlock = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_bind = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_hoist = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_impaled = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_lure = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_necklock = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_ropes = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_gunk = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_thighlock = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_transfix = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_vines = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_web = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_grappled = {state = "healed", effect = "", cures = {writhe = "send"}, assess = false, timer = createStopWatch()},
aff_writhe_stasis = {state = "healed", effect = "can't move, can attack", cures = {}, assess = false, timer = createStopWatch()},

aff_awakened = {state = "healed", effect = "Some bard nonsense", cures = {}, assess = false, timer = createStopWatch()},

--ravager thing
aff_kneel = {state = "healed", effect = "hurts you if you walk too far from ravager", cures = {}, assess = false, timer = createStopWatch()},

---- Mirror affs here

--Revenant
aff_lurk = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_mortalterror = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},

--Oneiromancer
aff_fae_curse = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_unspooled = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},

--Warden
aff_ancestral_portent = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_ancestral_ambush = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_haunting = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_eluded = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_debilitated = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_inhibited = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},

--Earthcaller
aff_faulted = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},

--octopus
aff_acidic_ink = {state = "healed", effect = "It's ink. You wait it out.", cures = {}, assess = false, timer = createStopWatch()},

--Bloodborn
aff_excess_choleric = {state = "healed", effect = "emberbrand - ablaze on all spells", cures = {}, assess = false, timer = createStopWatch()},
aff_excess_melancholic = {state = "healed", effect = "thunderbrand - health damage, slower pills", cures = {}, assess = false, timer = createStopWatch()},
aff_frostbite = {state = "healed", effect = "leads to frostbrand", cures = {}, assess = false, timer = createStopWatch()},
aff_excess_phlegm = {state = "healed", effect = "frostbrand - continually freezes over time", cures = {}, assess = false, timer = createStopWatch()},
aff_corroded_limb = {state = "healed", effect = "extra limb damage if hit by yellowbile spell", cures = {}, assess = false, timer = createStopWatch()},
aff_bile_covered = {state = "healed", effect = "dmg over time", cures = {}, assess = false, timer = createStopWatch()},
aff_phlegm_frozen = {state = "healed", effect = "gives an additional cold damage proc on cold damage receive", cures = {}, assess = false, timer = createStopWatch()},

--Runecarver
aff_inoculated = {state = "healed", effect = "auto gravity from scio spells", cures = {}, assess = false, timer = createStopWatch()},
aff_fungal_invasion = {state = "healed", effect = "10% slower pills, cured by removing gravity", cures = {}, assess = false, timer = createStopWatch()},
aff_preymark = {state = "healed", effect = "", cures = {}, assess = false, timer = createStopWatch()},
aff_woe_curse = {state = "healed", effect = "hides scio affs and generally a bad time", cures = {}, assess = false, timer = createStopWatch()},
aff_mystified = {state = "healed", effect = "stuck prone for a bit via voidgaze", cures = {}, assess = false, timer = createStopWatch()},

--barbed arrow, ouch!
aff_barbed_arrow = {state = "healed", effect = "10 stacks kills", cures = {balanceequilibriumtake = "pull arrow from body"}, assess = false, timer = createStopWatch()},

}
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>give/take afflictions</name>
							<packageName></packageName>
							<script>
function snd.aff_check()
 for i in pairs(snd.afflictions) do
  if snd.afflictions[i].cures.writhe ~= nil or string.find(i, "broken") or string.find(i, "mangled") or string.find(i, "pre_restore") or i == "aff_concussion" then
   if getStopWatchTime(snd.afflictions[i].timer) &gt; 7 and snd.afflictions[i].state == "waiting" then
    snd.aff_timeout(i)
   end
  elseif snd.afflictions[i].state == "waiting" and getStopWatchTime(snd.afflictions[i].timer) &gt; 2 then
   snd.aff_timeout(i)
  end
 end
end

function snd.aff_timeout(affliction)
 snd.afflictions[affliction].state = "afflicted"
 snd.message("[Resetting: &lt;white&gt;"..affliction.."&lt;brown&gt;]", "reset")
end

function snd.aff_gain(affliction)
 if affliction == "aeon" then
  if snd.defenses.def_speed.state == "deffed" then
   snd.def_take("speed")
   return
  end
 end
 snd.message("You: &lt;red&gt;GOT&lt;DeepSkyBlue&gt; "..affliction..".", "affliction")
 snd.aff_have(affliction)
 raiseEvent("sunder_my_affs_updated")
 raiseEvent("sunder_my_limbs_updated")
end

function snd.aff_have(affliction)
 if snd.cureset == "archivist" then
	if table.contains(snd.circle_affs, affliction) then
	 hit_aff = false
	 for aff in pairs(snd.circle_affs) do
	  if not hit_aff then
		 snd.send("firstaid predict "..snd.circle_affs[aff])
		 if snd.circle_affs[aff] == affliction then
		  hit_aff = true
		 end
		end
	 end
	end
	if table.contains(snd.square_affs, affliction) then
	 hit_aff = false
	 for aff in pairs(snd.square_affs) do
	  if not hit_aff then
		 snd.send("firstaid predict "..snd.square_affs[aff])
		 if snd.square_affs[aff] == affliction then
		  hit_aff = true
		 end
		end
	 end
	end
	if table.contains(snd.triangle_affs, affliction) then
	 hit_aff = false
	 for aff in pairs(snd.triangle_affs) do
	  if not hit_aff then
		 snd.send("firstaid predict "..snd.triangle_affs[aff])
		 if snd.triangle_affs[aff] == affliction then
		  hit_aff = true
		 end
		end
	 end
	end
 end
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 if snd.afflictions[affliction].state == "healed" then
  snd.afflictions[affliction].state = "afflicted"
  raiseEvent("sunder_my_affs_updated")
  raiseEvent("sunder_my_limbs_updated")
 end
end

function snd.aff_diag(affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 snd.aff_have(affliction)
 if snd.toggles.gags then 
  deleteLine()
 end
 if snd.afflictions[affliction].cures.herb ~= nil then
  if string.find(snd.afflictions[affliction].cures.herb, "eat") then
   snd.aff_color = "&lt;red&gt;"
  elseif string.find(snd.afflictions[affliction].cures.herb, "smoke") then
   snd.aff_color = "&lt;blue&gt;"
  end
 elseif snd.afflictions[affliction].cures.salve ~= nil then
   snd.aff_color = "&lt;green&gt;"
 end
 snd.aff_color = "&lt;yellow&gt;"
 cecho(snd.aff_color.."\n"..affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 echo(" "..snd.afflictions[affliction].effect)
 raiseEvent("sunder_my_affs_updated")
 raiseEvent("sunder_my_limbs_updated")
end

function snd.aff_cure(affliction)
 snd.message("You: &lt;green&gt;HEAL&lt;DeepSkyBlue&gt; "..affliction..".", "affliction")
 if snd.afflictions["aff_"..affliction].state=="healed" then
  snd.hidden_afflictions = math.max(0, snd.hidden_afflictions - 1)
 end
 snd.aff_remove(affliction)
end

function snd.aff_remove(affliction)
 if not string.find(affliction, "aff_") then
  affliction = "aff_"..affliction
 end
 if snd.afflictions[affliction].cures.writhe ~= nil then
--  snd.status.writhing = false
 end
 snd.afflictions[affliction].state = "healed"
 raiseEvent("sunder_my_affs_updated")
 raiseEvent("sunder_my_limbs_updated")
end

function snd.aff_count_mental()
  local aff_count = 0
  for aff in pairs(snd.mental_affs) do
    if table.contains(snd.target_has, snd.mental_affs[aff]) then
      aff_count = aff_count + 1
    end
  end
  return aff_count
end

function snd.aff_count_physical()
  local aff_count = 0
  for aff in pairs(snd.physical_affs) do
    if table.contains(snd.target_has, snd.physical_affs[aff]) then
      aff_count = aff_count + 1
    end
  end
  return aff_count
end

function snd.aff_count_all()
  local aff_count = 0
  for aff in pairs(snd.all_affs) do
    if table.contains(snd.target_has, snd.all_affs[aff]) then
      aff_count = aff_count + 1
    end
  end
  return aff_count
end

function snd.real_aff_count_all()
  local aff_count = 0
  for aff in pairs(snd.real_all_affs) do
    if table.contains(snd.target_has, snd.real_all_affs[aff]) then
      aff_count = aff_count + 1
    end
  end
  return aff_count
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>clear</name>
							<packageName></packageName>
							<script>
function snd.clear_afflictions(type)
 snd.clear_affs = {}
 for i in pairs(snd.afflictions) do
  if snd.afflictions[i].cures[type] ~= nil then
   if snd.afflictions[i].cures[type] == snd.last[type] and snd.afflictions[i].state ~= "healed" then
    table.insert(snd.clear_affs, i)
    snd.aff_remove(i)
   end
  end
 end
 if #snd.clear_affs &gt; 0 then
  cecho("&lt;red&gt;\n[Removing:")
  for k in pairs(snd.clear_affs) do
   if snd.clear_affs[k] then
    cecho("&lt;blue&gt; "..snd.clear_affs[k])
   end
  end
  cecho("&lt;red&gt;]")
  send(" ")
 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Timer</name>
							<packageName></packageName>
							<script>timer = timer or {}
timer.values = timer.values or {}

-- Usage:
--
-- timer:init() - create master timer
-- timer:get(xname) - return current value or nil
-- timer:set(xname, xduration) -- set timer 'xname' to value 'xduration' (duration=nil removes timer)
-- timer:custom - if created, this script will be called every second after all timers are updated
--
-- If a function exists matching the name of the timer, it will be called every second with arguments (functionname, timervalue).
-- When time remaining reaches 0, the timer will then be removed.


function timer:init()
	if exists("MudTimer", "timer") == 0 then
		permTimer("MudTimer", "", 1, [[timer:script()]] )
	end

	enableTimer("MudTimer")
end

function timer:set(xname, xduration)
	self.values[xname] = xduration
end

function timer:get(xname)
	if self.values[xname] == nil then
		return(nil)
	end

	return (self.values[xname])
end

function timer:script()
	-- decrement all timers
	for k, v in pairs(timer.values) do
		timer.values[k] = timer.values[k]-1

		-- Timer has reached 0 (expired)
		if timer.values[k] &lt; 1 and k ~= "" then
			timer.values[k] = nil	

			if _G[k] ~= nil then
				-- call timer with 0 (expired)
				_G[k](k, 0)
			end
		else
			-- have timer called every second with "fname, time" as argument
			if _G[k] ~= nil then
				_G[k](k, timer.values[k])
			end
		end
	end

	if timer.custom ~= nil then
		timer:custom()
	end
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Defenses</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>defense table</name>
							<packageName></packageName>
							<script>
snd.defenses = {
-- Probably handled by firstaid anyways, otherwise auto assume people have plants/vials. 
def_deafness = {defense = "deafness", type = "normal", effect = "Protects from sonic effects", balance = {herb = "ototoxin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_blindness = {defense = "blindness", type = "normal", effect = "Protects from visual effects", balance = {herb = "amaurosis"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_waterbreathing = {defense = "waterbreathing", type = "normal", effect = "Prevents choking underwater", balance = {herb = "waterbreathing"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_kola = {defense = "instawake", type = "normal", effect = "Removes the WAKE delay", balance = {eat = "stimulant"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_insomnia = {defense = "insomnia", type = "normal", effect = "Prevents sleep effects", balance = {eat = "kawhepill"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_deathsight = {defense = "deathsight", type = "normal", effect = "Reports player deaths", balance = {eat = "thanatonin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_thirdeye = {defense = "thirdeye", type = "normal", effect = "Adds locations to WHO", balance = {eat = "acuity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_venom = {defense = "antivenin", type = "normal", effect = "Protects against poison damage", balance = {vial = "antivenin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_levitation = {defense = "levitation", type = "normal", effect = "Protects against falling effects", balance = {vial = "levitation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_frost = {defense = "temperance", type = "normal", effect = "Protects against fire damage", balance = {vial = "frost"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_speed = {defense = "speed", type = "green", effect = "Protects against aeon affliction", balance = {drink = "speed"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_caloric = {defense = "insulation", type = "normal", effect = "Protects against cold damage", balance = {salve = "caloric"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_vigor = {defense = "vigor", type = "normal", effect = "Critical hits heal you", balance = {vial = "vigor"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_fangbarrier = {defense = "fangbarrier", type = "normal", effect = "Protects against syssin bites", balance = {special = "apply paste"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_rebounding = {defense = "rebounding", type = "blue", effect = "Causes weapon attacks to backfire", balance = {smoke = "reishi"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_reflection = {defense = "reflection", type = "blue", effect = "Takes your place for 1 attack", balance = {special = "cast reflection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reflection"},

--Generic skills or occurs in more than one
def_nightsight = {defense = "nightsight", type = "normal", effect = "Allows glancing at night", balance = {special = "nightsight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Nightsight"},
def_fitness = {defense = "fitness", type = "normal", effect = "Protects from asthma", balance = {balanceequilibriumtake = "fitness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fitness"},
def_divert_melee = {defense = "divert_melee", type = "normal", effect = "Protects from melee damage", balance = {special = "divert melee"}, state = "down", needit = false, timer = createStopWatch(), skill = "Jerk"},
def_dodge_melee = {defense = "dodge_melee", type = "normal", effect = "Protects from melee damage", balance = {special = "dodge melee"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sidestep"},
def_clarity = {defense = "clarity", type = "normal", effect = "Protects against some mental affs", balance = {needyequilibriumtake = "clarity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Clarity", tree = "Survival"},
def_shroud = { }, -- handled and set per class elsewhere
def_manipulation_dome = {defense = "manipulation_dome", type = "normal", effect = "cheap prism", balance = {needyequilibriumtake = "manipulate pylon for dome"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_gripping = {defense = "gripping", type = "normal", effect = "Prevents disarming", balance = {balanceequilibrium = "grip"}, state = "down", needit = false, timer = createStopWatch(), skill = "Gripping"},
def_starburst = {defense = "starburst", type = "blue", effect = "Instant revival on death", balance = {tattoo = "starburst"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_density = {defense = "density", type = "red", effect = "Resists forced movement", balance = {salve = "mass"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_waterwalking = {defense = "waterwalking", type = "normal", effect = "Allows you to walk on water", balance = {special = "touch waterwalking"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_overwatch = {defense = "overwatch", type = "normal", effect = "See items in the air/trees", balance = {special = "goggle toggle overwatch"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_divine_speed = {defense = "divine_speed", type = "normal", effect = "Faster movement through Divine Grace", balance = {balanceequilibriumtake = "grace"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_hypersight = {defense = "hypersight", type = "normal", effect = "see through shenanigans", balance = {needyequilibriumtake = "hypersight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_lifevision = {defense = "lifevision", type = "normal", effect = "See all things living, sometimes identify illusions.", balance = {balanceequilibriumtake = "lifevision"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifevision" },
def_selfishness = {defense = "selfishness", type = "MediumSpringGreen", effect = "Too selfish to put valuables at risk.", balance ={balanceequilibriumtake = "selfishness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--Ylem
def_amber_orb = {defense= "amber_orb", type = "ansi_light_yellow", effect = "5% increase in experience", balance = {special = "activate amber orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_green_orb = {defense= "green_orb", type = "lawn_green", effect = "25% increase in vigour healing", balance = {special = "activate green orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_crimson_orb = {defense= "crimson_orb", type = "firebrick", effect = "more damage to and less from denizens", balance = {special = "activate crimson orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_cerulean_orb = {defense= "cerulean_orb", type = "ansiLightBlue", effect = "protection from damage", balance = {special = "activate cerulean orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_white_orb = {defense= "white_orb", type = "ghost_white", effect = "increased ylem gain from eld", balance = {special = "activate white orb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--Generic endgame
def_safeguard = {defense = "safeguard", type = "normal", effect = "Increased resistances", balance = {balanceequilibrium = "safeguard"}, state = "down", needit = false, timer = createStopWatch(), skill = "Instill"},
def_warmth = {defense = "warmth", type = "normal", effect = "Increased resistances", balance = {balanceequilibrium = "warmth"}, state = "down", needit = false, timer = createStopWatch(), skill = "Instill"},
def_miasma = {defense = "miasma", type = "normal", effect = "Increased resistances", balance = {balanceequilibrium = "miasma"}, state = "down", needit = false, timer = createStopWatch(), skill = "Instill"},

--Raceskills or tattoos
def_pacing = {defense = "pacing", type = "red", effect = "Keep up while following", balance = {needybalancetake = "pacing on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Pacing"},
def_heatsight = {defense = "heatsight", type = "normal", effect = "See hidden people", balance = {needybalancetake = "heatsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Heatsight"},
def_chameleon = {defense = "chameleon", type = "normal", effect = "Change your name on QW/WHO", balance = {balanceequilibrium = "touch chameleon "}, state = "down", needit = false, timer = createStopWatch(), skill = "ChameleonTattoo"},
def_cloak_tattoo = {defense = "cloak", type = "blue", effect = "Protects from unwanted summons", balance = {tattoo = "cloak"}, state = "down", needit = false, timer = createStopWatch(), skill = "CloakTattoo"},
def_mindseye_tattoo = {defense = "mindseye", type = "green", effect = "Allows deaf/blind hearing/vision", balance = {balanceequilibrium = "touch allsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_firefly_tattoo = {defense = "firefly", type = "green", effect = "Protects you against them Sciomancers", balance = {tattoo = "firefly"},state = "down", needit = false, timer = createStopWatch(), skill = "FireflyTattoo"},
def_flame_tattoo = {defense = "flame", type = "green", effect = "Helps protect against writhe affs", balance = {tattoo = "flame"},state = "down", needit = false, timer = createStopWatch(), skill = "FlameTattoo"},
def_shield_tattoo = {defense = "shielded", type = "green", effect = "Magical shield to stop attacks", balance = {tattoo = "shield"},state = "down", needit = false, timer = createStopWatch(), skill = "ShieldTattoo"},
--balance = {needyequilibriumtake = "heatsight"}

--Akkari
def_ardour_strength = {defense = "ardour_strength", type = "ivory", effect = "+1 STR", balance = {balanceequilibriumtake = "ardour strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ardour"},
def_ardour_constitution = {defense = "ardour_constitution", type = "ivory", effect = "+1 CON", balance = {balanceequilibriumtake = "ardour constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ardour"},
def_ardour_intelligence = {defense = "ardour_intelligence", type = "ivory", effect = "+1 INT", balance = {balanceequilibriumtake = "ardour intelligence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ardour"},
def_ardour_dexterity = {defense = "ardour_dexterity", type = "ivory", effect = "+1 DEX", balance = {balanceequilibriumtake = "ardour dexterity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ardour" },
def_relentless = {defense = "relentless", type = "ivory", effect = "Fortify your body to take less physical damage", balance = {balanceequilibriumtake = "relentless"}, state = "down", needit = false, timer = createStopWatch(), skill = "Relentless" },
def_resolved = {defense = "resolved", type = "ivory", effect = "Resolve yourself to take less magical damage", balance = {balanceequilibriumtake = "resolve"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resolve" },
def_celerity = {defense = "celerity", type = "normal", effect = "Increased movement speed", balance = {balanceequilibriumtake = "celerity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Celerity" },
def_acuity = {defense = "acuity", type = "ivory", effect = "Detect nearby movements", balance = {balanceequilibriumtake = "acuity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Acuity" },
def_lifevision = {defense = "lifevision", type = "normal", effect = "See things in the shadows", balance = {balanceequilibriumtake = "lifevision"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifevision" },
def_transience = {defense = "transience", type = "ivory", effect = "You avoid opponents' blows", balance = {balanceequilibriumtake = "transience"}, state = "down", needit = false, timer = createStopWatch(), skill = "Transience" },
def_entrench = {defense = "entrench", type = "ivory", effect = "You are linked to your coffin", balance = {balanceequilibriumtake = "entrench"}, state = "down", needit = false, timer = createStopWatch(), skill = "Entrench" },
def_ascetic = {defense = "ascetic", type = "ivory", effect = "Make your spirit use more efficient", balance = {balanceequilibriumtake = "spirit ascetic"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ascetic" },
def_retaliation = {defense = "retaliation", type = "ivory", effect = "The Light strikes out at your attacker", balance = {balanceequilibriumtake = "spirit retaliation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Retaliation" },
def_suppressed = {defense = "suppressed", type = "ivory", effect = "Others cannot see your vitals", balance = {balanceequilibriumtake = "spirit suppress"}, state = "down", needit = false, timer = createStopWatch(), skill = "Suppress" },
def_holylight = {defense = "holylight", type = "ivory", effect = "Strike fear into enemies with the Light", balance = {balanceequilibriumtake = "spirit light"}, state = "down", needit = false, timer = createStopWatch(), skill = "Light"},
def_bolster = {defense = "spiritbolster", type = "ivory", effect = "Reduce damage to your squire by half", balance = {balanceequilibriumtake = "spirit bolster"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bolster"},
def_unbroken = {defense = "unbroken", type = "ivory", effect = "Damage will not break you.", balance = {balanceequilibriumtake = "spirit unbroken"}, state = "down", needit = false, timer = createStopWatch(), skill = "Unbroken"},
def_transcendence = {defense = "transcendence", type = "ivory", effect = "Transcend mortal limitations", balance = {balanceequilibriumtake = "spirit transcend"}, state = "down", needit = false, timer = createStopWatch(), skill = "Transcend"},

--Alchemist
def_interposition = {defense = "interposition", type = "normal", effect = "Share damage with your experiment.", balance = {balanceequilibriumtake = "experiment interposition on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Interposition" },
def_obfuscation = {defense = "obfuscation", type = "normal", effect = "Resistance to cutting/blunt.", balance = {balanceequilibriumtake = "derive obfuscation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Obfuscation"},
def_cognisance = {defense = "cognisance", type = "normal", effect = "You get loki 2.0.", balance = {balanceequilibriumtake = "derive cognisance on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cognisance" },
def_resuscitation = {defense = "resuscitation", type = "normal", effect = "Restore HP upon getting low health.", balance = {balanceequilibriumtake = "alchemy resuscitation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resuscitation"},
def_conduit_crutch  = {defense = "conduit_crutch", type = "normal", effect = "Give mental affs when your parry is hit.", balance = {balanceequilibriumtake = "derive crutch"}, state = "down", needit = false, timer = createStopWatch(), skill = "Crutch" },
def_blightbringer  = {defense = "blightbringer", type = "normal", effect = "Bring your nature with you", balance = {balanceequilibriumtake = "botany blightbringer on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blightbringer"},
def_discipline_fieldstudies  = {defense = "discipline_fieldstudies", type = "normal", effect = "Heals you in forests", balance = {balanceequilibriumtake = "discipline field studies recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Disciplines"},
def_discipline_research  = {defense = "discipline_research", type = "normal", effect = "Heals mental afflictions", balance = {balanceequilibriumtake = "discipline research recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Disciplines"},
def_discipline_biology  = {defense = "discipline_biology", type = "normal", effect = "Heals afflictions", balance = {balanceequilibriumtake = "discipline biology recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Disciplines"},
def_discipline_compounding  = {defense = "discipline_compounding", type = "normal", effect = "Chance to save catalysts", balance = {balanceequilibriumtake = "discipline compounding recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Disciplines"},
def_discipline_pnp  = {defense = "discipline_pnp", type = "normal", effect = "Immune to forced actions", balance = {balanceequilibriumtake = "discipline procedure &amp; protocol recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Disciplines"},
def_discipline_chemistry  = {defense = "discipline_chemistry", type = "normal", effect = "Negate elemental attack on a cooldown", balance = {balanceequilibriumtake = "discipline chemistry recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Disciplines"},
def_discipline_experimentation  = {defense = "discipline_experimentation", type = "normal", effect = "Experiment strikes faster", balance = {balanceequilibriumtake = "discipline experimentation recall"}, state = "down", needit = false, timer = createStopWatch(), skill ="Disciplines"},


--Archivist
def_spheres = {defense = "spheres", type = "normal", effect = "Spheres defense for Archivist", balance = {needyequilibriumtake = "contemplate spheres"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spheres" },
def_linked = {defense = "linked", type = "normal", effect = "Yay link", balance = {balanceequilibriumtake = "elicit link 50"}, state = "down", needit = false, timer = createStopWatch(), skill = "Link" },
def_oneness = {defense = "oneness", type = "normal", effect = "oneness", balance = {balanceequilibriumtake = "elicit oneness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oneness" },
def_sublimation = {defense = "sublimation", type = "normal", effect = "sublimation", balance = {balanceequilibrium = "elicit sublimation me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sublimation" },
def_ameliorate = {defense = "ameliorate", type = "normal", effect = "ameliorate", balance = {balanceequilibriumtake = "bio ameliorate on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ameliorate" },
def_catabolism = {defense = "catabolism", type = "normal", effect = "catabolism", balance = {balanceequilibriumtake = "bio catabolism"}, state = "down", needit = false, timer = createStopWatch(), skill = "Catabolism" },
def_geo_invert = {defense = "Token Inverted", type = "normal", effect = "You Have Inverted Your Token", balance = {balanceequilibriumtake = "drop token##geo invert"}, state = "down", needit = false, timer = createStopWatch(), skill = "Invert" },
def_geo_trace = {defense = "Token Tracing You", type = "normal", effect = "You Have Traced Your Token", balance = {balanceequilibriumtake = "geo trace me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Trace" },
def_empower_jhako = {defense = "Empowering Jhako", type = "normal", effect = "You Have Empowered Jhako", balance = {balanceequilibriumtake = "empower jhako"}, state = "down", needit = false, timer = createStopWatch(), skill = "Empower" },
def_nexus = {defense = "nexus", type = "normal", effect = "Setup your nexus", balance = {balanceequilibriumtake = "bio nexus one"}, state = "down", needit = false, timer = createStopWatch(), skill = "Nexus" },

--Ascendril
def_missiles = {defense = "missiles", type = "normal", effect = "PvE damage", balance = {balanceequilibriumtake = "cast missiles on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Missiles" },
--def_sagacity = {defense = "sagacity", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "cast sagacity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sagacity" },
def_arcaneskin = {defense = "arcaneskin", type = "normal", effect = "Increased cutting/blunt resistances", balance = {balanceequilibrium = "cast arcaneskin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Arcaneskin"},
def_countercurrent = {defense = "countercurrent", type = "normal", effect = "chance to resist venoms", balance = {balanceequilibrium = "cast countercurrent"}, state = "down", needit = false, timer = createStopWatch(), skill = "Countercurrent"},
def_stalled = {defense = "stalled", type = "normal", effect = "holding an attack", balance = {balanceequilibrium = ""}, state = "down", needit = false, timer = createStopWatch(), skill = "Stall"},

--Bard
def_sheath = {defense = "sheath", type = "normal", effect = "10% Resist to Cutting/Blunt", balance = {needyequilibriumtake = "weave sheath"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sheath"},
def_charisma = {defense = "charisma", type = "normal", effect = "Adventuring opportunities are more fruitful", balance = {balanceequilibrium = "charisma"}, state = "down", needit = false, timer = createStopWatch(), skill = "Charisma"},
def_euphonia = {defense = "euphonia", type = "normal", effect = "HP and MP heal for you and allies when you sing/play", balance = {needyequilibriumtake = "euphonia"}, state = "down", needit = false, timer = createStopWatch(), skill = "Euphonia"},
def_discordance = {defense = "discordance", type = "normal", effect = "Affs on enemies when you sing/play", balance = {needyequilibriumtake = "discordance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Discordance"},
def_halfbeat = {defense = "halfbeat", type = "normal", effect = "Speed up music occasionally", balance = {needyequilibriumtake = "halfbeat"}, state = "down", needit = false, timer = createStopWatch(), skill = "Halfbeat"},
def_aurora = {defense = "aurora", type = "normal", effect = "Damage bonus against hostiles", balance = {needyequilibriumtake = "weave aurora"}, state = "down", needit = false, timer = createStopWatch(), skill = "Aurora"},
def_equipoise = {defense = "equipoise", type = "normal", effect = "Follow when off eq", balance = {needybalancetake = "equipoise on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Equipoise"},
def_stretching = {defense = "stretching", type = "normal", effect = "Heal limb damage on mending cure", balance = {needybalancetake = "stretching on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stretching"},
def_destiny = {defense = "destiny", type = "normal", effect = "Certain Weaving spells cost no eq on next cast", balance = {special = "sing song of destiny"}, state = "down", needit = false, timer = createStopWatch(), skill = "Destiny"},

--Bloodborn
def_victimise = {defense = "victimise", type = "normal", effect = "PvE damage", balance = {balanceequilibriumtake = "unleash victimise on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Victimise" },
def_panoply = {defense = "panoply", type = "normal", effect = "Increased cutting/blunt resistances", balance = {balanceequilibrium = "unleash panoply"}, state = "down", needit = false, timer = createStopWatch(), skill = "Panoply"},
def_forestall = {defense = "forestall", type = "normal", effect = "chance to resist venoms", balance = {balanceequilibrium = "unleash forestall"}, state = "down", needit = false, timer = createStopWatch(), skill = "Forestall"},
def_arrhythmia = {defense = "arrhythmia", type = "normal", effect = "holding an attack", balance = {balanceequilibrium = ""}, state = "down", needit = false, timer = createStopWatch(), skill = "Arrhythmia"},

--Carnifex
def_fearless = {defense = "fearless", type = "normal", effect = "Protects against fear affliction.", balance = {special = "fearless"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fearless"},
def_reveling = {defense = "reveling", type = "normal", effect = "Periodic heal on damage done.", balance = {needybalancetake = "reveling on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reveling"},
def_recklessness = {defense = "reckless", type = "normal", effect = "Can attack with 1 broken arm.", balance = {needybalancetake = "recklessness on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reckless"},
def_soulharvest = {defense = "soulharvest", type = "normal", effect = "Automatically harvest souls.", balance = {special = "soul harvest on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Harvest"},
def_soul_fracture = {defense = "soul_fracture", type = "normal", effect = "Boosts defenses and weapon damage.", balance = {special = "soul fracture"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fracture"},
def_soul_body = {defense = "soul_body", type = "normal", effect = "Boosts physical defense.", balance = {needyequilibriumtake = "soul embed in body"}, state = "down", needit = false, timer = createStopWatch(), skill = "EmbedBody"},
def_soul_fortify = {defense = "soul_fortify", type = "normal", effect = "Increased constitution.", balance = {needyequilibriumtake = "soul fortify"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fortify"},
def_soulthirst = {defense = "soulthirst", type = "normal", effect = "Steals soul on hit.", balance = {equilibriumtake = "soul thirst"}, state = "down", needit = false, timer =createStopWatch(), skill = "Soulthirst"},
def_soul_substitute = {defense = "substitute", type = "normal", effect = "Protected from death.", balance = {needyequilibriumtake = "soul substitute"}, state = "down", needit = false, timer = createStopWatch(), skill = "Substitute"},
def_soul_spiritsight = {defense = "soul_spiritsight", type = "normal", effect = "You can see the hidden.", balance = {needyequilibriumtake = "soul spiritsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritsight"},
def_hound_opening = {defense = "hound_opening", type = "normal", effect = "Increases damage done to mobs.", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Openings"},
def_bruteforce = {defense = "bruteforce", type = "normal", effect = "Attacks hit through parry.", balance = {needybalancetake = "hammer force"}, state = "down", needit = false, timer = createStopWatch(), skill = "BruteForce"},
def_herculeanrage = {defense = "herculean rage", type = "normal", effect = "Make them prone/off bal.", balance = {needybalancetake = "hammer rage on"}, state = "down", needit = false, timer = createStopWatch(), skill = "HerculeanRage"},
def_houndmark = {defense = "houndmark", type = "yellow", effect = "hounds go zoom", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_cruelty = {defense = "cruelty", type = "normal", effect = "Increased strength.", balance = {needyequilibriumtake = "cruelty"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cruelty"},


--Earthcaller
def_heatshield = {defense = "heatshield", type = "normal", effect = "Light-based damage resistance", balance = {needyequilibriumtake = "tectonic heatshield"}, state = "down", needit = false, timer = createStopWatch(), skill = "Heatshield" },
def_smothering = {defense = "smothering", type = "normal", effect = "Resists fire attacks", balance = {needybalancetake = "tectonic smothering"}, state = "down", needit = false, timer = createStopWatch(), skill = "Smnothering"},
def_seismicity = {defense = "seismicity", type = "normal", effect = "Dealing AoE room damage to enemies", balance = {needybalancetake = "tectonic seismicity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shine"},
def_battlehymn_strength = {defense = "battlehymn_strength", type = "normal", effect = "Increases strength", balance = {needyequilibriumtake = "dirge battlehymn strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlehymn" },
def_battlehymn_constitution = {defense = "battlehymn_constitution", type = "normal", effect = "Increases constitution", balance = {needyequilibriumtake = "dirge battlehymn constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlehymn" },
def_battlehymn_intelligence = {defense = "battlehymn_intelligence", type = "normal", effect = "Increases intelligence", balance = {needyequilibriumtake = "dirge battlehymn intelligence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlehymn" },
def_battlehymn_dexterity = {defense = "battlehymn_dexterity", type = "normal", effect = "Increases dexterity", balance = {needyequilibriumtake = "dirge battlehymn dexterity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlehymn" },

--Indorani
def_soulmask = {defense = "soulmask", type = "normal", effect = "Your soul is harder to sense.", balance = {special = "soulmask"}, state = "down", needit = false, timer = createStopWatch(), skill = "Soulmask" },
def_vengeance = {defense = "vengeance", type = "normal", effect = "You will deal AoE damage to enemies upon death.", balance = {balanceequilibriumtake = "vengeance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Vengeance" },
def_deathaura = {defense = "deathaura", type = "normal", effect = "You deal damage to enemies in room passively.", balance = {balanceequilibriumtake = "deathaura on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deathaura" },
def_gravechill = {defense = "gravechill", type = "normal", effect = "Cold damage on decay instead of magic.", balance = {balanceequilibriumtake = "gravechill"}, state = "down", needit = false, timer = createStopWatch(), skill = "Gravechill" },
def_lifevision = {defense = "lifevision ", type = "normal", effect = "See all things living, sometimes identify illusions.", balance = {balanceequilibriumtake = "lifevision"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifevision" },
def_soulcage = {defense = "soulcage", type = "normal", effect = "You come back to life upon death instantly.", balance = {balanceequilibriumtake = "soulcage"}, state = "down", needit = false, timer = createStopWatch(), skill = "Soulcage" },
def_devilpact = {defense = "devilpact", type = "normal", effect = "Throw 2 cards at once.", balance = {balanceequilibriumtake = "fling devil at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Devil" },
def_eclipse = {defense = "eclipse", type = "normal", effect = "Every 3rd card is hidden, sun/moon only.", balance = {balanceequilibriumtake = "fling eclipse at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Eclipse" },
def_chariot = {defense = "chariot", type = "normal", effect = "+Celerity, +bal for cards", balance = {balanceequilibriumtake = "fling chariot at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Chariot" },
def_hierophant = {defense = "hierophant", type = "normal", effect = "Protect against disloyalty.", balance = {balanceequilibriumtake = "fling hierophant at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hierophant"},
def_soulcage = {defense = "soulcage", type = "normal", effect = "You come back to life upon death instantly.", balance = {balanceequilibriumtake = "soulcage"}, state = "down", needit = false, timer = createStopWatch(), skill = "Soulcage" },

--Luminary
def_lightshield = {defense = "lightshield", type = "normal", effect = "Light-based damage resistance", balance = {needyequilibriumtake = "evoke lightshield"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lightshield" },
def_fireblock = {defense = "fireblock", type = "normal", effect = "Resists fire attacks", balance = {needybalancetake = "evoke fireblock"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fireblock"},
def_shine = {defense = "shine", type = "normal", effect = "Dealing AoE room damage to enemies", balance = {needybalancetake = "evoke shine"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shine"},
def_inspiration_strength = {defense = "inspiration_strength", type = "normal", effect = "Increases strength", balance = {needyequilibriumtake = "perform inspiration strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inspiration" },
def_inspiration_dexterity = {defense = "inspiration_dexterity", type = "normal", effect = "Increases dexterity", balance = {needyequilibriumtake = "perform inspiration dexterity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inspiration" },
def_inspiration_intelligence = {defense = "inspiration_intelligence", type = "normal", effect = "Increases intelligence", balance = {needyequilibriumtake = "perform inspiration intelligence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inspiration" },
def_inspiration_constitution = {defense = "inspiration_constitution", type = "normal", effect = "Increases constitution", balance = {needyequilibriumtake = "perform inspiration constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inspiration" },

--Monk
def_vitality = {defense = "vitality", type = "normal", effect = "You will get a burst of HP when near death", balance = {needyequilibriumtake = "vitality"}, state = "down", needit = false, timer = createStopWatch(), skill = "Vitality"},
def_kaido_regeneration = {defense = "regeneration", type = "normal", effect = "HP regen", balance = {special = "regeneration on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Regeneration"},
def_constitution = {defense = "constitution", type = "normal", effect = "Protection from nausea", balance = {needyequilibriumtake = "constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Constitution"},
def_split_mind = {defense = "split_mind", type = "normal", effect = "Constant meditation", balance = {needyequilibriumtake = "split mind"}, state = "down", needit = false, timer = createStopWatch(), skill = "Splitting"},
def_kaido_immunity = {defense = "kaido_immunity", type = "normal", effect = "You will auto cure the next poison you are hit with", balance = {needyequilibriumtake = "immunity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Immunity"},
def_boosted_regen = {defense = "boosted_regen", type = "normal", effect = "Even more HP regen", balance = {special = "boost regeneration"}, state = "down", needit = false, timer = createStopWatch(), skill = "Boosting"},
def_insight = {defense = "insight", type = "normal", effect = "See the thoughts of others", balance = {needyequilibriumtake = "mind insight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Insight"},
def_toughness = {defense = "toughness", type = "normal", effect = "Cutting resistance", balance = {needyequilibriumtake = "toughness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Toughness"},
def_resistance = {defense = "resistance", type = "normal", effect = "Magic resistance", balance = {needyequilibriumtake = "resistance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resistance"},

--Oneiromancer
def_redoubt = {defense = "redoubt", type = "normal", effect = "Your soul is harder to sense.", balance = {special = "redoubt"}, state = "down", needit = false, timer = createStopWatch(), skill = "Redoubt" },
def_defiance = {defense = "defiance", type = "normal", effect = "You will deal AoE damage to enemies upon death.", balance = {balanceequilibriumtake = "defiance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Defiance" },
def_intoxication = {defense = "intoxication", type = "normal", effect = "You deal damage to enemies in room passively.", balance = {balanceequilibriumtake = "intoxication"}, state = "down", needit = false, timer = createStopWatch(), skill = "Intoxication" },
def_glaciation = {defense = "glaciation", type = "normal", effect = "Cold damage on decay instead of magic.", balance = {balanceequilibriumtake = "glaciation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Glaciation" },
def_remembrance = {defense = "remembrance", type = "normal", effect = "You come back to life upon death instantly.", balance = {balanceequilibriumtake = "remembrance"}, state = "down", needit = false, timer = createStopWatch(), skill = "remembrance" },
def_faerie = {defense = "faerie", type = "normal", effect = "Throw 2 cards at once.", balance = {balanceequilibriumtake = "unfurl faerie at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Faerie" },
def_cloud = {defense = "cloud", type = "normal", effect = "Every 3rd card is hidden, sun/moon only.", balance = {balanceequilibriumtake = "unfurl cloud at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cloud" },
def_crane = {defense = "crane", type = "normal", effect = "+Celerity, +bal for cards", balance = {balanceequilibriumtake = "unfurl crane at ground"}, state = "down", needit = false, timer = createStopWatch(), skill = "Crane" },
def_fan = {defense = "fan", type = "normal", effect = "Protect against disloyalty.", balance = {balanceequilibriumtake = "unfurl fan at me"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fan"},

--Praenomen
def_potence_strength = {defense = "potence_strength", type = "normal", effect = "+1 STR", balance = {balanceequilibriumtake = "potence strength"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence"},
def_potence_constitution = {defense = "potence_constitution", type = "normal", effect = "+1 CON", balance = {balanceequilibriumtake = "potence constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence"},
def_potence_intelligence = {defense = "potence_intelligence", type = "normal", effect = "+1 INT", balance = {balanceequilibriumtake = "potence intelligence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence"},
def_potence_dexterity = {defense = "potence_dexterity", type = "normal", effect = "+1 DEX", balance = {balanceequilibriumtake = "potence dexterity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Potence" },
def_fortify = {defense = "fortify", type = "normal", effect = "Fortify your body to take less physical damage", balance = {balanceequilibriumtake = "fortify"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fortify" },
def_corpus_warding = {defense = "corpus_warding", type = "normal", effect = "Fortify your body to take less magical damage", balance = {balanceequilibriumtake = "ward"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding" },
def_celerity = {defense = "celerity", type = "normal", effect = "Increased movement speed", balance = {balanceequilibriumtake = "celerity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Celerity" },
def_lifescent = {defense = "lifescent", type = "normal", effect = "Detect nearby prey movements", balance = {balanceequilibriumtake = "lifescent"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifescent" },
def_concentrate = {defense = "concentrate", type = "normal", effect = "Make your blood use more efficient", balance = {balanceequilibriumtake = "blood concentrate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Concentration" },
def_shadowblow = {defense = "shadowblow", type = "normal", effect = "Your shadow strikes out at your attacker", balance = {balanceequilibriumtake = "blood shadow"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shadow" },
def_blurred = {defense = "blurred", type = "normal", effect = "Others cannot see your vitals", balance = {balanceequilibriumtake = "blood blur"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blur" },
def_elusion = {defense = "elusion", type = "normal", effect = "You avoid opponents' blows", balance = {balanceequilibriumtake = "elusion on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Elusion" },
def_deathlink = {defense = "deathlink", type = "normal", effect = "You are linked to your coffin", balance = {balanceequilibriumtake = "deathlink"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deathlink" },
def_bloodrage = {defense = "bloodrage", type = "normal", effect = "Transcend mortal limitations", balance = {balanceequilibriumtake = "blood enrage"}, state = "down", needit = false, timer = createStopWatch(), skill = "Enrage"},
def_deluge = {defense = "deluge", type = "normal", effect = "Allows the user to fall below zero health, effectively making them immune to damage.", balance = {balanceequilibriumtake = "blood deluge"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deluge"},
def_arrow_catching = {defense = "arrow_catching", type = "normal", effect = "You have a chance to catch arrows", balance = {balanceequilibriumtake = "catching"}, state = "down", needit = false, timer = createStopWatch(), skill = "Catching"},


--Ravager
def_vinculum = {defense = "vinculum", type = "normal", effect = "Enabled your use of abilities", balance = {balanceequilibriumtake = "invoke vinculum"}, state = "down", needit = false, timer = createStopWatch(), skill = "Vinculum" },
def_ruthlessness = {defense = "ruthlessness", type = "normal", effect = "Resist cutting and blunt dmg", balance = {balanceequilibriumtake = "invoke ruthlessness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ruthlessness" },
def_contempt = {defense = "contempt", type = "normal", effect = "Negates paresis only once", balance = {needybalancetake = "contempt"}, state = "down", needit = false, timer = createStopWatch(), skill = "Contempt" },
def_impenetrable = {defense = "impenetrable", type = "normal", effect = "Deflect arrows by chance, return them on success", balance = {balanceequilibriumtake = "invoke impenetrable"}, state = "down", needit = false, timer = createStopWatch(), skill = "Impenetrable"},
def_criticality  = {defense = "criticality", type = "normal", effect = "Store up dmgs until threshold, then it heal some of your wounds", balance = {balanceequilibriumtake = "invoke criticality"}, state = "down", needit = false, timer = createStopWatch(), skill = "Criticality"},
def_unfinished = {defense = "unfinished", type = "normal", effect = "Revive you once you died", balance = {balanceequilibriumtake = "invoke unfinished"}, state = "down", needit = false, timer = createStopWatch(), skill = "Unfinished" },
def_velocity = {defense = "velocity", type = "normal", effect = " +2 to movement", balance = {special = "velocity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Velocity" },
def_reflexes = {defense = "reflexes", type = "normal", effect = "Suffer no malus to dodge chance when use channeling action", balance = {needybalance = "reflexes"}, state = "down", needit = false, timer = createStopWatch(), skill = "Reflexes" },
def_exhilarate = {defense = "exhilarate", type = "normal", effect = "give chance to reduce eq and bal timer", balance = {balanceequilibriumtake = "exhilarate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Exhilarate" },
def_inflated = {defense = "inflated", type = "normal", effect = "raises your intelligence", balance = {balanceequilibrium = "ego inflate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Inflate" },
def_untouchable = {defense = "untouchable", type = "normal", effect = "magical damage reduction or something", balance = {balanceequilibrium = "ego untouchable"}, state = "down", needit = false, timer = createStopWatch(), skill = "Untouchable"},
def_predation = {defense = "predation", type = "normal", effect = "see what other would parries in very short time", balance = {needybalancetake = "predation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Predation" },
def_delirium = {defense = "delirium", type = "normal", effect = "cure a random AFF, use certain attacks off bal", balance = {balanceequilibriumtake = "invoke delirium"}, state = "down", needit = false, timer = createStopWatch(), skill = "Delirium" },
def_ravage = {defense = "ravage", type = "normal", effect = "makes your fists attack cause ablaze", balance = {balanceequilibriumtake = "invoke ravage"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ravage" },

--Revenant
def_influence_phantasm = {defense = "influence_phantasm", type = "normal", effect = "Increase chance of hitting", balance = {balanceequilibriumtake = "phantasm influence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Influence"},
def_congeal_phantasm = {defense = "congeal_phantasm", type = "normal", effect = "15% cutting/blunt/magic resist", balance = {balanceequilibriumtake = "phantasm congeal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Congeal"},
def_leech_phantasm = {defense = "leech_phantasm", type = "normal", effect = "Increased constitution, regenerate health", balance = {balanceequilibriumtake = "phantasm leech"}, state = "down", needit = false, timer = createStopWatch(), skill = "Leech"},
def_claw_phantasm = {defense = "claw_phantasm", type = "normal", effect = "Increased strength, damage enemies", balance = {balanceequilibriumtake = "phantasm claw"}, state = "down", needit = false, timer = createStopWatch(), skill = "Claw"},
def_mire_phantasm = {defense = "mire_phantasm", type = "normal", effect = "Decrease non-natural healing", balance = {balanceequilibriumtake = "phantasm mire"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mire"},
def_choke_phantasm = {defense = "choke_phantasm", type = "normal", effect = "Randomly afflict enemies", balance = {balanceequilibriumtake = "phantasm choke"}, state = "down", needit = false, timer = createStopWatch(), skill = "Choke"},
def_wail_phantasm = {defense = "wail_phantasm", type = "normal", effect = "Increase mana costs", balance = {balanceequilibriumtake = "phantasm wail"}, state = "down", needit = false, timer = createStopWatch(), skill = "Wail"},
def_absorb_phantasm = {defense = "absorb_phantasm", type = "normal", effect = "Randomly cure afflictions", balance = {balanceequilibriumtake = "phantasm absorb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Absorb"},
def_siphon_phantasm = {defense = "siphon_phantasm", type = "normal", effect = "Increased intelligence, regenerate mana", balance = {balanceequilibriumtake = "phantasm siphon"}, state = "down", needit = false, timer = createStopWatch(), skill = "Siphon"},
def_symbiosis_phantasm = {defense = "symbiosis_phantasm", type = "normal", effect = "Heal when killing things", balance = {balanceequilibriumtake = "phantasm symbiosis"}, state = "down", needit = false, timer = createStopWatch(), skill = "Symbiosis"},

def_influence_chimera = {defense = "influence_chimera", type = "normal", effect = "Increased chance to hit", balance = {balanceequilibriumtake = "phantasm devour influence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Chimerization"},
def_congeal_chimera = {defense = "congeal_chimera", type = "normal", effect = "5% cutting/blunt/magic resist", balance = {balanceequilibriumtake = "phantasm devour congeal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Chimerization"},
def_leech_chimera = {defense = "leech_chimera", type = "normal", effect = "Regenerate health", balance = {balanceequilibriumtake = "phantasm devour leech"}, state = "down", needit = false, timer = createStopWatch(), skill = "Chimerization"},
def_claw_chimera = {defense = "claw_chimera", type = "normal", effect = "Damage enemies", balance = {balanceequilibriumtake = "phantasm devour claw"}, state = "down", needit = false, timer = createStopWatch(), skill = "Chimerization"},
def_mire_chimera = {defense = "mire_chimera", type = "normal", effect = "Decrease non-natural healing", balance = {balanceequilibriumtake = "phantasm devour mire"}, state = "down", needit = false, timer = createStopWatch(), skill = "Chimerization"},
def_choke_chimera = {defense = "choke_chimera", type = "normal", effect = "Randomly afflict enemies", balance = {balanceequilibriumtake = "phantasm devour choke"}, state = "down", needit = false, timer = createStopWatch(), skill = "Choke"},
def_wail_chimera = {defense = "wail_chimera", type = "normal", effect = "Increase mana costs", balance = {balanceequilibriumtake = "phantasm devour wail"}, state = "down", needit = false, timer = createStopWatch(), skill = "Wail"},
def_absorb_chimera = {defense = "absorb_chimera", type = "normal", effect = "Randomly cure afflictions", balance = {balanceequilibriumtake = "phantasm devour absorb"}, state = "down", needit = false, timer = createStopWatch(), skill = "Absorb"},
def_siphon_chimera = {defense = "siphon_chimera", type = "normal", effect = "Regenerate mana", balance = {balanceequilibriumtake = "phantasm devour siphon"}, state = "down", needit = false, timer = createStopWatch(), skill = "Siphon"},
def_symbiosis_chimera = {defense = "symbiosis_chimera", type = "normal", effect = "Heal when killing things", balance = {balanceequilibriumtake = "phantasm devour symbiosis"}, state = "down", needit = false, timer = createStopWatch(), skill = "Symbiosis"},


--Runecarver
def_prowess = {defense = "prowess", type = "normal", effect = "WP drain but better crit chance", balance = {balanceequilibriumtake = "runecarve prowess on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Prowess" },
def_hex_stalk = {defense = "hex_stalk", type = "normal", effect = "Mask your movements", balance = {balanceequilibriumtake = "hex stalk "}, state = "down", needit = false, timer = createStopWatch(), skill = "Stalk" },
def_hex_preservation = {defense = "hex_preservation", type = "normal", effect = "Reduce damage taken from elements", balance = {balanceequilibriumtake = "hex preserve"}, state = "down", needit = false, timer = createStopWatch(), skill = "Preserve" },
def_ironbark  = {defense = "ironbark", type = "normal", effect = "Better diverting", balance = {balanceequilibriumtake = "runecarve ironbark"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ironbark" },
def_rot_carpet = {defense = "rot_carpet", type = "normal", effect = "Levitation and Waterwalk", balance = {balanceequilibriumtake = "spore carpet"}, state = "down", needit = false, timer = createStopWatch(), skill = "Carpet" },

--Sciomancer
def_rigor = {defense = "rigor", type = "normal", effect = "WP drain but better crit chance", balance = {balanceequilibriumtake = "cast rigor on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Rigor"},
def_shadow_engulf   = {defense = "shadow_engulf", type = "normal", effect = "Mask your movements", balance = {balanceequilibriumtake = "cast engulf on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Engulf" },
def_shadow_mantle  = {defense = "shadow_mantle", type = "normal", effect = "Reduce damage taken from elements", balance = {balanceequilibriumtake = "cast mantle"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mantle" },
def_blurring  = {defense = "blurring", type = "normal", effect = "Better diverting", balance = {balanceequilibriumtake = "cast blurring"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blurring" },
def_featherstep = {defense = "featherstep", type = "normal", effect = "Levitation and Waterwalk", balance = {balanceequilibriumtake = "gravity featherstep"}, state = "down", needit = false, timer = createStopWatch(), skill = "Featherstep" },

--Sentinel
def_barkskin = {defense = "barkskin", type = "normal", effect = "10% Resist to Cutting/Blunt", balance = {needyequilibriumtake = "barkskin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Barkskin"},
def_lifesap = {defense = "lifesap", type = "normal", effect = "Gain health on melee attack", balance = {needyequilibriumtake = "lifesap"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifesap" },
def_hardiness = {defense = "hardiness", type = "normal", effect = "15% Resist to Cold/Venom", balance = {needyequilibriumtake = "hardiness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hardiness" },
def_flexibility = {defense = "flexibility", type = "normal", effect = "Increased writhe", balance = {balanceequilibriumtake = "flexibility"}, state = "down", needit = false, timer = createStopWatch(), skill = "Flexibility" },
def_maskedscent = {defense = "masked_scent", type = "normal", effect = "Not listed on scent", balance = {balanceequilibriumtake = "mask scent"}, state = "down", needit = false, timer = createStopWatch(), skill = "Masking" },
def_conceal = {defense = "concealed", type = "normal", effect = "You are a shadowy figure", balance = {balanceequilibriumtake = "conceal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Conceal" },
def_foreststride = {defense = "foreststride", type = "normal", effect = "You move faster outdoors &amp; in forests", balance = {balanceequilibriumtake = "foreststride"}, state = "down", needit = false, timer = createStopWatch(), skill = "Foreststriding" },
def_alacrity = {defense = "alacrity", type = "normal", effect = "You shoot and trap faster", balance = {balanceequilibriumtake = "alacrity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Alacrity" },

--Shaman
def_spiritbond = {defense = "spiritbond", type = "normal", effect = "Share damage with your spirit.", balance = {balanceequilibriumtake = "familiar spiritbond on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritbond" },
def_protection = {defense = "protection", type = "normal", effect = "Resistance to cutting/blunt.", balance = {balanceequilibriumtake = "shaman protection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Protection"},
def_shaman_spiritsight = {defense = "shaman_spiritsight", type = "normal", effect = "You get loki 2.0.", balance = {balanceequilibriumtake = "shaman spiritsight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spiritsight" },
def_lifebloom = {defense = "lifebloom", type = "normal", effect = "Restore HP upon getting low health.", balance = {balanceequilibriumtake = "commune lifebloom"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifebloom"},
def_shaman_warding  = {defense = "shaman_warding", type = "normal", effect = "Give mental affs when your parry is hit.", balance = {balanceequilibriumtake = "shaman warding"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding" },
def_greenfoot  = {defense = "greenfoot", type = "normal", effect = "Bring your nature with you", balance = {balanceequilibriumtake = "nature greenfoot on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Greenfoot"},
def_oath_durdalis = {defense = "oath_durdalis", type = "normal", effect = "Absorb an elemental attack every 60 sec", balance = {balanceequilibriumtake = "oath durdalis activate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oaths" },
def_oath_forestwalker = {defense = "oath_forestwalker", type = "normal", effect = "Recover health while in overgrowth/forest", balance = {balanceequilibriumtake = "oath forestwalker activate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oaths" },
def_oath_blade = {defense = "oath_blade", type = "normal", effect = "25% chance you won't consume 1 primal energy charge", balance = {balanceequilibriumtake = "oath blade activate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oaths" },
def_oath_tranquility = {defense = "oath_tranquility", type = "normal", effect = "Periodically cure an affliction as long as not paralyzed", balance = {balanceequilibriumtake = "oath tranquility activate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oaths" },
def_oath_shaman = {defense = "oath_shaman", type = "normal", effect = "2% chance to resist mental affliction", balance = {balanceequilibriumtake = "oath shaman activate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oaths" },
def_oath_primeval = {defense = "oath_primeval", type = "normal", effect = "Your familiars attack faster!", balance = {balanceequilibriumtake = "oath primeval activate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oaths" },
def_oath_rhythm = {defense = "oath_rhythm", type = "normal", effect = "prevents force abilities and effects", balance = {balanceequilibriumtake = "oath rhythm activate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Oaths" },


--Shapeshifter
def_weathering = {defense = "weathering", type = "normal", effect = "Cold resistance", balance = {special = "weathering"}, state = "down", needit = false, timer = createStopWatch(), skill = "Weathering"},
def_bodyheat = {defense = "bodyheat", type = "normal", effect = "Protects against chill", balance = {needyequilibriumtake = "bodyheat"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bodyheat"},
def_metabolize = {defense = "metabolism", type = "normal", effect = "Increase strength", balance = {balancetake = "metabolize on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Metabolize"},
def_endurance = {defense = "celerity", type = "normal", effect = "Faster movement", balance = {needybalancetake = "endurance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Endurance"},
def_thickhide = {defense = "thickhide", type = "normal", effect = "Physical protection", balance = {balancetake = "thickhide"}, state = "down", needit = false, timer = createStopWatch(), skill = "Thickhide"},
def_corner = {defense = "cornering", type = "normal", effect = "Increase dodge chance", balance = {needybalancetake = "corner on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cornering"},
def_salivate = {defense = "salivating", type = "normal", effect = "Bites give haemophilia", balance = {equilibriumneed = "salivate"}, state = "down", needit = false, timer = createStopWatch(), skill = "Salivate"},
def_harden = {defense = "hardening", type = "normal", effect = "Chance to prevent crippled limbs", balance = {needyequilibriumtake = "harden bones"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hardening"},
def_fury = {defense = "fury", type = "normal", effect = "Can use claws off balance", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Fury"},
def_bracing = {defense = "bracing", type = "normal", effect = "Bracing for physical attacks", balance = {needybalancetake = "brace"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bracing"},
def_stealth = {defense = "stealth", type = "normal", effect = "Hide yourself", balance = {needybalancetake = "stealth on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stealth"},

--Syssin
def_hiding = {defense = "hiding", type = "blue", effect = "Conceals your presence", balance = {needybalancetake = "hide"}, state = "down", needit = false, timer = createStopWatch(), skill = "Hide"},
def_warding = {defense = "warding", type = "normal", effect = "Physical resistance", balance = {needybalancetake = "warding"}, state = "down", needit = false, timer = createStopWatch(), skill = "Warding"},
def_finesse = {defense = "finesse", type = "normal", effect = "Protects against rebounding", balance = {needybalancetake = "finesse"}, state = "down", needit = false, timer = createStopWatch(), skill = "Finesse"},
def_weaving = {defense = "weaving", type = "red", effect = "Increases dodge rate", balance = {needybalancetake = "weaving on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Weaving"},
def_shadowsight = {defense = "shadowsight", type = "normal", effect = "See hidden people", balance = {equilibriumtake = "shadowsight"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shadowsight"},
def_ghost = {defense = "ghosted", type = "normal", effect = "Conceals movement", balance = {needyequilibriumtake = "conjure ghost"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ghost"},
def_phase = {defense = "phased", type = "yellow", effect = "On another plane", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Phase"},
def_lipreading = {defense = "lipreading", type = "normal", effect = "Hear through DEAF", balance = {needybalancetake = "lipread"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lipread"},

--Templar
def_maingauche = {defense = "maingauche", type = "normal", effect = "Chance to counter attack", balance = {needyequilibriumtake = "maingauche"}, state = "down", needit = false, timer = createStopWatch(), skill = "MainGauche"},

def_accuracy_aura = {defense = "accuracy_aura", type = "normal", effect = "Increase chance of hitting", balance = {balanceequilibriumtake = "aura accuracy"}, state = "down", needit = false, timer = createStopWatch(), skill = "Accuracy"},
def_protection_aura = {defense = "protection_aura", type = "normal", effect = "15% cutting/blunt/magic resist", balance = {balanceequilibriumtake = "aura protection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Protection"},
def_healing_aura = {defense = "healing_aura", type = "normal", effect = "Increased constitution, regenerate health", balance = {balanceequilibriumtake = "aura healing"}, state = "down", needit = false, timer = createStopWatch(), skill = "Healing"},
def_purity_aura = {defense = "purity_aura", type = "normal", effect = "Increased strength, damage enemies", balance = {balanceequilibriumtake = "aura purity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Purity"},
def_justice_aura = {defense = "justice_aura", type = "normal", effect = "Decrease non-natural healing", balance = {balanceequilibriumtake = "aura justice"}, state = "down", needit = false, timer = createStopWatch(), skill = "Justice"},
def_pestilence_aura = {defense = "pestilence_aura", type = "normal", effect = "Randomly afflict enemies", balance = {balanceequilibriumtake = "aura pestilence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Pestilence"},
def_spellbane_aura = {defense = "spellbane_aura", type = "normal", effect = "Increase mana costs", balance = {balanceequilibriumtake = "aura spellbane"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spellbane"},
def_cleansing_aura = {defense = "cleansing_aura", type = "normal", effect = "Randomly cure afflictions", balance = {balanceequilibriumtake = "aura cleansing"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cleansing"},
def_meditation_aura = {defense = "meditation_aura", type = "normal", effect = "Increased intelligence, regenerate mana", balance = {balanceequilibriumtake = "aura meditation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Meditation"},
def_redemption_aura = {defense = "redemption_aura", type = "normal", effect = "Heal when killing things", balance = {balanceequilibriumtake = "aura redemption"}, state = "down", needit = false, timer = createStopWatch(), skill = "Redemption"},

def_accuracy_blessing = {defense = "accuracy_blessing", type = "normal", effect = "Increased chance to hit", balance = {balanceequilibriumtake = "aura blessing accuracy"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blessing"},
def_protection_blessing = {defense = "protection_blessing", type = "normal", effect = "5% cutting/blunt/magic resist", balance = {balanceequilibriumtake = "aura blessing protection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blessing"},
def_healing_blessing = {defense = "healing_blessing", type = "normal", effect = "Regenerate health", balance = {balanceequilibriumtake = "aura blessing healing"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blessing"},
def_purity_blessing = {defense = "purity_blessing", type = "normal", effect = "Damage enemies", balance = {balanceequilibriumtake = "aura blessing purity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blessing"},
def_justice_blessing = {defense = "justice_blessing", type = "normal", effect = "Decrease non-natural healing", balance = {balanceequilibriumtake = "aura blessing justice"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blessing"},
def_pestilence_blessing = {defense = "pestilence_blessing", type = "normal", effect = "Randomly afflict enemies", balance = {balanceequilibriumtake = "aura blessing pestilence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Pestilence"},
def_spellbane_blessing = {defense = "spellbane_blessing", type = "normal", effect = "Increase mana costs", balance = {balanceequilibriumtake = "aura blessing spellbane"}, state = "down", needit = false, timer = createStopWatch(), skill = "Spellbane"},
def_cleansing_blessing = {defense = "cleansing_blessing", type = "normal", effect = "Randomly cure afflictions", balance = {balanceequilibriumtake = "aura blessing cleansing"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cleansing"},
def_meditation_blessing = {defense = "meditation_blessing", type = "normal", effect = "Regenerate mana", balance = {balanceequilibriumtake = "aura blessing meditation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Meditation"},
def_redemption_blessing = {defense = "redemption_blessing", type = "normal", effect = "Heal when killing things", balance = {balanceequilibriumtake = "aura blessing redemption"}, state = "down", needit = false, timer = createStopWatch(), skill = "Redemption"},


--Teradrim
def_earthenform = {defense = "earthenform", type = "normal", effect = "Embrace your earthen features", balance = {balanceequilibriumtake = "earthenform embrace"}, state = "down", needit = false, timer = createStopWatch(), skill = "Earthenform" },
def_surefooted = {defense = "surefooted", type = "normal", effect = "Increased Celery", balance = {balanceequilibriumtake = "earth surefooted"}, state = "down", needit = false, timer = createStopWatch(), skill = "Surefooted" },
def_entwine = {defense = "entwine", type = "normal", effect = "Disarm when someone goes for your parried limb", balance = {balanceequilibrium = "earth entwine"}, state = "down", needit = false, timer = createStopWatch(), skill = "Entwine" },
def_ricochet =  {defense = "ricochet", type = "normal", effect = "Bounce attacks back to cripple limbs at times", balance = {balanceequilibriumtake = "earth ricochet"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ricochet" },
def_twinsoul = {defense = "twinsoul", type = "normal", effect = "Link your soul to your golem", balance = {balanceequilibriumtake = "golem twinsoul on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Twinsoul" },
def_earth_resonance = {defense = "earth_resonance", type = "normal", effect = "Boosted health/mana regen", balance = {balanceequilibriumtake = "earth resonance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resonance" },
def_stonebind = {defense = "stonebind", type = "normal", effect = "They can't take your weapon", balance = {balanceequilibriumtake = "earth stonebind"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stonebind" },
def_erosion = {defense = "imbue_erosion", type = "normal", effect = "Erosion is useful on your weapon if you're sand sweltering", balance = {balanceequilibriumtake = "earth imbue erosion"}, state = "down", needit = false, timer = createStopWatch(), skill = "Erosion" },
def_imbue_stonefury = {defense = "imbue_stonefury", type = "normal", effect = "Stonefury is useful on your weapon for bashing", balance = {balanceequilibriumtake = "earth imbue stonefury"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stonefury" },
def_sand_swelter = {defense = "sand_swelter", type = "normal", effect = "Your sands hit people in the room", balance = {balanceequilibriumtake = "sand swelter on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Swelter" },
def_projection  = {defense = "projection", type = "normal", effect = "Remotely control sand abilities", balance = {balanceequilibriumtake = "sand projection on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Projection" },
def_sand_conceal  = {defense = "sand_conceal", type = "normal", effect = "Become concealed by your sand", balance = {balanceequilibriumtake = "sand conceal on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Concealment" },
def_disturbances  = {defense = "disturbances", type = "normal", effect = "Your sand informs you of who moves in and out", balance = {balanceequilibriumtake = "sand disturbances on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Disturbances"},
def_momentum = {defense = "momentum", type = "normal", effect = "Strike faster", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Momentum" },


--Tidesage
def_permafrost = {defense = "permafrost", type = "SeaGreen", effect = "Embrace the gales of the distant oceans", balance = {balanceequilibriumtake = "tide permafrost"}, state = "down", needit = false, timer = createStopWatch(), skill = "Permafrost" },
def_sealegs = {defense = "sealegs", type = "SeaGreen", effect = "Sea legs allow you to move faster", balance = {balanceequilibriumtake = "tide sealegs"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sealegs" },
def_wavebreaking = {defense = "wavebreaking", type = "SeaGreen", effect = "Disarm when someone goes for your parried limb", balance = {balanceequilibrium = "tide wavebreak"}, state = "down", needit = false, timer = createStopWatch(), skill = "Wavebreak" },
def_tideflux =  {defense = "tideflux", type = "SeaGreen", effect = "Bounce attacks back to cripple limbs at times", balance = {balanceequilibriumtake = "tide flux"}, state = "down", needit = false, timer = createStopWatch(), skill = "Flux" },
def_lifebond = {defense = "lifebond", type = "SeaGreen", effect = "Link your soul to your elemental", balance = {balanceequilibriumtake = "synth lifebond on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Lifebond" },
def_shore_leave = {defense = "shore_leave", type = "SeaGreen", effect = "Boosted health/mana regen", balance = {balanceequilibriumtake = "tide shore"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shore" },
def_encrusted = {defense = "encrusted", type = "SeaGreen", effect = "They can't take your weapon", balance = {balanceequilibriumtake = "tide encrust"}, state = "down", needit = false, timer = createStopWatch(), skill = "Encrust" },
def_expose_brume = {defense = "expose_brume", type = "SeaGreen", effect = "Brume is useful if calling a sirensong", balance = {balanceequilibriumtake = "tide expose brume"}, state = "down", needit = false, timer = createStopWatch(), skill = "Brume" },
def_expose_rime = {defense = "expose_rime", type = "SeaGreen", effect = "Rime causes more damage for slower strikes", balance = {balanceequilibriumtake = "tide expose rime"}, state = "down", needit = false, timer = createStopWatch(), skill = "Rime" },
def_sirensong = {defense = "sirensong", type = "SeaGreen", effect = "Your fog effects people in the room", balance = {balanceequilibriumtake = "fog sirensong on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sirensong" },
def_panoptic  = {defense = "panoptic", type = "SeaGreen", effect = "Remotely control fog abilities", balance = {balanceequilibriumtake = "fog panoptic on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Panoptic" },
def_fog_obscure  = {defense = "fog_obscure", type = "SeaGreen", effect = "Become obscured in a thick fog", balance = {balanceequilibriumtake = "fog obscureon"}, state = "down", needit = false, timer = createStopWatch(), skill = "Obscure" },
def_fluctuations  = {defense = "fluctuations", type = "SeaGreen", effect = "Your fog informs you of who moves in and out", balance = {balanceequilibriumtake = "fog fluctuations on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fluctuations" },
def_hightide = {defense = "hightide", type = "SeaGreen", effect = "Strike faster during high tide", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Hightide" },

-- Warden
def_battleflow = {defense = "battleflow", type = "normal", effect = "Can attack with 1 broken arm.", balance = {needybalancetake = "warden battleflow on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battleflow"},
def_ancest_victory = {defense = "victory", type = "normal", effect = "Automatically harvest renown.", balance = {special = "ancest victory on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Victory"},
def_invocation = {defense = "invocation", type = "normal", effect = "Boosts defenses and weapon damage.", balance = {special = "ancest invocation"}, state = "down", needit = false, timer = createStopWatch(), skill = "Invocation"},
def_ancest_blessing_safeguard = {defense = "ancest_blessing_safeguard", type = "normal", effect = "Boosts physical defense.", balance = {needyequilibriumtake = "ancest blessing safeguard"}, state = "down", needit = false, timer = createStopWatch(), skill = "Safeguard"},
def_ancestral_bolster = {defense = "ancestral_bolster", type = "normal", effect = "Increased constitution.", balance = {needyequilibriumtake = "ancest bolster"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bolster"},
def_intervention = {defense = "intervention", type = "normal", effect = "Protected from death.", balance = {needyequilibriumtake = "ancest intervention"}, state = "down", needit = false, timer = createStopWatch(), skill = "Intervention"},
def_tacticianmark = {defense = "tacticianmark", type = "yellow", effect = "simuls go zoom", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_initiative = {defense = "initiative", type = "normal", effect = "Periodic heal on damage done.", balance = {needybalancetake = "warden initiative on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Initiative"},
def_displacement = {defense = "displacement", type = "normal", effect = "Steals soul on hit.", balance = {equilibriumtake = "ancest displacement"}, state = "down", needit = false, timer =createStopWatch(), skill = "Displacement"},
def_simulacrum_opening = {defense = "simulacrum_opening", type = "normal", effect = "Increases damage done to mobs.", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Openings"},
def_severity = {defense = "severity", type = "normal", effect = "Attacks hit through parry.", balance = {needybalancetake = "warden severity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Severity"},
def_roaring = {defense = "roaring", type = "normal", effect = "Make them prone/off bal.", balance = {needybalancetake = "warden roaring on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Roaring"},
def_homage = {defense = "homage", type = "normal", effect = "Increased strength.", balance = {needyequilibriumtake = "warden homage"}, state = "down", needit = false, timer = createStopWatch(), skill = "Homage"},
def_warding_rigor = {defense = "warding_rigor", type = "normal", effect = "Cheap Furor.", balance = {needybalancetake = "warden rigor"}, state = "down", needit = false, timer = createStopWatch(), skill = "Rigor"},

--Wayfarer
def_ironskin = {defense = "ironskin", type = "normal", effect = "Resist physical damage", balance = {balanceequilibriumtake = "wayfare ironskin"}, state = "down", needit = false, timer = createStopWatch(), skill = "Ironskin" },
def_blindsense = {defense = "blindsense", type = "normal", effect = "Resistance to accuracy reduction", balance = {balanceequilibriumtake = "wayfare blindsense on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Blindsense" },
def_greenheart = {defense = "greenheart", type = "normal", effect = "Tree Tattoo is sped up", balance = {balanceequilibriumtake = "outc greenink"..snd.sep.."wayfare greenheart on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Greenheart" },
def_endure = {defense = "endure", type = "normal", effect = "Endurance usage reduced", balance = {balanceequilibriumtake = "wayfare endure on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Endure" },
def_mountaineer = {defense = "mountaineer", type = "normal", effect = "You're shoutin' room-wide", balance = {balanceequilibriumtake = "wayfare mountaineer on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mountaineer" },
def_dustcoat = {defense = "dustcoat", type = "normal", effect = "Soulmask while moving", balance = {balanceequilibriumtake = "wayfare dustcoat"}, state = "down", needit = false, timer = createStopWatch(), skill = "Dustcoat" },
def_resilience = {defense = "resilience", type = "normal", effect = "Assess is wonky vs you", balance = {balanceequilibriumtake = "wayfare resilience on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resilience" },
def_desolation = {defense = "desolation", type = "normal", effect = "You do more melee damage, ranged speed down", balance = {balanceequilibriumtake = "wayfare desolation on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Desolation" },
def_circulation = {defense = "circulation", type = "normal", effect = "+1STR, clot under haemophilia, clot cost up", balance = {balanceequilibriumtake = "wayfare circulation on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Circulation" },
def_brutality = {defense = "brutality", type = "normal", effect = "Fear people and maybe regen fury", balance = {balanceequilibriumtake = "fury brutality on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Brutality"},
def_axe_avert = {defense = "axe_avert", type = "normal", effect = "Knock away projectiles", balance = {balanceequilibriumtake = "axe avert on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Avert"},
def_axe_obstruct = {defense = "axe_obstruct", type = "normal", effect = "Smack those feared away", balance = {balanceequilibriumtake = "axe obstruct on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Obstruct"},
def_axe_repel = {defense = "axe_repel", type = "normal", effect = "Stop them from cleaving you", balance = {balanceequilibriumtake = "axe repel on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Repel"},
def_bloodtrails = {defense = "bloodtrails", type = "normal", effect = "Trace those bloody trails", balance = {balanceequilibriumtake = "wayfare bloodtrails on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bloodtrails"},
def_phalanx = {defense = "phalanx", type = "normal", effect = "Give group cut/blunt defense bonus", balance = {balanceequilibriumtake = "fury battlechant phalanx"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlechant"},
def_anthem = {defense = "anthem", type = "normal", effect = "Give group extra damage", balance = {balanceequilibriumtake = "fury battlechant anthem"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlechant"},
def_rallied = {defense = "rallied", type = "normal", effect = "Reduce groups willpower and endurance costs", balance = {balanceequilibriumtake = "fury battlechant rally"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlechant"},
def_bolstered_morale = {defense = "bolstered_morale", type = "normal", effect = "Give group extra damage", balance = {balanceequilibriumtake = "fury battlechant bolster"}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlechant"},
def_battlechant = {defense = "battlechant", type = "normal", effect = "Maintaining a supporting shout", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Battlechant"},


--Zealot
def_firefist = {defense = "firefist", type = "normal", effect = "makes your fists attack cause ablaze", balance = {balanceequilibriumtake = "enact firefist"}, state = "down", needit = false, timer = createStopWatch(), skill = "Firefist" },
def_focalmark = {defense = "focalmark", type = "normal", effect = "Enabled your use of purification abilities", balance = {balanceequilibriumtake = "enact focalmark"}, state = "down", needit = false, timer = createStopWatch(), skill = "Focalmark" },
def_tempered_body = {defense = "tempered_body", type = "normal", effect = "Resist cutting and blunt dmg", balance = {balanceequilibriumtake = "enact tempering"}, state = "down", needit = false, timer = createStopWatch(), skill = "Tempering" },
def_swagger = {defense = "swagger", type = "normal", effect = "Negates paresis only once", balance = {needybalancetake = "swagger"}, state = "down", needit = false, timer = createStopWatch(), skill = "Swagger" },
def_deflection = {defense = "deflection", type = "normal", effect = "Deflect arrows by chance, return them on success", balance = {balanceequilibriumtake = "enact deflection"}, state = "down", needit = false, timer = createStopWatch(), skill = "Deflection"},
def_discharge = {defense = "discharge", type = "normal", effect = "Store up dmgs until threshold, then it heal some of your wounds", balance = {balanceequilibriumtake = "enact discharge"}, state = "down", needit = false, timer = createStopWatch(), skill = "Discharge"},
def_resurgence = {defense = "resurgence", type = "normal", effect = "Revive you once you died", balance = {balanceequilibriumtake = "enact resurgence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Resurgence" },
def_haste = {defense = "haste", type = "normal", effect = " +2 to movement", balance = {special = "haste"}, state = "down", needit = false, timer = createStopWatch(), skill = "Haste" },
def_litheness = {defense = "litheness", type = "normal", effect = "Suffer no malus to dodge chance when use channeling action", balance = {needybalance = "litheness"}, state = "down", needit = false, timer = createStopWatch(), skill = "Litheness" },
def_disunion = {defense = "disunion", type = "normal", effect = "give chance to reduce eq and bal timer", balance = {balanceequilibriumtake = "disunion"}, state = "down", needit = false, timer = createStopWatch(), skill = "Disunion" },
def_wrath = {defense = "wrath", type = "normal", effect = "see what other would parries in very short time", balance = {needybalancetake = "wrath"}, state = "down", needit = false, timer = createStopWatch(), skill = "Wrath" },
def_zenith = {defense = "zenith", type = "normal", effect = "cure a random AFF, use certain attacks off bal", balance = {balanceequilibriumtake = "enact zenith"}, state = "down", needit = false, timer = createStopWatch(), skill = "Zenith" },
def_mindspark = {defense = "mindspark", type = "normal", effect = "raises your intelligence", balance = {balanceequilibrium = "psi mindspark"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mindspark" },
def_bending = {defense = "bending", type = "normal", effect = "magical damage reduction or something", balance = {balanceequilibrium = "psi bending"}, state = "down", needit = false, timer = createStopWatch(), skill = "Bending"},

--adherent
def_adherent_form = {defense = "adherent_form", type = "normal", effect = "You are pissed", balance = {balanceequilibriumtake = "ascend soul brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_barrier = {defense = "adherent_barrier", type = "normal", effect = "Protect you and absorb afflictions", balance = {balanceequilibriumtake = "adherent barrier"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_presence = {defense = "adherent_presence", type = "normal", effect = "Grants crit and dodge chance", balance = {balanceequilibriumtake = "adherent presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_synchroneity = {defense = "adherent_synchroneity", type = "normal", effect = "Chance to replicate your abilities", balance = {balanceequilibriumtake = "adherent synchroneity on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_mortalfire = {defense = "adherent_mortalfire", type = "normal", effect = "Blocks the next attack", balance = {balanceequilibriumtake = "adherent mortalfire"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_mortalfire_stored = {defense = "adherent_mortalfire_stored", type = "normal", effect = "Raises mortalfire when &lt;40% health", balance = {balanceequilibriumtake = "adherent mortalfire store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_store = {defense = "adherent_store", type = "normal", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_avengement = {defense = "adherent_avengement", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "adherent avengement on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_malevolence = {defense = "adherent_malevolence", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "adherent malevolence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_turmoil = {defense = "adherent_turmoil", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "adherent turmoil on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_ruination = {defense = "adherent_ruination", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "adherent ruination on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_indomitable = {defense = "adherent_indomitable", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "adherent indomitable on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_adherent_acid = {defense = "adherent_acid", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "adherent acid on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--glacian
def_glacian_form = {defense = "glacian_form", type = "normal", effect = "Glacian go BRRRRR", balance = {balanceequilibriumtake = "transfigure physiology brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_glacian_penumbra = {defense = "glacian_penumbra", type = "normal", effect = "Protect you and absorb afflictions", balance = {balanceequilibriumtake = "glacian penumbra"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_glacian_presence = {defense = "glacian_presence", type = "normal", effect = "Grants crit and dodge chance", balance = {balanceequilibriumtake = "glacian presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_glacian_silhouette = {defense = "glacian_silhouette", type = "normal", effect = "Chance to replicate your abilities", balance = {balanceequilibriumtake = "glacian silhouette on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_glacian_adumbration = {defense = "glacian_adumbration", type = "normal", effect = "Blocks the next attack", balance = {balanceequilibriumtake = "glacian adumbration"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_glacian_adumbration_stored = {defense = "glacian_adumbration_stored", type = "normal", effect = "Raises adumbration when &lt;40% health", balance = {balanceequilibriumtake = "glacian adumbration store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_glacian_store = {defense = "glacian_store", type = "normal", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_glacian_twilight = {defense = "glacian_twilight", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "glacian twilight on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--tiarna
def_tiarna_form = {defense = "tiarna_form", type = "normal", effect = "Rustle rustle", balance = {balanceequilibriumtake = "rhythm thrum brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_tiarna_bulwark = {defense = "tiarna_bulwark", type = "normal", effect = "Protect you and absorb afflictions", balance = {balanceequilibriumtake = "tiarna_bulwark"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_tiarna_presence = {defense = "tiarna_presence", type = "normal", effect = "Grants crit and dodge chance", balance = {balanceequilibriumtake = "tiarna presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_tiarna_unleash = {defense = "tiarna_unleash", type = "normal", effect = "Chance to replicate your abilities", balance = {balanceequilibriumtake = "tiarna unleash on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_tiarna_shelter = {defense = "tiarna_shelter", type = "normal", effect = "Blocks the next attack", balance = {balanceequilibriumtake = "tiarna shelter"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_tiarna_shelter_stored = {defense = "tiarna_shelter_stored", type = "normal", effect = "Raises shelter when &lt;40% health", balance = {balanceequilibriumtake = "tiarna shelter store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_tiarna_store = {defense = "tiarna_store", type = "normal", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_tiarna_cultivation = {defense = "tiarna_cultivation", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "tiarna cultivation on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--Seraph
def_seraph_form = {defense = "seraph_form", type = "gold", effect = "Be not afraid!", balance = {balanceequilibrium = "sunrise embrace brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_seraph_presence = {defense = "seraph_presence", type = "gold", effect = "Seraph Crit and Dodge", balance = {balanceequilibrium = "seraph presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_seraph_radiate = {defense = "seraph_radiate", type = "gold", effect = "Seraph periodic magic damage", balance = {balanceequilibrium = "seraph radiate on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_seraph_corona = {defense = "seraph_corona", type = "gold", effect = "Blocks the next attack", balance = {balanceequilibrium = "seraph corona"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_seraph_corona_stored = {defense = "seraph_corona_stored", type = "gold", effect = "A corona will protect you in your hour of need", balance = {balanceequilibrium = "seraph corona store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_seraph_parhelion = {defense = "seraph_parhelion", type = "gold", effect = "Seraph chance to duplicate attack", balance = {balanceequilibrium = "seraph parhelion on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_seraph_halo = {defense = "seraph_halo", type = "gold", effect = "Seraph absorb aff and defence", balance = {special = "seraph halo"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_seraph_store = {defense = "seraph_store", type = "gold", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--aetherial
def_aetherial_form = {defense = "aetherial_form", type = "normal", effect = "You are a star", balance = {balanceequilibriumtake = "arise heavens brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_aetherial_bastion = {defense = "aetherial_bastion", type = "normal", effect = "Protect you and absorb afflictions", balance = {balanceequilibriumtake = "aetherial bastion"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_aetherial_presence = {defense = "aetherial_presence", type = "normal", effect = "Grants crit and dodge chance", balance = {balanceequilibriumtake = "aetherial presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_aetherial_torment = {defense = "aetherial_torment", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "aetherial torment on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_aetherial_agility = {defense = "aetherial_agility", type = "normal", effect = "Chance to replicate your abilities", balance = {balanceequilibriumtake = "aetherial agility on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_aetherial_band = {defense = "aetherial_band", type = "normal", effect = "Blocks the next attack", balance = {balanceequilibriumtake = "aetherial band"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_aetherial_band_stored = {defense = "aetherial_band_stored", type = "normal", effect = "Will raise band if &lt;40% health", balance = {balanceequilibriumtake = "aetherial band store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_aetherial_store = {defense = "aetherial_store", type = "normal", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--titan
def_titan_form = {defense = "titan_form", type = "normal", effect = "100% pure beef", balance = {balanceequilibriumtake = "awaken core brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_titan_irradiance = {defense = "titan_irradiance", type = "normal", effect = "Protect you and absorb afflictions", balance = {balanceequilibriumtake = "titan irradiance"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_titan_presence = {defense = "titan_presence", type = "normal", effect = "Grants crit and dodge chance", balance = {balanceequilibriumtake = "titan presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_titan_disruption = {defense = "titan_disruption", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "titan disruption on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_titan_multicore = {defense = "titan_multicore", type = "normal", effect = "Chance to replicate your abilities", balance = {balanceequilibriumtake = "titan multicore on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_titan_remnant = {defense = "titan_remnant", type = "normal", effect = "Blocks the next attack", balance = {balanceequilibriumtake = "titan remnant"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_titan_remnant_stored = {defense = "titan_remnant_stored", type = "normal", effect = "Will raise remnant if &lt;40% health", balance = {balanceequilibriumtake = "titan remnant store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_titan_store = {defense = "titan_store", type = "normal", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--astral
def_astral_form = {defense = "astral_form", type = "normal", effect = "Taste the rainbow", balance = {balanceequilibriumtake = "masque self brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_astral_refulgence = {defense = "astral_refulgence", type = "normal", effect = "Protect you and absorb afflictions", balance = {balanceequilibriumtake = "astral refulgence"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_astral_presence = {defense = "astral_presence", type = "normal", effect = "Grants crit and dodge chance", balance = {balanceequilibriumtake = "astral presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_astral_chaosspores = {defense = "astral_chaosspores", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "astral spores on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_astral_recursion = {defense = "astral_recursion", type = "normal", effect = "Chance to replicate your abilities", balance = {balanceequilibriumtake = "astral recursion on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_astral_dreamtide = {defense = "astral_dreamtide", type = "normal", effect = "Blocks the next attack", balance = {balanceequilibriumtake = "astral dreamtide"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_astral_dreamtide_store = {defense = "astral_dreamtide_store", type = "normal", effect = "Will raise dreamtide if &lt;40% health", balance = {balanceequilibriumtake = "astral dreamtide store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_astral_store = {defense = "astral_store", type = "normal", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--nocturn
def_nocturn_form = {defense = "nocturn_form", type = "normal", effect = "I vant to suck your blood!", balance = {balanceequilibriumtake = "shadow meld brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_nocturn_bloodcoat = {defense = "nocturn_bloodcoat", type = "normal", effect = "Protect you and absorb afflictions", balance = {balanceequilibriumtake = "nocturn_bloodcoat"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_nocturn_presence = {defense = "nocturn_presence", type = "normal", effect = "Grants crit and dodge chance", balance = {balanceequilibriumtake = "nocturn presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_nocturn_haze = {defense = "nocturn_haze", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "nocturn haze on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_nocturn_double = {defense = "nocturn_double", type = "normal", effect = "Chance to replicate your abilities", balance = {balanceequilibriumtake = "nocturn double on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_nocturn_shadow = {defense = "nocturn_shadow", type = "normal", effect = "Blocks the next attack", balance = {balanceequilibriumtake = "nocturn shadow"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_nocturn_shadow_stored = {defense = "nocturn_shadow_stored", type = "normal", effect = "Will raise shadow if &lt;40% health", balance = {balanceequilibriumtake = "nocturn shadow store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_nocturn_store = {defense = "astral_store", type = "normal", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--sagani
def_sagani_form = {defense = "sagani_form", type = "normal", effect = "You're the Avatar!", balance = {balanceequilibriumtake = "sagani coalesce brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_sagani_wall = {defense = "sagani_wall", type = "normal", effect = "Protect you and absorb afflictions", balance = {balanceequilibriumtake = "sagani wall"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_sagani_presence = {defense = "sagani_presence", type = "normal", effect = "Grants crit and dodge chance", balance = {balanceequilibriumtake = "sagani presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_sagani_epicentre = {defense = "sagani_epicentre", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "sagani epicentre on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_sagani_similitude = {defense = "sagani_similitude", type = "normal", effect = "Chance to replicate your abilities", balance = {balanceequilibriumtake = "sagani similitude on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_sagani_helix = {defense = "sagani_helix", type = "normal", effect = "Blocks the next attack", balance = {balanceequilibriumtake = "sagani helix"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_sagani_helix_stored = {defense = "sagani_helix_stored", type = "normal", effect = "Will raise helix if &lt;40% health", balance = {balanceequilibriumtake = "sagani helix store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_sagani_store = {defense = "sagani_store", type = "normal", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--Chaos
def_chaos_form = {defense = "chaos_form", type = "normal", effect = "LeT's GeT cHaOtIc!!!", balance = {balanceequilibriumtake = "embrace chaos brutal"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_chaos_shroud = {defense = "chaos_shroud", type = "normal", effect = "Protect you and absorb afflictions", balance = {balanceequilibriumtake = "chaos shroud"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_chaos_presence = {defense = "chaos_presence", type = "normal", effect = "Grants crit and dodge chance", balance = {balanceequilibriumtake = "chaos presence on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_chaos_entropy = {defense = "chaos_entropy", type = "normal", effect = "Aura that damages and sometimes affs enemies", balance = {balanceequilibriumtake = "chaos entropy on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_chaos_fork = {defense = "chaos_fork", type = "normal", effect = "Chance to replicate your abilities", balance = {balanceequilibriumtake = "chaos fork on"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_chaos_figment = {defense = "chaos_figment", type = "normal", effect = "Blocks the next attack", balance = {balanceequilibriumtake = "chaos figment"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_chaos_figment_stored = {defense = "chaos_figment_stored", type = "normal", effect = "Will raise figment if &lt;40% health", balance = {balanceequilibriumtake = "chaos figment store"}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},
def_chaos_store = {defense = "chaos_store", type = "normal", effect = "Return to your fancy room on death", balance = {}, state = "down", needit = false, timer = createStopWatch(), skill = "Generic"},

--making sure empowered moon is in here to avoid errors, regardless of class
def_empowered_moon = {defense = "empowered_moon", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "cast sagacity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sagacity" },
}

snd.alternative_class_defenses = {
--Class catch
Praenomen_hiding = {defense = "hiding", type = "normal", effect = "Hide deeper in the shadows", balance = {balanceequilibriumtake = "veil"}, state = "down", needit = false, timer = createStopWatch(), skill = "Veil"},
Akkari_hiding = {defense = "hiding", type = "ivory", effect = "Conceal your fervor", balance = {balanceequilibriumtake = "dim"}, state = "down", needit = false, timer = createStopWatch(), skill = "Dim"},

Praenomen_stalking = {defense = "stalking", type = "normal", effect = "Nighttime hiding in the shadows", balance = {balanceequilibriumtake = "stalk"}, state = "down", needit = false, timer = createStopWatch(), skill = "Stalking" },
Akkari_stalking = {defense = "stalking", type = "ivory", effect = "Muffle your footsteps at night", balance = {balanceequilibriumtake = "muffle"}, state = "down", needit = false, timer = createStopWatch(), skill = "Muffle" },
Luminary_constitution = {defense = "constitution", type = "normal", effect = "Protection against vomiting", balance = {needyequilibriumtake = "perform constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Constitution"},
Earthcaller_constitution = {defense = "constitution", type = "normal", effect = "Protection against vomiting", balance = {needyequilibriumtake = "dirge constitution"}, state = "down", needit = false, timer = createStopWatch(), skill = "Constitution"},
Indorani_shroud = { defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "shroud"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Oneiromancer_shroud = { defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "shroud"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Carnifex_shroud = {defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "soul shroud"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Warden_shroud = {defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "ancest distort"}, state = "down", needit = false, timer = createStopWatch(), skill = "Shroud" },
Syssin_shroud = { defense = "shroud", type = "normal", effect = "Shrouded.",  balance = {needybalancetake = "conjure cloak"}, state = "down", needit = false, timer = createStopWatch(), skill = "Cloak" },
Revenant_maingauche = {defense = "maingauche", type = "normal", effect = "Chance to counter attack", balance = {needyequilibriumtake = "maingauche"}, state = "down", needit = false, timer = createStopWatch(), skill = "MainGauche"},
Templar_maingauche = {defense = "maingauche", type = "normal", effect = "Chance to counter attack", balance = {needyequilibriumtake = "maingauche"}, state = "down", needit = false, timer = createStopWatch(), skill = "MainGauche"},
Warden_fearless = {defense = "fearless", type = "normal", effect = "Protects against fear affliction.", balance = {special = "warden fortitude"}, state = "down", needit = false, timer = createStopWatch(), skill = "Fortitude"},
Ascendril_empowered_moon = {defense = "empowered_moon", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "cast sagacity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sagacity" },
Bloodborn_empowered_moon = {defense = "empowered_moon", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "unleash acumen"}, state = "down", needit = false, timer = createStopWatch(), skill = "Acumen" },
Sciomancer_empowered_moon = {defense = "empowered_moon", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "cast sagacity"}, state = "down", needit = false, timer = createStopWatch(), skill = "Sagacity" },
Runecarver_empowered_moon = {defense = "empowered_moon", type = "normal", effect = "extra mana recovery", balance = {balanceequilibriumtake = "runecarve mysticism"}, state = "down", needit = false, timer = createStopWatch(), skill = "Mysticism" },
Skill_insomnia = {defense = "insomnia", type = "normal", effect = "Prevents sleep effects", balance = {special = "insomnia"}, state = "down", needit = false, timer = createStopWatch(), skill = "Insomnia"},
}



</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>give/take defenses</name>
							<packageName></packageName>
							<script>local formDefs = {
	def_adherent_form = true,
	def_seraph_form = true,
	def_aetherial_form = true,
	def_titan_form = true,
	def_glacian_form = true,
	def_nocturn_form = true,
	def_sagani_form = true,
	def_chaos_form = true,
	def_astral_form = true,
  def_tiarna_form = true,
}

local function check200(defense)
  if formDefs[defense] then
    sendGMCP("Char.Skills.get")
    send("")
  end
end

function snd.def_check()
 for i in pairs(snd.defenses) do
  if i == "def_speed" or i == "def_rebounding" or i == "def_deafness" or i == "def_fangbarrier" then
   if snd.defenses[i].state == "waiting" and getStopWatchTime(snd.defenses[i].timer) &gt;= 10 then
    snd.def_timeout(i)
   end
  elseif snd.defenses[i].state == "waiting" and getStopWatchTime(snd.defenses[i].timer) &gt; 2 then
   snd.def_timeout(i)
  end
 end
end

function snd.def_timeout(defense)
 snd.defenses[defense].state = "down"
 snd.message("[Resetting: &lt;white&gt;"..defense.."&lt;brown&gt;]", "reset")
end

function snd.def_gain(defense)
--  deleteLine()
 snd.message("You: &lt;green&gt;GAIN &lt;white&gt;"..defense..".", "defense")
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 check200(defense)
 x = stopStopWatch(snd.defenses[defense].timer)
-- resetStopWatch(snd.defenses[defense].timer)
 snd.def_have(defense)
 snd.defenses[defense].timer = createStopWatch()
end

function snd.def_have(defense)
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 snd.defenses[defense].state = "deffed"
 if snd.less_defs~= nil then
   for i in pairs(snd.less_defs) do
    if snd.less_defs[i] == defense then
     snd.defenses[defense].needit = false
     table.remove(snd.less_defs, i)
    end
   end
  end
end

function snd.def_def(defense)
 if snd.toggles.gags then 
  deleteLine()
 end
 if snd.defenses["def_"..defense].type == "normal" then
  cecho("&lt;white&gt;\n"..defense)
 else
  cecho("&lt;"..snd.defenses["def_"..defense].type.."&gt;\n"..defense)
 end
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 echo(" "..snd.defenses[defense].effect)
 snd.def_have(defense)
end

function snd.def_take(defense)
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 check200(defense)
 if snd.defenses[defense].state == "deffed" then
--  deleteLine()
  snd.message("You: &lt;red&gt;LOSE &lt;white&gt;"..defense..".", "defense")
 end
 snd.def_remove(defense)
end

function snd.def_remove(defense)
 if not string.find(defense, "def_") then
  defense = "def_"..defense
 end
 snd.defenses[defense].state = "down"
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>most defenses</name>
							<packageName></packageName>
							<script>snd.defenses_list =  {
  ["Your hands are gripping your wielded items tightly."] = "gripping",
  ["Your senses are magically heightened."] = "mindseye_tattoo",
  ["You are diverting melee attacks."] = "divert_melee",
  ["You are surrounded by a cloak of protection."] = "cloak_tattoo", 
  ["You are utilising your bodily control to make yourself more fit."] = "fitness",
  ["You are blind."] = "blindness",
  ["You are deaf."] = "deafness",
  ["You are feeling extremely energetic."] = "kola",
  ["You are surrounded by a pocket of air."] = "waterbreathing",
  ["Your mind has been touched by the essence of the Underking."] = "deathsight",
  ["You have insomnia, and cannot easily go to sleep."] = "insomnia",
  ["You possess the sight of the third eye."] = "thirdeye",
  ["Your resistance to damage by poison has been increased."] = "venom",
  ["You are tempered against fire damage."] = "frost",
  ["You walk on a small cushion of air."] = "levitation",
  ["Your sense of time is heightened, and your reactions are speeded."] = "speed",
  ["You are insulated against the harsh cold."] = "caloric",
  ["You are protected from hand-held weapons with an aura of rebounding."] = "rebounding",
  ["You are dodging melee attacks."] = "dodge_melee",
  ["Your vision is heightened to see in the dark."] = "nightsight",
  ["Your mind is filled with clarity."] = "clarity",
  ["You are completely fearless."] = "fearless",
  ["Your soulstone is split to support your weapon, body, and armour."] = "soul_fracture",
  ["Your soul has been fortified."] = "soul_fortify",
  ["You have the safeguard of an Idreth."] = "safeguard",
  ["You have the miasma of an Azudim."] = "miasma",
  ["You have the warmth of a Yeleni."] = "warmth",
  ["You are prepared to counterattack against physical aggression."] = "maingauche",
  ["You are paced for bursts of exertion."] = "pacing",
  ["You are sensing the heat of others."] = "heatsight",
  ["You walk with the grace of the stars."] = "starburst",
  ["You are extremely heavy and difficult to move."] = "density",
  ["You are harvesting the souls of your victims."] = "soulharvest",
  ["You are deriving pleasure from pain inflicted upon others."] = "reveling",
  ["Your soulstone is embedded in your body."] = "soul_body",
  ["Your weapons thirst for the souls of your enemies."] = "soulthirst",
  ["A steady blast of air fans out from beneath your feet."] = "waterwalking",
  ["You are fighting recklessly."] = "recklessness",
  ["You are immune to normal weather."] = "weathering",
  ["You have the bodyheat defence."] = "bodyheat",
  ["Your body is well heated internally."] = "bodyheat",
  ["You have the metabolism defence."] = "metabolism",
  ["Your metabolism is at peak performance."] = "metabolism",
  ["Your hide is thickened."] = "thickhide",
  ["Your movements are supernaturally fast."] = "endurance",
  ["Your bones have been hardened greatly."] = "harden",
  ["You have the cornering defence."] = "corner",
  ["You are cornering your opponents."] = "corner",
  ["You are protected from the fangs of serpents."] = "fangbarrier",
  ["You have been invigorated with strength."] = "vigor",
  ["You are already invigorated."] = "vigor",
  ["You are protected from light-based damage sources."] = "lightshield",
  ["Your body is suffused with divinely-inspired resilience."] = "inspiration_constitution",
  ["Your body is lifted with divinely-inspired dexterity."] = "inspiration_dexterity",
  ["Your limbs are suffused with divinely-inspired strength."] = "inspiration_strength",
  ["Your mind is suffused with divinely-inspired intelligence."] = "inspiration_intelligence",
  ["A shield of flame protects you from blazing fires."] = "fireblock",
  ["Your skin is toughened."] = "toughness",
  ["You are resisting magical damage."] = "resistance",
  ["You will substitute your soul with another upon dying."] = "soul_substitute",
  ["Your actions are cloaked in secrecy."] = "shroud",
  ["You are seeking the souls of the hidden."] = "soul_spiritsight",
  ["The ward of the Syssin protects your body."] = "warding",
  ["You have the finesse defence."] = "finesse",
  ["You are already wielding your weapons with finesse."] = "finesse",
  ["You will deliver your blade with trained finesse."] = "finesse",
  ["Cobra-like, you weave back and forth to dodge blows."] = "weaving",
  ["You are watching the shadows."] = "shadowsight",
  ["You are shimmering with a ghostly light."] = "ghost",
  ["You will slip into the shadows after killing."] = "shadowslip",
  ["Phased slightly out of reality, you are effectively untouchable."] = "phase",
  ["You will call upon your fortitude in need."] = "vitality",
  ["You are regenerating lost health through will."] = "kaido_regeneration",
  ["You are using your superior constitution to prevent nausea."] = "constitution",
  ["Your mind is split, allowing constant meditation."] = "split_mind",
  ["Your blood is steeled against poisons."] = "kaido_immunity",
  ["Your regeneration is boosted."] = "boosted_regen",
  ["Your skin is hard and tough, like the bark of an oak tree."] = "barkskin",
  ["You are concealed from the view of others."] = "conceal",
  ["You are hardened against the cold."] = "hardiness",
  ["Your flexibility allows you to unentangle more easily."] = "flexibility",
  ["You are sapping the life energy of others."] = "lifesap",
  ["You have masked your scent to others."] = "maskedscent",
  ["Your tree tattoo glows with enhanced power."] = "greenheart",
  ["You are dedicating your attention to concise movements."] = "endure",
  ["You have the booming voice of a mountaineer."] = "mountaineer",
  ["You are shrouded by a cloud of dust."] = "dustcoat",
  ["You are masking your pain."] = "resilience",
  ["You reign supreme upon the wasteland."] = "desolation",
  ["You are focusing on circulating your blood more efficiently."] = "circulation",
  ["Your senses are attuned to the environment."] = "blindsense",
  ["The states of your body and mind are joined."] = "linked",
  ["You embrace your core oneness."] = "oneness",
  ["Your mind is dampened against psychic attack."] = "sublimation",
  ["You have heightened your ability to repair tissue and organs."] = "ameliorate",
  ["Your internal core is in a state of hyper production."] = "catabolism",
  ["Your skin is as hard as iron."] = "ironskin",
  ["You are fleet of foot."] = "fleetfoot",
  ["You are prepared to repel deadly blows."] = "axe_repel",
  ["You are tracking the bloodtrails left by your targets."] = "bloodtrails",
  ["You are supporting your allies with your battlechant."] = "battlechant",
  ["Your limb-shattering blows incite fear in your enemies."] = "brutality",
  ["You have adopted a defensive position."] = "phalanx",
  ["You have been spurred into a blood frenzy."] = "anthem",
  ["You are filled with heroic resolve."] = "rallied",
  ["Your morale has been bolstered."] = "bolstered_morale",
  ["You are harnessing your inner rage."] = "dauntless",
  ["You are ready to deflect incoming incoming projectiles."] = "axe_avert",
  ["You will strike down those who flee in terror."] = "axe_obstruct",
  ["You are attuned to the music of the spheres."] = "spheres",
  ["Your golem is standing steadfast."] = "steadfast",
  ["You are listening for underground movement."] = "earthsense",
  ["You have embraced your earthen form."] = "earthenform",
  ["You have gained the earthenform defence."] = "earthenform",
  ["You are attempting to bounce your attempts off parried blows."] = "ricochet",
  ["You are preparing to entwine your flail against hostile weapons."] = "entwine",
  ["Your soul is entwined around your golem's."] = "twinsoul",
  ["Your soul is resonating with the earth."] = "earth_resonance",
  ["Your flail imbued with the raw force of the desert."] = "erosion",
  ["Your arms have been bound in stone."] = "stonebind",
  ["You have imbued the fury of the Earthen into your flail."] = "imbue_stonefury",
--  ["You are channeling the will of the Earthen."] = "imbue_will",
  ["You are focusing your energy into sweltering your sands."] = "sand_swelter",
  ["Gnashing your tongue, your mouth salivates with fluid."] = "salivate",
  ["Your coat of fur has been thickened."] = "thickfur",
  ["You are bracing from attacks."] = "bracing",
  ["Your soul is swathed in secrecy."] = "soulmask",
  ["You are striking with great force."] = "bruteforce",
  ["You are blocking exits with tenacity."] = "stalwart",
  ["The Eclipse is looming to mask your Sun and Moon."] = "eclipse",
  ["You are bathed in the glorious protection of decaying flesh."] = "putrefaction",
  ["You have sworn vengeance upon those who would slay you."] = "vengeance",
  ["You are emanating an aura of death harmful to those around you."] = "deathaura",
  ["Your being is protected by the soulcage."] = "soulcage",
  ["You are circulating your blood erratically to hide your vitals."] = "blurred",
  ["You are exuding an aura of trepidation upon those you despise."] = "trepidation",
  ["Your flesh is fortified against damage."] = "fortify",
  ["You are eluding your opponents' blows."] = "elusion",
  ["You have enhanced your vision to be able to see traces of lifeforce."] = "lifevision",
  ["You detect the movements of nearby mortals."] = "lifescent",
  ["Your body is steeled against magical energies."] = "corpus_warding",
  ["Your corpse is already steeled against magical attack."] = "corpus_warding",
  ["Your blood is concentrated."] = "concentrate",
  ["Your blood already courses with increased viscosity."] = "concentrate",
  ["Your movements are supernaturally fast."] = "celerity",
  ["The cold of the grave has filled your body."] = "gravechill",
  ["You have made a deal with the Devil."] = "devilpact",
  ["You are protected by the intimidating presence of the Hierophant."] = "hierophant",
  ["Your speed is increased by the Chariot."] = "chariot",
  ["You share a deepened bond with your familiar."] = "spiritbond",
  ["A protective rune guards you from harm."] = "protection",
  ["You are discerning the spirit of others."] = "shaman_spiritsight",
  ["You have been gifted with the bloom of life."] = "lifebloom",
  ["A ball of lightning wards your limbs."] = "shaman_warding",
  ["Your arms burn with the lines of your spirit focus."] = "focalmark",
  ["Your body has been tempered by the strength of your Inner Fire."] = "tempered_body",
  ["You move with extraordinary haste."] = "haste",
  ["You possess mighty swagger in your actions."] = "swagger",
  ["You have splintered your spirit into multiple."] = "disunion",
  ["You are trying to deflect incoming arrows."] = "deflection",
  ["You are rebuking those who would harm your appendages."] = "rebuke",
  ["You are obscured by a cloak of light."] = "suncloak",
  ["You are lithe and nimble, ready to adapt."] = "litheness",
  ["You are bending ranged magical attacks on itself."] = "bending",
  ["Your mind is sparked with new found curiosity."] = "mindspark",
  ["You are unnaturally keen."] = "potence_intelligence",
  ["You are unnaturally resilient."] = "potence_constitution",
  ["You are unnaturally agile."] = "potence_dexterity",
  ["You are unnaturally strong."] = "potence_strength",
  ["You have flown into a battle rage."] = "herculeanrage",
  ["Your sagacious mind empowers the moon tattoo."] = "empowered_moon",
  ["You are preparing arcane missiles."] = "missiles",
  ["You are protected by a thin layer of magic."] = "arcaneskin",
  ["You have the countercurrent defence."] = "countercurrent",
  ["You are blurring the edges of your form."] = "blurring",
  ["You are surrounded in a mantle of pure shadow."] = "shadow_mantle",
  ["You are focusing on precise spellcasting."] = "rigor",
  ["You have the shadow_engulf defence."] = "shadow_engulf",
  ["You are prepared to discharge energy."] = "discharge",
  ["You are wreathed in an aura of toxicity."] = "nexus",
  ["Your fiery soul has reached its zenith of power."] = "zenith",
  ["An impermeable dome of ley energy protects you."] = "manipulation_dome",
  ["Your flame tattoo is glowing faintly."] = "flame_tattoo",
  ["You are surrounded by a nearly invisible magical shield."] = "shield_tattoo",
  ["You are glowing with a radiant light."] = "shine",
  ["You are striding through the forests with ease."] = "foreststride",
  ["You are lipreading to overcome deafness."] = "lipreading",
  ["You have been granted the speed of the Divine."] = "divine_speed",
  ["You have insight into the thoughts of others."] = "insight",
  ["You are watching both the skies and trees above you for any movement."] = "overwatch",
  ["You are utilising hypersight."] = "hypersight",
  ["You will seek opportunities to tend to your wounds."] = "initiative",
  ["An ancestral spirit is displacing the souls of your foes."] = "displacement",
  ["An ancestral invocation fortifies your weapon, body, and armor."] = "invocation",
  ["You are attuned to the flow of battle."] = "battleflow",
  ["You are claiming victory over your foes."] = "ancest_victory",
  ["An ancestor has agreed to intervene upon the time of your death."] = "intervention",
  ["You are resolved to carry out your duties."] = "severity",
  ["You are punctuating your attacks with thunderous roars."] = "roaring",
  ["You have received the ancestral safeguard blessing."] = "ancest_blessing_safeguard",
  ["Your fortitude is bolstered by the ancestors."] = "ancestral_bolster",
  --["Your strength has been bolstered."] = "homage",
  ["You will wreak defiant vengeance on your killer."] = "defiance",
  ["Your aura is concealed by a redoubt."] = "redoubt",
  ["You are infused with the glacial cold of the Astral."] = "glaciation",
  ["Your memory will live on by the grace of the Astral."] = "remembrance",
  ["You are protected by an aura of heated pressure."] = "heatshield",
  ["You are protected from fire by tectonic activity."] = "smothering",
  ["You are emitting waves of pressure."] = "seismicity",
  ["You have made a pact with a faerie."] = "faerie",
  ["You are shielded from disfigurement by a well-placed fan."] = "fan",
  ["Your speed is increased by the agile crane."] = "crane",
  ["Clouds linger to obscure your sphere and hypercube."] = "cloud",
  ["You are projecting an aura of intoxication."] = "intoxication",
  ["You are sheathed against harm by a thin layer of light."] = "sheath",
  ["Your music induces a euphoric reaction in those around you."] = "euphonia",
  ["Your mind and body are in equilibrium."] = "equipoise",
  ["Your music produces discordant recoil in those around you."] = "discordance",
  ["You stand upon the guided road of destiny."] = "destiny",
  ["You are surrounded by occasional glimmers of colour."] = "aurora",
  ["Your limbs have been stretched."] = "stretching",
  ["You currently possess charm and charisma."] = "charisma",
  ["Your inner tempo can act upon a half beat."] = "halfbeat",
  ["You are enveloped in a layer of permafrost."] = "permafrost",
  ["You are remaining steady by dint of your sea legs."] = "sealegs",
  ["You have adopted the stance of the wavebreaker."] = "wavebreaking",
  ["You are maintaining a tidal flux to redirect your weapon strikes."] = "tideflux",
  ["Your life is bonded to that of your elemental."] = "lifebond",
  ["You are recuperating on steady shore."] = "shore_leave",
  ["Briny barnacles cover the length of your arms."] = "encrusted",
  ["You are working in tandem with your elemental."] = "elemental_engulf",
  ["Freezing fog envelops your selkachoar with its power."] = "expose_brume",
  ["Your weapon is exposed to icy rime."] = "expose_rime",
  ["Your fog is creating a beguiling siren's song."] = "sirensong",
  ["You are seeing through the many eyes of the fog."] = "panoptic",
  ["You are attuned to fluctuations with the fog."] = "fluctuations",
  ["The fog is obscuring your movements."] = "obscure",
  ["Your experiment is suffering attacks for you."] = "interposition",
  ["Your conduit is producing a billowing black smoke."] = "obfuscation",
  ["You are sharply cognisant of your opponent's symptoms."] = "cognisance",
  ["You will be resuscitated when near-death."] = "resuscitation",
  ["You are using your conduit as a protective crutch."] = "conduit_crutch",
  ["You are taking advantage of the high tide."] = "hightide",
  ["Your body has been fortified for relentless pursuit."] = "relentless",
  ["Your enhanced acuity is detecting nearby movement."] = "acuity",
  ["You have brought about a state of transience."] = "transience",
  ["You are prepared to entrench at your bunker."] = "entrench",
  ["You are maintaining an ascetic outlook."] = "ascetic",
  ["Your light will retaliate with holy vengeance."] = "retaliation",
  ["You are suppressing signs of your vitality."] = "suppressed",
  ["A vinculum is anchoring your soul."] = "vinculum",
  ["Pain is granting you a sense of ruthless resolve."] = "ruthlessness",
  ["You are impenetrable; incoming arrows will do no harm."] = "impenetrable",
  ["You are preparing to withstand a critical mass."] = "criticality",
  ["Perdition will restore you should you fall."] = "unfinished",
  ["You have become intoxicated upon carnage."] = "exhilarate",
  ["Your reflexes are honed to a razor-sharp level."] = "reflexes",
  ["Contempt and spite drive your body onwards."] = "contempt",
  ["Your bloodlust powers your restless velocity."] = "velocity",
  ["You are untouchable; ranged magics are nothing before you."] = "untouchable",
  ["Your ego is inflated beyond even its normally high limits."] = "inflated",
  ["You are observing your victim with predatory insticts."] = "predation",
  ["Your thoughts are consumed by sweet, agonising delirium."] = "delirium",
  ["Hellish flames coat your fists."] = "ravage",
  ["Your resolve strengthens you against foul magics."] = "resolved",
  ["You are transcending normal limitations."] = "transcendence",
  ["You are blessed with miraculous constitution."] = "ardour_constitution",
  ["You are blessed with miraculous strength."] = "ardour_strength",
  ["You are blessed with miraculous intelligence."] = "ardour_intelligence",
  ["You are blessed with miraculous dexterity."] = "ardour_dexterity",
  ["Your constitution is bolstered by an Earthen battle hymn."] = "battlehymn_constitution",
  ["Your intelligence is bolstered by an Earthen battle hymn."] = "battlehymn_intelligence",
  ["Your dexterity is bolstered by an Earthen battle hymn."] = "battlehymn_dexterity",
  ["Your strength is bolstered by an Earthen battle hymn."] = "battlehymn_strength",
  ["Your being is protected by the soulcage."] = "soulcage",
  ["You will forestall poisonous harm."] = "forestall",
  ["Your moon tattoo is being empowered."] = "empowered_moon",
  ["You are encased in arcane armour unseen."] = "panoply",
  ["You will victimise your foes with terrible magic."] = "victimise",
  ["Your predatory prowess enhances your malediction."] = "prowess",
  ["The Broodmother's secrecy masks your steps."] = "hex_stalk",
  ["The Warden's blessing preserves you."] = "hex_preservation",
  ["Phantasmal ironbark girds your form."] = "ironbark",
  ["You are feeling quite selfish."] = "selfishness",
  ["You are overwhelmed by a blood rage."] =  "bloodrage",
  ["You have flooded your undead body with warm, pulsating lifeblood."] = "deluge",
  ["Shadows are gathered around your arm, waiting to defend you."] = "shadowblow",
  ["You stalk the night as a predator."] = "stalking",
  ["Your steps hardly touch the ground."] = "featherstep",
  ["A carpet of fetid rot sprawls beneath your feet."] = "rot_carpet",
  ["Plants sprout before your footsteps."] = "greenfoot",
  ["You have enacted the Oath of the Durdalis."] = "oath_durdalis",
  ["You have enacted the Oath of the Forestwalker."] = "oath_forestwalker",
  ["You have enacted the Oath of the Elder Shaman."] = "oath_shaman",
  ["You have enacted the Oath of Nature's Blade."] = "oath_blade",
  ["You have enacted the Oath of Tranquility."] = "oath_tranquility",
  ["You have enacted the Oath of the Primeval."] = "oath_primeval",
  ["You have enacted the Oath of the Rhythm."] = "oath_rhythm",
  
  ["You have used great guile to conceal yourself."] = "hiding",
  ["You are focusing on catching arrows."] = "arrow_catching",
  
  ["The blight spreads wherever you may roam."] = "blightbringer",
  ["You are recalling the discipline of Field Studies."] = "discipline_fieldstudies",
  ["You are recalling the discipline of Compounding."] = "discipline_compounding",
  ["You are recalling the discipline of Research."] = "discipline_research",
  ["You are recalling the discipline of Experimentation."] = "discipline_experimentation",
  ["You are recalling the discipline of Procedure &amp; Protocol."] = "discipline_pnp",
  ["You are recalling the discipline of Biology."] = "discipline_biology",
  ["You are recalling the discipline of Chemistry."] = "discipline_chemistry",
  
  ["You are projecting your will through your sand."] = "projection",
  ["You are concentrating on maintaining a sure foot."] = "surefooted",
  ["You are attuned to disturbances within your sand domain."] = "disturbances",
  ["Sand is softening your footsteps."] = "sand_conceal",
  ["You are moving with increased momentum."] = "momentum",
  
  --Adherent
  ["You are protected by an Adherent's barrier."] = "adherent_barrier",
  ["You walk as an Adherent of the Virtues."] = "adherent_form",
  ["You have wreathed yourself in mortal fire."] = "adherent_mortalfire",
  ["You have stored your mortal fire."] = "adherent_mortalfire_stored",
  ["You are projecting your Adherent's presence."] = "adherent_presence",
  ["Your essence empowers your sanctuary."] = "adherent_store",
  ["You transcend mortal limitations."] = "adherent_synchroneity",
  ["Your indomitable will is overwhelming your enemies."] = "adherent_indomitable",
  ["Pure hostility emanates off you."] = "adherent_malevolence",
  ["An aura of turmoil seethes around you."] = "adherent_turmoil",
  ["You are wreaking ruination on those around you."] = "adherent_ruination",
  ["You are inflicting vengeance against your enemies."] = "adherent_avengement",
  ["You are wreathed in a storm of acid rain."] = "adherent_acid",
  
  --Glacian
  ["You have transfigured your physiology; you are a Glacian."] = "glacian_form",
  ["A cloak of midnight is protecting you."] = "glacian_penumbra",
  ["You are exuding the presence of winter's chill."] = "glacian_presence",
  ["Your silhouette is mirroring your attacks."] = "glacian_silhouette",
  ["You have fused your frozen form to the tundral drifts."] = "glacian_store",
  ["You are wreathed in an aura of twilight."] = "glacian_twilight",
  ["Your shadow is absorbing attacks in your stead."] = "glacian_adumbration",
  ["Your shadow will come to your aid when needed."] = "glacian_adumbration_stored",
  
  --Tiarna
  ["You are surrounded by a bulwark of the wilds."] = "tiarna_bulwark",
  ["You are cultivating the wilds wherever you walk."] = "tiarna_cultivation",
  ["You have taken the form of a Tiarna an-Kiar."] = "tiarna_form",
  ["You are sensing the presence of the Rhythm around you."] = "tiarna_presence",
  ["Nature's protective shelter watches over you."] = "tiarna_shelter",
  ["Nature's shelter will come to your rescue."] = "tiarna_shelter_stored",
  ["You are attuned to the Grove of Isolation."] = "tiarna_store",
  ["The savage fury of the wilds will echo your attacks."] = "tiarna_unleash",
  
  --Aetherial
  ["The bastion of Tharbar and Shenna is with you"] = "aetherial_bastion",
  ["The presence of Izu-Ari is bolstering your fortunes"] = "aetherial_presence",
  ["Shenebre's agility will bring double the pain"] = "aetherial_agility",
  ["Ontesme is tormenting foes on your behalf"] = "aetherial_torment",
  ["The silver band of Sekhtet is protecting you"] = "aetherial_band",
  ["Sekhtet's protective band will come to your aid."] = "aetherial_band_stored",
  ["You are attuned to Agorra, the celestial marketplace."] = "aetherial_store",
  ["You have arisen to the form of an Aetherial."] = "aetherial_form",
  
  --Seraph
  ["You are a Seraph; a holy warrior of Rahiela."] = "seraph_form",
  ["You are protected by a golden halo."] = "seraph_halo",
  ["You are projecting the brilliance of Rahiela."] = "seraph_presence",
  ["You are radiating fiery incandescence."] = "seraph_radiance",
  ["A corona will protect you in your hour of need."] = "seraph_corona",
  ["Your wings are touched by the twin parhelion."] = "seraph_parhelion",
  ["A corona will protect you in your hour of need."] = "seraph_corona_stored",
  ["Your soul is pledged to the Solar Enclave."] = "seraph_store",
  
  --Titan
  ["Your crackling aura strikes at your foes."] = "titan_disruption",
  ["Your core has awoken, granting you the full mantle of the Titan."] = "titan_form",
  ["You bathed in the irradiance of ylem energy."] = "titan_irradiance",
  ["Your core has been split into two halves."] = "titan_multicore",
  ["You are extending your Titanic aura to others."] = "titan_presence",
  ["A jittering remnant of ley-light stands nearby."] = "titan_remnant",
  ["A remnant of ley-light will come to your rescue."] = "titan_remnant_stored",
  ["You have stored away a part of your soul deep within the leylines."] = "titan_store",
  
  --Astral
  ["The sickly virulence of chaos spills from you."] = "astral_chaosspores",
  ["You are protected by the waves of the dreamtide."] = "astral_dreamtide",
  ["Dormant dreamtides will come to your aid."] = "astral_dreamtide_store",
  ["You stand amongst the nobility of Astral Chaos."] = "astral_form",
  ["Chaotic fortune blesses your frame."] = "astral_presence",
  ["The duality of indigo is mirroring your actions."] = "astral_recursion",
  ["Orange light wreathes you in a fiery shield."] = "astral_refulgence",
  ["You are attuned to the boughs of the worldflower."] = "astral_store",
  
  --Nocturn
  ["A layer of hardened blood protects your body in a sanguine shield."] = "nocturn_bloodcoat",
  ["Your blood double mimics your attacks."] = "nocturn_double",
  ["You have seized mastery over blood and shadow, assuming the Nocturn form."] = "nocturn_form",
  ["Shadow haze coils about your body with untapped violence."] = "nocturn_haze",
  ["You are empowering the blood of yourself and your allies."] = "nocturn_presence",
  ["Your shadow readies itself to take the next attack against you."] = "nocturn_shadow",
  ["Your shadow moves autonomously, ready to protect you at the right moment."] = "nocturn_shadow_stored",
  ["You have imbued the sanguine realm with your presence."] = "nocturn_store",
  
  --sagani
  ["You are wreathed in the storm's fury: all will suffer."] = "sagani_epicentre",
  ["You exist as a Sagani; a coalescion of elements given form."] = "sagani_form",
  ["A helix of air is protecting you."] = "sagani_helix",
  ["A helix of elemental air will aid you when needed."] = "sagani_helix_stored",
  ["The presence of elemental harmony confers good fortune."] = "sagani_presence",
  ["Arcane similitude renders you twice as effective."] = "sagani_similitude",
  ["You are attuned to your locus of elements."] = "sagani_store",
  ["A wall of stone is encircling you."] = "sagani_wall",
  
  --chaos
  ["Your chaotic energy strikes at your foes."] = "chaos_entropy",
  ["An illusory figment of Chaos stands next to you."] = "chaos_figment",
  ["A figment of Chaos will come to your rescue."] = "chaos_figment_stored",
  ["You are splitting your realities."] = "chaos_fork",
  ["You have embraced the full form of a Chaos Lord."] = "chaos_form",
  ["You are extending your Chaotic aura to others."] = "chaos_presence",
  ["You are surrounded by a shroud of Chaos."] = "chaos_shroud",
  ["You have stored away a part of your soul in the safety of Chaos."] = "chaos_store",
}
 </script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Sunder NDB</name>
					<packageName></packageName>
					<script>sndNDB = sndNDB or {}

function sndNDB_Install()
  --Will only probably be used on initial loading of system.
  sndNDB = {}
  sndNDB =
    {
      installed = true,
      players = {},
      highlightNames = false,
      highlighting =
        {
          Bloodloch = "firebrick",
          Duiran = "a_green",
          Enorian = "a_darkcyan",
          Spinesreach = "a_darkmagenta",
          Rogues = "a_brown",
          Enemies = "IndianRed",
        },
      divine =
        {
          "Keroc",
          "Razmael",
          "Ictinus",
          "Varian",
          "Avareti",
          "Damariel",
          "Dhar",
          "Chakrasul",
          "Ethne",
          "Haern",
          "Iosyne",
          "Ivoln",
          "Tanixalthas",
          "Omei",
          "Severn",
          "Slyphe",
          "Bamathis",
          "Alecto",
          "Megaera",
          "Tisiphone",
          "Veritas",
          "Imvra",
          "Becue",
          "Ere",
          "Nalus",
          "Tsoede",
        },
      cityEnemies = {},
      highlightPriority = "city",
      enemySettings = {bold = false, italics = false, underline = false},
    }
  snd.message("Sunder NDB installed perfectly and is ready to go.")
  sndNDB_Unhighlight()
  sndNDB_saveSettings(false)
  --Save on install, as a failsafe.
end</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Saving and Loading</name>
						<packageName></packageName>
						<script>function sndNDB_saveSettings(disp)
	if not sndNDB or not sndNDB.installed then
		return false
	end

	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local ndb_loc = getMudletHomeDir() .. separator .. "SunderNDB"

	table.save(ndb_loc, sndNDB)
	
	if disp then
		snd.message("Player information saved safely.")
	end	
end

function sndNDB_loadSettings()
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local ndb_loc = getMudletHomeDir() .. separator .. "SunderNDB"

	if not io.exists(ndb_loc) then 
		snd.message("Name database not found. Use 'sndb install' to fix this.")
		return
	end

	sndNDB = {}
	table.load(ndb_loc, sndNDB)
	snd.message("Player information found and loaded in.")

	sndNDB_saveSettings(false)
end

registerAnonymousEventHandler("sysDisconnectionEvent", "sndNDB_saveSettings", true)
registerAnonymousEventHandler("sysLoadEvent", "sndNDB_loadSettings")

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Grab Information</name>
						<packageName></packageName>
						<script>function sndNDB_GetOnline()
	local path = getMudletHomeDir().."/sndndb"
	
	if not lfs.attributes(path) then
		--We'll need a folder to store downloaded data. Don't worry, it won't cause issues.
		lfs.mkdir(path)
		snd.message("Created folder to store downloaded data at: "..path)
	end
	
	downloadFile(path .. "/Online.json", "http://api.aetolia.com/characters.json")

	snd.message("Let me find a list of online players really quick...")

	ndbWatcher = ndbWatcher or createStopWatch()
	startStopWatch(ndbWatcher)
end

function sndNDB_Acquire(person)

	assert(person)
	local person = person:title()
	local path = getMudletHomeDir().."/sndndb"

	if not lfs.attributes(path) then
		--We'll need a folder to store downloaded data. Don't worry, it won't cause issues.
		lfs.mkdir(path)
		snd.message("Created folder to store downloaded data at: "..path)
	end
	
	downloadFile(path .. "/"..person..".json", "http://api.aetolia.com/characters/"..person..".json")

end

function sndNDB_NameList(names)
	--Parse list to see who isn't tracked.
	for _, name in pairs(names) do
		if not table.contains(sndNDB.divine, name) then
			sndNDB_Acquire(name)
		end
	end
	snd.message("Name database is now up to date.")
end</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>ndb_download_failed</name>
							<packageName></packageName>
							<script>function ndb_download_failed(_, filepath)
	if not filepath:find("sndndb") and not filepath:find("gamefeed") then return end 
	
	snd.message("Error downloading information.")
	if filepath:find("gamefeed") then
		snd.message("Unknown error while downloading: " .. filepath)
		os.remove(getMudletHomeDir().."/gamefeed.json")
	elseif filepath:match("server replied: Not Found") then
		
		local person = filepath:match("/(%w+).json")
		local fpr = getMudletHomeDir().."/sndndb/"..person..".json"

		snd.message("This person does not exist: "..person)
		sndNDB_Remove(person)
		os.remove(fpr)
	else
		snd.message("Unknown error while downloading: " .. filepath)
	end
end</script>
							<eventHandlerList>
								<string>sysDownloadError</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>ndb_download_success</name>
							<packageName></packageName>
							<script>function ndb_download_success(_, filepath)
	--Do not mess with if it's not Sunder NDB information.
	if not filepath:find("sndndb", 1, true) and not filepath:find("gamefeed",1,true) then return end

	if filepath:find("Online",1,true) then
		sndNDB_SortOnline(filepath)
		return
	elseif filepath:find("gamefeed",1,true) then
		sndNDB_parseFeed(filepath)
		return
	end

	local f, s = io.open(filepath)
	if f then s = f:read("*l"); io.close(f) end

	-- didn't get JSON data? 
	if s:find("Internal error", 1, true) or s:find("DOCTYPE html PUBLIC", 1, true) then
		cecho("\n&lt;red&gt;Data Acquisition Failed!") 
		return 
	end
	local t = yajl.to_value(s)
	local cities = {"Bloodloch", "Duiran", "Enorian", "Spinesreach"}
	local name = t.name
	local title = t.fullname
	local guild = ""
	local xp_rank = t["xp rank"]:gsub("th", ""):gsub("nd", ""):gsub("st", ""):gsub("rd", "")
	if xp_rank == "Unranked" then xp_rank = 0 else local xp_rank = tonumber(xp_rank) end
	local city = ""
  if ndbCity ~= "" then
    city = ndbCity
  end

	local class = "" -- No longer given through API
	local level = "" -- No longer given through API
  local race = "" -- No longer given through API

  if sndNDB.players[name] ~= nil then guild = sndNDB.players[name].guild end
  if sndNDB.players[name] ~= nil and ndbCity == "" then city = sndNDB.players[name].city end
  if sndNDB.players[name] ~= nil then class = sndNDB.players[name].class end
  if sndNDB.players[name] ~= nil then level = sndNDB.players[name].level end
  if sndNDB.players[name] ~= nil then race = sndNDB.players[name].race end
  
  
  local tether = ""
  if (city == "Duiran" or city == "Enorian") then 
    tether = "Spirit"
  elseif (city == "Spinesreach" or city == "Bloodloch") then 
    tether = "Shadow" 
  else
    tether = ""
  end

	sndNDB.players[name] = {
		name = name,
		title = title,
		guild = guild,
		xp_rank = xp_rank,
		city = city,
		level = level,
		class = class,
    race = race,
    tether = tether
	}

	if guild:find("none") then
		sndNDB.players[name].guild = "None"
	else
		sndNDB.players[name].guild = guild:title()
	end

	if city:find("none") or city == "" then
		sndNDB.players[name].city = "None"
	else
		sndNDB.players[name].city = city:title()
	end

  	os.remove(filepath)
	
  raiseEvent("sndNDB Check Highlight", t.name)

end</script>
							<eventHandlerList>
								<string>sysDownloadDone</string>
							</eventHandlerList>
						</Script>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Ndb API</name>
						<packageName></packageName>
						<script>function sndNDB_getColour(name)
	if not sndNDB_Exists(name) then
		return "white"
	else
		return sndNDB.highlighting[sndNDB_getCitizenship(name)]
	end
end
function sndNDB_getClass(name)
	if sndNDB.players[name] then
		return sndNDB.players[name:title()].class
	else
		return "Unknown"
	end
end

function sndNDB_Exists(name)
	if not sndNDB.players[name] then
		return false
	else
		return true
	end
end

function sndNDB_isCitizenOf(city, name)
	if sndNDB_Exists(name) then
		return (sndNDB.players[name:title()].city == city:title() and true or false)
	else
		snd.message("The information for "..name.." has not yet been gathered.")
		return false
	end
end

function sndNDB_getCitizenship(name)
	if sndNDB_Exists(name) then
		if sndNDB.players[name].city:lower() == "none" or sndNDB.players[name].city:lower() == "(hidden)" then
			return "Rogues"
		else
			return sndNDB.players[name].city
		end
	else
		return "Unknown"
	end
end


function sndNDB_Remove(name)
	local person = name:title()
	if sndNDB_Exists(person) then
		sndNDB.players[person] = nil
		--If any highlight available, then clear it.
		if sndNDB.highlightTriggers and sndNDB.highlightTriggers[person] then
			killTrigger(sndNDB.highlightTriggers[person])
		end
		snd.message(person.." has been removed from the database.")
	else
		snd.message(person.." is not in the database, anyway.")
	end
end

function sndNDB_SortOnline(name_group)

  local player_list = {}
  if type(name_group) ~= "table" then

  	local f, s = io.open(name_group)
    if f then s = f:read("*l"); io.close(f) end

  	-- didn't get JSON data? 
  	if s:find("Internal error", 1, true) or s:find("DOCTYPE html PUBLIC", 1, true) then
  		cecho("\n&lt;red&gt;Data Acquisition Failed!") 
  		return 
  	end
  
  	local t = yajl.to_value(s)
  
  	apiOnlineFound = {}
  	apiNeedUpdate = {}
  	for ind, tab in pairs(t.characters) do
  		if not tab.name:find("masked") and not table.contains(sndNDB.divine, tab.name) then
  			table.insert(apiOnlineFound, tab.name)
  		end
  	end
  
  	for ind, tab in pairs(gmcp.Comm.Channel.Players) do
  		if not table.contains(apiOnlineFound, tab.name) and not tab.name:find("masked") and not table.contains(sndNDB.divine, tab.name) then
  			table.insert(apiOnlineFound, tab.name)
  		end
  	end
  
  	os.remove(name_group)
  	table.sort(apiOnlineFound)
    player_list = apiOnlineFound
    
  else
    apiNeedUpdate = {}
    player_list = name_group
  
  end

	--Parse the list to see who needs to be added.
	local count = 0
  
	for index, name in pairs(player_list) do
		if not sndNDB_Exists(name) and not table.contains(sndNDB.divine, name) then
			count = count + 1
			table.insert(apiNeedUpdate, name)
		end
	end 
	if count &gt; 0 then
		snd.message(count.." new names identified, grabbing their info.")
		cecho("\n&lt;a_darkgrey&gt; - "..table.concat(apiNeedUpdate, ", ")..".")
		sndNDB_NameList(apiNeedUpdate)
	else
		if parsingCity then
			if parsingCity:lower() == "classes" then
				sndNDB_displayOnlineClass(player_list)
			else
				sndNDB_displayOnlineCity(player_list)
			end
		else
			sndNDB_displayOnline(player_list)
		end
	end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Ndb Highlighting</name>
						<packageName></packageName>
						<script>function sndNDB_Unhighlight()
  if not sndNDB.highlightTriggers or not next(sndNDB.highlightTriggers) then
    return
  end
  local killTrigger = killTrigger
  for k, v in pairs(sndNDB.highlightTriggers) do
    killTrigger(v)
  end
  sndNDB.highlightTriggers = {}
end

function sndNDB_enemyHighlights()
  snd.message("Clearing all highlights to prevent errors. One moment, please.")
  sndNDB_Unhighlight()
  tempTimer(2, [[ snd.message("Loading new highlights now."); sndNDB_loadHighlights() ]])
end

local my_names_not_to_color = {"Example"}

function sndNDB_loadHighlights()
  sndNDB.highlightTriggers = sndNDB.highlightTriggers or {}
  collectgarbage("stop")
  sndNDB_Unhighlight()
  if sndNDB.highlightNames then
    for index, person in pairs(sndNDB.players) do
      sndNDB_highlightName(person.name, person.city)
    end
  end
  collectgarbage()
end

function sndNDB_addHighlight(_, name)
  if not sndNDB.highlightNames then
    return
  end
  if not name then
    return
  end
  if not sndNDB.players[name] then
    return
  end
  sndNDB_highlightName(sndNDB.players[name].name, sndNDB.players[name].city)
end

function sndNDB_updateHighlights(city, colour)
  sndNDB.highlighting[city] = colour
  local killTrigger = killTrigger
  for name, trig in pairs(sndNDB.highlightTriggers) do
    if sndNDB.players[name].city == city then
      killTrigger(trig)
      if sndNDB.highlightNames then
        sndNDB_highlightName(sndNDB.players[name].name, sndNDB.players[name].city)
      end
    elseif city == "Rogues" or city == "(hidden)" then
      if sndNDB_getCitizenship(name) == "None" then
        killTrigger(trig)
        if sndNDB.highlightNames then
          sndNDB_highlightName(sndNDB.players[name].name, sndNDB.players[name].city)
        end
      end
    end
  end
end

function sndNDB_highlightName(who, city)
  --If any highlight available, then clear it.
  if sndNDB.highlightTriggers and sndNDB.highlightTriggers[who] then
    killTrigger(sndNDB.highlightTriggers[who])
  end
  local colour = sndNDB.highlighting.Rogues
  --Get the necessary colour.
  --Check enemy list first
  if sndNDB.highlightPriority == "enemies" then
    if table.contains(sndNDB.cityEnemies, who) then
      colour = sndNDB.highlighting.Enemies
    else
      if city == "None" or city == "(hidden)" then
        colour = sndNDB.highlighting.Rogues
      else
        colour = sndNDB.highlighting[city]
      end
    end
  else
    if city == "None" or city == "(hidden)" then
      colour = sndNDB.highlighting.Rogues
    else
      colour = sndNDB.highlighting[city]
    end
  end
  sndNDB.highlightTriggers = sndNDB.highlightTriggers or {}
  if not table.isMember(my_names_not_to_color, who) then
    sndNDB.highlightTriggers[who] =
      tempTrigger(
        who,
        ([[sndNDB_highlight("%s", %s)]]):format(who, (colour and '"' .. colour .. '"' or "false"))
      )
  end
end

function sndNDB_highlight(name, colour)
  local c, k = 1, 1
  while k &gt; 0 do
    k = line:find(name, k)
    if k == nil then
      return
    end
    c = c + 1
    if k == line:find("%f[%a]" .. name .. "%f[%A]", k) then
      if selectString(name, c - 1) &gt; -1 then
        if colour then
          fg(colour)
        end
        if sndNDB.highlightPriority == "enemies" and table.contains(sndNDB.cityEnemies, name) then
          if sndNDB.enemySettings.bold then
            setBold(true)
          end
          if sndNDB.enemySettings.underline then
            setUnderline(true)
          end
          if sndNDB.enemySettings.italics then
            setItalics(true)
          end
        end
        resetFormat()
      else
        return
      end
    end
    k = k + 1
  end
end

registerAnonymousEventHandler("sndNDB Check Highlight", "sndNDB_addHighlight")</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Display API</name>
						<packageName></packageName>
						<script>function sndNDB_displayOnlineClass(players)
	local classList = {
		"Ascendril", "Luminary", "Sentinel", "Shaman", "Zealot", "Templar", "Warden", "Oneiromancer", "Tidesage",
		"Monk", "Shapeshifter", "Syssin", "Wayfarer",
		"Archivist", "Carnifex", "Indorani", "Praenomen", "Sciomancer", "Teradrim", "Revenant", "Earthcaller", "Alchemist", "Akkari", "Bloodborn", "Runecarver"
	}
	local classes = {
		Ascendril = {}, Luminary = {}, Sentinel = {}, Shaman = {}, Zealot = {}, Templar = {}, Warden = {}, Oneiromancer = {}, Tidesage = {},
		Monk = {}, Shapeshifter = {}, Syssin = {}, Wayfarer = {}, 
		Archivist = {}, Carnifex = {}, Indorani = {}, Praenomen = {}, Sciomancer = {}, Teradrim = {}, Revenant = {}, Earthcaller = {}, Alchemist = {},
    Akkari = {}, Bloodborn = {}, Runecarver = {}
	}

	for _, player in pairs(players) do
		local class = sndNDB.players[player].class
		table.insert(classes[class], player)
	end
	
	snd.message("Data acqusition completed and analysed. Showing class count for online players.")

	for _, class in ipairs(classList) do
		cecho("\n &lt;DimGrey&gt;[&lt;NavajoWhite&gt;"..class:title().."&lt;DimGrey&gt;]"..string.rep(" ", 13-string.len(class)).."- &lt;NavajoWhite&gt;"..#classes[class].." tracked people are "..class..".")
	end
	send(" ")
	parsingCity = nil
end

function sndNDB_displayOnlineCity(players)
	local peopleFound = {}

	snd.message("Data acqusition completed and analysed. Showing online players from &lt;"..sndNDB.highlighting[parsingCity:title()].."&gt;"..parsingCity:title()..".")

	for _, person in pairs(players) do
		if sndNDB_isCitizenOf(parsingCity:title(), person) then
			cecho("\n &lt;"..sndNDB.highlighting[parsingCity:title()].."&gt;"..person..string.rep(" ", 13-string.len(person)).."- &lt;NavajoWhite&gt;"..sndNDB_getClass(person))
		end
	end
	send(" ")
	parsingCity = nil
end

function sndNDB_displayOnline(players)
	local onlinePeople = {
		Bloodloch = {}, Duiran = {}, Enorian = {}, Spinesreach = {}, Rogues = {}, Untracked = {},
	}

	for _, person in pairs(players) do
		if not sndNDB_Exists(person) then
			table.insert(onlinePeople.Untracked, person)
		elseif sndNDB_getCitizenship(person):lower() == "none" or sndNDB_getCitizenship(person) == "(hidden)"  or sndNDB_getCitizenship(person) == "Unknown" then
			table.insert(onlinePeople.Rogues, person)
		else
			table.insert(onlinePeople[sndNDB_getCitizenship(person)], person)
		end
	end

	--snd.message("Data acquisition completed and analysed. List of players online:")
	--echo("\n"..table.concat(players, ", ")..".\nTotal players visible to us: "..#players..".\n")
  echo("\n")
	snd.message(" City affiliations of currently online people:")
	cecho(string.format("\n&lt;%s&gt;[Bloodloch]   :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Bloodloch, #onlinePeople.Bloodloch, sndNDB.highlighting.Bloodloch, table.concat(onlinePeople.Bloodloch, ", ")))
	cecho(string.format("\n&lt;%s&gt;[Duiran]      :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Duiran, #onlinePeople.Duiran, sndNDB.highlighting.Duiran, table.concat(onlinePeople.Duiran, ", ")))
	cecho(string.format("\n&lt;%s&gt;[Enorian]     :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Enorian, #onlinePeople.Enorian, sndNDB.highlighting.Enorian, table.concat(onlinePeople.Enorian, ", ")))
	cecho(string.format("\n&lt;%s&gt;[Spinesreach] :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Spinesreach, #onlinePeople.Spinesreach, sndNDB.highlighting.Spinesreach, table.concat(onlinePeople.Spinesreach, ", ")))
	cecho(string.format("\n&lt;%s&gt;[Rogues]      :&lt;white&gt;(&lt;orange&gt;%d&lt;white&gt;)&lt;%s&gt; %s.", sndNDB.highlighting.Rogues, #onlinePeople.Rogues, sndNDB.highlighting.Rogues, table.concat(onlinePeople.Rogues, ", ")))
	echo("\n ")
	send(" ")

end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Gamefeed Parser</name>
						<packageName></packageName>
						<script>function sndNDB_parseFeed(fp)

	local f, s = io.open(fp)
	if f then s = f:read("*l"); io.close(f) end

	-- didn't get JSON data? 
	if s:find("Internal error", 1, true) or s:find("DOCTYPE html PUBLIC", 1, true) then
		cecho("\n&lt;red&gt;Data Acquisition Failed!") 
		return 
	end
	local t = yajl.to_value(s)
	
	local colours = {LDN = "a_darkred", LUP = "a_darkgreen",
		DEA = "tomato",
	}
	local gcolour	= false
	snd.message("Aetolia Game Feed")
	for _, list in pairs(t) do
		if table.contains(colours, list.type) then
			gcolour = colours[list.type]
		else
			gcolour = "NavajoWhite"
		end
		cecho("\n&lt;NavajoWhite&gt;[&lt;"..gcolour.."&gt;"..list.date.."&lt;NavajoWhite&gt;]:")
		cecho(string.rep(" ", 23-string.len(list.date)).."&lt;"..gcolour.."&gt;"..string.trim(list.description))
	end
	send(" ")
  os.remove(fp)

end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Custom Colour Table</name>
						<packageName></packageName>
						<script>color_table.snow = {255, 250, 250}
color_table.ghost_white = {248, 248, 255}
color_table.GhostWhite = {248, 248, 255}
color_table.white_smoke = {245, 245, 245}
color_table.WhiteSmoke = {245, 245, 245}
color_table.gainsboro = {220, 220, 220}
color_table.floral_white = {255, 250, 240}
color_table.FloralWhite = {255, 250, 240}
color_table.old_lace = {253, 245, 230}
color_table.OldLace = {253, 245, 230}
color_table.linen = {250, 240, 230}
color_table.antique_white = {250, 235, 215}
color_table.AntiqueWhite = {250, 235, 215}
color_table.papaya_whip = {255, 239, 213}
color_table.PapayaWhip = {255, 239, 213}
color_table.blanched_almond = {255, 235, 205}
color_table.BlanchedAlmond = {255, 235, 205}
color_table.bisque = {255, 228, 196}
color_table.peach_puff = {255, 218, 185}
color_table.PeachPuff = {255, 218, 185}
color_table.navajo_white = {255, 222, 173}
color_table.NavajoWhite = {255, 222, 173}
color_table.moccasin = {255, 228, 181}
color_table.cornsilk = {255, 248, 220}
color_table.ivory = {255, 255, 240}
color_table.lemon_chiffon = {255, 250, 205}
color_table.LemonChiffon = {255, 250, 205}
color_table.seashell = {255, 245, 238}
color_table.honeydew = {240, 255, 240}
color_table.mint_cream = {245, 255, 250}
color_table.MintCream = {245, 255, 250}
color_table.azure = {240, 255, 255}
color_table.alice_blue = {240, 248, 255}
color_table.AliceBlue = {240, 248, 255}
color_table.lavender = {230, 230, 250}
color_table.lavender_blush = {255, 240, 245}
color_table.LavenderBlush = {255, 240, 245}
color_table.misty_rose = {255, 228, 225}
color_table.MistyRose = {255, 228, 225}
color_table.white = {255, 255, 255}
color_table.black = {0, 0, 0}
color_table.dark_slate_gray = {47, 79, 79}
color_table.DarkSlateGray = {47, 79, 79}
color_table.dark_slate_grey = {47, 79, 79}
color_table.DarkSlateGrey = {47, 79, 79}
color_table.dim_gray = {105, 105, 105}
color_table.DimGray = {105, 105, 105}
color_table.dim_grey = {105, 105, 105}
color_table.DimGrey = {105, 105, 105}
color_table.slate_gray = {112, 128, 144}
color_table.SlateGray = {112, 128, 144}
color_table.slate_grey = {112, 128, 144}
color_table.SlateGrey = {112, 128, 144}
color_table.light_slate_gray = {119, 136, 153}
color_table.LightSlateGray = {119, 136, 153}
color_table.light_slate_grey = {119, 136, 153}
color_table.LightSlateGrey = {119, 136, 153}
color_table.gray = {190, 190, 190}
color_table.grey = {190, 190, 190}
color_table.light_grey = {211, 211, 211}
color_table.LightGrey = {211, 211, 211}
color_table.light_gray = {211, 211, 211}
color_table.LightGray = {211, 211, 211}
color_table.midnight_blue = {25, 25, 112}
color_table.MidnightBlue = {25, 25, 112}
color_table.navy = {0, 0, 128}
color_table.navy_blue = {0, 0, 128}
color_table.NavyBlue = {0, 0, 128}
color_table.cornflower_blue = {100, 149, 237}
color_table.CornflowerBlue = {100, 149, 237}
color_table.dark_slate_blue = {72, 61, 139}
color_table.DarkSlateBlue = {72, 61, 139}
color_table.slate_blue = {106, 90, 205}
color_table.SlateBlue = {106, 90, 205}
color_table.medium_slate_blue = {123, 104, 238}
color_table.MediumSlateBlue = {123, 104, 238}
color_table.light_slate_blue = {132, 112, 255}
color_table.LightSlateBlue = {132, 112, 255}
color_table.medium_blue = {0, 0, 205}
color_table.MediumBlue = {0, 0, 205}
color_table.royal_blue = {65, 105, 225}
color_table.RoyalBlue = {65, 105, 225}
color_table.blue = {0, 0, 255}
color_table.dodger_blue = {30, 144, 255}
color_table.DodgerBlue = {30, 144, 255}
color_table.deep_sky_blue = {0, 191, 255}
color_table.DeepSkyBlue = {0, 191, 255}
color_table.sky_blue = {135, 206, 235}
color_table.SkyBlue = {135, 206, 235}
color_table.light_sky_blue = {135, 206, 250}
color_table.LightSkyBlue = {135, 206, 250}
color_table.steel_blue = {70, 130, 180}
color_table.SteelBlue = {70, 130, 180}
color_table.light_steel_blue = {176, 196, 222}
color_table.LightSteelBlue = {176, 196, 222}
color_table.light_blue = {173, 216, 230}
color_table.LightBlue = {173, 216, 230}
color_table.powder_blue = {176, 224, 230}
color_table.PowderBlue = {176, 224, 230}
color_table.pale_turquoise = {175, 238, 238}
color_table.PaleTurquoise = {175, 238, 238}
color_table.dark_turquoise = {0, 206, 209}
color_table.DarkTurquoise = {0, 206, 209}
color_table.medium_turquoise = {72, 209, 204}
color_table.MediumTurquoise = {72, 209, 204}
color_table.turquoise = {64, 224, 208}
color_table.cyan = {0, 255, 255}
color_table.bright_cyan = {79, 245, 239}
color_table.light_cyan = {224, 255, 255}
color_table.LightCyan = {224, 255, 255}
color_table.cadet_blue = {95, 158, 160}
color_table.CadetBlue = {95, 158, 160}
color_table.medium_aquamarine = {102, 205, 170}
color_table.MediumAquamarine = {102, 205, 170}
color_table.aquamarine = {127, 255, 212}
color_table.dark_green = {0, 100, 0}
color_table.DarkGreen = {0, 100, 0}
color_table.dark_olive_green = {85, 107, 47}
color_table.DarkOliveGreen = {85, 107, 47}
color_table.dark_sea_green = {143, 188, 143}
color_table.DarkSeaGreen = {143, 188, 143}
color_table.sea_green = {46, 139, 87}
color_table.SeaGreen = {46, 139, 87}
color_table.medium_sea_green = {60, 179, 113}
color_table.MediumSeaGreen = {60, 179, 113}
color_table.light_sea_green = {32, 178, 170}
color_table.LightSeaGreen = {32, 178, 170}
color_table.pale_green = {152, 251, 152}
color_table.PaleGreen = {152, 251, 152}
color_table.spring_green = {0, 255, 127}
color_table.SpringGreen = {0, 255, 127}
color_table.lawn_green = {124, 252, 0}
color_table.LawnGreen = {124, 252, 0}
color_table.green = {0, 255, 0}
color_table.chartreuse = {127, 255, 0}
color_table.MediumSpringGreen = {0, 250, 154}
color_table.green_yellow = {173, 255, 47}
color_table.GreenYellow = {173, 255, 47}
color_table.lime_green = {50, 205, 50}
color_table.LimeGreen = {50, 205, 50}
color_table.yellow_green = {154, 205, 50}
color_table.YellowGreen = {154, 205, 50}
color_table.forest_green = {34, 139, 34}
color_table.ForestGreen = {34, 139, 34}
color_table.olive_drab = {107, 142, 35}
color_table.OliveDrab = {107, 142, 35}
color_table.dark_khaki = {189, 183, 107}
color_table.DarkKhaki = {189, 183, 107}
color_table.khaki = {240, 230, 140}
color_table.pale_goldenrod = {238, 232, 170}
color_table.PaleGoldenrod = {238, 232, 170}
color_table.light_yellow = {255, 255, 224}
color_table.LightYellow = {255, 255, 224}
color_table.yellow = {255, 255, 0}
color_table.gold = {255, 215, 0}
color_table.light_goldenrod = {238, 221, 130}
color_table.LightGoldenrod = {238, 221, 130}
color_table.goldenrod = {218, 165, 32}
color_table.dark_goldenrod = {184, 134, 11}
color_table.DarkGoldenrod = {184, 134, 11}
color_table.rosy_brown = {188, 143, 143}
color_table.RosyBrown = {188, 143, 143}
color_table.indian_red = {205, 92, 92}
color_table.IndianRed = {205, 92, 92}
color_table.saddle_brown = {139, 69, 19}
color_table.SaddleBrown = {139, 69, 19}
color_table.sienna = {160, 82, 45}
color_table.peru = {205, 133, 63}
color_table.burlywood = {222, 184, 135}
color_table.beige = {245, 245, 220}
color_table.wheat = {245, 222, 179}
color_table.sandy_brown = {244, 164, 96}
color_table.SandyBrown = {244, 164, 96}
color_table.tan = {210, 180, 140}
color_table.chocolate = {210, 105, 30}
color_table.firebrick = {178, 34, 34}
color_table.light_firebrick = {235, 53, 53}
color_table.brown = {165, 42, 42}
color_table.dark_salmon = {233, 150, 122}
color_table.DarkSalmon = {233, 150, 122}
color_table.salmon = {250, 128, 114}
color_table.light_salmon = {255, 160, 122}
color_table.LightSalmon = {255, 160, 122}
color_table.orange = {255, 165, 0}
color_table.dark_orange = {255, 140, 0}
color_table.DarkOrange = {255, 140, 0}
color_table.coral = {255, 127, 80}
color_table.light_coral = {240, 128, 128}
color_table.LightCoral = {240, 128, 128}
color_table.tomato = {255, 99, 71}
color_table.orange_red = {255, 69, 0}
color_table.OrangeRed = {255, 69, 0}
color_table.red = {255, 0, 0}
color_table.hot_pink = {255, 105, 180}
color_table.HotPink = {255, 105, 180}
color_table.deep_pink = {255, 20, 147}
color_table.DeepPink = {255, 20, 147}
color_table.pink = {255, 192, 203}
color_table.light_pink = {255, 182, 193}
color_table.LightPink = {255, 182, 193}
color_table.pale_violet_red = {219, 112, 147}
color_table.PaleVioletRed = {219, 112, 147}
color_table.maroon = {176, 48, 96}
color_table.medium_violet_red = {199, 21, 133}
color_table.MediumVioletRed = {199, 21, 133}
color_table.violet_red = {208, 32, 144}
color_table.VioletRed = {208, 32, 144}
color_table.magenta = {255, 0, 255}
color_table.violet = {238, 130, 238}
color_table.plum = {221, 160, 221}
color_table.orchid = {218, 112, 214}
color_table.medium_orchid = {186, 85, 211}
color_table.MediumOrchid = {186, 85, 211}
color_table.dark_orchid = {153, 50, 204}
color_table.DarkOrchid = {153, 50, 204}
color_table.dark_violet = {148, 0, 211}
color_table.DarkViolet = {148, 0, 211}
color_table.blue_violet = {138, 43, 226}
color_table.BlueViolet = {138, 43, 226}
color_table.purple = {160, 32, 240}
color_table.medium_purple = {147, 112, 219}
color_table.MediumPurple = {147, 112, 219}
color_table.thistle = {216, 191, 216}
color_table.light_violet = {160, 157, 247}
 
color_table.a_darkred = {128, 0, 0}
color_table.a_darkgreen = {0, 179, 0}
color_table.a_brown = {128, 128, 0}
color_table.a_darkblue = {0, 0, 128}
color_table.a_darkmagenta = {128, 0, 128}
color_table.a_darkcyan = {0, 128, 128}
color_table.a_grey = {192, 192, 192}
color_table.a_darkgrey = {128, 128, 128}
color_table.a_red = {255, 0, 0}
color_table.a_green = {0, 255, 0}
color_table.a_yellow = {255, 255, 0}
color_table.a_blue = {0, 85, 255}
color_table.a_magenta = {255, 0, 255}
color_table.a_cyan = {0, 255, 255}
color_table.a_white = {255, 255, 255}
 
color_table.chat_bg = {25, 25, 25}
 
function fgcolor(color)
    setFgColor(color_table[color][1], color_table[color][2], color_table[color][3])
end
 
function bgcolor(color)
    setBgColor(color_table[color][1], color_table[color][2], color_table[color][3])
end
 
function cfgcolor(console, color)
    setFgColor(console, color_table[color][1], color_table[color][2], color_table[color][3])
end
 
function cbgcolor(console, color)
    setBgColor(console, color_table[color][1], color_table[color][2], color_table[color][3])
end
 
function showColours(num)
    cecho("\n&lt;green&gt; Showing a list of available colours, with "..num.." columns: \n")
    local lineBreak = num
    local linecount = 0
    local padding = math.floor(90/num)
    
    for col, tab in pairs(color_table) do
        linecount = linecount + 1
        cecho(string.rep(" ", padding-#col).."&lt;"..col.."&gt;"..col.."&lt;NavajoWhite&gt;,")
        if linecount &gt;= lineBreak then
            echo("\n")
            linecount = 0
        end
    end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Sunder Toggles</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Toggles load + save</name>
						<packageName></packageName>
						<script>function snd_toggleSave(disp)
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local save_loc = getMudletHomeDir() .. separator .. "sunderToggles"
  
	table.save(save_loc, snd.toggles)
	
	if disp then
		snd.message("Current toggle configuration saved.")
	end	
end

function snd_toggleLoad()
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local load_loc = getMudletHomeDir() .. separator .. "sunderToggles"
 
	if not io.exists(load_loc) then 
		snd.message("Toggle save file not found; will save when you next disconnect/QQ.")
		return
	end
	local loadedToggles = {}
	table.load(load_loc, loadedToggles)

  for key, value in pairs(loadedToggles) do
    snd.toggles[key]=value
  end
  
	snd.message("Toggles found; we loaded them in just fine.")
  snd.goggle_update()
	snd_toggleSave(false)
end

registerAnonymousEventHandler("sysDisconnectionEvent", "snd_toggleSave", true)
registerAnonymousEventHandler("sysLoadEvent", "snd_toggleLoad")

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>toggle info</name>
						<packageName></packageName>
						<script>snd.toggle_info = {
active = {info = "System full stop of on/off.", command = "sndon and sndoff"},
parrying = {info = "Basic parry set-up.", command = "tpry or toggle parry"},
defenses = {info = "Maintain defenses automatically.", command = "defup"},
calling = {info = "Call targets over web.", command = "tcl"},
listening = {info = "Accept targets over web.", command = "ls &lt;name name name&gt;"},
affcalling = {info = "Call affs over web.", command = "acl"},
chameleon = {info = "Use chameleon tattoo/racial.", command = "tcm"},
bashing = {info = "Kill NPCs in your room.", command = "aa"},
fasthunt = {info = "Toggle on to clear rooms as you walk around.", command = "ff"},
generics = {info = "Uses name instead of number while bashing.", command = "toggle generic"}, 
gathering = {info = "Pick up items while bashing.", command = "On when fasthunt is active"}, 
lighting = {info = "Toggle lighting pipes.", command = "lgt or toggle (lighting|pipes)"},
attacking = {info = "Turns on/off based on aliases for PvP.", command = "See Sunder Help PK"},
balecho = {info = "Replaces bal/eq with colorful echoes.", command = "automatic"}, 
atkecho = {info = "Replaces attack lines with shorthand.", command = "tatk or toggle attack echo"},
newbie = {info = "Newbie bashing attacks only.", command = "tnewb or toggle newbie"},
cobra = {info = "Toggle cobra bashing for monks.", command = "toggle cobra"}, 
lightning = {info = "Toggle luminary lightning to bash.", command = "tlgt or toggle lightning"},
gallop = {info = "Use gallop while pathing around.", command = "tgl or toggle gallop"},
dash =  {info = "Use of dash while pathing around.", command = "tds or toggle dash"},
rockharvest = {info = "Harvest rocks as you walk around.", command = "tr or toggle rockharvest"},
plants = {info = "Shows plants in the room as you walk.", command = "toggle plants"}, 
disperse = {info = "Use disperse to remove writhes from allies.", command = "toggle disperse (all|callers|none)"},
questing = {info = "Toggle questing.", command = "toggle questing"},
vermin = {info = "Vermin walking/killing/turnin.", command = "toggle vermin"},
goggles = {info = "Telling Sunder you have antiquated goggles.", command = "toggle goggles"},
goggle_level = {info = "What level are your goggles?", command = "mygoggles or mygoggles &lt;level&gt;"},
nontargetgags = {info = "Remove nontarget cures from output.", command = "toggle non target gagging"},
dome = {info = "Do you want Sunder to auto dome for you?", command = "toggle dome"},
auto_reject = {info = "Should we auto reject lust attempts?", command = "toggle reject"},
prism = {info = "Do you want to prism/triplicate bash?", command = "toggle prism"},
enrich = {info = "Do you want to enrich while you bash?", command = "toggle enrich"},
diagaffs = {info = "How many hidden affs before you diagnose?", command = "diagaffs &lt;#&gt;"}
}</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<Script isActive="yes" isFolder="no">
					<name>Sunder Map tweaks</name>
					<packageName></packageName>
					<script>local specialExits = {
--fengard exits
	{from = 19719, to = 19089, command = [=[script: send("touch carving") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
	{from = 19089, to = 19719, command = [=[script: send("touch carving") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
	{from = 19752, to = 18801, command = [=[script: send("pull candelabra") mmp.customwalkdelay(3)]=], locked = false, weight = 0},
	{from = 18801, to = 19752, command = [=[script: send("pull brazier") mmp.customwalkdelay(3)]=], locked = false, weight = 0},
	{from = 19753, to = 19754, command = [=[script: send("enter maiden") mmp.customwalkdelay(3)]=], locked = false, weight = 0},
	{from = 19773, to = 18761, command = [=[script: send("turn statue") mmp.customwalkdelay(3)]=], locked = false, weight = 0},
	{from = 18761, to = 19773, command = [=[script: send("turn statue") mmp.customwalkdelay(3)]=], locked = false, weight = 0},
	{from = 19763, to = 19764, command = [=[enter portal]=], locked = false, weight = 0},
  {from = 19764, to = 19763, command = [=[enter portal]=], locked = false, weight = 0},
	
--squal in/out exits
	{from = 68055, to = 14926, command = [=[script: send("say yes, let me through") mmp.customwalkdelay(3)]=], locked = false, weight = 0},
	{from = 14926, to = 68055, command = [=[script: send("say I'm ready to leave, open the gate") mmp.customwalkdelay(3)]=], locked = false, weight = 0},

--forgotten dome exits
  --northern 
  {from = 55183, to = 55185, command = [=[script: sendAll("pull 194363", "east") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
	{from = 55185, to = 55183, command = [=[script: sendAll("pull 194536", "west") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
	{from = 55185, to = 56222, command = [=[script: sendAll("pull 194742", "east") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
	{from = 56222, to = 55185, command = [=[script: sendAll("pull 195056", "west") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
  --middle
  {from = 55150, to = 55184, command = [=[script: sendAll("pull 121029", "east") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
  {from = 55184, to = 55150, command = [=[script: sendAll("pull 121296", "west") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
  {from = 55184, to = 55188, command = [=[script: sendAll("pull 190759", "east") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
  {from = 55188, to = 55184, command = [=[script: sendAll("pull 191764", "west") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
  --southern
	{from = 56107, to = 55187, command = [=[script: sendAll("pull 197397", "west") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
  {from = 55187, to = 56107, command = [=[script: sendAll("pull 196935", "east") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
	{from = 55154, to = 55187, command = [=[script: sendAll("pull 196730", "east") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
  {from = 55187, to = 55154, command = [=[script: sendAll("pull 196759", "west") mmp.customwalkdelay(2)]=], locked = false, weight = 0},
  
  --Xaanhal seal
  {from = 36688, to = 36710, command = [=[script: send("touch seal")]=], locked = false, weight = 0},
  
  --Spiral of the Corrupt
  {from = 36270, to = 36271, command = [=[enter whirlpool]=], locked = false, weight = 0},
  
  --Neutral Delve portal
  {from = 5467, to = 35520, command = [=[enter portal]=], locked = false, weight = 0},
  {from = 35521, to = 5467, command = [=[enter portal]=], locked = false, weight = 0},
  
  --Dramedo pass Elevator
  {from = 55724, to = 35648, command = [=[script: send("ride elevator") mmp.customwalkdelay(10)]=], locked = false, weight = 50},
  {from = 35648, to = 55724, command = [=[script: send("ride elevator") mmp.customwalkdelay(10)]=], locked = false, weight = 50},

  --Shattered Vortex
  {from = 4101, to = 36540, command = [=[script: send("touch portal") mmp.customwalkdelay(35)]=], locked = false, weight = 200},
  {from = 36540, to = 4101, command = [=[script: send("touch portal") mmp.customwalkdelay(35)]=], locked = false, weight = 200},

  {from = 36079, to = 56731, command = [=[script: send("touch portal") mmp.customwalkdelay(35)]=], locked = false, weight = 200},
  {from = 56731, to = 36079, command = [=[script: send("touch portal") mmp.customwalkdelay(35)]=], locked = false, weight = 200},
}

local lockExits = {
  {55183, "east"},
  {55185, "west"},
  {55185, "east"},
  {56222, "west"},
  
  {55150, "east"},
  {55184, "west"},
  {55184, "east"},
  {55188, "west"},

  {56107, "west"},
  {55187, "east"},
  {55154, "east"},
  {55187, "west"},
}

local ferries = { 6550, 6551, 6558, 6559, 18199, 19622, 19623, 20067, 35629, 39839, 54221, 69250, 69534, 71720, 71884, 73215}
local function addFerries()
  local ferryRooms = getRoomUserData(1, "ferry rooms")
  ferryRooms = ferryRooms~="" and yajl.to_value(ferryRooms) or {}
  for _, room in pairs(ferries) do
    if not table.contains(ferryRooms, ferries) then
      table.insert(ferryRooms, room)
    end
  end
  setRoomUserData(1, "ferry rooms", yajl.to_string(ferryRooms))
  mmp.ferry_rooms = {}
  mmp.ferriesfix()
end

function snd.mapTweaks()
  addFerries()
  for _, exitInfo in pairs(specialExits) do
    addSpecialExit(exitInfo.from, exitInfo.to, exitInfo.command)
    lockSpecialExit(exitInfo.from, exitInfo.to, exitInfo.command, exitInfo.locked)
    setExitWeight(exitInfo.from, exitInfo.command, exitInfo.weight)
  end
  for _, exitInfo in pairs(lockExits) do
    lockExit(exitInfo[1], exitInfo[2], true)
  end
end

registerAnonymousEventHandler("sysMapDownloadEvent", "snd.mapTweaks")
registerAnonymousEventHandler("sunder_login", "snd.mapTweaks")</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Bashing</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Auto Bashing</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>init</name>
						<packageName></packageName>
						<script>
bot = bot or {}

bot.info = {
room = "",
area = "",
next = ""
}

bot.new_room = false
bot.going = false
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>bot_room_info</name>
						<packageName></packageName>
						<script>
function bot_room_info()
--echo("I see you")
 if bot.info.room ~= gmcp.Room.Info.num then
  bot.new_room = true
  bot.info.room = gmcp.Room.Info.num
  bot.info.area = gmcp.Room.Info.area
 end
end</script>
						<eventHandlerList>
							<string>gmcp.Room.Info</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>paths</name>
						<packageName></packageName>
						<script>snd.paths = snd.paths or {}
snd.paths.high = {
  "Luzith's Lair",
  "Tiyen Esitiyi",
  "Dovan Hollow",
  "Xaanhal",
  "Spiral of the Corrupt",
  "Forgotten Dome",
  "Nal'jin Depths",
  "the Squal",
}
snd.paths.low = {
  "Temple of Sonn",
  "Caverns of Mor",
  "a Snake Pit",
  "Saliltul Swamp",
  "Sparklight Rift",
  "Maghuir Fissure",
  "Kalydian Forest",
  "Ayhesa Cliffs",
  "Fractal Bloom",
  "Three Rock Outpost",
  "Augerweald",
  "Mamashi Tunnels",
  "Isle of Ollin",
  "The Torturers' Caverns",
  "Drakuum",
  "Teshen Caldera",
}
function snd.runPath(pathname)
  pathname = string.lower(pathname)
  if not snd.paths[pathname] then
    snd.message(pathname.." is not a valid path. Options: "..table.concat(table.keys(snd.paths), ", "))
    return
  end
  snd.message("Now running: "..pathname)
  snd_bashAreas(table.concat(snd.paths[pathname], ", "):lower())
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Adv bashing route making + using</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Custom Basher Paths</name>
						<packageName></packageName>
						<script>function snd_createPather()
  local n = gmcp.Room.Info.num 
  sap_List = {}
  sap_Area = gmcp.Room.Info.area 
  snd.message("Path creation enabled for "..sap_Area.."; starting from v"..n..".")
  table.insert(sap_List, n)
end

function snd_patherAdd()
  local n = gmcp.Room.Info.num 
  if not sap_List then
    snd.message("Can't add rooms if you don't enable pather first. Use 'path create' to begin.")
  elseif not table.contains(sap_List, n) then
    table.insert(sap_List, n)
    snd.message("Added v"..n.." to path list. Total rooms thus far: "..#sap_List..".")
  else
    snd.message("Room is already in the list.")
  end
end

function snd_patherCompile()
  if #sap_List &lt; 10 then
    snd.message("The path size is far too small to be useful. Try making it bigger than 10 rooms, at least.")
    return
  end
  
  sunder_areaPaths = sunder_areaPaths or {}
  sunder_areaPaths[sap_Area] = {}
  
  local str = ""
  for x, n in pairs(sap_List) do
    if x == #sap_List then
      sunder_areaPaths[sap_Area]["v"..n] = "ptcity"
    else
      sunder_areaPaths[sap_Area]["v"..n] = ""..sap_List[x+1]..""
    end
  end
  snd.message("Created path for "..sap_Area..". You can now use it with 'goarea' if you want.")
  snd_saveAreas(true)
end

function snd_bashArea()
  local area = gmcp.Room.Info.area 
  if not sunder_areaPaths then
    snd.message("Area table not found.")
  elseif not sunder_areaPaths[area] then
    snd.message("Path not found for current area.")
  else
    snd.message("Let's bash out "..area.."!")
    bot.going = true
    bot.path = sunder_areaPaths[area]
    if not snd.toggles.fasthunt then
      expandAlias("ff")
    end    
    expandAlias("aa") 
  end
end

function snd_saveAreas(disp)
  sunder_areaPaths = sunder_areaPaths or {}

	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local paths_loc = getMudletHomeDir() .. separator .. "sunderBasherPaths"

	table.save(paths_loc, sunder_areaPaths)
	
	if disp then
		snd.message("Saved autopath information successfully.")
	end	
end

function snd_loadAreas()
	local separator = string.char(getMudletHomeDir():byte()) == "/" and "/" or "\\"
	local paths_loc = getMudletHomeDir() .. separator .. "sunderBasherPaths"

	if not io.exists(paths_loc) then 
		snd.message("Autopather table not found; will create the next time you try to make a path, or load mudlet.")
		return
	end

	--sunder_areaPaths = {}
	--table.load(paths_loc, sunder_areaPaths)
	snd.message("Autopather table found and successfully loaded in.")

end

--registerAnonymousEventHandler("sysDisconnectionEvent", "snd_saveAreas", true)
--registerAnonymousEventHandler("sysLoadEvent", "snd_loadAreas")

function snd_walkArea()
  local area = gmcp.Room.Info.area 
  if not sunder_areaPaths then
    snd.message("Area table not found.")
  elseif not sunder_areaPaths[area] then
    snd.message("Path not found for current area.")
  else
    snd.message("Walking through "..area.."!")
    bot.going = true
    bot.path = sunder_areaPaths[area]
  end
end

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Custom bashing route making</name>
						<packageName></packageName>
						<script>-- Used for automatic custom path making

function snd_bashAreas(areas_chosen)
  local areas = string.split(string.lower(areas_chosen), ", ")
  local num_areas = #areas - 1
  local full_list_of_areas = mmp.deepcopy(sunder_areaPaths)
  if not sunder_areaPaths then
    snd.message("Area table not found.")
  else
    local path_being_constructed = {}
    cecho("\n&lt;CadetBlue&gt;We are checking your area request:")
    for _, v in pairs(areas) do
      for x, y in pairs(full_list_of_areas) do
        area_being_checked = x:lower()
        if area_being_checked:find(v) then
        cecho("\n&lt;MediumSeaGreen&gt;Found: "..x)
          local area_to_be_added = full_list_of_areas[x]
          if #path_being_constructed ~= 0 then
            for l, m in pairs(path_being_constructed) do
              local areas_added = 0
              for a, b in pairs(m) do
                if b == "ptcity" and areas_added &lt; num_areas then 
                  path_being_constructed[l][a] = snd.bashing_area_beginning_rooms[x]
                  areas_added = areas_added + 1
                end --21
              end--20
            end--18
          end--17
          table.insert(path_being_constructed, area_to_be_added)
          break
        end
      end
    end
    
    local final_path = {}
    
    for myareastobash, roomsinthoseareas in pairs(path_being_constructed) do
      for first_room, next_room in pairs(roomsinthoseareas) do
        final_path[first_room] = next_room
      end
    end
  
    snd.message("If that's right, "..gmcp.Char.Status.name..", head on over to the first area!")
    bot.going = true
    bot.path = final_path
    if not snd.toggles.fasthunt then
      expandAlias("ff")
    end    
    expandAlias("aa") 
  end

end

snd.bashing_area_beginning_rooms ={
  ["the Dolbodi Campsite"] = "19323",
  ["the Khauskin Mines"] = "25408",
  ["the Feral Caves"] = "16274",
  ["Spiral of the Corrupt"] = "36271",
  ["Forsaken Evlasu"] = "53280",
  ["the Maghuir Fissure"] = "ptmaghuir",
  ["the village of Torston"] = "17612",
  ["the Kalydian Forest"] = "19810",
  ["the Torturers' Caverns"] = "23202",
  ["the Forgotten Dome"] = "54770",
  ["the Tarean Ice Caverns"] = "22226",
  ["the Eresh Mines"] = "15344",
  ["Yohanan Village"] = "19802",
  ["the Salma Settlement"] = "19602",
  ["Arbothia"] = "15168",
  ["Mount Heylai"] = "54482",
  ["Raim Vale"] = "20389",
  ["Three Widows"] = "58675",
  ["the Valley of Kalebb"] = "8694",
  ["Court of the Consortium"] = "27704",
  ["the Dakhota hills"] = "1155",
  ["the Augerweald"] = "23791",
  ["a snake pit"] = "56942",
  ["Catacombs beneath Djeir"] = "12332",
  ["Tcanna Island"] = "36824",
  ["the Mannaseh Swamp"] = "1745",
  ["the Arurer Haven"] = "19320",
  [" Dovan Hollow"] = "49286",
  ["the Mamashi Tunnels"] = "20855",
  ["the Itzatl Morass"] = "15714",
  ["Scidve"] = "10813",
  ["the Bastion of Illdon"] = "4964",
  ["Rebels' Ridge"] = "18462",
  ["Mount Hubride"] = "13425",
  ["Asper"] = "13292",
  ["the Lich Gardens"] = "22866",
  ["the Shastaan Warrens"] = "45483",
  ["the Three Rock Outpost"] = "20281",
  ["the Shattered Vortex"] = "56731",
  ["Alaqsii Inlet"] = "22477",
  ["the lost city of Iviofiyiedu"] = "55190",
  ["Siha Dylis"] = "3106",
  ["Rotfang Warren"] = "63763",
  ["the Ruins of Farsai"] = "17032",
  ["the Caverns of Telfinne"] = "20932",
  ["the Valley of Lodi"] = "3883",
  ["the Ruins of Masilia"] = "20450",
  ["The Forgotten Mausoleum"] = "59862",
  ["the Ilhavon Forest"] = "26690",
  ["the Bloodwood"] = "57544",
  ["the Isle of Polyargos"] = "36824",
  ["Mount Humgurd"] = "23128",
  ["the Teshen Caldera"] = "55276",
  ["the Nal'jin Depths"] = "38090",
  ["Drakuum"] = "19854",
  ["the Fengard Keep"] = "19712",
  ["the Isle of Ollin"] = "72008",
  ["Raugol Fissure"] = "49749",
  ["the village of Bihrkaen"] = "56647",
  ["the Barony of Dun Valley"] = "5029",
  ["Luzith's Lair"] = "16282",
  ["the Morgun Forest"] = "4740",
  ["the Western Tundra"] = "18082",
  ["the beaches of Liris"] = "19814",
  ["Yuzurai village"] = "59609",
  ["Halls of Tornos"] = "21908",
  ["the Ayhesa Cliffs"] = "19987",
  ["the Village of Kornar"] = "21286",
  ["the Iernian Fracture"] = "10046",
  ["the Hlugnic Labyrinth"] = "57334",
  ["Xaanhal"] = "36677",
  ["the Sparklight Rift"] = "60845",
  ["a volcano"] = "35217",
  ["Tainhelm"] = "16437",
  ["the Dramedo Warrens"] = "58207",
  ["Dun Fortress"] = "3887",
  ["the Temple of Sonn"] = "16706",
  ["Riparium"] = "5599",
  ["the Azdun dungeon"] = "1773",
  ["the Festering Wastes"] = "20754",
  ["Tiyen Esityi"] = "38894",
  ["the Siroccian Tunnels"] = "26820",
  ["the Centipede Cave"] = "22824",
  ["the Holy Impire of Sehal"] = "24475",
  ["the Isle of Despair"] = "2030",
  ["the Tarean Caverns"] = "22305",
  ["Chapel Garden"] = "26920",
  ["the Vilimo Fields"] = "24628",
  ["the Crags"] = "19311",
  ["the village of Rahveir"] = "18968",
  ["the Caverns of Mor"] = "19344",
  ["the village of Gorshire"] = "66078",
  ["the Undercity of Djeir"] = "11994",
  ["the Cathedral of Gloaming"] = "22702",
  ["Three Widows"] = "58675",
  ["Court of the Consortium"] = "ptcourt",
  ["the Siroccian Mountains"] = "4354",
  ["the Central Wilderness"] = "11326",
  ["the Western Itzatl Rainforest"] = "9853",
  ["the Fractal Bloom"] = "ptfractal",
  ["Saliltul Swamp"] = "62102",
  ["the Ia'shal Barrow"] = "ptis'shal",
  ["the Isle of Despair"] = "ptdespair",
  ["Trapped within a mirror"] = "n/a",
  ["Perilaus"] = "11962",
  ["Dovan Hollow"] = "49286",
  ["the Squal"] = "14926",
  [ "the Maul"] = "50236",
  ["the forgotten depths of Mount Helba"] = "57086",
  ["the Bakal Chasm"] = "61011",
  ["the Village of Craneskull"] = "3553",
  ["a volcanic island"] = "76598",
  ["Maestral's Barrier Reef"] = "35541",
  ["the Maestral Shoals"] = "48770",
  ["Upper Tiyen"] = "38894",
  ["Lower Tiyen"] = "39070",
  ["Mejev Nider Nesve wo Ti, Matati wo Eja sota Aran wo Aransa"] = "74470",
  ["a dimly lit subterranean river"] = "76514",
  ["the Offspring"] = "77437",
}
</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<Script isActive="yes" isFolder="no">
					<name>bashing variables</name>
					<packageName></packageName>
					<script>
snd.bashing_loaded = true

snd.room_clear = false

snd.bashing = {
target = "none",
target_type = "long",
target_word = "",
old_target = "",
target_number = "",
target_desc = "",
corpse_word = "",
corpse_number = "",
corpse_desc = "",
target_priority = 10000,
engaged = false,
targeted = false,
stopping = false
}

snd.area_found = false
snd.possible_targets = {}
snd.possible_items = {}
snd.corpses = {}
snd.gathering = {}
snd.have_items = false
snd.need_loot = false
snd.vermin = 0</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>bashing targets</name>
					<packageName></packageName>
					<script>
snd.areas = {

{area = "Bloodloch", level = "globes only", targets = {"a massive elemental"}},
{area = "Duiran", level = "globes only", targets = {"a massive elemental"}},
{area = "Enorian", level = "globes only", targets = {"a massive elemental"}},
{area = "Spinesreach", level = "globes only", targets = {"a massive elemental"}},
{area = "the Holy Impire of Sehal", level = "newbie", targets = {"a soulless pixie", "a stern Imp warrior", "a boisterous Imp boy", "a charming Imp girl", "a fluffy white sheep", "a fuzzy grey rabbit"}, items = {}},
{area = "the Valley of Lodi", level = "newbie", targets = {"a cave bat", "a sheep", "a white hen", "a juvenile wildcat", "an adult wildcat"}, items = {}},
{area = "the village of Gorshire", level = "newbie", targets = {"a guard pig", "a portly gnome sentry", "a gnome man", "a gnome woman", "a little gnome boy", "a gnome sentry", "a little gnome girl", "a skinny gnome sentry", "a deputy constable", "a lithe weasel", "a large grey goose", "a large gray goose"}, items = {}},
{area = "the Tarean Caverns", level = "Newbie", targets = {"a small, black bat", "an unkempt Trog", "a chubby Trog woman", "a rambunctious young Trog", "a hulking Trog man", "a rotting rattlesnake", "an irritable, rabid zebra", "a blood-spattered leopard", "a frothing, manic buffalo", "a gigantic cave bear"}, items = {"a jagged stone shard"}},
{area = "the Crags", level = "Newbie", targets = {"a light grey stone worm", "a dark grey stone worm", "an infant-like cragling", "a steady cragling", "a vile snatcher", "a hulking snatcher"}, items = {"a dull, irregular gem"}},
{area = "the village of Rahveir", level = "Newbie", targets = {"a disgustingly warped missionary", "a malevolent poltergeist", "a corrupted spirit"}, items = {"a strange black sphere"}},
{area = "Forsaken Evlasu", level = "Newbie", targets = {"an unnaturally lithe, shadowy aberration", "a hideous winged aberration", "a grotesque, warped aberration", "a corrupted cultist"}, items = {"a cluster of pure white starflower", "a corrupted aberration's feather", "a blighted branch", "a minute, corrupted totem"}},
{area = "Yohanan Village", level = "Newbie", targets = {"a fleshless skeleton", "a female villager", "a villager", "an old guard", "a small girl", "a young village guard", "a mangy rat", "a cave bat"}, items = {}},
{area = "Difohr Passage", level = "Quest", targets = {"a fragmented eld of shadowy onyx","a shattered eld monstrosity","a skittering onyx eld"}},
{area = "Myesian Run", level = "Quest", targets = {"a skittering verdant eld"}},
{area = "Cinderbreach Mine", level = "Quest", targets = {"a fiery crimson fragmented eld", "a shattered eld monstrosity", "a skittering crimson eld"}, items = {}},
{area = "Radial Dig Shaft #15", level = "Quest", targets = {"a shattered eld monstrosity", "an icy azure fragmented eld", "a skittering azure eld"}, items = {}},
{area = "the Centipede Cave", level = "25-35", targets = {"a large centipede", "a skittering centipede", "a chitinous centipede", "a venomous centipede", "a juvenile centipede", "a massive centipede queen"}, items = {}},
{area = "Riparium", level = "25-50", targets = {"a large red crab", "a moray eel", "a mantaglow fish", "a large, deepwater salmon", "an angler fish"}, items = {}},
{area = "the Siroccian Mountains", level = "30+", targets = {"a vicious wolverine", "a powerful wolverine"}},
{area = "the Festering Wastes", level = "30-40", targets = {"a darkly patterned sand viper", "a gray, spotted bobcat", "a ragged brown coyote", "a tiny black scorpion", "a deep green lizard", "a shivering jackrabbit", "a small yellow rattlesnake"}, items = {}},
{area = "Halls of Tornos", level = "30-40", targets = {"a speckled tinyok", "a snowy armadilleon", "a malformed beast", "a botched phase-hound", "a rabid blood-fiend", "a crazed blood-fiend", "a mutated blood-fiend"}},
{area = "Rebels' Ridge", level = "30-40", targets = {"a tenacious tough", "a rebellious rancher", "a former farmer", "a naive neo-Ankyrean", "a seditious scholar", "a dingy dog", "a gamey goat", "a chittering chicken"}, items = {}},
{area = "Scidve", level = "30-45", targets = {"a large gray and black dugger", "a rock devil", "a Drakt guard"}},
{area = "the Central Wilderness", level = "35-50", targets = {"a mottled green bullfrog", "a dragonfly"}},
{area = "Mount Humgurd", level = "40+", targets = {"a black-spotted cow"}},
{area = "the Western Itzatl Rainforest", level = "40-50", targets = {"a xenosaurus lizard", "a razor nahuac", "a playful oniro", "a frilled lizard", "a lithe black panther", "a katydid", "a spunky white tamarin", "a serpentine couatl", "an ecru axolotl", "an energetic orangutan", "a rojalli cub", "a tiny aurivv bug", "a furry coatimundi", "an orange, black-striped tiger", "a colorful toucan", "an iridescent tizapez", "a poisonous purple lora", "an enormous anaconda", "a swarm of tsetse flies", "a striped tzatica", "a menacing black rojalli"}, items = {"a glistening iridescent pearl", "a beautiful rough sapphire"}},
{area = "the Azdun dungeon", level = "40-50", targets = {"a huge pulsating spider", "a medium pulsating spider", "a large pulsating spider"}},
{area = "the Dolbodi Campsite", level = "45-60", targets = {"a brawny hunter", "a slender forager", "a burly lumberjack", "a grizzly foreman", "a lithe buckawn"}, items = {}},
{area = "Dun Fortress", level = "45-60", targets = {"an orc guard", "a demonic screamer", "a serpentine blademistress", "a slime-encrusted spitter", "a dangerous water snake", "a large catfish"},},
{area = "a snake pit", level = "50-60", targets = {"a venenigol snake", "an andragil snake", "a tiny hatchling", "a large sertag snake", "a grassel snake","a muselon snake", "Nandqua, mate of Namaqua", "Namaqua, Queen of Serpents"}, items = {"a small snake's egg",}},
{area = "Alaqsii Inlet", level = "50-60", targets = {"an arctic wolf", "a small, ruddy turnstone", "a rotund, white ptarmigan", "a white-collared lemming", "a white gyrfalcon"}},
{area = "the Ruins of Farsai", level = "50-60", targets = {"an unctuous creepling", "a shadowdrop", "a darkling", "a panther-like Rajamala", "a menacing black rojalli", "a shadow", }},
{area = "the Ruins of Masilia", level = "50-60", targets = {"a corrupted hackle", "a ravenous locust", "a mutated hare", "a Masilidean etherealist", "Fermian, excavation foreman", "a Masilidean mentalist", "a Dwarven archeologist", "a Dwarven excavator", "a Masilidean focus", "a Masilidean etherealist", "a Masilidean physicalist", "Head Archeologist, Dolus", "Fermian, excavation foreman", }},
{area = "Asper", level = "50-60", targets = {"a fearsome icewyrm", "a malevolent spectre", "a failed experiment", "an animated golem of flesh", "a wild bobcat", "a snowshoe hare"}, items = {}},
{area = "the Undercity of Djeir", level = "50+", targets = {"a gargantuan spider", "a mutated crawler fish", "a striped siriskal fish", "an electric eel", "an elusive black fish", "a giant squid", "a monstrous coelacanth", "a carnivorous weed", "a fearsome Suria serpent"}},
{area = "the Three Rock Outpost", level = "60+", targets = {"a huge, scarred wildcat","a beautiful wild horse","a mountain wildcat",  "a wildcat kitten", "a long-haired buffalo", "an enormous Troll bandit","a shifty bandit", "the cave bear, White Ghost"}},
{area = "the village of Bihrkaen", level = "60-80", targets = {"a grotesque snapping turtle", "a mire hound", "a bog hound", "a mire pup", "an alpha female hound", "a slender mud adder", "a speckled, brown turtle", "an alpha male hound"}},
{area = "the Augerweald", level = "65-80", targets = {"an agitated direwolf", "a large, snowy fox", "a silver-feathered orel", "a large bhfaol", "a gargantuan Augerweald rabbit", "a tall, white elk", }},
{area = "the Fractal Bloom", level = "65+", targets = {"a towering crystalline entity", "a slender crystalline entity", "a radiant crystalline entity", "a squat crystalline entity", "a fractured crystalline entity", "a faceted crystalline entity"}}, 
{area = "the Kalydian Forest", level = "65+", targets = {"a gaunt elk",  "a rabid rabbit", "a ravenous squirrel"}},
{area = "the Salma Settlement", level = "70-80", targets = {"a busy mage", "a bemused artist", "an engrossed scholar", "an ordinary woman", "a dark-haired woman", "a Salmati guard", "a dark-furred bear", "a Salmati warrior", "a common man", "an energetic child", "an unclean miner", "a wild-eyed scientist"}},
{area = "the Maghuir Fissure", level = "65+", targets = {"an amorphous black umbra","a darkly robed priest"}},
{area = "the Torturers' Caverns", level = "70-80", targets = {"Mellias, an elegant Tsol'aa consanguine", "Tuera, the torturer", "Sentinel Rozhirr", "a rank ghoul", "a vampiric overseer", "a maggot-ridden skeleton", "a flesh golem sentry", "a vile inquisitor", "a hulking ghast", "a scheming terramancer"}},
{area = "the Caverns of Mor", level = "70-85", targets = {"a ravenous, shadowy ghast", "a robed, skeletal lich", "a stench-ridden ghoul", "a skeletal warrior", "a vampiric warrior", "a vampiric sentry"}, items = {}},
{area = "the Sparklight Rift", level = "75+", targets = {"an oversized efreeti","a churning fire elemental","a fire elemental minion","a greater fire elemental","a colossal elemental"}},
{area = "the Mamashi Tunnels", level = "75+", targets = {"a greater nalas", "a young nalas", "a mature nalas","a Mit'olk bladesman", "a Mit'olk axeman", "a Mit'olk illusionist"}},
{area = "the Lich Gardens", level = "75-90", targets = {"a commanding lich scientist", "a dark Cabalist scholar", "a monstrous Carnifex guard", "a mindless experiment", "a guardian wraith", "a tattered Bahkatu experiment", "a student of the lich"}, items = {}},
{area = "the Isle of Ollin", level = "80-90", targets = {"a ferocious Alpha Syll","a giant, rabid Syll", "a massive, verdant-furred Syll", "a young Syll cub", "a blackened, ravenous shark", "a massive black crab", "a dark-furred, rabid boar", "a towering Nazetu guard", "a stinking Nazetu soldier", "a rotting Nazetu ghoul", "a Nazetu comfort woman", "a boisterous Nazetu child", "a sharp-clawed Boru prowler", "a fiendish, tainted Syll", "a diligent Boru harvester"}, items = {}},
{area = "the Itzatl Morass", level = "80-90", targets = {"an oversized fly", "an oversized earthworm", "a capybara", "a poisonous water moccasin", "a green slime toad", "a silent reed cat", "a vicious snapping turtle", "a long-toothed beaver"}},
{area = "Saliltul Swamp", level = "80-90", targets = {"a rabid direwolf", "a mutilated humanoid", "a red-eyed water snake"}},
{area = "the Iernian Fracture", level = "80+", targets = {"an unstable white eld", "a colossal crystalline eld", "a churning, unstable eld", "an enormous, three-cored eld", "an effulgent platinum eld", "a discordant, buzzing eld", "a cacophonous cluster of eld", "a shrieking mass of eld", "a flickering green eld", "a coruscating swarm of eld"}},
{area = "Drakuum", level = "70+", targets = {"a savage shade", "a blackened darkwalker", "a hideous lich",  "a misty apparition","a gnarled spirit"}}, 
{area = "the Ia'shal Barrow", level = "85+", targets = { "a foul spiderling", "a ravenous cave spider", "a bulbous cave spider", "an egg-laden spider"}},
{area = "Arbothia", level = "85-95", targets = {"an enraged female servant", "an enraged male servant", "an enraged female villager", "an enraged male villager"}},
{area = "the Eresh Mines", level = "85-95", targets = {"an angry vampire bat", "a blind wolf spider", "a swarm of black beetles", "a slimy brown salamander", "an enormous salamander"}, items = {}},
{area = "the Fengard Keep", level = "85-95", targets = {"a massive argobole", "a fiery phenkyre", "an ogre berserker", "a horrid basilwyrm", "a shrieking grimshrill", "a vicious horned garwhol", "a brawny glaive knight", "a tall chempala", "a radiant lumore", "a pious invoker", "a pungent lichosphere"}, items = {}},
{area = "the Ayhesa Cliffs", level = "90-100", targets = {"a Spellshaper Archon", "a Spellshaper Master", "a Spellshaper Adept"}, items = {"a flat metal disc"}},
{area = "Yuzurai village", level = "90-100", targets = {"a massive rojalli matriarch", "a sleek black rojalli", "a savage rojalli"}},
{area = "the Dramedo Warrens", level = "90-100", targets = {"a vast ochre ooze", "a winged fungal horror", "a shambling fungal abomination", "a gigantic fungal strider", "a cloud of fungal spores"}}, 
{area = "the Isle of Despair", level = "90-100", targets = {"a darkened soul", "a severed male head"}},
{area = "the Shattered Vortex (Low Level)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone"}, items = {}},
{area = "the Shattered Vortex (Shadow)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a petrified treant", "a warped turtle", "a warrior of the Demonsbane", "a reinforcement warrior of the demonsbane", "a fetish-decorated shaman", "a guardian angel", "a nimble sentinel", "a stalwart templar", "an agile Sentaari monk", "a battle-worn Ascendril", "an Ascendril mage"}, items = {"a finger", "a chunk of grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "the Shattered Vortex (Spirit)", level = "90-100", targets = {"a chaos worm", "a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a Sciomancer mage", "a warped indorani", "a strained indorani", "a crazed indorani", "a reinforcement warrior of the aztob", "a warrior of the Aztob", "a warped turtle", "a petrified treant", "a piece of an amalgamation"}, items = {"a finger", "a chunk of grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "Tiyen Esityi", level = "95+", targets = {"Commander Marakhi", "Tirahl the Necromancer", "Lieutenant Gharvoi", "a ball of chitinous legs", "insubstantial whispers", "Quartermaster Kuius", "Lieutenant Chiakhi", "a crazed Nazetu cutter", "a mutated Nazetu intercessor", "a Nazetu cook", "a Nazetu halberdier", "a Nazetu provost", "a deformed Nazetu priest", "a Nazetu crossbowman", "a bound shade", "a Nazetu corrupter", "a Nazetu necromancer", "a supply officer", "a victimised intruder"}},
{area = "the Nal'jin Depths", level = "95+", targets = {"an enormous spinelash fish", "a sinewy Nal'jin eel", "a shadow ray", "a serpentine jawsnapper"}},
{area = "the Forgotten Dome", level = "95+", targets = {"a gibbering kelki reaver", "a deformed kelki ravener", "a mutated kelki ravager", "a vile kelki prowler"}},
{area = "Luzith's Lair", level = "95+", targets = {"a mass of deadly trap spiders", "a deadly trap spider", "a monstrous arachnid", "a vicious little spider", "a large, crystalline spider", "a flying spider", "a sentinel spider", "a slender, female arachnoid"}},
{area = "the Bastion of Illdon", level = "95+", targets = {"a rabid plant", "a rabid hound", "a nightmare shadow", "a shadowy, mindless demon", "a mutated experiment"}},
{area = "Spiral of the Corrupt", level = "95+", targets = {"an ethereal, scarred jellyfish", "a rot-infested swordfish", "a five-tentacled octopus of jade", "a taint-infested shark", "a miasma-wreathed electric eel"}},
{area = "the Shastaan Warrens", level = "95+", targets = {"an aberrant, obscenely deformed Kelki", "a wild-eyed Kelki cultist", "a ragged Kelki cultist"}},
{area = "the Bloodwood", level = "95+", targets = {"a distressed spirit", "a wailing spirit", "a lingering spirit"}, items = {"spectral essence"}},
{area = "Dovan Hollow", level = "95+", targets = {"a gaunt Aslinn slaver", "a scarred Aslinn slaver", "a sinewy Aslinn slaver", "a haughty Caentoi slaver", "a hulking Ursal brute", "a grim Aslinn slaver"}},
{area = "the Feral Caves", level = "95+", targets = {"a small green blob", "a slimy green blob", "a massive green blob", "a gigantic green blob"}},
{area = "The Forgotten Mausoleum", level = "95+", targets = {"a reanimated Dwarf woman", "a rotting Dwarf archer", "a decomposing Dwarf", "a robed reanimated Dwarf"}},
{area = "Tcanna Island", level = "95+", targets = {"a brown and tan python", "a blue crab", "a box jellyfish", "a large capybara", "a small ocelot", "a spotted leopard", "a howler monkey", "a striped tiger", "a water buffalo", "an enormous elephant", "a vicious copperhead snake", "an oversized tortoise", "a diseased raccoon", "a dark green alligator", "a white-tailed deer", "a lithe cougar", "a black bear", "a black and white badger","a great white stag", "a spotted jaguar","a long-billed toucan", "a scarlet macaw", "a bald eagle", "a gray wolf", "a ragged coyote", "a Troll guard", "a Troll cook","a white goose", "a Nazetu officer", "a silverback gorilla","a venomous bushmaster","a thick boa constrictor","a brown-furred bat","an ebon crow",}},
{area = "Xaanhal", level = "really high", targets = {"a suspicious Xorani patrol", "a wiry Xorani guard", "a cautious Xorani guard", "a merciless Xorani warrior", "a willowy nest guardian"}, items = {"a fragment of a mosaic"}},
{area = "Trapped within a mirror", level = "Quest", targets = {"a fragment of living glass"}},
{area = "the Teshen Caldera", level = "40-60? Maybe", targets  = {"a Teshen raider", "a Teshen scout", "a Teshen reaver", "a Teshen worker"}},
{area = "the Temple of Sonn", level = "40+", targets = {"a menacing black rojalli", "a choke creeper", "a darkling", "a shadowdrop", "a giant mosquito", "an elongated black serpent", "a glossy black silk-spinner", "a giant fly"}},
{area = "Perilaus", level = "50+", targets = { "a school of spinebacks", "a striped sea krait", "a school of shadowy minnows", "a water viper", "a grey spider" }},
{area = "the Shattered Vortex (All)", level = "90-100", targets = {"a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a warped turtle", "a warrior of the Demonsbane", "a reinforcement warrior of the demonsbane", "a fetish-decorated shaman", "a guardian angel", "a nimble sentinel", "a stalwart templar", "an agile Sentaari monk", "a battle-worn Ascendril", "an Ascendril mage","a chaos worm", "a chimera", "a pathfinder", "a sharp-toothed gremlin", "a minion of chaos", "a chaos orb", "a bloodleech", "a bubonis", "a humbug", "a chaos hound", "a green slime", "an ethereal firelord", "a simpering Sycophant", "a soulmaster", "a dervish", "a withered crone", "a chaos storm", "a Sciomancer mage", "a warped indorani", "a strained indorani", "a crazed indorani", "a reinforcement warrior of the aztob", "a warped turtle", "a petrified treant", "a piece of an amalgamation"}, items = {"a finger", "a chunk of grey stone", "a chunk of obsidian glass", "a chunk of green and blue stone", "a broken shard of ruby"}},
{area = "a volcano", level = "lolnope", targets = {"a large earth elemental", "a large smoke elemental", "a large fire elemental", "a lava daemon", "a glowing lava daemon" } },
{area = "Raim Vale", level = "20-30", targets = {"a misshapen woman", "a rabid dog", "Jehanne", "a deformed man", "a diseased man", "Midolo Raim", "a mutilated creature"} },
{area = "Raugol Fissure", level = "20-30", targets = {"a scything skitterer", "a stonescale ravager", "a stonescale mephit", "a splintering earthrager"} },
{area = "Chapel Garden", level = "90+", targets = {"a diminutive necromancer", "a zombie cleric", "a foul-smelling zombie", "Broondac, the vampire strategist"  } },
{area = "the Caverns of Telfinne", level = "40-60", targets = {"a cave-dwelling avisme", "a fanged lugore", "a slimy aryeim", "a tentacled morbol", "a draconic zogura", "a slender synicant",  } },
{area = "the Village of Kornar", level = "25-35", targets = {"a necromantic guard", "a Bloodloch soldier", "a conjured wraith", "a Bloodloch lich", "a female villager", "an undead villager", "Mala, the Artisan", "Firthar", "Hassik, the village elder", "an undead minion", "an undead child", "Moritsio, Owner of the Pub", "Igrar, Captain of the Gral", "a wealthy sailor"  } },
{area = "the Arurer Haven", level = "60", targets = {"a youthful priest", "a savvy priestess", "a budding priestess", "an aged priest", "Gunder, a retired sailor", "Father Garron, the priest", "Tisian, a young priest", "a young celestial angel" } },
{area = "the lost city of Iviofiyiedu", level = "45-55", targets = { "a ghost of a Mhun guard", "a ghost of a Mhun soldier", "General Abeshentesh", "a ghost of a male Mhun", "a ghost of a female Mhun", "a ghost of a young Mhun", "a mhun instructor", "Blacksmith Udhomentesh", "Fathientesh, a mhun crafter", "Dhemosh, a mhun miner" } },
{area = "the village of Torston", level = "40+", targets = {"a mottled brown frog", "a venomous water snake", "a vicious snapping turtle", "a fierce crocodile", "an irritated crow", "a tall Horkvali woman", "a wary Xorani guard", "a stalwart Horkvali guard", "Estok, the guard captain", "a dusky-skinned Grook man", "a plump white grub", "a dark-skinned Grook woman", "a carefree Grook boy", "the impish outcast, Qezirath", "a frail Xorani man", "a little Grook girl", "Lesiv, the Torstonite chieftain"}},
{area = "the Cathedral of Gloaming", level = "35-40", targets = {"a Dwarven priest"}},
{area = "the Vilimo Fields", level = "35-40", targets = {"Nysaac", "a field harvester", "a field monitor", "a decaying donkey", "Laoghaire, the monitor", "Maeron, the Quartermaster", "Administrator Kamakshi", "a semi-conscious young woman", "a semi-conscious young man","a semi-conscious elderly man", "a semi-conscious elderly woman", "a semi-conscious man", "a semi-conscious woman", "an undead bloodhound", "a field hauler", "a spectral minion"}},
{area = "Mount Hubride", level = "55-60", targets = {"a troll warrior", "a rugged roll miner", "a female troll villager", "a small, troll child", "a male troll villager"}},
{area = "Mount Heylai", level = "55-60", targets = {"a young dwarf", "an adolescent dwarf", "an armored dwarf", "a dwarf geared up for battle", "a dwarven warrior", "a dwarven miner", "a female dwarven villager", "a dwarven girl", "a dwarven boy"}},
{area = "the Siroccian Tunnels", level = "65-75", targets = {"a lurking shadow", "a spatial anomaly", "a crystal-encrusted golem", "a massive striped worm", "a disembodied soul", "a voracious blind-fish"}},
{area = "Rotfang Warren", level = "20-30", targets = {"a large rat", "a robed and cowled priest", "a spindly village alpha", "a white-nosed bat", "a large, juicy cavehopper", "a hunched villager", "a gaunt villager", "a drooling village child"}},
{area = "the Isle of Polyargos", level = "20-25", targets = {"a filthy harpy", "a barnacle-encrusted oyster", "Kru'lax, the Harpy Queen", "a speckled, brown turtle"}},
{area = "the Khauskin Mines", level = "50-60", targets = {"a soft-shelled klikkin", "a grotesque fangtooth", "a burly Dwarven miner"}, items = {"a durable pickaxe", "a rough and jagged diamond", "a rough and jagged emerald", "a rough and jagged sapphire", "a rough and jagged ruby", "a small sack of black powder"}},
{area = "the Morgun Forest", level = "45+", targets = {"a sturdy oak", "a poisonous hemlock bush", "a pine sapling", "a strong pine", "a young beech tree", "a sinuous willow tree", "a willow sappling", "an enchanting meayan", "an oak sapling", "a prickly raspberry bush", "a handsom nayar", "a young willow tree", "a fluffy jambaali", "a young maple tree", "a young pine tree", "a young oak", "a wild boar", "a young beech tree"}},
{area = "Catacombs beneath Djeir", level = "40+", targets = {"a djeirani ghost",}},
{area = "the beaches of Liris", level = "5+", targets = {"a small, red crab", "a red hermit crab", "a slimy red-shelled snail", "a blue-shelled snail", "an orange-and-yellow stripped starfish", "a gargantuan crab", "a yellow-finned bream fish"}},
{area = "the Western Tundra", level = "40+", targets = {"a fur-clad troll worker", "a squat penguin", "a hunter clad in furs", "a massive orgyuk", "a bull mugyik", "a dusky mugyik", "a female mugyik", "a white mugyik calf"}},
{area = "the Ilhavon Forest", level = "40+", targets = {"a burrowing owl", "a golden scale rattlesnake", "a lumbering brown bear", "a plump duck", "a loosely clad Trollish woman", "a scarred Trollish man", "a blackbird", "a bear cub", "a giant pugnax crab", "a catfish", "a lake trout", "a school of fish", "an eerily glowing jellyfish", "a harpoon scorpion", "a dull brown lamprey", "a large buck", "a white tailed doe", "a young foal", "a moth", "a gargantuan cicada", "a magpie", "a frazzled-looking possum"}},
{area = "the Dakhota hills", level = "25+", targets = {"a striped sea krait", "a brown rockling", "a grey wolf"}},
{area = "Siha Dylis", level = "30-35", targets = {"Krrtig, the Goblin guard captain", "Tithy, the burial guard", "a Goblin batrider",  "a Goblin man", "a Goblin woman", "a Kobold male", "a Kobold woman", "Head Foreman Cadric", "Foreman Dugan", "Lissta, a Kobold spirit-mage",  "Deela, a Kobold spirit-mage", "Mo, a Kobold spirit-mage", "Riku, a Goblin boy", "a disoriented cave bat", "a small red squirrel", "Maggie, a Goblin woman", "Trak, a Goblin boy"}},
{area = "the Barony of Dun Valley", level = "40-45", targets = {"a black and tan bloodhound", "a capybara", "an insignificant lime caterpillar",  "a dangerous water snake", "a male gorilla", "a spotted jaguar", "a poisonous snake", "a squirming white grub", "a tree frog", "a speckled, brown turtle",  "an opossum", "a slender mud adder", "a katydid", "a greyish green crocodile", "the Great Bull Elephant", "a crab", "a large red crab", "a school of piranha", "a raccoon", "a rune-covered lodestone golem", "a muscular mountain lion", "a bighorn sheep"}},
{area = "the Hlugnic Labyrinth", level = "70+", targets = {"a rune-covered lodestone golem", "an enormous spinelash fish", "a Hlugnic runeguard",  "a warden of the Hlugnic clans", "a boisterous Hlugna man", "Deorkaan, the Hlugna smithy", "a burly, stone-fisted laborer", "Foreman Grummosh"}},
{area = "the Valley of Kalebb", level = "1", targets = {"a long, thin grass snake", "Loraine, a village priestess", "Shanea, a village elder", "Morrid, a village elder", "a small child", "a female villager", "a villager", "a village farmer", "Lassorn, a village cooper", "a tower guard",  "Elenina, the astrologer", "a tower watchman", "the head scholar of Kalebb", "a scholar of Kalebb", "Muiran, a trapper", "a plump wild rabbit",  "a speckled, brown turtle", "a bald eagle", "a large, speckled turtle", "a small green water snake", "Edgar, the gardener", "Gaerath, the guard captain"}},
{area = "the Tarean Ice Caverns", level = "80+", targets = {"a ravenous ice fly", "a baby icewyrm", "a skilled Indyuk warrior", "an ornery frost gremlin", "a gigantic mother icewyrm", "an icy elemental guard", "a reanimated ice wolf"}},
{area = "Court of the Consortium", level = "50-60", targets = {"a shambling skeleton", "a spatial anomaly", "a crystal-encrusted golem", "a massive striped worm", "a disembodied soul"}},
{area = "Three Widows", level = "45", targets = {"a short-horned chamois", "a white-coated chinchilla", "a ruffled grouse"}},
{area = "the Mamashi Grasslands", level = "45", targets = {"a prairie dog", "a swiftly moving dragonfly", "a black rhinoceros", "a Mamashi lioness", "a Mamashi lion cub", "a banded scrubland racer", "a Mamashi lion"}},
{area = "the Ebon Basin", level = "Quest", targets = {"a speckled ash monitor"}},
{area = "the Squal", level ="99+", targets = {"a thuggish Keeper brute", "a camouflaged Keeper guerrilla", "a sly Keeper tamer", }},
{area = "the Maul", level = "99", targets = {"a gaunt Aslinn guard", "an Aslinn slave catcher", "a snarling vakmut warhound", "a ravenous vakmut warhound", "a lithe Aslinn houndmaster", "a wary Aslinn slaver", "a wretched Aslinn slaver", "a cruel Aslinn guard", "a menacing Aslinn gladiator", "a scarred Aslinn gladiator"}},
{area = "the forgotten depths of Mount Helba", level = "99", targets = {"a towering fungal abomination", "a withered fungal abomination"}},
{area = "a basilisk lair", level = "100+", targets = {"the basilisk queen", "a cave basilisk", "an Ursal elite guard", "a blindfolded Utari"}, items = {"the corpse of a Utari soldier", "a large piece of debris",}},
{area = "the Bakal Chasm", level = "100+", targets = {"an agitated basilisk", "an oversized, grey basilisk", "an armored, brown basilisk", "a spiked basilisk", "a grey and brown basilisk", "a blinded basilisk", "a juvenile basilisk", "a basilisk hatchling"}},
{area = "Clawhook Range", level = "100+", targets = {"an agitated basilisk", "an Utari warrior", "an Ursal swordsman", "a Caentoi rogue", "a Tarpen bombardier", "a Golba brute", "an oversized, grey basilisk", "an armored, brown basilisk", "a spiked basilisk", "a grey and brown basilisk", "a blinded basilisk", "a juvenile basilisk", "a basilisk hatchling", "a spine-necked arrex", "a sabre-toothed abosvi", "a prowling barbed abosvi" }},
{area = "Eftehl Island", level = "100+", targets = {"a vibrantly pink flamingo", "a large sea turtle", "a steel-grey barracuda", "a sleek hammerhead shark", "a ghost of a castle servant", "a ghost of a castle guard", "a lumbering ogre ghost", "a ghost of a castle kitchen worker"}, items = {},},
{area = "Tak-re", level = "99+", targets = {"a vicious, mutated shark", "a vicious, mutated shark", "a hundred-strings jellyfish", "a horrifically deformed woodpecker", "a warped squirrel", "a mutated deer", }, items = {},},
{area = "Kkirrrr'shi Hive", level = "99+", targets = {"a rabid Hokkali drone", "a feral Hokkali soldier", "a rabid Hokkali drone", "a twisted Hokkali hunter", "a hideous Hokkali Queensguard", "a freshly spawned Hokkali ambusher",}, items = {},},
{area = "within a deep mine", level = "Mining", targets = {"a bulbous direant bomber", "a sleek direant scout", "a chitinous direant soldier", "an agile direant worker", "a grimy bandit", "a bandit leader", "a dark-haired mole", "a stalagmite rat", "a massive, tunneling cave worm", "a many-eyed marionette slime", "a behemoth pit beast", "a floating cave manta", "a spotted cave salamander", "a fuzzy brown bat", "a rime-covered bear", "a long-jawed cave spider",}},
{area = "the Dyisen-Ashtan Memoryscape", level = "99+", targets = {"an incorporeal townsmen", "a spectral merchant", "an ethereal guardsman", "a spectral Balaton shark", "a fragmented, spectral memory", "a phantasmal mystic", "a disembodied soldier", "a ghostly seagull", "a ghastly beggar", "an eidolic, Seam-bound pilgrim",}},
{area = "Oblivion's Portent", level = "99+", targets = {"a writhing mass of voidspawn", "a hungering voidwalker", "a singularly-focused defiler", "an otherworldly-shaped, gliding devourer", "a many-legged, skittering aberration",}},
{area = "the Primal Eye of Czjetija", level = "we're all fucking dead", targets = {"a tendriled shadowisp","a massive tenebrous horror", "a monstrous shadow beast", "a spider-like shadowspinner", "a sinuous umbral creeper", "a many-winged shadowghast",}},
{area = "the Welto Trench", level = "good luck", targets = {"a black hunter shark", "a spotted bull shark", "a scarred hunter shark", "a brown hunter shark", "a scarred welto shark", "a striped hunter shark", "a great white welto shark", "a brown bull shark", "a bronze tiger shark", "a black bull shark", "a spotted tiger shark", "a bronze tiger shark", "a grey hunter shark", "a bronze welto shark", "a brown tiger shark", "a storm-wing harpy", "a spotted welto shark", "a striped welto shark", "a striped tiger shark", "a striped bull shark", "a spotted hunter shark", "a black tiger shark", "a great white bull shark", "a menacing torvok", "a brown welto shark", "a great white tiger shark", "a menacing torvok", "a great white hunter shark", "a great white welto shark", "a bronze bull shark", "a grey tiger shark", "a bronze hunter shark", "a spotted hunter shark", "a scarred tiger shark", "a black welto shark", "a grey bull shark", "a striped welto shark", "a grey welto shark", "a black welto shark", "a scarred bull shark", "a blacktip shark", "a box jellyfish", "a giant manta ray", "a deep water serpent", "a stone crab"}},
{area = "the Underbelly", level = "99+", targets ={"a desiccated Utari zombie", "a massive grey rat", "a dire, plagued rat", "a glazed-eye zombie Aslinn", "a snarling vakmut hound", "a slavering vakmut", "a grey-skinned skrell whelp", "a gigantic white rat", "a gigantic black rat", "a feral vakmut", "a malnourished vakmut", "a drooling zombie Tarpen", "a massive, tan-shelled whelk", "a jagged Golban ghast", "a hunched, bone-fisted Golban zombie", "a hulking Ursal ghast", "a crawling, ravenous Aslinn ghast"}},
{area = "the Mannaseh Swamp", level = "99+", targets = {"a savage mutant pumpkin", "a malformed stalker", "a miscreated avian", "an ichorous miscreation", "a hulking miscreation", "an amphibious malformation",}},
{area = "the Village of Craneskull", level = "35-40", targets = {"a savage mutant pumpkin", "a muddy Trollish child", "a slender mud adder", "a rugged Trollish man", "a plump Trollish woman", "a lumbering Troll guard", "an elderly Troll priest", "a lean guard hound", "a traitorous Mitrine hunter","a black ram", "a militant Troll warrior", "a Troll ritualist", "an arachnid Chiav guard", "an arachnid Chiav enforcer", "an arachnid Chiav archer","an immense Trollish chieftain", "a lanky, Trollish witch doctor"}},
{area = "the Maestral Shoals", level = "99+", targets = {"a mottled crab", "a glossy red crab", "a tattered skrell", "an emaciated skrell", "a large, ill-tempered crab", "a sinewy skrell lurker", "a small sovereign crab", "a leathery skrell", "a sharp-toothed skrell", "a drooling skrell"}},
{area = "Maestral's Barrier Reef", level = "99+", targets = {"a skrell hatchling", "a savage, scarred skrell", "a pot-bellied seahorse", "a school of neon tetra fish", "a school of long fin reef minnows", "an Albedian codfish", "a hulking skrell matriarch", "a sharp-toothed skrell", "a bottom-feeding flatfish", "a puffer fish", "a bony Delvian boxfish"}},
{area = "a deep underground cavern", level = "99+", targets = {"a Chaos-warped Chiav guard", "a Chaos-warped gargantuan carrier centipede", "a Chaos-warped egg-laying spider", "a demonic Chaos-warped spider"}},
{area = "the Liruma Crater", level = "???", targets = {"Match:a horrifically deformed adventurer resembling %a+", "a feral, misshapen hare", "a disfigured sheep", "an irradiated hyena", "a malformed Ophidian woman", "a twitching, ylem-bathed Mitrine", "a two-headed buffalo", "a deformed lynx",}},
{area = "a volcanic island", level = "99+", targets = {  "a many-legged cinder crawler", "a sinuous elemental of acerbic smoke",  "an enraged hyriamah", "a firebound terror", "a cumbrous magma beast", "a fierce, lithely limbed firedancer", }},
{area = "Mejev Nider Nesve wo Ti, Matati wo Eja sota Aran wo Aransa", level = "99+", targets = {"a four-winged ayvarin", "a swift vukon", "a predatory kashnalda",}},
{area = "a dimly lit subterranean river", level = "99+", targets = {"an iridescent bubble of elemental energies", "a long-finned, cerulean amphibian", "a billowing cloud of shifting luminescence", "a spiny many-armed water elemental", "a tempestuous wave elemental", "a shimmering piscine elemental"}},
{area = "the Offspring", level = "90+", targets = {"a pudgy water badger", "a flat-snouted scaled sheep", "a chromatic aquatic dragonfly", " a muscular freshwater hound", "a long-tailed bullfrog", "an amphibious, ebon-winged hawk", "a predatory river canine",}},
{area = "Endless Battlefield", level = "90+", targets = {"a blood-drenched soldier wielding a claymore", "a blood-drenched swordsman", "a blood-drenched spear fighter", "a blood-drenched archer",}},
}

sunder_areaPaths = {
  ["Alaqsii Inlet"] = {
    v22477 = "22478",
    v22478 = "22481",
    v22481 = "22482",
    v22482 = "22483",
    v22483 = "22484",
    v22484 = "22566",
    v22485 = "22490",
    v22486 = "22485",
    v22487 = "22486",
    v22488 = "22487",
    v22490 = "22491",
    v22491 = "22492",
    v22492 = "22493",
    v22493 = "22494",
    v22494 = "22498",
    v22496 = "22497",
    v22497 = "22513",
    v22498 = "22499",
    v22499 = "22500",
    v22500 = "22501",
    v22501 = "22503",
    v22503 = "22504",
    v22504 = "22505",
    v22505 = "22506",
    v22506 = "22507",
    v22507 = "22508",
    v22508 = "22509",
    v22509 = "22510",
    v22510 = "22511",
    v22511 = "22512",
    v22512 = "22496",
    v22513 = "22515",
    v22515 = "22516",
    v22516 = "22517",
    v22517 = "22519",
    v22518 = "ptcity",
    v22519 = "22518",
    v22520 = "22488",
    v22521 = "22520",
    v22522 = "22521",
    v22523 = "22524",
    v22524 = "22522",
    v22525 = "22523",
    v22526 = "22527",
    v22527 = "22525",
    v22530 = "22531",
    v22531 = "22532",
    v22532 = "22526",
    v22533 = "22559",
    v22534 = "22535",
    v22535 = "22536",
    v22536 = "22533",
    v22537 = "22534",
    v22538 = "22537",
    v22539 = "22538",
    v22540 = "22539",
    v22541 = "22540",
    v22542 = "22551",
    v22543 = "22542",
    v22544 = "22543",
    v22545 = "22544",
    v22546 = "22545",
    v22547 = "22546",
    v22548 = "22547",
    v22549 = "22548",
    v22550 = "22549",
    v22551 = "22541",
    v22552 = "22550",
    v22553 = "22552",
    v22554 = "22553",
    v22555 = "22554",
    v22556 = "22557",
    v22557 = "22555",
    v22558 = "22530",
    v22559 = "22558",
    v22561 = "22556",
    v22562 = "22565",
    v22563 = "22564",
    v22564 = "22561",
    v22565 = "22563",
    v22566 = "22562"
  },
  Arbothia = {
    v15168 = "15409",
    v15409 = "15410",
    v15410 = "28115",
    v15411 = "27104",
    v15412 = "15417",
    v15413 = "15414",
    v15414 = "15418",
    v15415 = "15416",
    v15416 = "27119",
    v15417 = "15422",
    v15418 = "27107",
    v15419 = "27124",
    v15420 = "15421",
    v15421 = "15429",
    v15422 = "15420",
    v15427 = "15412",
    v15428 = "15419",
    v15429 = "15430",
    v15430 = "15428",
    v27100 = "27101",
    v27101 = "27102",
    v27102 = "27111",
    v27103 = "27120",
    v27104 = "15413",
    v27105 = "15411",
    v27106 = "27105",
    v27107 = "27109",
    v27108 = "ptcity",
    v27109 = "27108",
    v27110 = "15415",
    v27111 = "27110",
    v27112 = "27117",
    v27113 = "27103",
    v27114 = "27113",
    v27115 = "27114",
    v27116 = "27122",
    v27117 = "27118",
    v27118 = "27106",
    v27119 = "27115",
    v27120 = "27121",
    v27121 = "27116",
    v27122 = "27123",
    v27123 = "27112",
    v27124 = "27125",
    v27125 = "27100",
    v28115 = "15427"
  },
  Asper = {
    v13292 = "13294",
    v13293 = "13296",
    v13294 = "13295",
    v13295 = "13293",
    v13296 = "13297",
    v13297 = "13298",
    v13298 = "13299",
    v13299 = "13300",
    v13300 = "13301",
    v13301 = "13302",
    v13302 = "13322",
    v13303 = "13304",
    v13304 = "13305",
    v13305 = "13311",
    v13306 = "ptcity",
    v13308 = "13310",
    v13309 = "13317",
    v13310 = "13309",
    v13311 = "13312",
    v13312 = "13314",
    v13313 = "13315",
    v13314 = "13324",
    v13315 = "13316",
    v13316 = "13306",
    v13317 = "13319",
    v13318 = "13303",
    v13319 = "13320",
    v13320 = "13323",
    v13321 = "13308",
    v13322 = "13321",
    v13323 = "13325",
    v13324 = "13313",
    v13325 = "13326",
    v13326 = "13327",
    v13327 = "13328",
    v13328 = "13329",
    v13329 = "13332",
    v13330 = "13331",
    v13331 = "13337",
    v13332 = "13333",
    v13333 = "13334",
    v13334 = "13335",
    v13335 = "13336",
    v13336 = "13330",
    v13337 = "13338",
    v13338 = "13339",
    v13339 = "13340",
    v13340 = "13341",
    v13341 = "13342",
    v13342 = "13357",
    v13343 = "13358",
    v13344 = "13343",
    v13345 = "13344",
    v13346 = "13345",
    v13347 = "13346",
    v13348 = "13347",
    v13349 = "13348",
    v13350 = "13349",
    v13351 = "13350",
    v13352 = "13351",
    v13353 = "13352",
    v13354 = "13353",
    v13355 = "13354",
    v13356 = "13355",
    v13357 = "13356",
    v13358 = "13361",
    v13359 = "13362",
    v13360 = "13359",
    v13361 = "13364",
    v13362 = "13367",
    v13363 = "13360",
    v13364 = "13365",
    v13365 = "13366",
    v13366 = "13363",
    v13367 = "13379",
    v13368 = "13378",
    v13369 = "13374",
    v13370 = "13372",
    v13371 = "13369",
    v13372 = "13371",
    v13373 = "13370",
    v13374 = "13377",
    v13375 = "13380",
    v13376 = "13373",
    v13377 = "13368",
    v13378 = "13375",
    v13379 = "13376",
    v13380 = "13381",
    v13381 = "13382",
    v13382 = "13383",
    v13383 = "13384",
    v13384 = "13385",
    v13385 = "13386",
    v13386 = "13387",
    v13387 = "13388",
    v13388 = "19706",
    v13389 = "13390",
    v13390 = "13391",
    v13391 = "13318",
    v19706 = "13389"
  },
  Bloodloch = {
    v10011 = "5638",
    v11430 = "9139",
    v12636 = "8007",
    v1270 = "6821",
    v1331 = "1333",
    v1333 = "4974",
    v1336 = "5009",
    v1337 = "1336",
    v1338 = "1337",
    v14523 = "14524",
    v14524 = "14526",
    v14525 = "14523",
    v14526 = "14527",
    v14527 = "26974",
    v1537 = "1338",
    v1538 = "5451",
    v18278 = "24197",
    v24197 = "12636",
    v26974 = "4429",
    v28058 = "53831",
    v31044 = "9109",
    v3490 = "1538",
    v38564 = "9128",
    v42903 = "6817",
    v4400 = "3490",
    v4429 = "4400",
    v4680 = "5554",
    v4683 = "4680",
    v4690 = "18278",
    v4719 = "4690",
    v4963 = "42903",
    v4974 = "66512",
    v5009 = "5440",
    v53831 = "4719",
    v5440 = "5450",
    v5450 = "7678",
    v5451 = "5488",
    v5458 = "5461",
    v5461 = "10011",
    v5488 = "5458",
    v5554 = "14525",
    v5638 = "6157",
    v6157 = "9240",
    v6161 = "9145",
    v65045 = "68235",
    v66512 = "65045",
    v6817 = "6819",
    v6819 = "6823",
    v6821 = "9104",
    v6823 = "9134",
    v68235 = "4963",
    v7678 = "7679",
    v7679 = "9190",
    v8007 = "4683",
    v9104 = "9105",
    v9105 = "9106",
    v9106 = "9107",
    v9107 = "9118",
    v9108 = "31044",
    v9109 = "9115",
    v9115 = "28058",
    v9118 = "9121",
    v9119 = "9108",
    v9120 = "9123",
    v9121 = "9120",
    v9122 = "9126",
    v9123 = "9124",
    v9124 = "9125",
    v9125 = "9122",
    v9126 = "9129",
    v9127 = "9119",
    v9128 = "9127",
    v9129 = "38564",
    v9134 = "9135",
    v9135 = "9141",
    v9138 = "9160",
    v9139 = "6161",
    v9140 = "11430",
    v9141 = "9142",
    v9142 = "9140",
    v9145 = "9146",
    v9146 = "9138",
    v9160 = "1270",
    v9187 = "9216",
    v9190 = "",
    v9194 = "9195",
    v9195 = "9196",
    v9196 = "9197",
    v9197 = "9201",
    v9201 = "9202",
    v9202 = "9206",
    v9206 = "1331",
    v9216 = "1537",
    v9218 = "9187",
    v9219 = "9218",
    v9220 = "9219",
    v9221 = "9220",
    v9222 = "9221",
    v9225 = "9254",
    v9228 = "9229",
    v9229 = "9244",
    v9230 = "9253",
    v9231 = "9250",
    v9234 = "9241",
    v9235 = "9234",
    v9236 = "9235",
    v9237 = "9236",
    v9238 = "9237",
    v9239 = "9238",
    v9240 = "9239",
    v9241 = "9242",
    v9242 = "9243",
    v9243 = "9248",
    v9244 = "9245",
    v9245 = "9246",
    v9246 = "9247",
    v9247 = "9222",
    v9248 = "9251",
    v9249 = "9252",
    v9250 = "9228",
    v9251 = "9249",
    v9252 = "9225",
    v9253 = "9231",
    v9254 = "9230"
  },
  ["Catacombs beneath Djeir"] = {
    v12766 = "12776",
    v12767 = "12766",
    v12768 = "12767",
    v12769 = "ptcity",
    v12770 = "12769",
    v12771 = "12770",
    v12772 = "12771",
    v12773 = "12772",
    v12774 = "12773",
    v12775 = "12774",
    v12776 = "12775",
    v13098 = "13099",
    v13099 = "13102",
    v13100 = "13101",
    v13101 = "13104",
    v13102 = "13103",
    v13103 = "13100",
    v13104 = "13105",
    v13105 = "13106",
    v13106 = "13108",
    v13108 = "13109",
    v13109 = "13110",
    v13110 = "12768"
  },
  ["Chapel Garden"] = {
    v26562 = "26564",
    v26563 = "26565",
    v26564 = "26563",
    v26565 = "26566",
    v26566 = "26567",
    v26567 = "26568",
    v26568 = "26569",
    v26569 = "26570",
    v26570 = "26571",
    v26571 = "26573",
    v26572 = "26574",
    v26573 = "26572",
    v26574 = "26575",
    v26575 = "26576",
    v26576 = "26577",
    v26577 = "26578",
    v26578 = "26579",
    v26579 = "26580",
    v26580 = "26581",
    v26581 = "26582",
    v26582 = "26583",
    v26583 = "26584",
    v26584 = "26585",
    v26585 = "26586",
    v26586 = "26587",
    v26587 = "26588",
    v26588 = "26589",
    v26589 = "26590",
    v26590 = "26591",
    v26591 = "26592",
    v26592 = "26593",
    v26593 = "26594",
    v26594 = "26595",
    v26595 = "26596",
    v26596 = "26597",
    v26597 = "26598",
    v26598 = "26615",
    v26599 = "26600",
    v26600 = "26617",
    v26601 = "26602",
    v26602 = "26620",
    v26603 = "26604",
    v26604 = "26621",
    v26605 = "26606",
    v26606 = "26623",
    v26607 = "26608",
    v26608 = "26609",
    v26609 = "26610",
    v26610 = "26624",
    v26611 = "26612",
    v26612 = "26626",
    v26613 = "26614",
    v26614 = "26618",
    v26615 = "26616",
    v26616 = "26633",
    v26617 = "26627",
    v26618 = "26619",
    v26619 = "26611",
    v26620 = "26599",
    v26621 = "26622",
    v26622 = "26601",
    v26623 = "26603",
    v26624 = "26625",
    v26625 = "26605",
    v26626 = "26607",
    v26627 = "ptcity",
    v26633 = "26613",
    v26920 = "26562"
  },
  ["Cinderbreach Mine"] = {
    v41240 = "44155",
    v44155 = "44156",
    v44156 = "44157",
    v44157 = "44158",
    v44158 = "44159",
    v44159 = "44160",
    v44160 = "44171",
    v44161 = "44162",
    v44162 = "44163",
    v44163 = "44164",
    v44164 = "44165",
    v44165 = "44166",
    v44166 = "44167",
    v44167 = "44168",
    v44168 = "44169",
    v44169 = "58349",
    v44170 = "44172",
    v44171 = "44170",
    v44172 = "44173",
    v44173 = "44174",
    v44174 = "44175",
    v44175 = "44176",
    v44176 = "44177",
    v44177 = "44178",
    v44178 = "44179",
    v44179 = "44180",
    v44180 = "44182",
    v44181 = "44189",
    v44182 = "44184",
    v44183 = "44181",
    v44184 = "44185",
    v44185 = "44186",
    v44186 = "44187",
    v44187 = "44188",
    v44188 = "44183",
    v44189 = "44190",
    v44190 = "44191",
    v44191 = "44193",
    v44192 = "44161",
    v44193 = "44192",
    v58349 = ""
  },
["Clawhook Range"] = {
    v49546 = "49548",
    v49548 = "49549",
    v49549 = "49547",
    v49547 = "49632",
    v49632 = "49555",
    v49555 = "49559",
    v49559 = "49560",
    v49560 = "49561",
    v49561 = "49562",
    v49562 = "49569",
    v49569 = "49629",
    v49629 = "49570",
    v49570 = "49630",
    v49630 = "49571",
    v49571 = "49572",
    v49572 = "49573",
    v49573 = "49581",
    v49581 = "49582",
    v49582 = "49583",
    v49583 = "49585",
    v49585 = "49584",
    v49584 = "49611",
    v49611 = "49625",
    v49625 = "49626",
    v49626 = "49627",
    v49627 = "49628",
    v49628 = "49616",
    v49616 = "49612",
    v49612 = "49617",
    v49617 = "49619",
    v49619 = "49618",
    v49618 = "49615",
    v49615 = "49620",
    v49620 = "49621",
    v49621 = "49623",
    v49623 = "49624",
    v49624 = "49622",
    v49622 = "49580",
    v49580 = "49589",
    v49589 = "49579",
    v49579 = "49576",
    v49576 = "49575",
    v49575 = "49563",
    v49563 = "49564",
    v49564 = "49565",
    v49565 = "49566",
    v49566 = "49567",
    v49567 = "49568",
    v49568 = "57853",
    v57853 = "57854",
    v57854 = "57856",
    v57856 = "57855",
    v57855 = "57857",
    v57857 = "57858",
    v57858 = "57859",
    v57859 = "49599",
    v49599 = "49598",
    v49598 = "49597",
    v49597 = "49596",
    v49596 = "49595",
    v49595 = "49593",
    v49593 = "49592",
    v49592 = "49590",
    v49590 = "49635",
    v49635 = "49631",
    v49631 = "49633",
    v49633 = "49591",
    v49591 = "49600",
    v49600 = "49602",
    v49602 = "49603",
    v49603 = "49604",
    v49604 = "49594",
    v49594 = "49610",
    v49610 = "49609",
    v49609 = "49608",
    v49608 = "49607",
    v49607 = "49606",
    v49606 = "49605",
    v49605 = "50139",
    v50139 = "50140",
    v50140 = "50141",
    v50141 = "50147",
    v50147 = "49965",
    v49965 = "49966",
    v49966 = "50148",
    v50148 = "50149",
    v50149 = "49963",
    v49963 = "50150",
    v50150 = "49967",
    v49967 = "50153",
    v50153 = "50154",
    v50154 = "50155",
    v50155 = "50156",
    v50156 = "50151",
    v50151 = "50152",
    v50152 = "50157",
    v50157 = "50159",
    v50159 = "50158",
    v50158 = "49946",
    v49946 = "49958",
    v49958 = "50160",
    v50160 = "49959",
    v49959 = "50161",
    v50161 = "49960",
    v49960 = "50162",
    v50162 = "49961",
    v49961 = "50163",
    v50163 = "49964",
    v49964 = "49950",
    v49950 = "49951",
    v49951 = "49952",
    v49952 = "49962",
    v49962 = "49953",
    v49953 = "49954",
    v49954 = "49955",
    v49955 = "49956",
    v49956 = "49957",
    v49957 = "57860",
    v57860 = "57861",
    v57861 = "57862",
    v57862 = "57864",
    v57864 = "57863",
    v57863 = "57865",
    v57865 = "57868",
    v57868 = "57866",
    v57866 = "57869",
    v57869 = "57872",
    v57872 = "57873",
    v57873 = "57874",
    v57874 = "57875",
    v57875 = "57876",
    v57876 = "57877",
    v57877 = "57889",
    v57889 = "57888",
    v57888 = "57881",
    v57881 = "57880",
    v57880 = "57879",
    v57879 = "57878",
    v57878 = "57882",
    v57882 = "57883",
    v57883 = "57884",
    v57884 = "57890",
    v57890 = "57885",
    v57885 = "57886",
    v57886 = "57887",
    v57887 = "57891",
    v57891 = "57892",
    v57892 = "57893",
    v57893 = "57894",
    v57894 = "57895",
    v57895 = "57896",
    v57896 = "57899",
    v57899 = "57900",
    v57900 = "57901",
    v57901 = "57902",
    v57902 = "57903",
    v57903 = "57905",
    v57905 = "57906",
    v57906 = "57908",
    v57908 = "57912",
    v57912 = "57913",
    v57913 = "57914",
    v57914 = "57915",
    v57915 = "57922",
    v57922 = "57919",
    v57919 = "57918",
    v57918 = "57921",
    v57921 = "57261",
    v57261 = "57262",
    v57262 = "57263",
    v57263 = "57941",
    v57941 = "57942",
    v57942 = "57943",
    v57943 = "57948",
    v57948 = "57944",
    v57944 = "57970",
    v57970 = "57972",
    v57972 = ""
  },
  ["Court of the Consortium"] = {
    v26994 = "26995",
    v26995 = "26996",
    v26996 = "26999",
    v26997 = "27000",
    v26998 = "26997",
    v26999 = "28005",
    v27000 = "27006",
    v27001 = "27005",
    v27002 = "27001",
    v27003 = "27004",
    v27004 = "27002",
    v27005 = "27012",
    v27006 = "27003",
    v27012 = "27816",
    v27013 = "27015",
    v27014 = "27013",
    v27015 = "27017",
    v27016 = "ptcity",
    v27017 = "27022",
    v27021 = "27016",
    v27022 = "27023",
    v27023 = "27029",
    v27024 = "27025",
    v27025 = "27030",
    v27029 = "27024",
    v27030 = "27031",
    v27031 = "27032",
    v27032 = "27033",
    v27033 = "27034",
    v27034 = "27035",
    v27035 = "27036",
    v27036 = "27037",
    v27037 = "27038",
    v27038 = "27040",
    v27040 = "27041",
    v27041 = "27021",
    v27816 = "27014",
    v28005 = "26998"
  },
  ["Difohr Passage"] = {
    v26522 = "",
    v44236 = "44237",
    v44237 = "44238",
    v44238 = "44239",
    v44239 = "44240",
    v44240 = "44241",
    v44241 = "44242",
    v44242 = "44243",
    v44243 = "44244",
    v44244 = "44245",
    v44245 = "44246",
    v44246 = "44247",
    v44247 = "44248",
    v44248 = "44249",
    v44249 = "44250",
    v44250 = "44251",
    v44251 = "44252",
    v44252 = "44253",
    v44253 = "44254",
    v44254 = "44255",
    v44255 = "44256",
    v44256 = "44257",
    v44257 = "44258",
    v44258 = "44259",
    v44259 = "44260",
    v44260 = "44261",
    v44261 = "44262",
    v44262 = "44264",
    v44263 = "44265",
    v44264 = "44263",
    v44265 = "44266",
    v44266 = "44267",
    v44267 = "44268",
    v44268 = "44270",
    v44269 = "44273",
    v44270 = "44269",
    v44273 = "44274",
    v44274 = "44275",
    v44275 = "44277",
    v44276 = "26522",
    v44277 = "44276"
  },
  ["Dovan Hollow"] = {
    v44515 = "49335",
    v45757 = "48405",
    v48405 = "49307",
    v48747 = "49287",
    v48748 = "48761",
    v48749 = "48748",
    v48750 = "48749",
    v48751 = "48755",
    v48752 = "48751",
    v48753 = "48752",
    v48754 = "48753",
    v48755 = "48750",
    v48761 = "48762",
    v48762 = "49333",
    v48763 = "49328",
    v48766 = "49314",
    v48767 = "49295",
    v48768 = "49305",
    v49286 = "48747",
    v49287 = "49288",
    v49288 = "49289",
    v49289 = "49290",
    v49290 = "49291",
    v49291 = "49292",
    v49292 = "49293",
    v49293 = "49294",
    v49294 = "48767",
    v49295 = "49296",
    v49296 = "49297",
    v49297 = "49299",
    v49298 = "49301",
    v49299 = "49300",
    v49300 = "49298",
    v49301 = "45757",
    v49302 = "48766",
    v49303 = "49304",
    v49304 = "49302",
    v49305 = "44515",
    v49306 = "49309",
    v49307 = "49306",
    v49308 = "48768",
    v49309 = "49310",
    v49310 = "49311",
    v49311 = "49308",
    v49312 = "49322",
    v49313 = "49312",
    v49314 = "49313",
    v49315 = "ptcity",
    v49316 = "49315",
    v49317 = "49316",
    v49318 = "49317",
    v49319 = "49318",
    v49320 = "49319",
    v49321 = "49320",
    v49322 = "49323",
    v49323 = "49321",
    v49328 = "49329",
    v49329 = "49303",
    v49330 = "48763",
    v49331 = "49330",
    v49332 = "49331",
    v49333 = "49332",
    v49334 = "48754",
    v49335 = "49334"
  },
  Drakuum = {
    v19854 = "20076",
    v20076 = "20077",
    v20077 = "20078",
    v20078 = "20079",
    v20079 = "20080",
    v20080 = "20081",
    v20081 = "20082",
    v20082 = "20083",
    v20083 = "20084",
    v20084 = "20085",
    v20085 = "20086",
    v20086 = "20087",
    v20087 = "20088",
    v20088 = "20089",
    v20089 = "20090",
    v20090 = "20091",
    v20091 = "20092",
    v20092 = "20093",
    v20093 = "20094",
    v20094 = "20095",
    v20095 = "20097",
    v20096 = "20098",
    v20097 = "20096",
    v20098 = "20099",
    v20099 = "20100",
    v20100 = "20101",
    v20101 = "20102",
    v20102 = "20103",
    v20103 = "20104",
    v20104 = "20105",
    v20105 = "20106",
    v20106 = "20107",
    v20107 = "20108",
    v20108 = "20109",
    v20109 = "20110",
    v20110 = "20116",
    v20111 = "20119",
    v20112 = "20113",
    v20113 = "20114",
    v20114 = "20115",
    v20115 = "20111",
    v20116 = "20117",
    v20117 = "20118",
    v20118 = "20112",
    v20119 = "20120",
    v20120 = "20121",
    v20121 = "20122",
    v20122 = "20123",
    v20123 = "20124",
    v20124 = "20125",
    v20125 = "20126",
    v20126 = "20127",
    v20127 = "20128",
    v20128 = "20129",
    v20129 = "20130",
    v20130 = "20131",
    v20131 = "20132",
    v20132 = "20133",
    v20133 = "20134",
    v20134 = "20135",
    v20135 = "20136",
    v20136 = "20137",
    v20137 = "20138",
    v20138 = "20139",
    v20139 = "20140",
    v20140 = "20141",
    v20141 = "20148",
    v20142 = "20152",
    v20143 = "20142",
    v20144 = "20143",
    v20145 = "20144",
    v20146 = "20145",
    v20147 = "20146",
    v20148 = "20147",
    v20149 = "ptcity",
    v20150 = "20149",
    v20151 = "20150",
    v20152 = "20151"
  },
  Duiran = {
    v43702 = "43890",
    v43703 = "43704",
    v43704 = "43705",
    v43705 = "43765",
    v43706 = "43707",
    v43707 = "43708",
    v43708 = "43709",
    v43709 = "43717",
    v43711 = "43712",
    v43712 = "43804",
    v43713 = "43702",
    v43714 = "43738",
    v43715 = "43720",
    v43716 = "43750",
    v43717 = "43729",
    v43719 = "43734",
    v43720 = "43724",
    v43721 = "43715",
    v43722 = "43721",
    v43723 = "43719",
    v43724 = "43725",
    v43725 = "43733",
    v43726 = "43727",
    v43727 = "43885",
    v43729 = "43730",
    v43730 = "43741",
    v43732 = "43746",
    v43733 = "43732",
    v43734 = "43714",
    v43737 = "43722",
    v43738 = "43726",
    v43741 = "43716",
    v43742 = "43723",
    v43743 = "43742",
    v43746 = "43743",
    v43750 = "43737",
    v43765 = "43769",
    v43767 = "43706",
    v43768 = "43771",
    v43769 = "43768",
    v43770 = "43773",
    v43771 = "43775",
    v43773 = "43767",
    v43774 = "43777",
    v43775 = "43774",
    v43777 = "43783",
    v43778 = "43800",
    v43779 = "43778",
    v43781 = "43779",
    v43782 = "43784",
    v43783 = "43786",
    v43784 = "43781",
    v43785 = "43782",
    v43786 = "43785",
    v43787 = "43770",
    v43788 = "43789",
    v43789 = "43787",
    v43790 = "43791",
    v43791 = "43788",
    v43792 = "43795",
    v43794 = "43790",
    v43795 = "43797",
    v43797 = "43794",
    v43800 = "43801",
    v43801 = "43802",
    v43802 = "43792",
    v43803 = "43713",
    v43804 = "43803",
    v43805 = "43711",
    v43806 = "43809",
    v43807 = "43808",
    v43808 = "43811",
    v43809 = "43810",
    v43810 = "43807",
    v43811 = "43829",
    v43813 = "43814",
    v43814 = "43806",
    v43815 = "43821",
    v43816 = "43813",
    v43817 = "43816",
    v43819 = "43817",
    v43821 = "43827",
    v43825 = "43819",
    v43826 = "43825",
    v43827 = "43826",
    v43829 = "43830",
    v43830 = "43837",
    v43835 = "43838",
    v43836 = "43835",
    v43837 = "43836",
    v43838 = "43841",
    v43840 = "43805",
    v43841 = "66589",
    v43842 = "66460",
    v43843 = "66459",
    v43845 = "43815",
    v43846 = "43845",
    v43885 = "",
    v43890 = "43893",
    v43891 = "43703",
    v43893 = "43891",
    v66459 = "43842",
    v66460 = "66547",
    v66547 = "43840",
    v66589 = "43843"
  },
  ["Dun Fortress"] = {
    v3833 = "3834",
    v3834 = "3888",
    v3863 = "3864",
    v3864 = "3866",
    v3866 = "3870",
    v3869 = "3876",
    v3870 = "3869",
    v3871 = "3872",
    v3872 = "3873",
    v3873 = "3833",
    v3874 = "3871",
    v3875 = "3874",
    v3876 = "3878",
    v3878 = "3879",
    v3879 = "3880",
    v3880 = "3875",
    v3886 = "3863",
    v3887 = "3886",
    v3888 = "5140",
    v3889 = "3891",
    v3890 = "3893",
    v3891 = "3890",
    v3893 = "5141",
    v3894 = "3895",
    v3895 = "3899",
    v3896 = "3902",
    v3897 = "3904",
    v3898 = "3906",
    v3899 = "3900",
    v3900 = "3896",
    v3902 = "3903",
    v3903 = "3897",
    v3904 = "3905",
    v3905 = "3898",
    v3906 = "3907",
    v3907 = "3908",
    v3908 = "3909",
    v3909 = "3910",
    v3910 = "3911",
    v3911 = "3912",
    v3912 = "3914",
    v3914 = "5155",
    v3915 = "3916",
    v3916 = "3917",
    v3917 = "3918",
    v3918 = "3919",
    v3919 = "3920",
    v3920 = "3991",
    v3921 = "5163",
    v3922 = "3924",
    v3923 = "3922",
    v3924 = "3926",
    v3925 = "3923",
    v3926 = "5168",
    v3928 = "5164",
    v3929 = "3928",
    v3930 = "3933",
    v3931 = "5166",
    v3932 = "3931",
    v3933 = "5165",
    v3934 = "3935",
    v3935 = "3936",
    v3936 = "3939",
    v3937 = "3988",
    v3938 = "3940",
    v3939 = "5172",
    v3940 = "3937",
    v3941 = "3963",
    v3942 = "3946",
    v3943 = "3948",
    v3944 = "3950",
    v3945 = "3952",
    v3946 = "3947",
    v3947 = "3943",
    v3948 = "3949",
    v3949 = "3944",
    v3950 = "3951",
    v3951 = "3945",
    v3952 = "3953",
    v3953 = "3961",
    v3954 = "3941",
    v3955 = "3956",
    v3956 = "3957",
    v3957 = "3954",
    v3958 = "3959",
    v3959 = "3960",
    v3960 = "3955",
    v3961 = "3964",
    v3962 = "3942",
    v3963 = "3962",
    v3964 = "3965",
    v3965 = "3987",
    v3987 = "5176",
    v3988 = "3989",
    v3989 = "3990",
    v3990 = "5174",
    v3991 = "3992",
    v3992 = "3993",
    v3993 = "3921",
    v3994 = "ptcity",
    v5140 = "3889",
    v5141 = "5143",
    v5142 = "5144",
    v5143 = "5142",
    v5144 = "5145",
    v5145 = "5148",
    v5147 = "5151",
    v5148 = "5149",
    v5149 = "5150",
    v5150 = "5153",
    v5151 = "5152",
    v5152 = "5154",
    v5153 = "5147",
    v5154 = "3894",
    v5155 = "5156",
    v5156 = "5158",
    v5157 = "3915",
    v5158 = "5161",
    v5159 = "5157",
    v5160 = "5159",
    v5161 = "5162",
    v5162 = "5160",
    v5163 = "3929",
    v5164 = "3930",
    v5165 = "3932",
    v5166 = "5167",
    v5167 = "3925",
    v5168 = "5171",
    v5171 = "5173",
    v5172 = "3938",
    v5173 = "3934",
    v5174 = "3958",
    v5176 = "5177",
    v5177 = "3994"
  },
    ["Eftehl Island"] = {
    v55777 = "59815",
    v55867 = "56476",
    v55868 = "55877",
    v55869 = "55867",
    v55875 = "56475",
    v55876 = "55875",
    v55877 = "55876",
    v55878 = "55868",
    v55883 = "55878",
    v55884 = "55883",
    v55885 = "55887",
    v55886 = "55885",
    v55887 = "55888",
    v55888 = "55890",
    v55890 = "55953",
    v55953 = "55954",
    v55954 = "55955",
    v55955 = "55956",
    v55956 = "55962",
    v55962 = "55884",
    v55964 = "55886",
    v56148 = "55964",
    v56149 = "56148",
    v56150 = "56151",
    v56151 = "56167",
    v56167 = "56149",
    v56168 = "56172",
    v56170 = "56168",
    v56172 = "56173",
    v56173 = "56150",
    v56174 = "56170",
    v56177 = "56174",
    v56178 = "56177",
    v56179 = "56180",
    v56180 = "56182",
    v56182 = "56178",
    v56475 = "55869",
    v56476 = "56478",
    v56477 = "56650",
    v56478 = "56477",
    v56650 = "69492",
    v59815 = "56179",
    v62766 = "62801",
    v62784 = "62800",
    v62785 = "62808",
    v62786 = "62785",
    v62787 = "62789",
    v62789 = "62791",
    v62791 = "62794",
    v62792 = "62806",
    v62793 = "63585",
    v62794 = "62795",
    v62795 = "63592",
    v62799 = "63595",
    v62800 = "62799",
    v62801 = "63586",
    v62806 = "62793",
    v62807 = "63591",
    v62808 = "63583",
    v62954 = "63105",
    v63105 = "63555",
    v63555 = "63567",
    v63556 = "63558",
    v63557 = "63556",
    v63558 = "63559",
    v63559 = "63560",
    v63560 = "63562",
    v63561 = "55777",
    v63562 = "63563",
    v63563 = "63564",
    v63564 = "63578",
    v63565 = "63557",
    v63566 = "63565",
    v63567 = "63568",
    v63568 = "63566",
    v63569 = "62954",
    v63570 = "63569",
    v63571 = "63570",
    v63572 = "63571",
    v63573 = "63574",
    v63574 = "63575",
    v63575 = "63588",
    v63576 = "63573",
    v63577 = "63576",
    v63578 = "63577",
    v63579 = "63561",
    v63580 = "63581",
    v63581 = "63579",
    v63582 = "62766",
    v63583 = "63582",
    v63584 = "63580",
    v63585 = "63584",
    v63586 = "62792",
    v63587 = "62807",
    v63588 = "63587",
    v63589 = "63590",
    v63590 = "62787",
    v63591 = "63589",
    v63592 = "62784",
    v63593 = "62786",
    v63594 = "63593",
    v63595 = "63594",
    v68952 = "68983",
    v68953 = "68954",
    v68954 = "68986",
    v68983 = "70020",
    v68986 = "68988",
    v68988 = "68989",
    v68989 = "68992",
    v68992 = "68996",
    v68996 = "69073",
    v69073 = "69096",
    v69096 = "69097",
    v69097 = "68952",
    v69332 = "69585",
    v69334 = "69824",
    v69354 = "69451",
    v69368 = "69354",
    v69432 = "69368",
    v69451 = "69454",
    v69453 = "69457",
    v69454 = "69453",
    v69457 = "70284",
    v69492 = "69493",
    v69493 = "69571",
    v69495 = "70094",
    v69571 = "70408",
    v69572 = "69573",
    v69573 = "69575",
    v69575 = "70175",
    v69585 = "69586",
    v69586 = "69334",
    v69588 = "69590",
    v69590 = "69594",
    v69593 = "70096",
    v69594 = "69593",
    v69595 = "69596",
    v69596 = "69597",
    v69597 = "69598",
    v69598 = "70160",
    v69824 = "70205",
    v69825 = "69826",
    v69826 = "70134",
    v69827 = "70131",
    v69828 = "69827",
    v69853 = "69856",
    v69856 = "69958",
    v69857 = "69952",
    v69858 = "69953",
    v69952 = "69858",
    v69953 = "69495",
    v69954 = "69857",
    v69958 = "69954",
    v70020 = "69432",
    v70094 = "70100",
    v70095 = "70097",
    v70096 = "70098",
    v70097 = "69588",
    v70098 = "70099",
    v70099 = "69595",
    v70100 = "70141",
    v70126 = "69825",
    v70131 = "70132",
    v70132 = "70133",
    v70133 = "70470",
    v70134 = "70213",
    v70141 = "70095",
    v70159 = "70126",
    v70160 = "70162",
    v70161 = "70166",
    v70162 = "70161",
    v70166 = "70167",
    v70167 = "70168",
    v70168 = "69332",
    v70175 = "69853",
    v70205 = "70159",
    v70211 = "69828",
    v70213 = "70211",
    v70284 = "70325",
    v70325 = "70328",
    v70326 = "70327",
    v70327 = "70330",
    v70328 = "70331",
    v70329 = "70326",
    v70330 = "70334",
    v70331 = "70332",
    v70332 = "70333",
    v70333 = "70329",
    v70334 = "70335",
    v70335 = "70336",
    v70336 = "70337",
    v70337 = "ptcity",
    v70408 = "69572",
    v70470 = "70533",
    v70533 = "68953"
  },
  Enorian = {
    v11390 = "4581",
    v12471 = "56287",
    v14887 = "4583",
    v21899 = "12471",
    v22061 = "23776",
    v22063 = "4593",
    v22065 = "67804",
    v22066 = "11390",
    v22069 = "4586",
    v2284 = "4390",
    v2285 = "4396",
    v23776 = "4584",
    v2462 = "56525",
    v3419 = "21899",
    v3645 = "4585",
    v4390 = "3419",
    v4396 = "56407",
    v4409 = "2284",
    v4581 = "4582",
    v4582 = "22063",
    v4583 = "22069",
    v4584 = "3645",
    v4585 = "4587",
    v4586 = "22061",
    v4587 = "4588",
    v4588 = "22065",
    v4589 = "22066",
    v4593 = "14887",
    v51959 = "51960",
    v51960 = "51961",
    v51961 = "55003",
    v53722 = "53724",
    v53724 = "53728",
    v53725 = "54076",
    v53727 = "54073",
    v53728 = "53729",
    v53729 = "53727",
    v54073 = "54074",
    v54074 = "53725",
    v54075 = "54077",
    v54076 = "54078",
    v54077 = "53722",
    v54078 = "54087",
    v54079 = "54094",
    v54080 = "54079",
    v54081 = "54080",
    v54082 = "54097",
    v54083 = "54082",
    v54084 = "54083",
    v54085 = "54084",
    v54086 = "54085",
    v54087 = "54086",
    v54088 = "55820",
    v54089 = "54090",
    v54090 = "54091",
    v54091 = "54075",
    v54093 = "54110",
    v54094 = "54093",
    v54095 = "54081",
    v54096 = "54095",
    v54097 = "54098",
    v54098 = "51959",
    v54100 = "54101",
    v54101 = "54088",
    v54102 = "56262",
    v54103 = "54102",
    v54104 = "54103",
    v54105 = "54104",
    v54110 = "54105",
    v54111 = "54112",
    v54112 = "54113",
    v54113 = "54114",
    v54114 = "54115",
    v54115 = "54089",
    v55003 = "55146",
    v55146 = "55194",
    v55194 = "55347",
    v55347 = "55705",
    v55705 = "55759",
    v55738 = "55743",
    v55739 = "55744",
    v55740 = "55745",
    v55743 = "55739",
    v55744 = "55740",
    v55745 = "55754",
    v55746 = "55755",
    v55754 = "55746",
    v55755 = "58711",
    v55759 = "55738",
    v55766 = "54100",
    v55767 = "55766",
    v55768 = "56502",
    v55769 = "55767",
    v55770 = "55769",
    v55772 = "55770",
    v55773 = "55775",
    v55774 = "55776",
    v55775 = "55778",
    v55776 = "55773",
    v55778 = "56431",
    v55779 = "55780",
    v55780 = "55781",
    v55781 = "55784",
    v55784 = "55772",
    v55791 = "55792",
    v55792 = "55794",
    v55793 = "55795",
    v55794 = "55793",
    v55795 = "55800",
    v55800 = "55802",
    v55801 = "55804",
    v55802 = "55801",
    v55804 = "55816",
    v55807 = "55779",
    v55816 = "55807",
    v55820 = "55827",
    v55827 = "55833",
    v55828 = "55829",
    v55829 = "66545",
    v55830 = "55839",
    v55833 = "55834",
    v55834 = "55828",
    v55839 = "55866",
    v55866 = "56526",
    v56262 = "56263",
    v56263 = "56264",
    v56264 = "58601",
    v56266 = "56493",
    v56269 = "56270",
    v56270 = "56461",
    v56271 = "56269",
    v56274 = "56498",
    v56277 = "4409",
    v56282 = "56395",
    v56287 = "4589",
    v56395 = "56399",
    v56396 = "55768",
    v56399 = "56405",
    v56403 = "56516",
    v56405 = "56432",
    v56406 = "56409",
    v56407 = "56406",
    v56408 = "2285",
    v56409 = "56410",
    v56410 = "56411",
    v56411 = "56412",
    v56412 = "56413",
    v56413 = "56414",
    v56414 = "56417",
    v56416 = "56418",
    v56417 = "56416",
    v56418 = "56422",
    v56422 = "56424",
    v56423 = "56426",
    v56424 = "56423",
    v56426 = "56427",
    v56427 = "56428",
    v56428 = "56429",
    v56429 = "56430",
    v56430 = "56436",
    v56431 = "55791",
    v56432 = "56408",
    v56436 = "56271",
    v56437 = "54111",
    v56438 = "56439",
    v56439 = "56440",
    v56440 = "56437",
    v56441 = "56444",
    v56442 = "56448",
    v56443 = "56442",
    v56444 = "56445",
    v56445 = "56438",
    v56446 = "66563",
    v56447 = "56466",
    v56448 = "56449",
    v56449 = "56441",
    v56450 = "56464",
    v56451 = "56469",
    v56452 = "56451",
    v56453 = "56467",
    v56454 = "56452",
    v56455 = "56454",
    v56456 = "56457",
    v56457 = "56453",
    v56458 = "56456",
    v56459 = "56460",
    v56460 = "56458",
    v56461 = "56459",
    v56464 = "56465",
    v56465 = "56446",
    v56466 = "56443",
    v56467 = "56468",
    v56468 = "56455",
    v56469 = "56480",
    v56470 = "56473",
    v56471 = "56481",
    v56473 = "56474",
    v56474 = "56471",
    v56479 = "56470",
    v56480 = "56479",
    v56481 = "56482",
    v56482 = "56484",
    v56483 = "56485",
    v56484 = "56483",
    v56485 = "56487",
    v56486 = "56450",
    v56487 = "56486",
    v56488 = "54096",
    v56489 = "56488",
    v56490 = "56492",
    v56491 = "56489",
    v56492 = "56491",
    v56493 = "56490",
    v56494 = "56499",
    v56495 = "56266",
    v56496 = "56274",
    v56497 = "56496",
    v56498 = "56504",
    v56499 = "56495",
    v56500 = "56494",
    v56501 = "56396",
    v56502 = "56497",
    v56503 = "56506",
    v56504 = "56500",
    v56505 = "56501",
    v56506 = "56510",
    v56507 = "56503",
    v56508 = "56505",
    v56509 = "56507",
    v56510 = "56403",
    v56514 = "56508",
    v56516 = "56514",
    v56525 = "",
    v56526 = "2462",
    v58589 = "58595",
    v58590 = "58591",
    v58591 = "58708",
    v58592 = "58593",
    v58593 = "58715",
    v58595 = "55774",
    v58601 = "58602",
    v58602 = "58603",
    v58603 = "58855",
    v58707 = "58589",
    v58708 = "58709",
    v58709 = "60137",
    v58710 = "58707",
    v58711 = "58592",
    v58712 = "58716",
    v58714 = "58712",
    v58715 = "58714",
    v58716 = "58590",
    v58855 = "58989",
    v58989 = "65726",
    v58990 = "60943",
    v60137 = "58710",
    v60942 = "65847",
    v60943 = "60979",
    v60979 = "60985",
    v60985 = "60942",
    v65726 = "58990",
    v65847 = "65848",
    v65848 = "65971",
    v65971 = "56277",
    v66545 = "55830",
    v66563 = "56447",
    v67804 = "56282"
  },
  ["Forsaken Evlasu"] = {
    v53280 = "53281",
    v53281 = "53282",
    v53282 = "53285",
    v53283 = "53284",
    v53284 = "53290",
    v53285 = "53286",
    v53286 = "53288",
    v53287 = "53292",
    v53288 = "53293",
    v53289 = "53294",
    v53290 = "53322",
    v53291 = "53336",
    v53292 = "53283",
    v53293 = "53289",
    v53294 = "53287",
    v53295 = "53297",
    v53296 = "53309",
    v53297 = "53330",
    v53298 = "53311",
    v53300 = "53319",
    v53301 = "53317",
    v53302 = "53304",
    v53304 = "53306",
    v53306 = "53308",
    v53308 = "53321",
    v53309 = "53295",
    v53310 = "53325",
    v53311 = "53316",
    v53314 = "53315",
    v53315 = "ptcity",
    v53316 = "53314",
    v53317 = "53327",
    v53318 = "53310",
    v53319 = "53326",
    v53320 = "53328",
    v53321 = "53298",
    v53322 = "53329",
    v53324 = "53320",
    v53325 = "53300",
    v53326 = "53301",
    v53327 = "53334",
    v53328 = "53302",
    v53329 = "53291",
    v53330 = "53324",
    v53334 = "53296",
    v53336 = "53338",
    v53338 = "53318"
  },
  ["Halls of Tornos"] = {
    v21747 = "21748",
    v21748 = "21900",
    v21900 = "21901",
    v21901 = "21902",
    v21902 = "21903",
    v21903 = "21904",
    v21904 = "21905",
    v21905 = "21906",
    v21906 = "22083",
    v21907 = "21909",
    v21908 = "21907",
    v21909 = "21910",
    v21910 = "21999",
    v21989 = "21747",
    v21990 = "21994",
    v21991 = "21990",
    v21992 = "21991",
    v21993 = "21995",
    v21994 = "21989",
    v21995 = "21992",
    v21996 = "21993",
    v21997 = "21998",
    v21998 = "21996",
    v21999 = "21997",
    v22083 = "22084",
    v22084 = "22085",
    v22085 = "22784",
    v22086 = "22087",
    v22087 = "22795",
    v22088 = "22086",
    v22089 = "22684",
    v22684 = "22088",
    v22685 = "22089",
    v22686 = "22685",
    v22687 = "22688",
    v22688 = "22686",
    v22689 = "22687",
    v22690 = "22689",
    v22691 = "22692",
    v22692 = "22690",
    v22693 = "22691",
    v22784 = "22785",
    v22785 = "22786",
    v22786 = "22787",
    v22787 = "22788",
    v22788 = "22789",
    v22789 = "22790",
    v22790 = "22791",
    v22791 = "22792",
    v22792 = "22793",
    v22793 = "22794",
    v22794 = "22693",
    v22795 = "22818",
    v22818 = "22819",
    v22819 = "22827",
    v22827 = "22835",
    v22835 = "22854",
    v22854 = "23164",
    v23164 = "23165",
    v23165 = "23166",
    v23166 = "23167",
    v23167 = "23168",
    v23168 = "23169",
    v23169 = "23170",
    v23170 = "23171",
    v23171 = "23173",
    v23172 = "23177",
    v23173 = "23174",
    v23174 = "23175",
    v23175 = "23176",
    v23176 = "23172",
    v23177 = "23178",
    v23178 = "23179",
    v23179 = "23180",
    v23180 = "23181",
    v23181 = "23182",
    v23182 = "23183",
    v23183 = "ptcity"
  },
  ["Kkirrrr'shi Hive"] ={
  v33242 = "6049",
  v44083 = "54916",
  v54916 = "54920",
  v54919 = "54924",
  v54920 = "54958",
  v54923 = "54950",
  v54924 = "54976",
  v54950 = "54978",
  v54958 = "54964",
  v54964 = "54970",
  v54970 = "54975",
  v54974 = "54923",
  v54975 = "54974",
  v54976 = "54984",
  v54977 = "54983",
  v54978 = "54977",
  v54983 = "54919",
  v54984 = "54986",
  v54985 = "54987",
  v54986 = "54985",
  v54987 = "ptcity",
  v54988 = "54989",
  v54989 = "54991",
  v54990 = "55004",
  v54991 = "55002",
  v55002 = "54990",
  v55004 = "55005",
  v55005 = "6037",
  v55009 = "55010",
  v55010 = "55013",
  v55011 = "55014",
  v55012 = "55011",
  v55013 = "55012",
  v55014 = "6050",
  v6032 = "6033",
  v6033 = "6034",
  v6034 = "6035",
  v6035 = "6036",
  v6036 = "54988",
  v6037 = "6038",
  v6038 = "6039",
  v6039 = "6040",
  v6040 = "6042",
  v6041 = "33242",
  v6042 = "6066",
  v6043 = "6044",
  v6044 = "6045",
  v6045 = "6048",
  v6046 = "6047",
  v6047 = "6041",
  v6048 = "6046",
  v6049 = "55009",
  v6050 = "44083",
  v6066 = "6067",
  v6067 = "6068",
  v6068 = "6069",
  v6069 = "6043",
  v68869 = "68879",
  v68879 = "69094",
  v68922 = "70491",
  v68925 = "68922",
  v68928 = "68925",
  v68930 = "68928",
  v68931 = "68930",
  v69094 = "70165",
  v69127 = "69715",
  v69135 = "69208",
  v69137 = "69206",
  v69206 = "69207",
  v69207 = "69135",
  v69208 = "69219",
  v69219 = "69220",
  v69220 = "69223",
  v69223 = "69727",
  v69469 = "69470",
  v69470 = "69475",
  v69475 = "69477",
  v69477 = "69482",
  v69479 = "70164",
  v69480 = "69479",
  v69481 = "69480",
  v69482 = "69481",
  v69508 = "68869",
  v69715 = "69716",
  v69716 = "69717",
  v69717 = "69718",
  v69718 = "69722",
  v69721 = "69723",
  v69722 = "69721",
  v69723 = "69724",
  v69724 = "6032",
  v69727 = "69728",
  v69728 = "69736",
  v69736 = "69737",
  v69737 = "69740",
  v69740 = "69742",
  v69742 = "69744",
  v69743 = "69127",
  v69744 = "69743",
  v69831 = "70147",
  v70147 = "69508",
  v70163 = "68931",
  v70164 = "70492",
  v70165 = "70172",
  v70172 = "69469",
  v70491 = "69137",
  v70492 = "70163"
},
  ["Luzith's Lair"] = {
    v16282 = "16373",
    v16283 = "16286",
    v16284 = "16287",
    v16285 = "16290",
    v16286 = "16285",
    v16287 = "16288",
    v16288 = "16283",
    v16289 = "16294",
    v16290 = "16292",
    v16291 = "16293",
    v16292 = "16291",
    v16293 = "16311",
    v16294 = "16296",
    v16295 = "16297",
    v16296 = "16295",
    v16297 = "16298",
    v16298 = "16300",
    v16299 = "16302",
    v16300 = "16301",
    v16301 = "16303",
    v16302 = "16304",
    v16303 = "16305",
    v16304 = "16308",
    v16305 = "16306",
    v16306 = "16307",
    v16307 = "16299",
    v16308 = "16309",
    v16309 = "16359",
    v16311 = "16289",
    v16333 = "16335",
    v16334 = "16336",
    v16335 = "16366",
    v16336 = "16360",
    v16337 = "16338",
    v16338 = "16339",
    v16339 = "16357",
    v16340 = "16362",
    v16341 = "16342",
    v16342 = "16343",
    v16343 = "16361",
    v16344 = "16367",
    v16345 = "16346",
    v16346 = "16350",
    v16347 = "16370",
    v16348 = "16353",
    v16349 = "16369",
    v16350 = "16351",
    v16351 = "16347",
    v16352 = "16372",
    v16353 = "16368",
    v16354 = "16355",
    v16355 = "16371",
    v16356 = "16348",
    v16357 = "16341",
    v16358 = "16334",
    v16359 = "16358",
    v16360 = "16333",
    v16361 = "16344",
    v16362 = "16337",
    v16363 = "16364",
    v16364 = "16365",
    v16365 = "ptcity",
    v16366 = "16340",
    v16367 = "16345",
    v16368 = "16354",
    v16369 = "16363",
    v16370 = "16352",
    v16371 = "16349",
    v16372 = "16356",
    v16373 = "16374",
    v16374 = "16375",
    v16375 = "16383",
    v16376 = "16377",
    v16377 = "16379",
    v16378 = "16380",
    v16379 = "16378",
    v16380 = "16382",
    v16381 = "16386",
    v16382 = "16402",
    v16383 = "16385",
    v16384 = "16376",
    v16385 = "16384",
    v16386 = "16387",
    v16387 = "16394",
    v16388 = "16389",
    v16389 = "16403",
    v16390 = "16400",
    v16391 = "16392",
    v16392 = "16393",
    v16393 = "16395",
    v16394 = "16388",
    v16395 = "16396",
    v16396 = "16397",
    v16397 = "16398",
    v16398 = "16399",
    v16399 = "16407",
    v16400 = "16401",
    v16401 = "16391",
    v16402 = "16381",
    v16403 = "16404",
    v16404 = "16405",
    v16405 = "16406",
    v16406 = "16390",
    v16407 = "16408",
    v16408 = "16409",
    v16409 = "16410",
    v16410 = "16411",
    v16411 = "16412",
    v16412 = "16284"
  },
  ["Mount Heylai"] = {
    v54482 = "59186",
    v58664 = "59274",
    v59186 = "59187",
    v59187 = "59188",
    v59188 = "59189",
    v59189 = "59190",
    v59190 = "59191",
    v59191 = "59192",
    v59192 = "59193",
    v59193 = "59194",
    v59194 = "59195",
    v59195 = "58664",
    v59274 = "59468",
    v59275 = "59278",
    v59276 = "59277",
    v59277 = "ptcity",
    v59278 = "59279",
    v59279 = "59280",
    v59280 = "59360",
    v59281 = "59276",
    v59360 = "59361",
    v59361 = "59281",
    v59467 = "59469",
    v59468 = "59467",
    v59469 = "59470",
    v59470 = "59275"
  },
  ["Mount Hubride"] = {
    v13425 = "13426",
    v13426 = "13427",
    v13427 = "13428",
    v13428 = "13431",
    v13431 = "13460",
    v13460 = "14075",
    v13461 = "13462",
    v13462 = "13463",
    v13463 = "13464",
    v13464 = "14070",
    v14047 = "14048",
    v14048 = "14053",
    v14049 = "14050",
    v14050 = "14051",
    v14051 = "ptcity",
    v14052 = "16113",
    v14053 = "14057",
    v14054 = "14055",
    v14055 = "14052",
    v14056 = "16116",
    v14057 = "14058",
    v14058 = "14059",
    v14059 = "14069",
    v14060 = "14061",
    v14061 = "16115",
    v14069 = "14060",
    v14070 = "14073",
    v14071 = "14072",
    v14072 = "14047",
    v14073 = "4546",
    v14074 = "14071",
    v14075 = "14076",
    v14076 = "14077",
    v14077 = "14079",
    v14079 = "14080",
    v14080 = "14081",
    v14081 = "14082",
    v14082 = "13461",
    v16113 = "16114",
    v16114 = "14056",
    v16115 = "16118",
    v16116 = "16117",
    v16117 = "14049",
    v16118 = "14054",
    v4546 = "14074"
  },
  ["Mount Humgurd"] = {
    v23128 = "23129",
    v23129 = "23130",
    v23130 = "23145",
    v23131 = "23132",
    v23132 = "23138",
    v23138 = "23139",
    v23139 = "23707",
    v23140 = "23131",
    v23141 = "23140",
    v23142 = "23141",
    v23143 = "23142",
    v23144 = "23143",
    v23145 = "23144",
    v23147 = "23156",
    v23149 = "23159",
    v23150 = "23149",
    v23151 = "23150",
    v23152 = "23151",
    v23153 = "23158",
    v23154 = "23153",
    v23155 = "23154",
    v23156 = "23155",
    v23157 = "23162",
    v23158 = "23152",
    v23159 = "23160",
    v23160 = "23161",
    v23161 = "23157",
    v23162 = "23163",
    v23163 = "23645",
    v23642 = "23644",
    v23643 = "23708",
    v23644 = "23643",
    v23645 = "23646",
    v23646 = "23647",
    v23647 = "23648",
    v23648 = "23649",
    v23649 = "23650",
    v23650 = "23651",
    v23651 = "23652",
    v23652 = "23653",
    v23653 = "23654",
    v23654 = "23655",
    v23655 = "23715",
    v23707 = "23642",
    v23708 = "23710",
    v23709 = "23711",
    v23710 = "23712",
    v23711 = "23147",
    v23712 = "23713",
    v23713 = "23709",
    v23715 = "23716",
    v23716 = "23774",
    v23717 = "23752",
    v23718 = "23775",
    v23752 = "23753",
    v23753 = "23718",
    v23754 = "23759",
    v23755 = "23754",
    v23756 = "23757",
    v23757 = "23758",
    v23758 = "23755",
    v23759 = "23760",
    v23760 = "23762",
    v23761 = "23768",
    v23762 = "23763",
    v23763 = "23764",
    v23764 = "23765",
    v23765 = "23767",
    v23766 = "23761",
    v23767 = "23766",
    v23768 = "23769",
    v23769 = "23770",
    v23770 = "23771",
    v23771 = "23772",
    v23772 = "23773",
    v23773 = "ptcity",
    v23774 = "23717",
    v23775 = "23756"
  },
  ["Myesian Run"] = {
    v44194 = "44203",
    v44195 = "44196",
    v44196 = "44197",
    v44197 = "44198",
    v44198 = "44199",
    v44199 = "44200",
    v44200 = "44202",
    v44201 = "44205",
    v44202 = "44201",
    v44203 = "44195",
    v44204 = "44206",
    v44205 = "44204",
    v44206 = "44207",
    v44207 = "44208",
    v44208 = "44209",
    v44209 = "44210",
    v44210 = "44211",
    v44211 = "44212",
    v44212 = "44213",
    v44213 = "44214",
    v44214 = "44216",
    v44215 = "44219",
    v44216 = "44217",
    v44217 = "44215",
    v44218 = "44220",
    v44219 = "44218",
    v44220 = "44221",
    v44221 = "44222",
    v44222 = "44223",
    v44223 = "44224",
    v44224 = "44225",
    v44225 = "44226",
    v44226 = "44228",
    v44228 = "44229",
    v44229 = "44231",
    v44231 = "44232",
    v44232 = "44233",
    v44233 = "44234",
    v44234 = "44235",
    v44235 = "58759"
  },
  Perilaus = {
    v11962 = "11964",
    v11964 = "11965",
    v11965 = "11966",
    v11966 = "11967",
    v11967 = "11968",
    v11968 = "11970",
    v11970 = "11971",
    v11971 = "11972",
    v11972 = "11973",
    v11973 = "11974",
    v11974 = "11975",
    v11975 = "11976",
    v11976 = "11977",
    v11977 = "11979",
    v11979 = "11980",
    v11980 = "11995",
    v11981 = "11982",
    v11982 = "11983",
    v11983 = "11984",
    v11984 = "11985",
    v11985 = "11986",
    v11986 = "11987",
    v11987 = "11988",
    v11988 = "11989",
    v11989 = "11990",
    v11990 = "11991",
    v11991 = "11992",
    v11992 = "11993",
    v11993 = "ptcity",
    v11995 = "11981"
  },
  ["Radial Dig Shaft #15"] = {
    v44353 = "44354",
    v44354 = "44356",
    v44355 = "44357",
    v44356 = "44355",
    v44357 = "44358",
    v44358 = "44359",
    v44359 = "44360",
    v44360 = "44361",
    v44361 = "44362",
    v44362 = "44363",
    v44363 = "44364",
    v44364 = "44365",
    v44365 = "44366",
    v44366 = "44492",
    v44367 = "44368",
    v44368 = "44369",
    v44369 = "44370",
    v44370 = "44371",
    v44371 = "44372",
    v44372 = "44490",
    v44373 = "44374",
    v44374 = "44375",
    v44375 = "44376",
    v44376 = "44377",
    v44377 = "44378",
    v44378 = "44379",
    v44379 = "44487",
    v44380 = "44486",
    v44481 = "58576",
    v44482 = "44481",
    v44483 = "44485",
    v44484 = "44483",
    v44485 = "44482",
    v44486 = "44484",
    v44487 = "44489",
    v44488 = "44380",
    v44489 = "44488",
    v44490 = "44491",
    v44491 = "44373",
    v44492 = "44367",
    v58576 = ""
  },
  ["Raim Vale"] = {
    v20389 = "20390",
    v20390 = "20391",
    v20391 = "20666",
    v20666 = "20704",
    v20667 = "20668",
    v20668 = "20669",
    v20669 = "20670",
    v20670 = "20671",
    v20671 = "20672",
    v20672 = "20673",
    v20673 = "48242",
    v20674 = "20675",
    v20675 = "20676",
    v20676 = "20677",
    v20677 = "20678",
    v20678 = "20679",
    v20679 = "20680",
    v20680 = "20681",
    v20681 = "20682",
    v20682 = "20683",
    v20683 = "21041",
    v20684 = "20685",
    v20685 = "20686",
    v20686 = "20705",
    v20687 = "20698",
    v20688 = "20689",
    v20689 = "20690",
    v20690 = "20691",
    v20691 = "20692",
    v20692 = "20693",
    v20693 = "20694",
    v20694 = "58699",
    v20695 = "20688",
    v20696 = "20695",
    v20697 = "20696",
    v20698 = "20699",
    v20699 = "20697",
    v20702 = "20667",
    v20703 = "20702",
    v20704 = "20703",
    v20705 = "20706",
    v20706 = "20707",
    v20707 = "20708",
    v20708 = "20709",
    v20709 = "20710",
    v20710 = "21010",
    v21010 = "21011",
    v21011 = "21012",
    v21012 = "21013",
    v21013 = "21014",
    v21014 = "21015",
    v21015 = "21016",
    v21016 = "21017",
    v21017 = "21018",
    v21018 = "21020",
    v21020 = "21021",
    v21021 = "21032",
    v21032 = "21033",
    v21033 = "21034",
    v21034 = "21036",
    v21035 = "21040",
    v21036 = "21039",
    v21037 = "21035",
    v21038 = "21037",
    v21039 = "21038",
    v21040 = "20687",
    v21041 = "20684",
    v48241 = "48243",
    v48242 = "48336",
    v48243 = "48337",
    v48336 = "48241",
    v48337 = "20674",
    v58697 = "58698",
    v58698 = "ptcity",
    v58699 = "58702",
    v58700 = "58697",
    v58701 = "58700",
    v58702 = "58701"
  },
  ["Raugol Fissure"] = {
    v49749 = "49752",
    v49750 = "49751",
    v49751 = "49756",
    v49752 = "49755",
    v49755 = "49750",
    v49756 = "49757",
    v49757 = "49759",
    v49759 = "49760",
    v49760 = "49761",
    v49761 = "49762",
    v49762 = "49763",
    v49763 = "49764",
    v49764 = "49765",
    v49765 = "49766",
    v49766 = "49767",
    v49767 = "49768",
    v49768 = "49769",
    v49769 = "49770",
    v49770 = "49771",
    v49771 = "49772",
    v49772 = "49773",
    v49773 = "49775",
    v49775 = "49776",
    v49776 = "49777",
    v49777 = "49778",
    v49778 = "49779",
    v49779 = "49780",
    v49780 = "49781",
    v49781 = "49782",
    v49782 = "49783",
    v49783 = "49784",
    v49784 = "49785",
    v49785 = "49786",
    v49786 = "49791",
    v49791 = "49793",
    v49793 = "49798",
    v49798 = "49799",
    v49799 = "49800",
    v49800 = "49802",
    v49802 = "49803",
    v49803 = "49804",
    v49804 = "49805",
    v49805 = "49806",
    v49806 = "49807",
    v49807 = "ptcity"
  },
  ["Rebels' Ridge"] = {
    v18462 = "19566",
    v19529 = "19557",
    v19530 = "19529",
    v19531 = "19532",
    v19532 = "19533",
    v19533 = "19530",
    v19534 = "19531",
    v19535 = "19534",
    v19536 = "19535",
    v19537 = "19536",
    v19538 = "19539",
    v19539 = "19537",
    v19540 = "19538",
    v19541 = "19546",
    v19542 = "19541",
    v19543 = "19542",
    v19544 = "19545",
    v19545 = "19543",
    v19546 = "19547",
    v19547 = "19548",
    v19548 = "19549",
    v19549 = "19550",
    v19550 = "19540",
    v19551 = "19558",
    v19552 = "19551",
    v19553 = "19554",
    v19554 = "19552",
    v19555 = "19553",
    v19556 = "19555",
    v19557 = "19556",
    v19558 = "19559",
    v19559 = "19560",
    v19560 = "19561",
    v19561 = "19562",
    v19562 = "19563",
    v19563 = "19564",
    v19564 = "19565",
    v19565 = "ptcity",
    v19566 = "19567",
    v19567 = "19568",
    v19568 = "19569",
    v19569 = "19570",
    v19570 = "19544"
  },
  Riparium = {
    v32908 = "32909",
    v32909 = "32910",
    v32910 = "32911",
    v32911 = "32912",
    v32912 = "32913",
    v32913 = "32917",
    v32914 = "32915",
    v32915 = "32916",
    v32916 = "5623",
    v32917 = "32919",
    v32919 = "32914",
    v32967 = "6571",
    v5599 = "5604",
    v5604 = "5605",
    v5605 = "5606",
    v5606 = "5612",
    v5612 = "5613",
    v5613 = "5669",
    v5614 = "5615",
    v5615 = "6235",
    v5616 = "5617",
    v5617 = "5622",
    v5618 = "5619",
    v5619 = "5620",
    v5620 = "32908",
    v5621 = "5631",
    v5622 = "5621",
    v5623 = "5624",
    v5624 = "5625",
    v5625 = "5626",
    v5626 = "5627",
    v5627 = "5630",
    v5630 = "ptcity",
    v5631 = "5618",
    v5669 = "5614",
    v6235 = "6236",
    v6236 = "6237",
    v6237 = "6238",
    v6238 = "6239",
    v6239 = "6240",
    v6240 = "6241",
    v6241 = "6242",
    v6242 = "6243",
    v6243 = "6244",
    v6244 = "6245",
    v6245 = "6246",
    v6246 = "6247",
    v6247 = "6248",
    v6248 = "6669",
    v6249 = "6561",
    v6250 = "6251",
    v6251 = "6252",
    v6252 = "6253",
    v6253 = "6254",
    v6254 = "6259",
    v6255 = "6256",
    v6256 = "6257",
    v6257 = "6263",
    v6258 = "6637",
    v6259 = "6260",
    v6260 = "6261",
    v6261 = "6262",
    v6262 = "6650",
    v6263 = "6264",
    v6264 = "6265",
    v6265 = "6266",
    v6266 = "6268",
    v6267 = "6269",
    v6268 = "6267",
    v6269 = "6270",
    v6270 = "6271",
    v6271 = "6272",
    v6272 = "6274",
    v6273 = "5616",
    v6274 = "6273",
    v6560 = "6563",
    v6561 = "6560",
    v6562 = "6250",
    v6563 = "6598",
    v6564 = "6562",
    v6565 = "6566",
    v6566 = "6569",
    v6567 = "6564",
    v6568 = "6570",
    v6569 = "6568",
    v6570 = "32967",
    v6571 = "6573",
    v6572 = "6581",
    v6573 = "6574",
    v6574 = "6575",
    v6575 = "6576",
    v6576 = "6577",
    v6577 = "6579",
    v6578 = "6572",
    v6579 = "6580",
    v6580 = "6578",
    v6581 = "6582",
    v6582 = "6583",
    v6583 = "6588",
    v6588 = "6590",
    v6589 = "6593",
    v6590 = "6591",
    v6591 = "6589",
    v6592 = "6596",
    v6593 = "6594",
    v6594 = "6592",
    v6595 = "6597",
    v6596 = "6595",
    v6597 = "6567",
    v6598 = "6599",
    v6599 = "6600",
    v6600 = "6601",
    v6601 = "6602",
    v6602 = "6603",
    v6603 = "6605",
    v6604 = "6565",
    v6605 = "6607",
    v6606 = "6604",
    v6607 = "6606",
    v6636 = "6641",
    v6637 = "6636",
    v6638 = "6255",
    v6639 = "6638",
    v6640 = "6645",
    v6641 = "6640",
    v6642 = "6639",
    v6643 = "6642",
    v6644 = "6646",
    v6645 = "6644",
    v6646 = "6648",
    v6647 = "6649",
    v6648 = "6647",
    v6649 = "6643",
    v6650 = "6651",
    v6651 = "6652",
    v6652 = "6653",
    v6653 = "6654",
    v6654 = "6655",
    v6655 = "6656",
    v6656 = "6657",
    v6657 = "6658",
    v6658 = "6660",
    v6660 = "6661",
    v6661 = "6662",
    v6662 = "6258",
    v6669 = "6249"
  },
  ["Rotfang Warren"] = {
    v63631 = "63635",
    v63633 = "63650",
    v63634 = "63656",
    v63635 = "63659",
    v63636 = "63661",
    v63637 = "63808",
    v63646 = "63678",
    v63647 = "63649",
    v63648 = "63647",
    v63649 = "63687",
    v63650 = "63646",
    v63651 = "63633",
    v63653 = "63654",
    v63654 = "63806",
    v63655 = "ptcity",
    v63656 = "63655",
    v63658 = "63634",
    v63659 = "63636",
    v63661 = "63662",
    v63662 = "63676",
    v63676 = "63637",
    v63678 = "63803",
    v63683 = "63658",
    v63684 = "63683",
    v63685 = "63688",
    v63687 = "63685",
    v63688 = "63689",
    v63689 = "63684",
    v63760 = "63762",
    v63762 = "63764",
    v63763 = "63631",
    v63764 = "63765",
    v63765 = "63804",
    v63766 = "63768",
    v63767 = "63648",
    v63768 = "63769",
    v63769 = "63770",
    v63770 = "63772",
    v63772 = "63773",
    v63773 = "63774",
    v63774 = "63767",
    v63792 = "63805",
    v63793 = "63797",
    v63794 = "63795",
    v63795 = "63799",
    v63796 = "63800",
    v63797 = "63792",
    v63798 = "63794",
    v63799 = "63796",
    v63800 = "63793",
    v63802 = "63766",
    v63803 = "63798",
    v63804 = "63802",
    v63805 = "63653",
    v63806 = "63807",
    v63807 = "63760",
    v63808 = "63651"
  },
  ["Saliltul Swamp"] = {
    v59254 = "61848",
    v59255 = "61887",
    v59256 = "61899",
    v59257 = "61882",
    v61848 = "61877",
    v61877 = "61878",
    v61878 = "61879",
    v61879 = "61880",
    v61880 = "61881",
    v61881 = "59257",
    v61882 = "61886",
    v61883 = "59256",
    v61884 = "61883",
    v61885 = "61884",
    v61886 = "61885",
    v61887 = "61890",
    v61890 = "61891",
    v61891 = "61892",
    v61892 = "61893",
    v61893 = "61894",
    v61894 = "ptcity",
    v61899 = "61900",
    v61900 = "61924",
    v61901 = "61902",
    v61902 = "61906",
    v61903 = "59255",
    v61904 = "61903",
    v61905 = "61904",
    v61906 = "61905",
    v61924 = "61925",
    v61925 = "61927",
    v61927 = "62097",
    v62097 = "62548",
    v62102 = "59254",
    v62548 = "61901"
  },
  Scidve = {
    v10056 = "10070",
    v10070 = "10071",
    v10071 = "10073",
    v10072 = "10075",
    v10073 = "10074",
    v10074 = "10072",
    v10075 = "10076",
    v10076 = "10077",
    v10077 = "10078",
    v10078 = "10081",
    v10079 = "10080",
    v10080 = "10083",
    v10081 = "10079",
    v10082 = "10084",
    v10083 = "10082",
    v10084 = "10085",
    v10085 = "10157",
    v10157 = "10158",
    v10158 = "10175",
    v10160 = "10161",
    v10161 = "10162",
    v10162 = "9826",
    v10175 = "10176",
    v10176 = "10177",
    v10177 = "10178",
    v10178 = "10179",
    v10179 = "10180",
    v10180 = "10181",
    v10181 = "10182",
    v10182 = "10183",
    v10183 = "10187",
    v10184 = "10189",
    v10185 = "10186",
    v10186 = "10243",
    v10187 = "10185",
    v10188 = "10184",
    v10189 = "10252",
    v10192 = "10193",
    v10193 = "10188",
    v10195 = "10196",
    v10196 = "10197",
    v10197 = "10192",
    v10198 = "10195",
    v10233 = "10234",
    v10234 = "10235",
    v10235 = "10237",
    v10236 = "10198",
    v10237 = "10236",
    v10238 = "10233",
    v10239 = "10241",
    v10240 = "10238",
    v10241 = "10240",
    v10242 = "10239",
    v10243 = "10242",
    v10244 = "ptcity",
    v10245 = "10244",
    v10246 = "10245",
    v10247 = "10246",
    v10248 = "10247",
    v10249 = "10248",
    v10250 = "10249",
    v10251 = "10253",
    v10252 = "10251",
    v10253 = "10271",
    v10271 = "10272",
    v10272 = "10273",
    v10273 = "10274",
    v10274 = "10276",
    v10275 = "10250",
    v10276 = "10275",
    v10813 = "9709",
    v18529 = "9836",
    v26213 = "9920",
    v26214 = "26213",
    v9700 = "9701",
    v9701 = "9816",
    v9702 = "9703",
    v9703 = "9704",
    v9704 = "9973",
    v9705 = "9706",
    v9706 = "9707",
    v9707 = "9824",
    v9709 = "9710",
    v9710 = "9711",
    v9711 = "9712",
    v9712 = "9721",
    v9721 = "9722",
    v9722 = "9723",
    v9723 = "9725",
    v9725 = "9726",
    v9726 = "9727",
    v9727 = "9762",
    v9728 = "9729",
    v9729 = "9730",
    v9730 = "9759",
    v9731 = "9732",
    v9732 = "9733",
    v9733 = "9734",
    v9734 = "9735",
    v9735 = "9736",
    v9736 = "9737",
    v9737 = "9738",
    v9738 = "9739",
    v9739 = "9740",
    v9740 = "9741",
    v9741 = "9756",
    v9756 = "9757",
    v9757 = "9758",
    v9758 = "9914",
    v9759 = "9760",
    v9760 = "9761",
    v9761 = "9731",
    v9762 = "9767",
    v9763 = "9764",
    v9764 = "9728",
    v9765 = "9766",
    v9766 = "9763",
    v9767 = "9768",
    v9768 = "9769",
    v9769 = "9770",
    v9770 = "9765",
    v9816 = "9819",
    v9817 = "9702",
    v9818 = "9821",
    v9819 = "9820",
    v9820 = "9818",
    v9821 = "9822",
    v9822 = "9823",
    v9823 = "9817",
    v9824 = "9828",
    v9825 = "9829",
    v9826 = "9825",
    v9827 = "9831",
    v9828 = "9830",
    v9829 = "10056",
    v9830 = "9837",
    v9831 = "9832",
    v9832 = "9833",
    v9833 = "9835",
    v9834 = "18529",
    v9835 = "9834",
    v9836 = "10160",
    v9837 = "9827",
    v9838 = "9906",
    v9904 = "9838",
    v9905 = "9907",
    v9906 = "9919",
    v9907 = "9904",
    v9908 = "9905",
    v9909 = "9910",
    v9910 = "9908",
    v9911 = "9909",
    v9912 = "9911",
    v9913 = "9912",
    v9914 = "9915",
    v9915 = "9916",
    v9916 = "9917",
    v9917 = "9923",
    v9918 = "9913",
    v9919 = "9921",
    v9920 = "9700",
    v9921 = "9925",
    v9922 = "9918",
    v9923 = "9924",
    v9924 = "9922",
    v9925 = "9927",
    v9926 = "26214",
    v9927 = "9926",
    v9973 = "9974",
    v9974 = "9981",
    v9981 = "9705"
  },
  ["Siha Dylis"] = {
    v3106 = "3107",
    v3107 = "3108",
    v3108 = "3109",
    v3109 = "3110",
    v3110 = "3147",
    v3111 = "3112",
    v3112 = "3113",
    v3113 = "3114",
    v3114 = "3115",
    v3115 = "3116",
    v3116 = "3117",
    v3117 = "3121",
    v3118 = "3119",
    v3119 = "3154",
    v3121 = "3118",
    v3134 = "3111",
    v3144 = "3134",
    v3146 = "3144",
    v3147 = "3182",
    v3154 = "3204",
    v3155 = "3156",
    v3156 = "3180",
    v3172 = "3175",
    v3175 = "3179",
    v3179 = "3181",
    v3180 = "3172",
    v3181 = "3193",
    v3182 = "3183",
    v3183 = "3146",
    v3184 = "3191",
    v3185 = "3184",
    v3186 = "3185",
    v3187 = "3188",
    v3188 = "3189",
    v3189 = "3239",
    v3190 = "3206",
    v3191 = "3205",
    v3192 = "3207",
    v3193 = "3195",
    v3194 = "3196",
    v3195 = "3194",
    v3196 = "3198",
    v3197 = "3199",
    v3198 = "3197",
    v3199 = "3200",
    v3200 = "3202",
    v3202 = "3186",
    v3204 = "3155",
    v3205 = "3192",
    v3206 = "3187",
    v3207 = "3213",
    v3211 = "3212",
    v3212 = "3216",
    v3213 = "3211",
    v3214 = "3215",
    v3215 = "3190",
    v3216 = "3218",
    v3217 = "3214",
    v3218 = "3240",
    v3219 = "3220",
    v3220 = "3217",
    v3226 = "62755",
    v3227 = "3226",
    v3228 = "49927",
    v3230 = "3228",
    v3239 = "3230",
    v3240 = "3241",
    v3241 = "3242",
    v3242 = "3243",
    v3243 = "36261",
    v36261 = "3219",
    v49927 = "3227",
    v62755 = "ptcity"
  },
  Spinesreach = {
    v11687 = "11695",
    v11695 = "11696",
    v11696 = "11698",
    v11698 = "66438",
    v11699 = "11944",
    v11701 = "11702",
    v11702 = "11703",
    v11703 = "11716",
    v11704 = "11715",
    v11705 = "11707",
    v11707 = "11708",
    v11708 = "12653",
    v11712 = "11942",
    v11713 = "11714",
    v11714 = "14480",
    v11715 = "11705",
    v11716 = "22661",
    v11886 = "11935",
    v11933 = "11886",
    v11935 = "11936",
    v11936 = "19291",
    v11937 = "14984",
    v11939 = "11940",
    v11940 = "11699",
    v11941 = "24344",
    v11942 = "11945",
    v11943 = "11939",
    v11944 = "11712",
    v11945 = "11713",
    v12401 = "11701",
    v12653 = "12656",
    v12654 = "66548",
    v12655 = "14393",
    v12656 = "66590",
    v12657 = "21061",
    v12658 = "66509",
    v12659 = "22627",
    v12668 = "12655",
    v12669 = "13834",
    v12670 = "14507",
    v12671 = "12682",
    v12672 = "12673",
    v12673 = "12678",
    v12674 = "14510",
    v12675 = "12684",
    v12676 = "12677",
    v12677 = "12689",
    v12678 = "13032",
    v12680 = "13030",
    v12682 = "12672",
    v12684 = "12676",
    v12686 = "12687",
    v12687 = "12688",
    v12688 = "18190",
    v12689 = "12690",
    v12690 = "12691",
    v12691 = "12680",
    v12803 = "12804",
    v12804 = "24350",
    v12805 = "12803",
    v12806 = "12805",
    v12807 = "12806",
    v12808 = "12807",
    v12809 = "12808",
    v12810 = "12811",
    v12811 = "12809",
    v12812 = "12810",
    v12817 = "12818",
    v12818 = "12819",
    v12819 = "12820",
    v12820 = "12821",
    v12821 = "12822",
    v12822 = "12823",
    v12823 = "12824",
    v12824 = "12825",
    v12825 = "12826",
    v12826 = "12827",
    v12827 = "12828",
    v12828 = "12829",
    v12829 = "12837",
    v12830 = "12836",
    v12831 = "12830",
    v12832 = "12831",
    v12833 = "12832",
    v12834 = "12838",
    v12835 = "12834",
    v12836 = "12835",
    v12837 = "12833",
    v12838 = "12885",
    v12839 = "12840",
    v12840 = "12841",
    v12841 = "12842",
    v12842 = "12843",
    v12843 = "12844",
    v12844 = "12845",
    v12845 = "12846",
    v12846 = "12847",
    v12847 = "12848",
    v12848 = "12849",
    v12849 = "12860",
    v12860 = "12861",
    v12861 = "12862",
    v12862 = "12863",
    v12863 = "12864",
    v12864 = "12865",
    v12865 = "12866",
    v12866 = "12867",
    v12867 = "12868",
    v12868 = "12869",
    v12869 = "12870",
    v12870 = "12871",
    v12871 = "12872",
    v12872 = "12873",
    v12873 = "12886",
    v12884 = "12839",
    v12885 = "12884",
    v12886 = "12893",
    v12887 = "12896",
    v12888 = "12887",
    v12889 = "16230",
    v12890 = "12889",
    v12891 = "12890",
    v12892 = "12891",
    v12893 = "12892",
    v12896 = "33218",
    v12997 = "25687",
    v13030 = "12812",
    v13032 = "12686",
    v13834 = "56870",
    v14393 = "14395",
    v14395 = "12654",
    v14480 = "17448",
    v14507 = "12671",
    v14510 = "12675",
    v14984 = "15126",
    v15126 = "44568",
    v16230 = "16231",
    v16231 = "16232",
    v16232 = "12888",
    v17448 = "17449",
    v17449 = "11704",
    v18190 = "24188",
    v19291 = "11937",
    v21055 = "12657",
    v21057 = "12659",
    v21059 = "32709",
    v21061 = "21059",
    v22627 = "24437",
    v22661 = "11933",
    v24188 = "12674",
    v24344 = "11943",
    v24350 = "12997",
    v24431 = "21055",
    v24437 = "12669",
    v25687 = "25688",
    v25688 = "25689",
    v25689 = "12817",
    v32709 = "12668",
    v33218 = "12401",
    v44568 = "44881",
    v44576 = "44577",
    v44577 = "44580",
    v44580 = "44585",
    v44585 = "",
    v44881 = "44576",
    v56870 = "12670",
    v66230 = "21057",
    v66438 = "11941",
    v66509 = "66786",
    v66548 = "12658",
    v66578 = "24431",
    v66590 = "66578",
    v66786 = "66230"
  },
  ["Spiral of the Corrupt"] = {
    v36271 = "36596",
    v36596 = "36622",
    v36598 = "36599",
    v36599 = "36600",
    v36600 = "36601",
    v36601 = "36602",
    v36602 = "36603",
    v36603 = "36604",
    v36604 = "36605",
    v36605 = "36606",
    v36606 = "36607",
    v36607 = "36608",
    v36608 = "36609",
    v36609 = "36610",
    v36610 = "36611",
    v36611 = "36612",
    v36612 = "36613",
    v36613 = "36614",
    v36614 = "36615",
    v36615 = "36616",
    v36616 = "36617",
    v36617 = "36618",
    v36618 = "36619",
    v36619 = "36620",
    v36620 = "36621",
    v36621 = "36623",
    v36622 = "36624",
    v36623 = "36626",
    v36624 = "36625",
    v36625 = "36634",
    v36626 = "36627",
    v36627 = "36628",
    v36628 = "36629",
    v36629 = "36630",
    v36630 = "36631",
    v36631 = "36632",
    v36632 = "36633",
    v36633 = "36635",
    v36634 = "36639",
    v36635 = "36636",
    v36636 = "36637",
    v36637 = "36638",
    v36638 = "36640",
    v36639 = "36648",
    v36640 = "36641",
    v36641 = "36642",
    v36642 = "36643",
    v36643 = "36644",
    v36644 = "36645",
    v36645 = "36647",
    v36646 = "ptcity",
    v36647 = "36649",
    v36648 = "36598",
    v36649 = "36650",
    v36650 = "36646"
  },
  Tainhelm = {
    v16438 = "16439",
    v16439 = "16440",
    v16440 = "16491",
    v16441 = "16492",
    v16442 = "16493",
    v16443 = "16494",
    v16444 = "16495",
    v16445 = "16496",
    v16446 = "16447",
    v16447 = "16448",
    v16448 = "16450",
    v16449 = "16461",
    v16450 = "16451",
    v16451 = "16521",
    v16452 = "16454",
    v16453 = "16552",
    v16454 = "24705",
    v16455 = "16453",
    v16456 = "16546",
    v16457 = "16458",
    v16458 = "16488",
    v16459 = "16489",
    v16460 = "16490",
    v16461 = "16457",
    v16462 = "16463",
    v16463 = "33240",
    v16464 = "16465",
    v16465 = "16466",
    v16466 = "16467",
    v16467 = "16468",
    v16468 = "16470",
    v16470 = "16471",
    v16471 = "16472",
    v16472 = "16473",
    v16473 = "16474",
    v16474 = "16475",
    v16475 = "16476",
    v16476 = "16477",
    v16477 = "16479",
    v16478 = "16480",
    v16479 = "16478",
    v16480 = "16481",
    v16481 = "16482",
    v16482 = "16484",
    v16483 = "16485",
    v16484 = "16483",
    v16485 = "16486",
    v16486 = "16487",
    v16487 = "16566",
    v16488 = "16459",
    v16489 = "16460",
    v16490 = "16462",
    v16491 = "16502",
    v16492 = "16442",
    v16493 = "16500",
    v16494 = "16444",
    v16495 = "16445",
    v16496 = "16446",
    v16497 = "16498",
    v16498 = "16499",
    v16499 = "16443",
    v16500 = "16506",
    v16501 = "16441",
    v16502 = "16508",
    v16503 = "16497",
    v16504 = "16503",
    v16505 = "16504",
    v16506 = "16512",
    v16507 = "16501",
    v16508 = "16514",
    v16509 = "16510",
    v16510 = "16511",
    v16511 = "16505",
    v16512 = "16518",
    v16513 = "16507",
    v16514 = "16520",
    v16515 = "16509",
    v16516 = "16515",
    v16517 = "16516",
    v16518 = "16517",
    v16519 = "16513",
    v16520 = "16519",
    v16521 = "16522",
    v16522 = "16523",
    v16523 = "16524",
    v16524 = "16525",
    v16525 = "16526",
    v16526 = "16532",
    v16527 = "16452",
    v16528 = "16527",
    v16529 = "16528",
    v16530 = "16529",
    v16531 = "16530",
    v16532 = "16531",
    v16545 = "16548",
    v16546 = "16547",
    v16547 = "16545",
    v16548 = "16549",
    v16549 = "16550",
    v16550 = "16554",
    v16551 = "16456",
    v16552 = "16553",
    v16553 = "16551",
    v16554 = "16449",
    v16566 = "ptcity",
    v17999 = "18000",
    v18000 = "18004",
    v18001 = "18445",
    v18002 = "16464",
    v18004 = "18001",
    v18005 = "18002",
    v18445 = "18005",
    v24705 = "16455",
    v33240 = "17999"
  },
  ["Tak-re"] = {
  v18530 = "5992",
  v5961 = "6884",
  v5962 = "5965",
  v5963 = "6054",
  v5964 = "5963",
  v5965 = "5964",
  v5966 = "5968",
  v5967 = "5961",
  v5968 = "5967",
  v5969 = "6060",
  v5970 = "6056",
  v5971 = "5973",
  v5972 = "5974",
  v5973 = "5972",
  v5974 = "5975",
  v5975 = "5978",
  v5976 = "5977",
  v5977 = "5986",
  v5978 = "5981",
  v5979 = "5985",
  v5980 = "5982",
  v5981 = "5979",
  v5982 = "5976",
  v5983 = "5980",
  v5984 = "5988",
  v5985 = "5984",
  v5986 = "5996",
  v5987 = "5983",
  v5988 = "5989",
  v5989 = "5987",
  v5990 = "5991",
  v5991 = "18530",
  v5992 = "5995",
  v5993 = "5990",
  v5994 = "5998",
  v5995 = "5994",
  v5996 = "6051",
  v5997 = "6012",
  v5998 = "6000",
  v5999 = "5997",
  v6000 = "6002",
  v6001 = "6058",
  v6002 = "6003",
  v6003 = "6001",
  v6004 = "5999",
  v6005 = "6007",
  v6006 = "6009",
  v6007 = "6008",
  v6008 = "6085",
  v6009 = "6004",
  v6010 = "5993",
  v6011 = "6010",
  v6012 = "6013",
  v6013 = "6014",
  v6014 = "6015",
  v6015 = "6016",
  v6016 = "6017",
  v6017 = "ptcity",
  v6051 = "6011",
  v6052 = "6055",
  v6053 = "6052",
  v6054 = "5969",
  v6055 = "6005",
  v6056 = "5971",
  v6057 = "5970",
  v6058 = "6053",
  v6059 = "6057",
  v6060 = "6070",
  v6070 = "6071",
  v6071 = "6059",
  v6085 = "6086",
  v6086 = "6006",
  v6884 = "5962"
},
  ["Tcanna Island"] = {
    v51244 = "54509",
    v52633 = "52634",
    v52634 = "52635",
    v52635 = "52636",
    v52636 = "54141",
    v53331 = "55001",
    v53339 = "53560",
    v53560 = "53566",
    v53566 = "54869",
    v53567 = "51244",
    v53592 = "53593",
    v53593 = "53567",
    v53618 = "53619",
    v53619 = "53633",
    v53633 = "53999",
    v53637 = "53643",
    v53643 = "53644",
    v53644 = "53645",
    v53645 = "54574",
    v53828 = "52633",
    v53996 = "54000",
    v53997 = "53996",
    v53998 = "53997",
    v53999 = "53998",
    v54000 = "54507",
    v54001 = "54002",
    v54002 = "54003",
    v54003 = "54004",
    v54004 = "54005",
    v54005 = "54006",
    v54006 = "54007",
    v54007 = "54008",
    v54008 = "54009",
    v54009 = "54030",
    v54030 = "54031",
    v54031 = "54060",
    v54044 = "53828",
    v54045 = "54044",
    v54046 = "54045",
    v54048 = "54052",
    v54049 = "54048",
    v54050 = "54049",
    v54052 = "54867",
    v54060 = "54062",
    v54062 = "54065",
    v54065 = "54069",
    v54069 = "53592",
    v54125 = "54486",
    v54126 = "54125",
    v54127 = "54126",
    v54128 = "54127",
    v54131 = "54128",
    v54132 = "54131",
    v54137 = "53637",
    v54140 = "54137",
    v54141 = "54357",
    v54142 = "54143",
    v54143 = "54144",
    v54144 = "54145",
    v54145 = "54593",
    v54146 = "54140",
    v54147 = "54146",
    v54148 = "54808",
    v54149 = "54401",
    v54150 = "54402",
    v54156 = "54150",
    v54157 = "54164",
    v54158 = "54156",
    v54159 = "54158",
    v54164 = "54165",
    v54165 = "54159",
    v54166 = "54713",
    v54223 = "54588",
    v54224 = "53618",
    v54225 = "54224",
    v54226 = "54225",
    v54230 = "54235",
    v54235 = "54236",
    v54236 = "54239",
    v54239 = "54240",
    v54240 = "54241",
    v54241 = "54226",
    v54258 = "54611",
    v54322 = "54825",
    v54356 = "54322",
    v54357 = "54358",
    v54358 = "54362",
    v54362 = "54363",
    v54363 = "54682",
    v54368 = "54356",
    v54371 = "54368",
    v54372 = "54371",
    v54373 = "54372",
    v54374 = "54373",
    v54375 = "54374",
    v54389 = "54390",
    v54390 = "54375",
    v54391 = "54389",
    v54392 = "54391",
    v54393 = "54392",
    v54401 = "54148",
    v54402 = "54149",
    v54447 = "54046",
    v54448 = "54453",
    v54453 = "54001",
    v54454 = "54525",
    v54455 = "54454",
    v54457 = "54455",
    v54458 = "54457",
    v54459 = "54458",
    v54460 = "54459",
    v54461 = "54462",
    v54462 = "54463",
    v54463 = "54464",
    v54464 = "54448",
    v54467 = "54488",
    v54468 = "54467",
    v54469 = "54475",
    v54475 = "54476",
    v54476 = "54468",
    v54477 = "54479",
    v54479 = "54480",
    v54480 = "54481",
    v54481 = "54484",
    v54484 = "54485",
    v54485 = "54469",
    v54486 = "54487",
    v54487 = "54477",
    v54488 = "54489",
    v54489 = "54490",
    v54490 = "54230",
    v54492 = "54529",
    v54496 = "54492",
    v54498 = "54496",
    v54502 = "54498",
    v54507 = "54502",
    v54509 = "54510",
    v54510 = "54511",
    v54511 = "54512",
    v54512 = "54447",
    v54524 = "53331",
    v54525 = "54524",
    v54529 = "54461",
    v54574 = "54575",
    v54575 = "54576",
    v54576 = "54577",
    v54577 = "54578",
    v54578 = "54583",
    v54580 = "54147",
    v54581 = "54580",
    v54582 = "54581",
    v54583 = "54584",
    v54584 = "54586",
    v54586 = "54587",
    v54587 = "54223",
    v54588 = "54809",
    v54593 = "54594",
    v54594 = "54595",
    v54595 = "54596",
    v54596 = "54623",
    v54597 = "54633",
    v54598 = "54597",
    v54599 = "54598",
    v54600 = "54599",
    v54601 = "54600",
    v54602 = "54601",
    v54603 = "54602",
    v54604 = "54603",
    v54605 = "54604",
    v54606 = "54605",
    v54608 = "54606",
    v54611 = "54608",
    v54623 = "54625",
    v54625 = "54157",
    v54627 = "54634",
    v54628 = "54627",
    v54629 = "54630",
    v54630 = "54631",
    v54631 = "54628",
    v54632 = "54629",
    v54633 = "54632",
    v54634 = "54635",
    v54635 = "54636",
    v54636 = "54460",
    v54682 = "54142",
    v54713 = "54714",
    v54714 = "54815",
    v54715 = "54132",
    v54716 = "54715",
    v54717 = "54716",
    v54718 = "54717",
    v54719 = "54718",
    v54720 = "54719",
    v54721 = "54720",
    v54722 = "54721",
    v54741 = "54742",
    v54742 = "54743",
    v54743 = "54872",
    v54744 = "54747",
    v54745 = "54744",
    v54747 = "54749",
    v54749 = "54750",
    v54750 = "54751",
    v54751 = "54752",
    v54752 = "54166",
    v54753 = "54745",
    v54754 = "54050",
    v54755 = "54756",
    v54756 = "54870",
    v54798 = "54393",
    v54799 = "54798",
    v54800 = "54799",
    v54801 = "54831",
    v54802 = "54722",
    v54803 = "54802",
    v54804 = "54803",
    v54806 = "54258",
    v54807 = "54806",
    v54808 = "54807",
    v54809 = "54810",
    v54810 = "54811",
    v54811 = "54804",
    v54812 = "54582",
    v54813 = "54812",
    v54814 = "54813",
    v54815 = "54814",
    v54819 = "54801",
    v54820 = "54858",
    v54822 = "54820",
    v54824 = "54822",
    v54825 = "54824",
    v54826 = "54819",
    v54827 = "54826",
    v54828 = "54827",
    v54829 = "54828",
    v54830 = "54829",
    v54831 = "54800",
    v54832 = "54830",
    v54833 = "54854",
    v54834 = "54832",
    v54835 = "54834",
    v54836 = "54835",
    v54844 = "54845",
    v54845 = "54833",
    v54847 = "54844",
    v54848 = "54847",
    v54849 = "54836",
    v54850 = "54849",
    v54851 = "54850",
    v54852 = "54851",
    v54853 = "54852",
    v54854 = "54853",
    v54855 = "54848",
    v54857 = "54864",
    v54858 = "53339",
    v54864 = "54855",
    v54865 = "54866",
    v54866 = "54874",
    v54867 = "54753",
    v54868 = "54755",
    v54869 = "54868",
    v54870 = "54871",
    v54871 = "54873",
    v54872 = "54754",
    v54873 = "54741",
    v54874 = "54857",
    v54875 = "54877",
    v54877 = "54865",
    v54878 = "54875",
    v54879 = "54878",
    v54880 = "54879",
    v54881 = "54880",
    v54992 = "54994",
    v54993 = "54996",
    v54994 = "54995",
    v54995 = "54993",
    v54996 = "54881",
    v54997 = "54992",
    v54998 = "54997",
    v54999 = "54998",
    v55000 = "54999",
    v55001 = "55000"
  },
  ["The Forgotten Mausoleum"] = {
    v59862 = "59863",
    v59863 = "59864",
    v59864 = "59865",
    v59865 = "59866",
    v59866 = "59870",
    v59867 = "59871",
    v59870 = "59867",
    v59871 = "59872",
    v59872 = "59873",
    v59873 = "60062",
    v59874 = "60088",
    v59875 = "59876",
    v59876 = "60070",
    v59877 = "59879",
    v59878 = "60066",
    v59879 = "60074",
    v60062 = "59878",
    v60063 = "59874",
    v60066 = "60069",
    v60067 = "59875",
    v60068 = "60067",
    v60069 = "60068",
    v60070 = "60071",
    v60071 = "60072",
    v60072 = "60073",
    v60073 = "59877",
    v60074 = "60075",
    v60075 = "60076",
    v60076 = "60077",
    v60077 = "60063",
    v60078 = "60079",
    v60079 = "60080",
    v60080 = "60081",
    v60081 = "60082",
    v60082 = "60083",
    v60083 = "60084",
    v60084 = "60085",
    v60085 = "60086",
    v60086 = "60087",
    v60087 = "ptcity",
    v60088 = "60092",
    v60089 = "60091",
    v60090 = "60078",
    v60091 = "60090",
    v60092 = "60094",
    v60094 = "60095",
    v60095 = "60096",
    v60096 = "60097",
    v60097 = "60098",
    v60098 = "60089"
  },
  ["the Dyisen-Ashtan Memoryscape"] = {
  v71126 = "72336",
  v71127 = "71126",
  v71215 = "72034",
  v71284 = "71286",
  v71285 = "72391",
  v71286 = "71285",
  v71381 = "72464",
  v71382 = "71381",
  v71389 = "71390",
  v71390 = "72505",
  v71393 = "71576",
  v71425 = "71426",
  v71426 = "71393",
  v71570 = "71595",
  v71572 = "71575",
  v71573 = "71599",
  v71575 = "71573",
  v71576 = "72371",
  v71577 = "71570",
  v71578 = "71577",
  v71579 = "71578",
  v71583 = "71596",
  v71584 = "71583",
  v71585 = "71584",
  v71586 = "71591",
  v71589 = "71586",
  v71590 = "71585",
  v71591 = "72440",
  v71595 = "71572",
  v71596 = "71589",
  v71598 = "71601",
  v71599 = "71600",
  v71600 = "71598",
  v71601 = "72064",
  v71606 = "71609",
  v71607 = "71606",
  v71608 = "71610",
  v71609 = "71608",
  v71610 = "72197",
  v71611 = "72284",
  v71616 = "71617",
  v71617 = "71425",
  v72024 = "72452",
  v72025 = "72217",
  v72029 = "72492",
  v72032 = "72136",
  v72033 = "72484",
  v72034 = "71382",
  v72035 = "72065",
  v72040 = "72245",
  v72041 = "72194",
  v72044 = "72180",
  v72048 = "72394",
  v72055 = "72232",
  v72056 = "72395",
  v72057 = "72330",
  v72059 = "72104",
  v72061 = "72441",
  v72064 = "72306",
  v72065 = "72308",
  v72066 = "72423",
  v72067 = "72228",
  v72080 = "72471",
  v72081 = "72353",
  v72083 = "72363",
  v72084 = "72431",
  v72088 = "72479",
  v72089 = "72477",
  v72092 = "72357",
  v72093 = "72411",
  v72094 = "72317",
  v72097 = "72138",
  v72104 = "71607",
  v72109 = "72425",
  v72110 = "72314",
  v72113 = "72212",
  v72120 = "72325",
  v72123 = "72488",
  v72127 = "72406",
  v72131 = "71579",
  v72132 = "72165",
  v72134 = "72249",
  v72135 = "72134",
  v72136 = "72140",
  v72137 = "72035",
  v72138 = "72145",
  v72140 = "72143",
  v72141 = "72474",
  v72142 = "72092",
  v72143 = "72142",
  v72145 = "72024",
  v72157 = "72366",
  v72159 = "72328",
  v72165 = "72048",
  v72180 = "72491",
  v72183 = "72427",
  v72189 = "72437",
  v72194 = "72123",
  v72197 = "72240",
  v72198 = "72268",
  v72204 = "72408",
  v72205 = "72025",
  v72208 = "72360",
  v72212 = "72418",
  v72217 = "72029",
  v72223 = "72414",
  v72224 = "72291",
  v72227 = "72242",
  v72228 = "72444",
  v72232 = "72433",
  v72236 = "72465",
  v72240 = "72204",
  v72242 = "72384",
  v72245 = "72459",
  v72247 = "72205",
  v72249 = "72113",
  v72258 = "72362",
  v72262 = "72131",
  v72268 = "72110",
  v72275 = "72258",
  v72276 = "72320",
  v72277 = "72285",
  v72279 = "72277",
  v72281 = "72159",
  v72284 = "72223",
  v72285 = "71611",
  v72291 = "72089",
  v72306 = "72468",
  v72307 = "72080",
  v72308 = "72044",
  v72312 = "72486",
  v72314 = "72422",
  v72315 = "72312",
  v72316 = "72066",
  v72317 = "72316",
  v72318 = "72094",
  v72319 = "72318",
  v72320 = "72059",
  v72322 = "72420",
  v72325 = "72476",
  v72326 = "72315",
  v72327 = "ptcity",
  v72328 = "72347",
  v72330 = "72141",
  v72336 = "72040",
  v72337 = "72157",
  v72344 = "72359",
  v72346 = "72470",
  v72347 = "72057",
  v72349 = "72354",
  v72353 = "72349",
  v72354 = "72367",
  v72357 = "72189",
  v72359 = "72370",
  v72360 = "72276",
  v72362 = "72326",
  v72363 = "72247",
  v72365 = "72061",
  v72366 = "72344",
  v72367 = "72368",
  v72368 = "72281",
  v72370 = "72120",
  v72371 = "72198",
  v72372 = "72416",
  v72381 = "72236",
  v72384 = "72434",
  v72388 = "72056",
  v72391 = "72033",
  v72394 = "72507",
  v72395 = "72346",
  v72401 = "72307",
  v72404 = "72365",
  v72406 = "71127",
  v72408 = "71389",
  v72411 = "72415",
  v72414 = "72127",
  v72415 = "72372",
  v72416 = "71284",
  v72418 = "71616",
  v72420 = "72055",
  v72422 = "72109",
  v72423 = "72208",
  v72425 = "72183",
  v72427 = "72388",
  v72431 = "72083",
  v72433 = "72475",
  v72434 = "72081",
  v72435 = "72503",
  v72437 = "72435",
  v72440 = "72322",
  v72441 = "72401",
  v72444 = "72327",
  v72445 = "72319",
  v72446 = "72041",
  v72452 = "72067",
  v72459 = "72460",
  v72460 = "72275",
  v72464 = "71590",
  v72465 = "72404",
  v72468 = "72481",
  v72469 = "72132",
  v72470 = "72032",
  v72471 = "72224",
  v72474 = "72135",
  v72475 = "72227",
  v72476 = "72445",
  v72477 = "71215",
  v72479 = "72381",
  v72481 = "72097",
  v72484 = "72279",
  v72486 = "72137",
  v72488 = "72469",
  v72491 = "72337",
  v72492 = "72262",
  v72503 = "72084",
  v72505 = "72446",
  v72507 = "72088"
},

  ["Three Widows"] = {
    v21587 = "21590",
    v21588 = "21587",
    v21589 = "21588",
    v21590 = "21591",
    v21591 = "21592",
    v21592 = "21593",
    v21593 = "21594",
    v21594 = "21595",
    v21595 = "21596",
    v21596 = "21597",
    v21597 = "21598",
    v21598 = "21599",
    v21599 = "21647",
    v21601 = "21670",
    v21602 = "21589",
    v21603 = "21602",
    v21604 = "21603",
    v21605 = "21604",
    v21606 = "21605",
    v21607 = "21606",
    v21608 = "21607",
    v21609 = "21608",
    v21610 = "21609",
    v21611 = "21610",
    v21612 = "21611",
    v21613 = "21612",
    v21614 = "21613",
    v21615 = "21614",
    v21616 = "21617",
    v21617 = "21618",
    v21618 = "21619",
    v21619 = "21620",
    v21620 = "21621",
    v21621 = "21622",
    v21622 = "21615",
    v21623 = "21627",
    v21624 = "21623",
    v21625 = "21624",
    v21626 = "21625",
    v21627 = "21628",
    v21628 = "21631",
    v21629 = "21685",
    v21630 = "21629",
    v21631 = "21630",
    v21634 = "21626",
    v21636 = "21634",
    v21637 = "21636",
    v21638 = "21637",
    v21639 = "21638",
    v21641 = "21639",
    v21642 = "21641",
    v21644 = "21652",
    v21645 = "21646",
    v21646 = "21642",
    v21647 = "21648",
    v21648 = "21649",
    v21649 = "21650",
    v21650 = "21645",
    v21652 = "21653",
    v21653 = "21657",
    v21654 = "21644",
    v21655 = "21654",
    v21656 = "21655",
    v21657 = "21659",
    v21659 = "21660",
    v21660 = "21661",
    v21661 = "21688",
    v21662 = "21664",
    v21663 = "21676",
    v21664 = "21656",
    v21665 = "21666",
    v21666 = "21667",
    v21667 = "21668",
    v21668 = "21669",
    v21669 = "21601",
    v21670 = "21671",
    v21671 = "21672",
    v21672 = "21673",
    v21673 = "21675",
    v21674 = "21731",
    v21675 = "21674",
    v21676 = "21665",
    v21677 = "21663",
    v21679 = "21699",
    v21680 = "21679",
    v21681 = "21680",
    v21682 = "21677",
    v21683 = "21662",
    v21684 = "21687",
    v21685 = "21686",
    v21686 = "21684",
    v21687 = "21683",
    v21688 = "21689",
    v21689 = "21690",
    v21690 = "21682",
    v21699 = "21700",
    v21700 = "21701",
    v21701 = "21702",
    v21702 = "21703",
    v21703 = "21704",
    v21704 = "21705",
    v21705 = "21706",
    v21706 = "21707",
    v21707 = "21708",
    v21708 = "21709",
    v21709 = "21710",
    v21710 = "21711",
    v21711 = "21712",
    v21712 = "21713",
    v21713 = "21720",
    v21714 = "21715",
    v21715 = "21716",
    v21716 = "21717",
    v21717 = "21718",
    v21718 = "21719",
    v21719 = "ptcity",
    v21720 = "21721",
    v21721 = "21722",
    v21722 = "21723",
    v21723 = "21724",
    v21724 = "21714",
    v21725 = "21681",
    v21726 = "21725",
    v21727 = "21726",
    v21728 = "21727",
    v21729 = "21728",
    v21730 = "21729",
    v21731 = "21730",
    v54483 = "21616",
    v55147 = "54483",
    v58671 = "55147",
    v58672 = "58671",
    v58673 = "58672",
    v58675 = "58673"
  },
  ["Tiyen Esityi"] = {
    v38817 = "38818",
    v38818 = "38819",
    v38819 = "38820",
    v38820 = "38832",
    v38821 = "38822",
    v38822 = "38823",
    v38823 = "38824",
    v38824 = "38825",
    v38825 = "39028",
    v38826 = "38827",
    v38827 = "38828",
    v38828 = "38829",
    v38829 = "38835",
    v38830 = "39031",
    v38832 = "38821",
    v38833 = "39029",
    v38835 = "38830",
    v38836 = "38837",
    v38837 = "38838",
    v38838 = "38840",
    v38839 = "38867",
    v38840 = "38839",
    v38841 = "38877",
    v38842 = "38841",
    v38843 = "38842",
    v38844 = "38843",
    v38845 = "38887",
    v38846 = "38845",
    v38847 = "38844",
    v38848 = "38846",
    v38849 = "38847",
    v38850 = "38848",
    v38851 = "38849",
    v38852 = "38850",
    v38855 = "38851",
    v38856 = "38852",
    v38857 = "38855",
    v38858 = "38856",
    v38861 = "38857",
    v38862 = "38858",
    v38863 = "38861",
    v38864 = "38863",
    v38865 = "38862",
    v38866 = "38865",
    v38867 = "38864",
    v38868 = "38866",
    v38870 = "38868",
    v38871 = "39045",
    v38873 = "38870",
    v38877 = "38873",
    v38879 = "38871",
    v38880 = "38879",
    v38886 = "38880",
    v38887 = "38886",
    v38888 = "38892",
    v38892 = "38893",
    v38893 = "39041",
    v38894 = "38896",
    v38896 = "38897",
    v38897 = "38898",
    v38898 = "38899",
    v38899 = "38900",
    v38900 = "38901",
    v38901 = "38902",
    v38902 = "38903",
    v38903 = "38906",
    v38904 = "38907",
    v38905 = "38904",
    v38906 = "38905",
    v38907 = "38908",
    v38908 = "38909",
    v38909 = "38915",
    v38910 = "38913",
    v38911 = "38910",
    v38912 = "38911",
    v38913 = "38914",
    v38914 = "38916",
    v38915 = "38912",
    v38916 = "38918",
    v38918 = "38926",
    v38919 = "39070",
    v38920 = "38924",
    v38921 = "38927",
    v38922 = "38928",
    v38923 = "39021",
    v38924 = "38925",
    v38925 = "38919",
    v38926 = "38921",
    v38927 = "38922",
    v38928 = "38930",
    v38930 = "38936",
    v38935 = "38944",
    v38936 = "38937",
    v38937 = "38935",
    v38941 = "38946",
    v38943 = "38941",
    v38944 = "38943",
    v38945 = "38948",
    v38946 = "38958",
    v38947 = "38950",
    v38948 = "38947",
    v38949 = "38951",
    v38950 = "38949",
    v38951 = "38954",
    v38952 = "38957",
    v38954 = "38956",
    v38956 = "38952",
    v38957 = "38959",
    v38958 = "38945",
    v38959 = "38960",
    v38960 = "38961",
    v38961 = "38962",
    v38962 = "38963",
    v38963 = "38964",
    v38964 = "38994",
    v38965 = "38993",
    v38966 = "38965",
    v38967 = "38999",
    v38993 = "38967",
    v38994 = "38966",
    v38995 = "38996",
    v38996 = "38997",
    v38997 = "38998",
    v38998 = "39002",
    v38999 = "39000",
    v39000 = "39001",
    v39001 = "38995",
    v39002 = "39004",
    v39003 = "39005",
    v39004 = "39003",
    v39005 = "39007",
    v39006 = "39008",
    v39007 = "39006",
    v39008 = "39010",
    v39009 = "39011",
    v39010 = "39009",
    v39011 = "39014",
    v39014 = "39015",
    v39015 = "39016",
    v39016 = "39017",
    v39017 = "39019",
    v39019 = "39020",
    v39020 = "38923",
    v39021 = "39022",
    v39022 = "39023",
    v39023 = "39024",
    v39024 = "39025",
    v39025 = "38888",
    v39026 = "39027",
    v39027 = "38826",
    v39028 = "38836",
    v39029 = "39030",
    v39030 = "38817",
    v39031 = "39033",
    v39033 = "39034",
    v39034 = "38833",
    v39037 = "39038",
    v39038 = "39040",
    v39039 = "39037",
    v39040 = "39044",
    v39041 = "39043",
    v39042 = "39026",
    v39043 = "39039",
    v39044 = "39042",
    v39045 = "39063",
    v39046 = "39047",
    v39047 = "39048",
    v39048 = "39062",
    v39062 = "39067",
    v39063 = "39064",
    v39064 = "39065",
    v39065 = "39066",
    v39066 = "39046",
    v39067 = "39068",
    v39068 = "39069",
    v39069 = "38920",
    v39070 = "39071",
    v39071 = "39072",
    v39072 = "39073",
    v39073 = "39074",
    v39074 = "39077",
    v39075 = "39942",
    v39076 = "39075",
    v39077 = "39080",
    v39078 = "39967",
    v39079 = "39078",
    v39080 = "39101",
    v39081 = "39079",
    v39082 = "39081",
    v39083 = "39084",
    v39084 = "39085",
    v39085 = "39102",
    v39096 = "39083",
    v39097 = "39082",
    v39098 = "39096",
    v39099 = "39097",
    v39100 = "39098",
    v39101 = "39928",
    v39102 = "39099",
    v39927 = "39100",
    v39928 = "39930",
    v39929 = "39932",
    v39930 = "39933",
    v39931 = "39929",
    v39932 = "39927",
    v39933 = "39936",
    v39934 = "39931",
    v39935 = "39934",
    v39936 = "39937",
    v39937 = "39938",
    v39938 = "39935",
    v39939 = "39076",
    v39940 = "39939",
    v39941 = "39943",
    v39942 = "39941",
    v39943 = "39949",
    v39944 = "39946",
    v39945 = "39944",
    v39946 = "39948",
    v39947 = "39945",
    v39948 = "39950",
    v39949 = "39947",
    v39950 = "39953",
    v39951 = "39954",
    v39952 = "39951",
    v39953 = "39956",
    v39954 = "39957",
    v39955 = "39952",
    v39956 = "39958",
    v39957 = "39959",
    v39958 = "39955",
    v39959 = "39962",
    v39960 = "39963",
    v39961 = "ptcity",
    v39962 = "39965",
    v39963 = "39964",
    v39964 = "39961",
    v39965 = "39960",
    v39967 = "39969",
    v39968 = "39940",
    v39969 = "39971",
    v39970 = "39973",
    v39971 = "39975",
    v39972 = "39968",
    v39973 = "39977",
    v39974 = "39970",
    v39975 = "39979",
    v39976 = "39972",
    v39977 = "39980",
    v39978 = "39974",
    v39979 = "39982",
    v39980 = "39976",
    v39981 = "39978",
    v39982 = "39985",
    v39983 = "39988",
    v39984 = "39981",
    v39985 = "39989",
    v39986 = "39983",
    v39987 = "39986",
    v39988 = "39984",
    v39989 = "39991",
    v39990 = "39987",
    v39991 = "39990"
  },
  
  ["the Welto Trench"] = {
    v69888 = "69889",
    v69889 = "69968",
    v69968 = "69969",
    v69969 = "69970",
    v69970 = "69964",
    v69964 = "69890",
    v69890 = "69891",
    v69891 = "69963",
    v69963 = "69971",
    v69971 = "69972",
    v69972 = "69973",
    v69973 = "69960",
    v69960 = "69344",
    v69344 = "69351",
    v69351 = "69502",
    v69502 = "69503",
    v69503 = "69506",
    v69506 = "69887",
    v69887 = "69343",
    v69343 = "69342",
    v69342 = "69283",
    v69283 = "69281",
    v69281 = "69341",
    v69341 = "69336",
    v69336 = "69280",
    v69280 = "69324",
    v69324 = "69323",
    v69323 = "69277",
    v69277 = "69276",
    v69276 = "69274",
    v69274 = "69270",
    v69270 = "69322",
    v69322 = "69318",
    v69318 = "69268",
    v69268 = "69314",
    v69314 = "69267",
    v69267 = "69252",
    v69252 = "69227",
    v69227 = "69251",
    v69251 = "70192",
    v70192 = "70191",
    v70191 = "69266",
    v69266 = "69262",
    v69262 = "69261",
    v69261 = "69257",
    v69257 = "69256",
    v69256 = "70190",
    v70190 = "70189", 
    v70189 = "70188",
    v70188 = "70187",
    v70187 = "70186",
    v70186 = "70185",
    v70185 = "70184",
    v70184 = "69782",
    v69782 = "69781",
    v69781 = "69780",
    v69780 = "69779",
    v69779 = "69778",
    v69778 = "69776",
    v69776 = "69777",
    v69777 = "69775",
    v69775 = "69769",
    v69769 = "69773",
    v69773 = "69772",
    v69772 = "69771",
    v69771 = "69770",
    v69770 = "70136",
    v70136 = "69746",
    v69746 = "69747",
    v69747 = "70135",
    v70135 = "70129",
    v70129 = "70130",
    v70130 = "70135",
    v70135 = "70129",
    v70129 = "70074",
    v70074 = "69749",
    v69749 = "69751",
    v69751 = "69759",
    v69759 = "69760",
    v69760 = "69763",
    v69763 = "69764",
    v69764 = "69785",
    v69785 = "69786",
    v69786 = "69784",
    v69784 = "69460",
    v69460 = "69459",
    v69459 = "69353",
    v69353 = "69462",
    v69462 = "69463",
    v69463 = "69466",
    v69466 = "70065",
    v70065 = "69098",
    v69098 = "69122",
    v69122 = "69486",
    v69486 = "69484",
    v69484 = "65734",
    v65734 = "69602",
    v69602 = "69603",
    v69603 = "69487",
    v69487 = "69099",
    v69099 = "69100",
    v69100 = "69860",
    v69860 = "69861",
    v69861 = "69559",
    v69559 = "69540",
    v69540 = "69548",
    v69548 = "70125",
    v70125 = "69994",
    v69994 = "70028",
    v70028 = "69849",
    v69849 = "69850",
    v69850 = "69859",
    v69859 = "69852",
    v69852 = "69123",
    v69123 = "69125",
    v69125 = "69752",
    v69752 = "69897",
    v69897 = "69467",
    v69467 = "69488",
    v69488 = "69489",
    v69489 = "69501",
    v69501 = "69505",
    v69505 = "69686",
    v69686 = "69687",
    v69687 = "69688",
    v69688 = "69689",
    v69689 = "70225",
    v70225 = "69690",
    v69690 = "69693",
    v69693 = "69694",
    v69694 = "70032",
    v70032 = "69695",
    v69695 = "69700",
    v69700 = "69841",
    v69841 = "69901",
    v69901 = "69902",
    v69902 = "69696",
    v69696 = "69698",
    v69698 = "69699"
  },
  Xaanhal = {
    v36677 = "36678",
    v36678 = "36679",
    v36679 = "36680",
    v36680 = "36681",
    v36681 = "36682",
    v36682 = "36683",
    v36683 = "36684",
    v36684 = "36685",
    v36685 = "36686",
    v36686 = "36687",
    v36687 = "36689",
    v36688 = "36710",
    v36689 = "36690",
    v36690 = "36691",
    v36691 = "36692",
    v36692 = "36693",
    v36693 = "36694",
    v36694 = "36695",
    v36695 = "36696",
    v36696 = "36697",
    v36697 = "36698",
    v36698 = "36699",
    v36699 = "36700",
    v36700 = "36701",
    v36701 = "36705",
    v36702 = "36688",
    v36703 = "36702",
    v36704 = "36703",
    v36705 = "36706",
    v36706 = "36707",
    v36707 = "36708",
    v36708 = "36709",
    v36709 = "36704",
    v36710 = "36712",
    v36712 = "36713",
    v36713 = "36714",
    v36714 = "36715",
    v36715 = "36716",
    v36716 = "36717",
    v36717 = "36718",
    v36718 = "36719",
    v36719 = "36720",
    v36720 = "36721",
    v36721 = "36722",
    v36722 = "36723",
    v36723 = "36724",
    v36724 = "36745",
    v36725 = "36726",
    v36726 = "36727",
    v36727 = "36728",
    v36728 = "36786",
    v36729 = "36725",
    v36730 = "36729",
    v36731 = "36742",
    v36732 = "36731",
    v36733 = "36732",
    v36734 = "36733",
    v36735 = "36741",
    v36736 = "36735",
    v36737 = "36736",
    v36738 = "36737",
    v36739 = "36738",
    v36740 = "36739",
    v36741 = "36734",
    v36742 = "36743",
    v36743 = "36730",
    v36744 = "36746",
    v36745 = "36744",
    v36746 = "36740",
    v36752 = "36764",
    v36753 = "36784",
    v36754 = "ptcity",
    v36755 = "36754",
    v36756 = "36755",
    v36757 = "36756",
    v36758 = "36778",
    v36759 = "36758",
    v36760 = "36759",
    v36761 = "36765",
    v36762 = "36761",
    v36763 = "36762",
    v36764 = "36763",
    v36765 = "36766",
    v36766 = "36767",
    v36767 = "36768",
    v36768 = "36769",
    v36769 = "36770",
    v36770 = "36753",
    v36771 = "36783",
    v36772 = "36780",
    v36773 = "36772",
    v36774 = "36773",
    v36775 = "36777",
    v36776 = "36775",
    v36777 = "36757",
    v36778 = "36776",
    v36779 = "36774",
    v36780 = "36760",
    v36781 = "36779",
    v36782 = "36781",
    v36783 = "36782",
    v36784 = "36771",
    v36786 = "36752"
  },
  ["Yohanan Village"] = {
    v18903 = "19003",
    v18906 = "18907",
    v18907 = "18908",
    v18908 = "18909",
    v18909 = "18911",
    v18911 = "18912",
    v18912 = "18913",
    v18913 = "18914",
    v18914 = "18918",
    v18915 = "18995",
    v18916 = "18919",
    v18917 = "18921",
    v18918 = "18923",
    v18919 = "18915",
    v18921 = "18922",
    v18922 = "19808",
    v18923 = "18928",
    v18924 = "18926",
    v18925 = "18924",
    v18926 = "18927",
    v18927 = "18917",
    v18928 = "18929",
    v18929 = "18925",
    v18961 = "18916",
    v18962 = "18963",
    v18963 = "18965",
    v18964 = "18966",
    v18965 = "18964",
    v18966 = "18967",
    v18967 = "18961",
    v18995 = "18996",
    v18996 = "18997",
    v18997 = "18998",
    v18998 = "18999",
    v18999 = "19000",
    v19000 = "19001",
    v19001 = "19002",
    v19002 = "ptcity",
    v19003 = "18906",
    v19802 = "18903",
    v19808 = "18962"
  },
  ["Yuzurai village"] = {
    v59609 = "59610",
    v59610 = "59611",
    v59611 = "59620",
    v59613 = "59648",
    v59619 = "59613",
    v59620 = "59619",
    v59621 = "59921",
    v59647 = "59621",
    v59648 = "59647",
    v59694 = "59695",
    v59695 = "59698",
    v59697 = "59699",
    v59698 = "59697",
    v59699 = "ptcity",
    v59921 = "59988",
    v59988 = "60033",
    v59991 = "59995",
    v59992 = "59998",
    v59995 = "59996",
    v59996 = "59694",
    v59998 = "60005",
    v59999 = "59991",
    v60005 = "59999",
    v60030 = "60032",
    v60032 = "59992",
    v60033 = "60034",
    v60034 = "60030"
  },
  ["a basilisk lair"] = {
    v68354 = "69128",
    v68564 = "68597",
    v68597 = "68598",
    v68598 = "68617",
    v68604 = "68614",
    v68606 = "68564",
    v68607 = "68608",
    v68608 = "68609",
    v68609 = "68610",
    v68610 = "68612",
    v68611 = "68613",
    v68612 = "68611",
    v68613 = "68618",
    v68614 = "68616",
    v68615 = "68604",
    v68616 = "68607",
    v68617 = "68615",
    v68618 = "68619",
    v68619 = "68620",
    v68620 = "68622",
    v68621 = "68628",
    v68622 = "68623",
    v68623 = "68624",
    v68624 = "68625",
    v68625 = "68626",
    v68626 = "68627",
    v68627 = "68621",
    v68628 = "68629",
    v68629 = "68705",
    v68705 = "68706",
    v68706 = "68708",
    v68708 = "68712",
    v68709 = "68711",
    v68710 = "68709",
    v68711 = "68715",
    v68712 = "68713",
    v68713 = "68714",
    v68714 = "68710",
    v68715 = "68716",
    v68716 = "68717",
    v68717 = "68718",
    v68718 = "68719",
    v68719 = "68720",
    v68720 = "68723",
    v68723 = "68724",
    v68724 = "68725",
    v68725 = "68726",
    v68726 = "68727",
    v68727 = "ptcity",
    v68783 = "68787",
    v68784 = "68785",
    v68785 = "68783",
    v68786 = "68606",
    v68787 = "68786",
    v69128 = "69129",
    v69129 = "69130",
    v69130 = "69131",
    v69131 = "69132",
    v69132 = "69133",
    v69133 = "68784"
  },
  ["a snake pit"] = {
    v56346 = "56790",
    v56786 = "56792",
    v56790 = "56793",
    v56791 = "57242",
    v56792 = "56794",
    v56793 = "56795",
    v56794 = "56796",
    v56795 = "57174",
    v56796 = "56797",
    v56797 = "56807",
    v56807 = "57048",
    v56808 = "57050",
    v56942 = "56346",
    v57042 = "56808",
    v57043 = "57042",
    v57044 = "57043",
    v57045 = "57044",
    v57046 = "57045",
    v57047 = "57046",
    v57048 = "57047",
    v57049 = "57243",
    v57050 = "57051",
    v57051 = "57052",
    v57052 = "57049",
    v57174 = "57176",
    v57175 = "57184",
    v57176 = "57175",
    v57177 = "56791",
    v57178 = "57177",
    v57179 = "57178",
    v57180 = "57179",
    v57181 = "57180",
    v57182 = "57181",
    v57183 = "57182",
    v57184 = "57183",
    v57185 = "57186",
    v57186 = "57187",
    v57187 = "ptcity",
    v57188 = "57185",
    v57242 = "56786",
    v57243 = "57250",
    v57244 = "57252",
    v57245 = "57244",
    v57246 = "57188",
    v57247 = "57246",
    v57248 = "57251",
    v57249 = "57248",
    v57250 = "57249",
    v57251 = "57245",
    v57252 = "57253",
    v57253 = "57247"
  },
  ["a volcano"] = {
    v35217 = "35218",
    v35218 = "35219",
    v35219 = "35220",
    v35220 = "35221",
    v35221 = "35232",
    v35222 = "35223",
    v35223 = "35224",
    v35224 = "35225",
    v35225 = "35226",
    v35226 = "35253",
    v35227 = "35228",
    v35228 = "35229",
    v35229 = "35242",
    v35230 = "35231",
    v35231 = "35263",
    v35232 = "35233",
    v35233 = "35235",
    v35234 = "35236",
    v35235 = "35234",
    v35236 = "35238",
    v35237 = "35240",
    v35238 = "35239",
    v35239 = "35237",
    v35240 = "35241",
    v35241 = "35222",
    v35242 = "35243",
    v35243 = "35244",
    v35244 = "35245",
    v35245 = "35247",
    v35247 = "35249",
    v35248 = "35250",
    v35249 = "35252",
    v35250 = "35251",
    v35251 = "35230",
    v35252 = "35248",
    v35253 = "35255",
    v35254 = "35256",
    v35255 = "35254",
    v35256 = "35257",
    v35257 = "35258",
    v35258 = "35259",
    v35259 = "35260",
    v35260 = "35261",
    v35261 = "35262",
    v35262 = "35227",
    v35263 = "35264",
    v35264 = "35265",
    v35265 = "35266",
    v35266 = "35267",
    v35267 = "35268",
    v35268 = "35270",
    v35269 = "35272",
    v35270 = "35269",
    v35271 = "ptcity",
    v35272 = "35273",
    v35273 = "35274",
    v35274 = "35276",
    v35275 = "35271",
    v35276 = "35281",
    v35277 = "35275",
    v35281 = "35277"
  },
  ["the Arurer Haven"] = {
    v19320 = "19474",
    v19321 = "19476",
    v19443 = "19321",
    v19444 = "19443",
    v19445 = "19444",
    v19446 = "19445",
    v19447 = "19446",
    v19448 = "19447",
    v19449 = "19448",
    v19450 = "19449",
    v19451 = "19450",
    v19452 = "19451",
    v19453 = "19452",
    v19454 = "19453",
    v19455 = "19454",
    v19456 = "19504",
    v19457 = "19456",
    v19458 = "19457",
    v19459 = "19458",
    v19460 = "19459",
    v19461 = "19460",
    v19462 = "19461",
    v19463 = "19462",
    v19464 = "19463",
    v19465 = "19464",
    v19466 = "19465",
    v19467 = "19466",
    v19468 = "19467",
    v19469 = "19468",
    v19470 = "19469",
    v19471 = "19470",
    v19472 = "19471",
    v19473 = "19472",
    v19474 = "19473",
    v19475 = "19480",
    v19476 = "19477",
    v19477 = "19478",
    v19478 = "19479",
    v19479 = "19481",
    v19480 = "19483",
    v19481 = "19482",
    v19482 = "19475",
    v19483 = "19484",
    v19484 = "19485",
    v19485 = "19486",
    v19486 = "19488",
    v19487 = "19492",
    v19488 = "19487",
    v19489 = "19490",
    v19490 = "19491",
    v19491 = "19493",
    v19492 = "19489",
    v19493 = "19494",
    v19494 = "19495",
    v19495 = "19496",
    v19496 = "19497",
    v19497 = "19498",
    v19498 = "19499",
    v19499 = "19500",
    v19500 = "19502",
    v19501 = "ptcity",
    v19502 = "19503",
    v19503 = "19501",
    v19504 = "19505",
    v19505 = "19455"
  },
  ["the Augerweald"] = {
    v23048 = "23060",
    v23049 = "23048",
    v23050 = "23049",
    v23051 = "23050",
    v23052 = "23051",
    v23059 = "23052",
    v23060 = "23061",
    v23061 = "23062",
    v23062 = "23063",
    v23063 = "23064",
    v23064 = "23927",
    v23065 = "23107",
    v23107 = "23108",
    v23108 = "23109",
    v23109 = "23110",
    v23110 = "23907",
    v23111 = "23059",
    v23113 = "23111",
    v23781 = "23790",
    v23782 = "23796",
    v23784 = "23782",
    v23785 = "23786",
    v23786 = "23787",
    v23787 = "23784",
    v23788 = "23912",
    v23789 = "23798",
    v23790 = "23791",
    v23791 = "23792",
    v23792 = "23797",
    v23795 = "23928",
    v23796 = "23781",
    v23797 = "23789",
    v23798 = "23804",
    v23804 = "23795",
    v23907 = "23908",
    v23908 = "23909",
    v23909 = "23910",
    v23910 = "23911",
    v23911 = "ptcity",
    v23912 = "23913",
    v23913 = "23914",
    v23914 = "23915",
    v23915 = "23916",
    v23916 = "23922",
    v23922 = "24338",
    v23923 = "23788",
    v23924 = "23936",
    v23925 = "23924",
    v23926 = "23925",
    v23927 = "23926",
    v23928 = "23929",
    v23929 = "23930",
    v23930 = "23931",
    v23931 = "23932",
    v23932 = "23933",
    v23933 = "23934",
    v23934 = "23935",
    v23935 = "23065",
    v23936 = "23938",
    v23937 = "23923",
    v23938 = "23937",
    v24338 = "24339",
    v24339 = "24340",
    v24340 = "24341",
    v24341 = "23785"
  },
  ["the Ayhesa Cliffs"] = {
    v19987 = "19988",
    v19988 = "19989",
    v19989 = "19990",
    v19990 = "19997",
    v19997 = "19998",
    v19998 = "19999",
    v19999 = "20000",
    v20000 = "20001",
    v20001 = "20002",
    v20002 = "20003",
    v20003 = "20004",
    v20004 = "20005",
    v20005 = "20006",
    v20006 = "20007",
    v20007 = "20008",
    v20008 = "20009",
    v20009 = "20016",
    v20010 = "20012",
    v20011 = "20018",
    v20012 = "20013",
    v20013 = "20011",
    v20014 = "20010",
    v20016 = "20014",
    v20018 = "20019",
    v20019 = "20020",
    v20020 = "20021",
    v20021 = "20022",
    v20022 = "20023",
    v20023 = "20024",
    v20024 = "20030",
    v20025 = "ptcity",
    v20026 = "20027",
    v20027 = "20028",
    v20028 = "20029",
    v20029 = "20025",
    v20030 = "20031",
    v20031 = "20032",
    v20032 = "20026"
  },
  ["the Azdun dungeon"] = {
    v1773 = "1774",
    v1774 = "1775",
    v1775 = "1776",
    v1776 = "1777",
    v1777 = "1778",
    v1778 = "1779",
    v1779 = "1780",
    v1780 = "1781",
    v1781 = "1782",
    v1782 = "1783",
    v1783 = "1787",
    v1787 = "1788",
    v1788 = "1789",
    v1789 = "1790",
    v1790 = "1791",
    v1791 = "1793",
    v1792 = "ptcity",
    v1793 = "1792"
  },
  ["the Bakal Chasm"] = {
    v61011 = "61063",
    v61013 = "61014",
    v61014 = "61024",
    v61024 = "61025",
    v61025 = "61026",
    v61026 = "61027",
    v61027 = "61037",
    v61037 = "61062",
    v61040 = "61041",
    v61041 = "61043",
    v61043 = "61044",
    v61044 = "ptcity",
    v61045 = "61040",
    v61047 = "61048",
    v61048 = "61052",
    v61049 = "61051",
    v61051 = "61045",
    v61052 = "61049",
    v61055 = "61047",
    v61056 = "61055",
    v61057 = "61056",
    v61058 = "61057",
    v61059 = "61058",
    v61060 = "61059",
    v61061 = "61060",
    v61062 = "61061",
    v61063 = "61064",
    v61064 = "61065",
    v61065 = "61066",
    v61066 = "61067",
    v61067 = "61069",
    v61069 = "61117",
    v61073 = "61115",
    v61074 = "61013",
    v61075 = "61074",
    v61076 = "61128",
    v61077 = "61076",
    v61078 = "61131",
    v61079 = "61119",
    v61080 = "61079",
    v61112 = "61080",
    v61113 = "61121",
    v61114 = "61113",
    v61115 = "61114",
    v61116 = "61073",
    v61117 = "61116",
    v61118 = "61120",
    v61119 = "61118",
    v61120 = "61135",
    v61121 = "61122",
    v61122 = "61112",
    v61128 = "61075",
    v61131 = "61077",
    v61135 = "61136",
    v61136 = "61078"
  },
  ["the Barony of Dun Valley"] = {
    v34494 = "3800",
    v3795 = "3796",
    v3796 = "3799",
    v3798 = "3821",
    v3799 = "3801",
    v3800 = "3798",
    v3801 = "34494",
    v3802 = "3805",
    v3803 = "3802",
    v3804 = "3803",
    v3805 = "3806",
    v3806 = "3807",
    v3807 = "3809",
    v3808 = "3810",
    v3809 = "3808",
    v3810 = "3811",
    v3811 = "4695",
    v3821 = "3804",
    v4695 = "4696",
    v4696 = "4697",
    v4697 = "4698",
    v4698 = "4702",
    v4702 = "4709",
    v4709 = "4710",
    v4710 = "5109",
    v5029 = "5030",
    v5030 = "5031",
    v5031 = "5032",
    v5032 = "5033",
    v5033 = "5034",
    v5034 = "5035",
    v5035 = "5036",
    v5036 = "3795",
    v5062 = "ptcity",
    v5063 = "5062",
    v5064 = "5063",
    v5065 = "5064",
    v5066 = "5065",
    v5067 = "5066",
    v5068 = "5069",
    v5069 = "5070",
    v5070 = "5074",
    v5071 = "5072",
    v5072 = "5067",
    v5074 = "5071",
    v5075 = "5076",
    v5076 = "5068",
    v5077 = "5075",
    v5079 = "5077",
    v5080 = "5082",
    v5081 = "5079",
    v5082 = "5081",
    v5083 = "5080",
    v5084 = "5083",
    v5085 = "5084",
    v5086 = "5085",
    v5087 = "5086",
    v5088 = "5087",
    v5089 = "5088",
    v5090 = "5089",
    v5091 = "5092",
    v5092 = "5090",
    v5093 = "5094",
    v5094 = "5095",
    v5095 = "5096",
    v5096 = "5091",
    v5097 = "5093",
    v5098 = "5099",
    v5099 = "5097",
    v5100 = "5098",
    v5101 = "5100",
    v5102 = "5472",
    v5103 = "5104",
    v5104 = "5105",
    v5105 = "5101",
    v5106 = "5102",
    v5107 = "5106",
    v5108 = "5111",
    v5109 = "5108",
    v5110 = "5107",
    v5111 = "5110",
    v5472 = "5103"
  },
  ["the Bastion of Illdon"] = {
    v24410 = "24411",
    v24411 = "24412",
    v24412 = "24423",
    v24413 = "24424",
    v24414 = "24413",
    v24415 = "24414",
    v24416 = "24415",
    v24417 = "24416",
    v24418 = "24417",
    v24419 = "24418",
    v24420 = "24419",
    v24421 = "24420",
    v24422 = "24421",
    v24423 = "24422",
    v24424 = "24425",
    v24425 = "24426",
    v24426 = "24531",
    v24531 = "24532",
    v24532 = "24533",
    v24533 = "24534",
    v24534 = "24535",
    v24535 = "24536",
    v24536 = "24538",
    v24537 = "24926",
    v24538 = "24539",
    v24539 = "24540",
    v24540 = "24542",
    v24541 = "24537",
    v24542 = "24543",
    v24543 = "24544",
    v24544 = "24545",
    v24545 = "24541",
    v24546 = "24598",
    v24547 = "24546",
    v24598 = "24599",
    v24599 = "24614",
    v24600 = "24547",
    v24612 = "24615",
    v24613 = "24600",
    v24614 = "24612",
    v24615 = "24619",
    v24617 = "24621",
    v24619 = "24623",
    v24621 = "24622",
    v24622 = "24624",
    v24623 = "24617",
    v24624 = "24625",
    v24625 = "24884",
    v24626 = "24882",
    v24882 = "24887",
    v24883 = "24890",
    v24884 = "24885",
    v24885 = "24892",
    v24886 = "24906",
    v24887 = "24883",
    v24888 = "24889",
    v24889 = "24900",
    v24890 = "24888",
    v24891 = "24894",
    v24892 = "24891",
    v24893 = "24886",
    v24894 = "24896",
    v24895 = "24893",
    v24896 = "24897",
    v24897 = "24898",
    v24898 = "24899",
    v24899 = "24895",
    v24900 = "24901",
    v24901 = "24902",
    v24902 = "24903",
    v24903 = "24904",
    v24904 = "24905",
    v24905 = "ptcity",
    v24906 = "24911",
    v24907 = "24626",
    v24908 = "24909",
    v24909 = "24910",
    v24910 = "24907",
    v24911 = "24912",
    v24912 = "24913",
    v24913 = "24914",
    v24914 = "24915",
    v24915 = "24916",
    v24916 = "24917",
    v24917 = "24918",
    v24918 = "24920",
    v24919 = "24921",
    v24920 = "24919",
    v24921 = "24908",
    v24926 = "24927",
    v24927 = "24928",
    v24928 = "24613",
    v4964 = "24410"
  },
  ["the Bloodwood"] = {
    v57535 = "57536",
    v57536 = "57537",
    v57537 = "57573",
    v57542 = "57535",
    v57543 = "57542",
    v57544 = "57552",
    v57547 = "74773",
    v57552 = "57554",
    v57554 = "57555",
    v57555 = "57572",
    v57570 = "57583",
    v57572 = "57570",
    v57573 = "57582",
    v57581 = "57589",
    v57582 = "57581",
    v57583 = "57584",
    v57584 = "57585",
    v57585 = "57588",
    v57588 = "57604",
    v57589 = "57590",
    v57590 = "57600",
    v57599 = "57601",
    v57600 = "57599",
    v57601 = "57602",
    v57602 = "57613",
    v57603 = "57547",
    v57604 = "57603",
    v57612 = "57614",
    v57613 = "57612",
    v57614 = "ptcity",
    v74773 = "57543"
  },
  ["the Cathedral of Gloaming"] = {
    v22702 = "22703",
    v22703 = "22709",
    v22709 = "22710",
    v22710 = "22711",
    v22711 = "22796",
    v22796 = "22797",
    v22797 = "22798",
    v22798 = "22802",
    v22799 = "22800",
    v22800 = "22801",
    v22801 = "22803",
    v22802 = "24783",
    v22803 = "22804",
    v22804 = "22805",
    v22805 = "22812",
    v22806 = "22814",
    v22807 = "22809",
    v22808 = "22815",
    v22809 = "22808",
    v22810 = "ptcity",
    v22811 = "22810",
    v22812 = "22806",
    v22813 = "22807",
    v22814 = "22813",
    v22815 = "22820",
    v22816 = "22817",
    v22817 = "22811",
    v22820 = "22821",
    v22821 = "22822",
    v22822 = "22823",
    v22823 = "22816",
    v22853 = "24722",
    v24722 = "22799",
    v24723 = "22853",
    v24783 = "24723"
  },
  ["the Caverns of Mor"] = {
    v19344 = "19346",
    v19346 = "19351",
    v19351 = "19352",
    v19352 = "19353",
    v19353 = "19354",
    v19354 = "19355",
    v19355 = "19356",
    v19356 = "19357",
    v19357 = "19358",
    v19358 = "19360",
    v19359 = "19361",
    v19360 = "19359",
    v19361 = "19362",
    v19362 = "19363",
    v19363 = "19364",
    v19364 = "19365",
    v19365 = "19413",
    v19413 = "19414",
    v19414 = "19415",
    v19415 = "19416",
    v19416 = "19417",
    v19417 = "19418",
    v19418 = "19419",
    v19419 = "19424",
    v19420 = "19421",
    v19421 = "19422",
    v19422 = "19423",
    v19423 = "19429",
    v19424 = "19425",
    v19425 = "19426",
    v19426 = "19427",
    v19427 = "19420",
    v19429 = "19441",
    v19430 = "19506",
    v19431 = "19430",
    v19432 = "19433",
    v19433 = "19431",
    v19434 = "19435",
    v19435 = "19436",
    v19436 = "19432",
    v19437 = "19442",
    v19438 = "19437",
    v19439 = "19438",
    v19440 = "19439",
    v19441 = "19440",
    v19442 = "19434",
    v19506 = "19507",
    v19507 = "19508",
    v19508 = "19509",
    v19509 = "19510",
    v19510 = "19511",
    v19511 = "19512",
    v19512 = "19514",
    v19513 = "19515",
    v19514 = "19513",
    v19515 = "19516",
    v19516 = "19517",
    v19517 = "19518",
    v19518 = "19519",
    v19519 = "ptcity"
  },
  ["the Caverns of Telfinne"] = {
    v20932 = "20933",
    v20933 = "20934",
    v20934 = "20935",
    v20935 = "20936",
    v20936 = "20938",
    v20937 = "20939",
    v20938 = "20937",
    v20939 = "20940",
    v20940 = "20941",
    v20941 = "20942",
    v20942 = "20943",
    v20943 = "20944",
    v20944 = "20945",
    v20945 = "20946",
    v20946 = "20947",
    v20947 = "20948",
    v20948 = "20949",
    v20949 = "20950",
    v20950 = "20951",
    v20951 = "20952",
    v20952 = "20953",
    v20953 = "20954",
    v20954 = "20955",
    v20955 = "20956",
    v20956 = "20957",
    v20957 = "20958",
    v20958 = "20959",
    v20959 = "20960",
    v20960 = "20961",
    v20961 = "20962",
    v20962 = "20963",
    v20963 = "20964",
    v20964 = "20965",
    v20965 = "20966",
    v20966 = "20983",
    v20967 = "20974",
    v20968 = "20969",
    v20969 = "20971",
    v20970 = "20972",
    v20971 = "20970",
    v20972 = "20967",
    v20973 = "20978",
    v20974 = "20975",
    v20975 = "20973",
    v20976 = "20979",
    v20977 = "20984",
    v20978 = "20976",
    v20979 = "20980",
    v20980 = "20981",
    v20981 = "20982",
    v20982 = "20977",
    v20983 = "20968",
    v20984 = "20985",
    v20985 = "20986",
    v20986 = "20987",
    v20987 = "20988",
    v20988 = "20989",
    v20989 = "20990",
    v20990 = "20991",
    v20991 = "20992",
    v20992 = "20993",
    v20993 = "20994",
    v20994 = "20995",
    v20995 = "20996",
    v20996 = "20997",
    v20997 = "20999",
    v20998 = "21000",
    v20999 = "20998",
    v21000 = "22284",
    v22284 = "22285",
    v22285 = "22286",
    v22286 = "22287",
    v22287 = "22288",
    v22288 = "22289",
    v22289 = "22290",
    v22290 = "22291",
    v22291 = "22292",
    v22292 = "22293",
    v22293 = "22294",
    v22294 = "22297",
    v22295 = "22296",
    v22296 = "ptcity",
    v22297 = "22295"
  },
  ["the Centipede Cave"] = {
    v22824 = "22825",
    v22825 = "22826",
    v22826 = "22828",
    v22828 = "22829",
    v22829 = "22830",
    v22830 = "60267",
    v22831 = "22832",
    v22832 = "22833",
    v22833 = "22834",
    v22834 = "22836",
    v22836 = "22837",
    v22837 = "22838",
    v22838 = "22839",
    v22839 = "22850",
    v22840 = "22841",
    v22841 = "22842",
    v22842 = "22843",
    v22843 = "22844",
    v22844 = "22845",
    v22845 = "22847",
    v22846 = "ptcity",
    v22847 = "22848",
    v22848 = "22849",
    v22849 = "22846",
    v22850 = "22851",
    v22851 = "22852",
    v22852 = "22840",
    v60267 = "60268",
    v60268 = "60269",
    v60269 = "60270",
    v60270 = "60271",
    v60271 = "60272",
    v60272 = "60273",
    v60273 = "60274",
    v60274 = "22831"
  },
  ["the Central Wilderness"] = {
    v11312 = "11319",
    v11317 = "11312",
    v11318 = "11320",
    v11319 = "11335",
    v11320 = "11317",
    v11321 = "11322",
    v11322 = "11318",
    v11323 = "11321",
    v11324 = "11323",
    v11325 = "11324",
    v11326 = "11325",
    v11327 = "ptcity",
    v11328 = "11327",
    v11329 = "11331",
    v11330 = "11329",
    v11331 = "11328",
    v11332 = "11449",
    v11333 = "11330",
    v11334 = "11332",
    v11335 = "11338",
    v11338 = "11339",
    v11339 = "11340",
    v11340 = "11341",
    v11341 = "11334",
    v11449 = "11450",
    v11450 = "11452",
    v11451 = "11333",
    v11452 = "11453",
    v11453 = "11454",
    v11454 = "11451"
  },
  ["the Crags"] = {
    v19311 = "19317",
    v19312 = "21235",
    v19313 = "19312",
    v19317 = "19313",
    v19318 = "19325",
    v19325 = "19326",
    v19326 = "19343",
    v19343 = "19596",
    v19589 = "19907",
    v19590 = "19589",
    v19591 = "19590",
    v19596 = "19599",
    v19599 = "19708",
    v19708 = "19709",
    v19709 = "19710",
    v19710 = "19711",
    v19711 = "19803",
    v19803 = "19868",
    v19804 = "19805",
    v19805 = "20074",
    v19806 = "19804",
    v19867 = "19591",
    v19868 = "19806",
    v19907 = "20073",
    v19908 = "19867",
    v19914 = "19908",
    v19915 = "19914",
    v20073 = "ptcity",
    v20074 = "19915",
    v21234 = "19318",
    v21235 = "21234"
  },
  ["the Dakhota hills"] = {
    v1076 = "1077",
    v1077 = "1078",
    v1078 = "1085",
    v1079 = "1080",
    v1080 = "1076",
    v1082 = "1079",
    v1083 = "1098",
    v1085 = "1086",
    v1086 = "1088",
    v1088 = "56511",
    v1089 = "1090",
    v1090 = "56281",
    v1091 = "1095",
    v1092 = "1093",
    v1093 = "1094",
    v1094 = "1083",
    v1095 = "1092",
    v1096 = "1106",
    v1097 = "1096",
    v1098 = "1097",
    v1099 = "1082",
    v1101 = "1099",
    v1104 = "1105",
    v1105 = "1111",
    v1106 = "1104",
    v1111 = "1114",
    v1112 = "1123",
    v1113 = "1112",
    v1114 = "1113",
    v1121 = "1122",
    v1122 = "1147",
    v1123 = "1121",
    v1125 = "1101",
    v1126 = "1127",
    v1127 = "1125",
    v1133 = "1126",
    v1134 = "1133",
    v1135 = "1134",
    v1141 = "1135",
    v1142 = "1141",
    v1145 = "1151",
    v1146 = "1145",
    v1147 = "1146",
    v1148 = "1178",
    v1149 = "1148",
    v1150 = "1149",
    v1151 = "1150",
    v1153 = "1142",
    v1154 = "1153",
    v1155 = "1156",
    v1156 = "1165",
    v1165 = "1154",
    v1177 = "297",
    v1178 = "1177",
    v296 = "ptcity",
    v297 = "296",
    v56279 = "56280",
    v56280 = "1091",
    v56281 = "56279",
    v56511 = "1089"
  },
  ["the Dolbodi Campsite"] = {
    v19323 = "19324",
    v19324 = "19334",
    v19334 = "19335",
    v19335 = "19336",
    v19336 = "19337",
    v19337 = "19338",
    v19338 = "19339",
    v19339 = "19340",
    v19340 = "19341",
    v19341 = "19342",
    v19342 = "19349",
    v19345 = "19350",
    v19347 = "19345",
    v19348 = "19347",
    v19349 = "19348",
    v19350 = "19366",
    v19366 = "19367",
    v19367 = "19368",
    v19368 = "19370",
    v19369 = "19406",
    v19370 = "19378",
    v19371 = "19381",
    v19372 = "19371",
    v19373 = "19374",
    v19374 = "19375",
    v19375 = "19379",
    v19376 = "19373",
    v19377 = "19376",
    v19378 = "19377",
    v19379 = "19380",
    v19380 = "19372",
    v19381 = "19382",
    v19382 = "19384",
    v19383 = "19396",
    v19384 = "19386",
    v19385 = "19383",
    v19386 = "19388",
    v19387 = "19385",
    v19388 = "19393",
    v19389 = "19387",
    v19390 = "19389",
    v19391 = "19392",
    v19392 = "19390",
    v19393 = "19391",
    v19394 = "19369",
    v19395 = "19394",
    v19396 = "19395",
    v19397 = "19399",
    v19398 = "19400",
    v19399 = "19409",
    v19400 = "19401",
    v19401 = "ptcity",
    v19402 = "19398",
    v19403 = "19411",
    v19404 = "19403",
    v19405 = "19404",
    v19406 = "19405",
    v19407 = "19412",
    v19408 = "19407",
    v19409 = "19402",
    v19411 = "19408",
    v19412 = "19397"
  },
  ["the Dramedo Warrens"] = {
    v58207 = "58208",
    v58208 = "58209",
    v58209 = "58210",
    v58210 = "58211",
    v58211 = "58212",
    v58212 = "58213",
    v58213 = "58215",
    v58214 = "58236",
    v58215 = "58216",
    v58216 = "58217",
    v58217 = "58218",
    v58218 = "58214",
    v58236 = "58237",
    v58237 = "58240",
    v58238 = "58246",
    v58239 = "58242",
    v58240 = "58241",
    v58241 = "58238",
    v58242 = "58243",
    v58243 = "58244",
    v58244 = "58245",
    v58245 = "58247",
    v58246 = "58239",
    v58247 = "58248",
    v58248 = "58249",
    v58249 = "58250",
    v58250 = "58252",
    v58251 = "58258",
    v58252 = "58253",
    v58253 = "58254",
    v58254 = "58255",
    v58255 = "58256",
    v58256 = "58259",
    v58257 = "58251",
    v58258 = "58264",
    v58259 = "58260",
    v58260 = "58261",
    v58261 = "58262",
    v58262 = "58263",
    v58263 = "58257",
    v58264 = "58266",
    v58266 = "58267",
    v58267 = "58268",
    v58268 = "58269",
    v58269 = "58270",
    v58270 = "58272",
    v58271 = "58279",
    v58272 = "58273",
    v58273 = "58274",
    v58274 = "58271",
    v58275 = "58280",
    v58276 = "58275",
    v58277 = "58276",
    v58278 = "58277",
    v58279 = "58278",
    v58280 = "58281",
    v58281 = "58282",
    v58282 = "58283",
    v58283 = "58284",
    v58284 = "58288",
    v58285 = "58286",
    v58286 = "58287",
    v58287 = "58290",
    v58288 = "58289",
    v58289 = "58285",
    v58290 = "58291",
    v58291 = "58292",
    v58292 = "58293",
    v58293 = "58294",
    v58294 = "58295",
    v58295 = "58296",
    v58296 = "58297",
    v58297 = "58300",
    v58298 = "58303",
    v58299 = "58304",
    v58300 = "58306",
    v58301 = "58302",
    v58302 = "58299",
    v58303 = "58307",
    v58304 = "58298",
    v58305 = "ptcity",
    v58306 = "58301",
    v58307 = "58305"
  },
  ["the Eresh Mines"] = {
    v15344 = "15346",
    v15346 = "15347",
    v15347 = "15350",
    v15348 = "15369",
    v15349 = "15351",
    v15350 = "15349",
    v15351 = "15352",
    v15352 = "15353",
    v15353 = "15354",
    v15354 = "15355",
    v15355 = "15356",
    v15356 = "15368",
    v15367 = "15348",
    v15368 = "15367",
    v15369 = "15371",
    v15370 = "15404",
    v15371 = "15374",
    v15372 = "15373",
    v15373 = "15370",
    v15374 = "15390",
    v15375 = "15376",
    v15376 = "15377",
    v15377 = "15391",
    v15390 = "15375",
    v15391 = "15392",
    v15392 = "15393",
    v15393 = "15394",
    v15394 = "15372",
    v15395 = "15396",
    v15396 = "ptcity",
    v15404 = "15405",
    v15405 = "15395"
  },
  ["the Fengard Keep"] = {
  v18761 = "18767",
  v18762 = "18763",
  v18763 = "18764",
  v18764 = "18765",
  v18765 = "18766",
  v18766 = "18778",
  v18767 = "18768",
  v18768 = "18769",
  v18769 = "18770",
  v18770 = "18771",
  v18771 = "18772",
  v18772 = "18773",
  v18773 = "18774",
  v18774 = "18775",
  v18775 = "18777",
  v18777 = "18762",
  v18778 = "18779",
  v18779 = "18780",
  v18780 = "18782",
  v18782 = "18793",
  v18783 = "19772",
  v18784 = "18785",
  v18785 = "18786",
  v18786 = "18791",
  v18787 = "18788",
  v18788 = "18789",
  v18789 = "18790",
  v18790 = "18792",
  v18791 = "18787",
  v18792 = "18783",
  v18793 = "18795",
  v18794 = "18784",
  v18795 = "18796",
  v18796 = "18799",
  v18797 = "18798",
  v18798 = "18794",
  v18799 = "18800",
  v18800 = "18797",
  v18801 = "18804",
  v18802 = "18816",
  v18804 = "18805",
  v18805 = "18806",
  v18806 = "18809",
  v18807 = "18808",
  v18808 = "18839",
  v18809 = "18811",
  v18810 = "18812",
  v18811 = "18810",
  v18812 = "18813",
  v18813 = "18814",
  v18814 = "18815",
  v18815 = "18807",
  v18816 = "18817",
  v18817 = "18820",
  v18818 = "18819",
  v18819 = "18827",
  v18820 = "18822",
  v18821 = "19753",
  v18822 = "18823",
  v18823 = "18825",
  v18824 = "18818",
  v18825 = "18824",
  v18827 = "18828",
  v18828 = "18829",
  v18829 = "18830",
  v18830 = "18831",
  v18831 = "18832",
  v18832 = "18833",
  v18833 = "18834",
  v18834 = "18835",
  v18835 = "18836",
  v18836 = "18837",
  v18837 = "18838",
  v18838 = "18821",
  v18839 = "18840",
  v18840 = "18841",
  v18841 = "18842",
  v18842 = "18844",
  v18843 = "18846",
  v18844 = "18845",
  v18845 = "18843",
  v18846 = "18847",
  v18847 = "18848",
  v18848 = "18849",
  v18849 = "18850",
  v18850 = "18851",
  v18851 = "18852",
  v18852 = "18802",
  v19053 = "19054",
  v19054 = "19055",
  v19055 = "19056",
  v19056 = "19057",
  v19057 = "19058",
  v19058 = "19059",
  v19059 = "19060",
  v19060 = "19061",
  v19061 = "19062",
  v19062 = "19063",
  v19063 = "19064",
  v19064 = "19065",
  v19065 = "19066",
  v19066 = "19067",
  v19067 = "19068",
  v19068 = "19069",
  v19069 = "19070",
  v19070 = "19071",
  v19071 = "19072",
  v19072 = "19073",
  v19073 = "19074",
  v19074 = "19075",
  v19075 = "19076",
  v19076 = "19077",
  v19077 = "19078",
  v19078 = "19079",
  v19079 = "19080",
  v19080 = "19081",
  v19081 = "19082",
  v19082 = "19083",
  v19083 = "19084",
  v19084 = "19085",
  v19085 = "19086",
  v19086 = "19087",
  v19087 = "19090",
  v19088 = "19720",
  v19089 = "19053",
  v19090 = "19091",
  v19091 = "19099",
  v19092 = "19088",
  v19093 = "19094",
  v19094 = "19092",
  v19095 = "19093",
  v19096 = "19095",
  v19097 = "19096",
  v19098 = "19097",
  v19099 = "19100",
  v19100 = "19098",
  v19712 = "19713",
  v19713 = "19714",
  v19714 = "19715",
  v19715 = "19717",
  v19716 = "19718",
  v19717 = "19716",
  v19718 = "19719",
  v19719 = "19089",
  v19720 = "19721",
  v19721 = "19722",
  v19722 = "19723",
  v19723 = "19724",
  v19724 = "19725",
  v19725 = "19726",
  v19726 = "19727",
  v19727 = "19728",
  v19728 = "19729",
  v19729 = "19730",
  v19730 = "19731",
  v19731 = "19732",
  v19732 = "19735",
  v19735 = "19736",
  v19736 = "19737",
  v19737 = "19738",
  v19738 = "19739",
  v19739 = "19740",
  v19740 = "19741",
  v19741 = "19742",
  v19742 = "19743",
  v19743 = "19744",
  v19744 = "19745",
  v19745 = "19746",
  v19746 = "19747",
  v19747 = "19748",
  v19748 = "19749",
  v19749 = "19750",
  v19750 = "19751",
  v19751 = "19752",
  v19752 = "18801",
  v19753 = "19754",
  v19754 = "19755",
  v19755 = "19756",
  v19756 = "19757",
  v19757 = "19758",
  v19758 = "19759",
  v19759 = "19760",
  v19760 = "19761",
  v19761 = "19762",
  v19762 = "19763",
  v19763 = "19764",
  v19764 = "19765",
  v19765 = "19766",
  v19766 = "19767",
  v19767 = "19768",
  v19768 = "19769",
  v19769 = "19770",
  v19770 = "19771",
  v19771 = "19773",
  v19772 = "ptcity",
  v19773 = "19774",
  v19774 = "18761"
},
  ["the Feral Caves"] = {
    v16271 = "16278",
    v16272 = "16277",
    v16273 = "16271",
    v16274 = "16275",
    v16275 = "16276",
    v16276 = "16272",
    v16277 = "16273",
    v16278 = "16280",
    v16279 = "16317",
    v16280 = "16281",
    v16281 = "16279",
    v16312 = "16329",
    v16317 = "16312",
    v16318 = "16433",
    v16319 = "16321",
    v16320 = "16322",
    v16321 = "16431",
    v16322 = "16323",
    v16323 = "16325",
    v16324 = "16568",
    v16325 = "16326",
    v16326 = "16324",
    v16327 = "16319",
    v16329 = "16430",
    v16430 = "16318",
    v16431 = "16432",
    v16432 = "16434",
    v16433 = "16327",
    v16434 = "16320",
    v16568 = "16569",
    v16569 = "16570",
    v16570 = "16571",
    v16571 = "16572",
    v16572 = "16574",
    v16573 = "16580",
    v16574 = "16577",
    v16575 = "16576",
    v16576 = "16573",
    v16577 = "16575",
    v16580 = "ptcity"
  },
  ["the Festering Wastes"] = {
    v20713 = "20714",
    v20714 = "20716",
    v20715 = "20713",
    v20716 = "20717",
    v20717 = "20731",
    v20718 = "20719",
    v20719 = "20715",
    v20720 = "20723",
    v20721 = "20718",
    v20722 = "20721",
    v20723 = "20724",
    v20724 = "20726",
    v20726 = "20722",
    v20729 = "20817",
    v20730 = "20729",
    v20731 = "20732",
    v20732 = "20730",
    v20733 = "20720",
    v20734 = "20733",
    v20735 = "20734",
    v20736 = "20735",
    v20737 = "20736",
    v20738 = "20737",
    v20739 = "20835",
    v20740 = "20741",
    v20741 = "20739",
    v20742 = "ptcity",
    v20743 = "20744",
    v20744 = "20740",
    v20745 = "20742",
    v20748 = "20749",
    v20749 = "20750",
    v20750 = "20743",
    v20751 = "20748",
    v20752 = "20753",
    v20753 = "20745",
    v20754 = "20757",
    v20755 = "20751",
    v20756 = "20755",
    v20757 = "20756",
    v20758 = "20752",
    v20759 = "20758",
    v20760 = "20759",
    v20761 = "20760",
    v20762 = "20763",
    v20763 = "20761",
    v20764 = "20762",
    v20765 = "20764",
    v20766 = "20765",
    v20767 = "20766",
    v20768 = "20767",
    v20769 = "20768",
    v20770 = "20769",
    v20771 = "20770",
    v20772 = "20797",
    v20773 = "20772",
    v20777 = "20773",
    v20778 = "20779",
    v20779 = "20780",
    v20780 = "20777",
    v20784 = "20778",
    v20785 = "20784",
    v20787 = "20785",
    v20788 = "20787",
    v20789 = "20793",
    v20790 = "20788",
    v20791 = "20790",
    v20792 = "20800",
    v20793 = "20791",
    v20794 = "20795",
    v20795 = "20789",
    v20796 = "20771",
    v20797 = "20796",
    v20798 = "20794",
    v20800 = "20801",
    v20801 = "20802",
    v20802 = "20809",
    v20804 = "20798",
    v20805 = "20804",
    v20806 = "20805",
    v20807 = "20806",
    v20808 = "20807",
    v20809 = "20810",
    v20810 = "20811",
    v20811 = "20808",
    v20812 = "20792",
    v20813 = "20814",
    v20814 = "20815",
    v20815 = "20812",
    v20816 = "20813",
    v20817 = "20816",
    v20835 = "20738"
  },
  ["the Forgotten Dome"] = {
    v54770 = "55120",
    v55015 = "56071",
    v55120 = "55123",
    v55123 = "55137",
    v55137 = "55138",
    v55138 = "55151",
    v55151 = "55153",
    v55153 = "55154",
    v55154 = "55187",
    v55187 = "56107",
    v55706 = "55707",
    v55707 = "56245",
    v55708 = "55709",
    v55709 = "55706",
    v55711 = "56247",
    v55712 = "56232",
    v56070 = "56075",
    v56071 = "56070",
    v56072 = "56073",
    v56073 = "56074",
    v56074 = "56081",
    v56075 = "56076",
    v56076 = "56077",
    v56077 = "56083",
    v56078 = "55015",
    v56079 = "56078",
    v56081 = "56082",
    v56082 = "56079",
    v56083 = "56084",
    v56084 = "56085",
    v56085 = "56091",
    v56086 = "56087",
    v56087 = "56088",
    v56088 = "56072",
    v56091 = "56093",
    v56092 = "56095",
    v56093 = "56094",
    v56094 = "56101",
    v56095 = "56096",
    v56096 = "56086",
    v56097 = "56092",
    v56098 = "56097",
    v56099 = "56098",
    v56100 = "56106",
    v56101 = "55711",
    v56102 = "56100",
    v56103 = "56102",
    v56104 = "56103",
    v56105 = "56099",
    v56106 = "56105",
    v56107 = "56108",
    v56108 = "56110",
    v56109 = "56186",
    v56110 = "56197",
    v56186 = "56187",
    v56187 = "56188",
    v56188 = "56189",
    v56189 = "56221",
    v56190 = "56200",
    v56191 = "56201",
    v56192 = "56193",
    v56193 = "56195",
    v56194 = "56205",
    v56195 = "56194",
    v56196 = "56213",
    v56197 = "56217",
    v56198 = "56109",
    v56199 = "56198",
    v56200 = "56199",
    v56201 = "56204",
    v56202 = "56190",
    v56203 = "56202",
    v56204 = "56203",
    v56205 = "56208",
    v56206 = "56209",
    v56207 = "56206",
    v56208 = "56207",
    v56209 = "56210",
    v56210 = "56212",
    v56211 = "56191",
    v56212 = "56211",
    v56213 = "56216",
    v56214 = "56192",
    v56215 = "56214",
    v56216 = "56215",
    v56217 = "56218",
    v56218 = "56219",
    v56219 = "56220",
    v56220 = "56196",
    v56221 = "56104",
    v56222 = "ptcity",
    v56223 = "56224",
    v56224 = "56222",
    v56225 = "56223",
    v56226 = "55712",
    v56227 = "56230",
    v56228 = "56229",
    v56229 = "56226",
    v56230 = "56231",
    v56231 = "56228",
    v56232 = "56233",
    v56233 = "56236",
    v56234 = "56235",
    v56235 = "56225",
    v56236 = "56237",
    v56237 = "56234",
    v56238 = "56243",
    v56239 = "56238",
    v56240 = "56239",
    v56241 = "56242",
    v56242 = "56227",
    v56243 = "56244",
    v56244 = "56241",
    v56245 = "56246",
    v56246 = "56240",
    v56247 = "55708"
  },
  ["the Fractal Bloom"] = {
    v62996 = "63002",
    v63002 = "63003",
    v63003 = "63009",
    v63004 = "63026",
    v63009 = "63004",
    v63026 = "63027",
    v63027 = "63028",
    v63028 = "63030",
    v63029 = "63035",
    v63030 = "63029",
    v63035 = "63036",
    v63036 = "63037",
    v63037 = "63038",
    v63038 = "63039",
    v63039 = "ptcity"
  },
  ["the Hlugnic Labyrinth"] = {
    v11976 = "ptcity",
    v56354 = "56355",
    v56355 = "57420",
    v56356 = "56358",
    v56358 = "57636",
    v57334 = "57335",
    v57335 = "57336",
    v57336 = "57337",
    v57337 = "57338",
    v57338 = "57339",
    v57339 = "57340",
    v57340 = "57342",
    v57341 = "56356",
    v57342 = "56354",
    v57420 = "57341",
    v57625 = "57628",
    v57626 = "57625",
    v57627 = "57626",
    v57628 = "57629",
    v57629 = "57630",
    v57630 = "57631",
    v57631 = "57632",
    v57632 = "58265",
    v57633 = "57634",
    v57634 = "57635",
    v57635 = "11976",
    v57636 = "57627",
    v58265 = "57633"
  },
  ["the Holy Impire of Sehal"] = {
    v24475 = "24476",
    v24476 = "24477",
    v24477 = "24478",
    v24478 = "24479",
    v24479 = "24480",
    v24480 = "24481",
    v24481 = "24485",
    v24482 = "24483",
    v24483 = "24484",
    v24484 = "24487",
    v24485 = "24486",
    v24486 = "24482",
    v24487 = "24488",
    v24488 = "24489",
    v24489 = "24490",
    v24490 = "24491",
    v24491 = "24502",
    v24492 = "24493",
    v24493 = "24494",
    v24494 = "24495",
    v24495 = "24505",
    v24496 = "24492",
    v24497 = "24496",
    v24498 = "24499",
    v24499 = "24497",
    v24500 = "24501",
    v24501 = "24498",
    v24502 = "24504",
    v24503 = "24500",
    v24504 = "24503",
    v24505 = "24513",
    v24506 = "24507",
    v24507 = "24512",
    v24508 = "24509",
    v24509 = "24510",
    v24510 = "ptcity",
    v24511 = "24508",
    v24512 = "24511",
    v24513 = "24514",
    v24514 = "24515",
    v24515 = "24516",
    v24516 = "24517",
    v24517 = "24522",
    v24518 = "24519",
    v24519 = "24506",
    v24520 = "24518",
    v24521 = "24520",
    v24522 = "24521"
  },
  ["the Ia'shal Barrow"] = {
    v4410 = "8671",
    v48869 = "48870",
    v48870 = "48871",
    v48871 = "8685",
    v49031 = "49032",
    v49032 = "49033",
    v49033 = "49034",
    v49034 = "49035",
    v49035 = "49037",
    v49036 = "49038",
    v49037 = "49036",
    v49038 = "48869",
    v5513 = "8684",
    v5514 = "6826",
    v5517 = "8670",
    v5518 = "5517",
    v5519 = "5521",
    v5520 = "5513",
    v5521 = "6818",
    v6818 = "8760",
    v6826 = "8761",
    v6841 = "6843",
    v6843 = "7670",
    v6867 = "5519",
    v7670 = "4410",
    v8670 = "6841",
    v8671 = "8673",
    v8672 = "6867",
    v8673 = "8674",
    v8674 = "8672",
    v8676 = "49031",
    v8677 = "8679",
    v8678 = "8676",
    v8679 = "8682",
    v8680 = "8677",
    v8681 = "8678",
    v8682 = "8681",
    v8683 = "8680",
    v8684 = "8683",
    v8685 = "5514",
    v8760 = "8765",
    v8761 = "ptcity",
    v8765 = "5520"
  },
  ["the Iernian Fracture"] = {
    v45631 = "45641",
    v45632 = "45631",
    v45633 = "45632",
    v45634 = "45636",
    v45636 = "45633",
    v45637 = "45634",
    v45638 = "45637",
    v45639 = "45638",
    v45640 = "45639",
    v45641 = "45678",
    v45642 = "45643",
    v45643 = "45644",
    v45644 = "45645",
    v45645 = "45646",
    v45646 = "45647",
    v45647 = "45648",
    v45648 = "45649",
    v45649 = "45696",
    v45650 = "45652",
    v45651 = "45650",
    v45652 = "45653",
    v45653 = "45654",
    v45654 = "45655",
    v45655 = "45656",
    v45656 = "45657",
    v45657 = "45658",
    v45658 = "45659",
    v45659 = "45660",
    v45660 = "45662",
    v45662 = "45663",
    v45663 = "45664",
    v45664 = "45687",
    v45665 = "45666",
    v45666 = "45667",
    v45667 = "ptcity",
    v45668 = "45669",
    v45669 = "45672",
    v45672 = "45673",
    v45673 = "45674",
    v45674 = "45675",
    v45675 = "45676",
    v45676 = "45677",
    v45677 = "45640",
    v45678 = "45679",
    v45679 = "45680",
    v45680 = "45681",
    v45681 = "45682",
    v45682 = "45683",
    v45683 = "45684",
    v45684 = "45685",
    v45685 = "45686",
    v45686 = "45642",
    v45687 = "45689",
    v45688 = "45665",
    v45689 = "45690",
    v45690 = "45692",
    v45691 = "45688",
    v45692 = "45693",
    v45693 = "45691",
    v45695 = "45699",
    v45696 = "45698",
    v45697 = "45651",
    v45698 = "45695",
    v45699 = "45700",
    v45700 = "45702",
    v45701 = "45703",
    v45702 = "45701",
    v45703 = "45704",
    v45704 = "45705",
    v45705 = "45697"
  },
  ["the Ilhavon Forest"] = {
    v12556 = "21237",
    v12557 = "12556",
    v12558 = "12557",
    v12559 = "12558",
    v12560 = "12559",
    v21237 = "21238",
    v21238 = "21241",
    v21239 = "21244",
    v21240 = "12560",
    v21241 = "21242",
    v21242 = "21239",
    v21243 = "21240",
    v21244 = "21245",
    v21245 = "21247",
    v21246 = "21243",
    v21247 = "21248",
    v21248 = "55409",
    v21249 = "21246",
    v21250 = "21249",
    v21254 = "21250",
    v21255 = "21254",
    v21256 = "21255",
    v21257 = "21256",
    v21258 = "21257",
    v21259 = "21258",
    v21260 = "21263",
    v21261 = "21262",
    v21262 = "21260",
    v21263 = "21259",
    v21264 = "21265",
    v21265 = "21266",
    v21266 = "21261",
    v21267 = "21268",
    v21268 = "21264",
    v21269 = "21267",
    v21270 = "21271",
    v21271 = "21272",
    v21272 = "26279",
    v21273 = "21274",
    v21274 = "21269",
    v21275 = "21270",
    v21276 = "21275",
    v21277 = "21276",
    v21278 = "21277",
    v21279 = "21280",
    v21280 = "21281",
    v21281 = "21278",
    v21282 = "21279",
    v21283 = "21282",
    v21284 = "21283",
    v21304 = "21284",
    v21305 = "21306",
    v21306 = "21307",
    v21307 = "21320",
    v21308 = "21309",
    v21309 = "21310",
    v21310 = "21313",
    v21311 = "21312",
    v21312 = "21304",
    v21313 = "21314",
    v21314 = "21311",
    v21315 = "21305",
    v21316 = "21315",
    v21317 = "21316",
    v21318 = "21317",
    v21319 = "21318",
    v21320 = "21325",
    v21321 = "21322",
    v21322 = "21323",
    v21323 = "21324",
    v21324 = "21308",
    v21325 = "21321",
    v21348 = "31006",
    v21349 = "21348",
    v21350 = "21349",
    v21351 = "21350",
    v21352 = "21351",
    v21353 = "21352",
    v21354 = "21353",
    v21355 = "21354",
    v21356 = "21355",
    v26279 = "26280",
    v26280 = "26281",
    v26281 = "26557",
    v26282 = "26558",
    v26283 = "21273",
    v26284 = "26286",
    v26286 = "26287",
    v26287 = "26288",
    v26288 = "26283",
    v26342 = "26284",
    v26557 = "26282",
    v26558 = "26559",
    v26559 = "26560",
    v26560 = "26342",
    v26688 = "21356",
    v26689 = "26688",
    v26690 = "26689",
    v31006 = "31007",
    v31007 = "21319",
    v50887 = "50888",
    v50888 = "ptcity",
    v55400 = "55401",
    v55401 = "55402",
    v55402 = "55407",
    v55403 = "55400",
    v55404 = "55410",
    v55405 = "55404",
    v55406 = "55405",
    v55407 = "55408",
    v55408 = "55413",
    v55409 = "55403",
    v55410 = "55411",
    v55411 = "55418",
    v55413 = "55414",
    v55414 = "55421",
    v55415 = "55422",
    v55416 = "55415",
    v55417 = "55416",
    v55418 = "55419",
    v55419 = "55417",
    v55421 = "55424",
    v55422 = "55423",
    v55423 = "50887",
    v55424 = "55406"
  },
  ["the Isle of Despair"] = {
    v13201 = "13202",
    v13202 = "13203",
    v13203 = "13204",
    v13204 = "13205",
    v13205 = "13206",
    v13206 = "13207",
    v13207 = "13208",
    v13208 = "13209",
    v13209 = "13234",
    v13210 = "13212",
    v13212 = "13214",
    v13213 = "14865",
    v13214 = "14863",
    v13216 = "15092",
    v13234 = "13210",
    v13491 = "13492",
    v13492 = "13500",
    v13495 = "15068",
    v13496 = "13495",
    v13497 = "13216",
    v13500 = "13506",
    v13501 = "14864",
    v13506 = "13501",
    v14863 = "13491",
    v14864 = "13213",
    v14865 = "13496",
    v15068 = "13497",
    v15092 = "15093",
    v15093 = "15094",
    v15094 = "15100",
    v15100 = "15101",
    v15101 = "15104",
    v15102 = "15103",
    v15103 = "15107",
    v15104 = "15105",
    v15105 = "15106",
    v15106 = "15102",
    v15107 = "15108",
    v15108 = "15113",
    v15109 = "15112",
    v15110 = "15111",
    v15111 = "15174",
    v15112 = "15110",
    v15113 = "15109",
    v15114 = "15115",
    v15115 = "15116",
    v15116 = "ptcity",
    v15174 = "15114"
  },
  ["the Isle of Ollin"] = {
    v71119 = "71924",
    v71523 = "71999",
    v71697 = "71523",
    v71715 = "71697",
    v71907 = "71909",
    v71908 = "71907",
    v71909 = "71971",
    v71910 = "71912",
    v71912 = "71913",
    v71913 = "71915",
    v71914 = "71996",
    v71915 = "71916",
    v71916 = "71914",
    v71919 = "71925",
    v71920 = "71921",
    v71921 = "71922",
    v71922 = "71923",
    v71923 = "71119",
    v71924 = "71963",
    v71925 = "71937",
    v71935 = "71998",
    v71936 = "71935",
    v71937 = "71962",
    v71939 = "71940",
    v71940 = "71956",
    v71956 = "71957",
    v71957 = "71958",
    v71958 = "71961",
    v71959 = "71960",
    v71960 = "71936",
    v71961 = "71959",
    v71962 = "71939",
    v71963 = "71964",
    v71964 = "71965",
    v71965 = "71966",
    v71966 = "71919",
    v71968 = "71972",
    v71969 = "71968",
    v71970 = "71969",
    v71971 = "71970",
    v71972 = "71973",
    v71973 = "71974",
    v71974 = "71975",
    v71975 = "71910",
    v71977 = "71980",
    v71979 = "71977",
    v71980 = "72555",
    v71981 = "71982",
    v71982 = "71987",
    v71983 = "71984",
    v71984 = "71985",
    v71985 = "71986",
    v71986 = "71979",
    v71987 = "71983",
    v71988 = "71981",
    v71989 = "71988",
    v71990 = "71989",
    v71991 = "71990",
    v71992 = "72005",
    v71993 = "71992",
    v71994 = "71993",
    v71995 = "71994",
    v71996 = "71920",
    v71997 = "71991",
    v71998 = "71995",
    v71999 = "72001",
    v72000 = "71997",
    v72001 = "72000",
    v72002 = "72004",
    v72003 = "72002",
    v72004 = "72006",
    v72005 = "72003",
    v72006 = "72007",
    v72007 = "71715",
    v72008 = "72009",
    v72009 = "71908",
    v72555 = "ptcity",
  },
  ["the Isle of Polyargos"] = {
    v18537 = "5893",
    v5477 = "5774",
    v5478 = "5477",
    v5479 = "5478",
    v5654 = "5479",
    v5655 = "5654",
    v5656 = "5657",
    v5657 = "5655",
    v5658 = "5656",
    v5752 = "5775",
    v5753 = "5752",
    v5756 = "5753",
    v5757 = "5756",
    v5758 = "5757",
    v5759 = "5758",
    v5760 = "5762",
    v5761 = "5760",
    v5762 = "5765",
    v5763 = "5759",
    v5764 = "5763",
    v5765 = "5764",
    v5766 = "5761",
    v5767 = "5766",
    v5768 = "5767",
    v5769 = "5768",
    v5770 = "5769",
    v5771 = "5770",
    v5772 = "5771",
    v5773 = "5772",
    v5774 = "5773",
    v5775 = "5776",
    v5776 = "5777",
    v5777 = "5778",
    v5778 = "5882",
    v5882 = "5883",
    v5883 = "5884",
    v5884 = "5885",
    v5885 = "5886",
    v5886 = "5887",
    v5887 = "5888",
    v5888 = "5889",
    v5889 = "5890",
    v5890 = "5891",
    v5891 = "5892",
    v5892 = "18537",
    v5893 = "5894",
    v5894 = "5895",
    v5895 = "5898",
    v5896 = "5899",
    v5897 = "5896",
    v5898 = "5897",
    v5899 = "5900",
    v5900 = "5901",
    v5901 = "5902",
    v5902 = "5903",
    v5903 = "5904",
    v5904 = "5907",
    v5907 = "5908",
    v5908 = "5909",
    v5909 = "5910",
    v5910 = "5911",
    v5911 = "5912",
    v5912 = "5913",
    v5913 = "5914",
    v5914 = "5915",
    v5915 = "5916",
    v5916 = "5917",
    v5917 = "5918",
    v5918 = "ptcity"
  },
  ["the Itzatl Morass"] = {
    v15714 = "15718",
    v15715 = "16148",
    v15716 = "15714",
    v15717 = "15724",
    v15718 = "15719",
    v15719 = "15720",
    v15720 = "15717",
    v15721 = "15715",
    v15722 = "16147",
    v15723 = "15722",
    v15724 = "15723",
    v15725 = "15730",
    v15728 = "15725",
    v15729 = "15728",
    v15730 = "15731",
    v15731 = "15733",
    v15732 = "15734",
    v15733 = "15732",
    v15734 = "16146",
    v15735 = "ptcity",
    v16146 = "15735",
    v16147 = "15729",
    v16148 = "15716",
    v60716 = "15721",
    v60717 = "60716",
    v60718 = "60717",
    v60719 = "60718",
    v60720 = "60719",
    v60721 = "60720",
    v60722 = "60721",
    v60723 = "60722",
    v60725 = "60723",
    v60726 = "60725"
  },
  ["the Kalydian Forest"] = {
    v19810 = "ptcity",
    v19811 = "19810",
    v19812 = "19813",
    v19813 = "19811",
    v19855 = "19872",
    v19869 = "19812",
    v19870 = "19869",
    v19871 = "19870",
    v19872 = "19876",
    v19873 = "19874",
    v19874 = "19875",
    v19875 = "19871",
    v19876 = "19878",
    v19877 = "19855",
    v19878 = "19879",
    v19879 = "19898",
    v19880 = "19884",
    v19881 = "19900",
    v19882 = "19877",
    v19883 = "19882",
    v19884 = "19883",
    v19885 = "19880",
    v19886 = "19892",
    v19887 = "19886",
    v19888 = "19889",
    v19889 = "19885",
    v19890 = "19891",
    v19891 = "19888",
    v19892 = "19890",
    v19893 = "19873",
    v19894 = "19904",
    v19895 = "19909",
    v19896 = "19893",
    v19897 = "19895",
    v19898 = "19899",
    v19899 = "19881",
    v19900 = "19902",
    v19901 = "19897",
    v19902 = "19903",
    v19903 = "19901",
    v19904 = "19896",
    v19909 = "19910",
    v19910 = "19894"
  },
  ["the Khauskin Mines"] = {
    v25447 = "25448",
    v25448 = "25449",
    v25449 = "25453",
    v25450 = "25452",
    v25451 = "ptcity",
    v25452 = "25451",
    v25453 = "25454",
    v25454 = "25455",
    v25455 = "25456",
    v25456 = "25457",
    v25457 = "25458",
    v25458 = "25459",
    v25459 = "25460",
    v25460 = "25461",
    v25461 = "25462",
    v25462 = "25463",
    v25463 = "25465",
    v25464 = "25450",
    v25465 = "25466",
    v25466 = "25469",
    v25467 = "25474",
    v25468 = "25464",
    v25469 = "25472",
    v25470 = "25467",
    v25471 = "25468",
    v25472 = "25475",
    v25473 = "25470",
    v25474 = "25471",
    v25475 = "25476",
    v25476 = "25477",
    v25477 = "25478",
    v25478 = "25473"
  },
  ["the Lich Gardens"] = {
    v22866 = "22867",
    v22867 = "22868",
    v22868 = "22869",
    v22869 = "22870",
    v22870 = "22871",
    v22871 = "22881",
    v22872 = "22873",
    v22873 = "22874",
    v22874 = "22875",
    v22875 = "22882",
    v22876 = "22883",
    v22877 = "22876",
    v22878 = "22877",
    v22879 = "22878",
    v22880 = "22879",
    v22881 = "22872",
    v22882 = "22880",
    v22883 = "22884",
    v22884 = "22885",
    v22885 = "22886",
    v22886 = "22887",
    v22887 = "22888",
    v22888 = "22889",
    v22889 = "22911",
    v22890 = "22891",
    v22891 = "22892",
    v22892 = "22893",
    v22893 = "22894",
    v22894 = "22895",
    v22895 = "22896",
    v22896 = "22897",
    v22897 = "22898",
    v22898 = "22899",
    v22899 = "22900",
    v22900 = "22901",
    v22901 = "22902",
    v22902 = "22903",
    v22903 = "22904",
    v22904 = "22905",
    v22905 = "22906",
    v22906 = "22907",
    v22907 = "22908",
    v22908 = "22909",
    v22909 = "22910",
    v22910 = "ptcity",
    v22911 = "22912",
    v22912 = "22913",
    v22913 = "22914",
    v22914 = "22915",
    v22915 = "22916",
    v22916 = "22917",
    v22917 = "22918",
    v22918 = "22919",
    v22919 = "22925",
    v22920 = "22890",
    v22921 = "22920",
    v22922 = "22921",
    v22923 = "22922",
    v22924 = "22923",
    v22925 = "22924"
  },
  ["the Maghuir Fissure"] = {
    v21001 = "21168",
    v21168 = "21169",
    v21169 = "21170",
    v21170 = "21173",
    v21171 = "21176",
    v21172 = "21171",
    v21173 = "21172",
    v21175 = "21180",
    v21176 = "21177",
    v21177 = "21178",
    v21178 = "21179",
    v21179 = "21175",
    v21180 = "21181",
    v21181 = "21182",
    v21182 = "21183",
    v21183 = "21184",
    v21184 = "21185",
    v21185 = "21186",
    v21186 = "21187",
    v21187 = "21190",
    v21190 = "21192",
    v21191 = "21193",
    v21192 = "21191",
    v21193 = "21194",
    v21194 = "21195",
    v21195 = "21196",
    v21196 = "21197",
    v21197 = "21198",
    v21198 = "21199",
    v21199 = "21200",
    v21200 = "21201",
    v21201 = "21202",
    v21202 = "21203",
    v21203 = "21204",
    v21204 = "21205",
    v21205 = "21206",
    v21206 = "21210",
    v21207 = "21212",
    v21208 = "21207",
    v21209 = "21208",
    v21210 = "21211",
    v21211 = "21209",
    v21212 = "21213",
    v21213 = "21214",
    v21214 = "21215",
    v21215 = "21216",
    v21216 = "21217",
    v21217 = "21218",
    v21218 = "21219",
    v21219 = "21220",
    v21220 = "21221",
    v21221 = "21222",
    v21222 = "ptcity"
  },
  ["the Mamashi Grasslands"] = {
    v1019 = "19110",
    v14463 = "8855",
    v14464 = "8862",
    v19107 = "19108",
    v19108 = "19111",
    v19110 = "19107",
    v19111 = "19112",
    v19112 = "19113",
    v19113 = "19117",
    v19114 = "19120",
    v19115 = "19114",
    v19116 = "19115",
    v19117 = "19116",
    v19118 = "68323",
    v19119 = "19123",
    v19120 = "19119",
    v19121 = "19127",
    v19122 = "19121",
    v19123 = "19122",
    v19124 = "19125",
    v19125 = "19126",
    v19126 = "19118",
    v19127 = "19128",
    v19128 = "19129",
    v19129 = "19132",
    v19130 = "19124",
    v19131 = "19130",
    v19132 = "19131",
    v68323 = "68326",
    v68326 = "68327",
    v68327 = "68328",
    v68328 = "68330",
    v68329 = "8813",
    v68330 = "68329",
    v8809 = "8810",
    v8810 = "8811",
    v8811 = "8812",
    v8812 = "1019",
    v8813 = "8814",
    v8814 = "8815",
    v8815 = "8816",
    v8816 = "8817",
    v8817 = "8818",
    v8818 = "8840",
    v8826 = "8828",
    v8827 = "8826",
    v8828 = "8829",
    v8829 = "8838",
    v8830 = "8837",
    v8831 = "8830",
    v8832 = "8831",
    v8833 = "8832",
    v8834 = "8833",
    v8835 = "8834",
    v8836 = "8845",
    v8837 = "8836",
    v8838 = "8839",
    v8839 = "8843",
    v8840 = "8841",
    v8841 = "8827",
    v8843 = "8844",
    v8844 = "8835",
    v8845 = "8846",
    v8846 = "14463",
    v8848 = "ptcity",
    v8849 = "8848",
    v8850 = "8849",
    v8851 = "8850",
    v8852 = "8851",
    v8853 = "8852",
    v8854 = "8860",
    v8855 = "8856",
    v8856 = "8857",
    v8857 = "8858",
    v8858 = "8859",
    v8859 = "8854",
    v8860 = "8861",
    v8861 = "14464",
    v8862 = "8863",
    v8863 = "8853"
  },
  ["the Mamashi Tunnels"] = {
    v20855 = "20856",
    v20856 = "20857",
    v20857 = "20858",
    v20858 = "20859",
    v20859 = "20861",
    v20860 = "20867",
    v20861 = "20862",
    v20862 = "20863",
    v20863 = "20866",
    v20864 = "20865",
    v20865 = "20860",
    v20866 = "20864",
    v20867 = "20868",
    v20868 = "20869",
    v20869 = "20871",
    v20870 = "20877",
    v20871 = "20870",
    v20872 = "20873",
    v20873 = "20901",
    v20874 = "20872",
    v20875 = "20874",
    v20876 = "20875",
    v20877 = "20878",
    v20878 = "20879",
    v20879 = "20876",
    v20880 = "20881",
    v20881 = "20882",
    v20882 = "20883",
    v20883 = "20884",
    v20884 = "20885",
    v20885 = "20887",
    v20886 = "20918",
    v20887 = "20888",
    v20888 = "20889",
    v20889 = "ptcity",
    v20890 = "20880",
    v20891 = "20890",
    v20892 = "20910",
    v20893 = "20892",
    v20894 = "20893",
    v20895 = "20894",
    v20896 = "20895",
    v20897 = "20896",
    v20898 = "20897",
    v20899 = "20898",
    v20900 = "20899",
    v20901 = "20902",
    v20902 = "20903",
    v20903 = "20904",
    v20904 = "20905",
    v20905 = "20906",
    v20906 = "20912",
    v20907 = "20908",
    v20908 = "20909",
    v20909 = "20900",
    v20910 = "20911",
    v20911 = "20891",
    v20912 = "20913",
    v20913 = "20916",
    v20916 = "20917",
    v20917 = "20886",
    v20918 = "20919",
    v20919 = "20920",
    v20920 = "20921",
    v20921 = "20907"
  },
  ["the Mannaseh Swamp"] = {
  v1745 = "74904",
  v73209 = "73211",
  v73211 = "73213",
  v73213 = "74560",
  v73214 = "73729",
  v73218 = "73214",
  v73222 = "73218",
  v73226 = "73222",
  v73232 = "73764",
  v73728 = "73731",
  v73729 = "74555",
  v73730 = "75147",
  v73731 = "73763",
  v73734 = "73738",
  v73735 = "73736",
  v73736 = "73761",
  v73738 = "74055",
  v73739 = "73740",
  v73740 = "73734",
  v73741 = "73747",
  v73742 = "73744",
  v73744 = "73745",
  v73745 = "73754",
  v73747 = "73790",
  v73748 = "74437",
  v73754 = "73741",
  v73758 = "73972",
  v73761 = "73758",
  v73762 = "73226",
  v73763 = "73762",
  v73764 = "73772",
  v73770 = "73785",
  v73771 = "73783",
  v73772 = "73739",
  v73783 = "73209",
  v73784 = "73771",
  v73785 = "73822",
  v73786 = "75387",
  v73787 = "75342",
  v73789 = "73742",
  v73790 = "75346",
  v73817 = "73829",
  v73822 = "73817",
  v73829 = "73784",
  v73972 = "74614",
  v74055 = "74056",
  v74056 = "74058",
  v74057 = "74097",
  v74058 = "74057",
  v74097 = "ptcity",
  v74166 = "73735",
  v74172 = "73728",
  v74187 = "73232",
  v74437 = "74172",
  v74469 = "74187",
  v74547 = "74166",
  v74555 = "74469",
  v74560 = "73730",
  v74614 = "73770",
  v74827 = "75344",
  v74904 = "74988",
  v74988 = "74827",
  v75147 = "75148",
  v75148 = "73748",
  v75342 = "75345",
  v75343 = "73786",
  v75344 = "75343",
  v75345 = "73789",
  v75346 = "74547",
  v75387 = "75441",
  v75441 = "73787",
  },
  ["the Maul"] = {
    v50236 = "50237",
    v50237 = "50238",
    v50238 = "50239",
    v50239 = "50240",
    v50240 = "50246",
    v50241 = "50247",
    v50242 = "50241",
    v50243 = "50242",
    v50246 = "50243",
    v50247 = "50248",
    v50248 = "50249",
    v50249 = "50250",
    v50250 = "50251",
    v50251 = "50252",
    v50252 = "50253",
    v50253 = "50254",
    v50254 = "50255",
    v50255 = "50256",
    v50256 = "50257",
    v50257 = "57980",
    v50260 = "50261",
    v50261 = "50262",
    v50262 = "50263",
    v50263 = "50264",
    v50264 = "50265",
    v50265 = "50268",
    v50266 = "50269",
    v50267 = "50266",
    v50268 = "57979",
    v50269 = "50270",
    v50270 = "50271",
    v50271 = "50272",
    v50272 = "50273",
    v50273 = "50274",
    v50274 = "50277",
    v50275 = "ptcity",
    v50276 = "50275",
    v50277 = "50276",
    v57979 = "50267",
    v57980 = "50260"
  },
  ["the Morgun Forest"] = {
    v1030 = "4776",
    v1033 = "4786",
    v4739 = "4741",
    v4740 = "4739",
    v4741 = "4743",
    v4742 = "4744",
    v4743 = "4742",
    v4744 = "4745",
    v4745 = "4746",
    v4746 = "4747",
    v4747 = "4748",
    v4748 = "4749",
    v4749 = "4750",
    v4750 = "4751",
    v4751 = "4752",
    v4752 = "4753",
    v4753 = "4754",
    v4754 = "4755",
    v4755 = "4756",
    v4756 = "4759",
    v4757 = "4758",
    v4758 = "4761",
    v4759 = "4760",
    v4760 = "4805",
    v4761 = "4762",
    v4762 = "4763",
    v4763 = "4764",
    v4764 = "4765",
    v4765 = "4766",
    v4766 = "4768",
    v4767 = "4770",
    v4768 = "4769",
    v4769 = "4767",
    v4770 = "4771",
    v4771 = "4772",
    v4772 = "4773",
    v4773 = "4774",
    v4774 = "4775",
    v4775 = "4789",
    v4776 = "4777",
    v4777 = "4778",
    v4778 = "4804",
    v4779 = "4780",
    v4780 = "4781",
    v4781 = "4782",
    v4782 = "4784",
    v4783 = "4803",
    v4784 = "4785",
    v4785 = "1033",
    v4786 = "4787",
    v4787 = "ptcity",
    v4789 = "4783",
    v4790 = "4791",
    v4791 = "4792",
    v4792 = "4793",
    v4793 = "4795",
    v4795 = "4796",
    v4796 = "4797",
    v4797 = "4798",
    v4798 = "4799",
    v4799 = "1030",
    v4803 = "4790",
    v4804 = "4779",
    v4805 = "4757"
  },
  ["the Nal'jin Depths"] = {
    v38090 = "38091",
    v38091 = "38092",
    v38092 = "38093",
    v38093 = "38096",
    v38094 = "38095",
    v38095 = "38099",
    v38096 = "38094",
    v38097 = "38109",
    v38099 = "38097",
    v38100 = "38103",
    v38101 = "38102",
    v38102 = "38100",
    v38103 = "38104",
    v38104 = "38107",
    v38105 = "38101",
    v38106 = "38112",
    v38107 = "38111",
    v38108 = "38105",
    v38109 = "38108",
    v38110 = "38106",
    v38111 = "38110",
    v38112 = "38145",
    v38113 = "38116",
    v38114 = "38121",
    v38115 = "38114",
    v38116 = "38115",
    v38118 = "38113",
    v38119 = "38126",
    v38120 = "38119",
    v38121 = "38129",
    v38122 = "38123",
    v38123 = "38124",
    v38124 = "38163",
    v38125 = "38118",
    v38126 = "38125",
    v38127 = "38120",
    v38128 = "38130",
    v38129 = "38128",
    v38130 = "38122",
    v38132 = "38127",
    v38133 = "38134",
    v38134 = "38132",
    v38135 = "38136",
    v38136 = "38137",
    v38137 = "38138",
    v38138 = "38139",
    v38139 = "38146",
    v38140 = "38141",
    v38141 = "38148",
    v38142 = "38135",
    v38143 = "38142",
    v38144 = "38143",
    v38145 = "38149",
    v38146 = "38147",
    v38147 = "38140",
    v38148 = "38133",
    v38149 = "38144",
    v38150 = "38152",
    v38151 = "38154",
    v38152 = "38156",
    v38153 = "38150",
    v38154 = "38158",
    v38155 = "38151",
    v38156 = "38160",
    v38157 = "38153",
    v38158 = "38165",
    v38159 = "38155",
    v38160 = "38167",
    v38161 = "38157",
    v38162 = "38161",
    v38163 = "38162",
    v38164 = "ptcity",
    v38165 = "38172",
    v38166 = "38159",
    v38167 = "38174",
    v38168 = "38169",
    v38169 = "38176",
    v38170 = "38171",
    v38171 = "38178",
    v38172 = "38164",
    v38173 = "38166",
    v38174 = "38181",
    v38175 = "38168",
    v38176 = "38177",
    v38177 = "38170",
    v38178 = "38179",
    v38179 = "38183",
    v38180 = "38173",
    v38181 = "38185",
    v38182 = "38175",
    v38183 = "38187",
    v38184 = "38180",
    v38185 = "38189",
    v38186 = "38182",
    v38187 = "38190",
    v38188 = "38184",
    v38189 = "38186",
    v38190 = "38188"
  },
  ["the Putoran Hills"] = {
    v10041 = "10043",
    v10042 = "10041",
    v10043 = "10044",
    v10044 = "10045",
    v10045 = "10046",
    v10046 = "10047",
    v10047 = "10048",
    v10048 = "1846",
    v10050 = "10156",
    v10156 = "ptcity",
    v1846 = "10050",
    v28511 = "28514",
    v28514 = "10042"
  },
 ["the Ruins of Farsai"] = {
  v17032 = "17052",
  v17052 = "17053",
  v17053 = "17070",
  v17054 = "17058",
  v17055 = "17054",
  v17056 = "17055",
  v17057 = "17056",
  v17058 = "17068",
  v17059 = "17060",
  v17060 = "17138",
  v17061 = "17062",
  v17062 = "17063",
  v17063 = "17064",
  v17064 = "17065",
  v17065 = "17066",
  v17066 = "17067",
  v17067 = "17148",
  v17068 = "17147",
  v17069 = "17059",
  v17070 = "17071",
  v17071 = "17072",
  v17072 = "17125",
  v17073 = "17124",
  v17074 = "17098",
  v17075 = "17057",
  v17076 = "17075",
  v17077 = "17076",
  v17078 = "17077",
  v17079 = "17128",
  v17080 = "17079",
  v17081 = "17080",
  v17082 = "17081",
  v17083 = "17082",
  v17084 = "17083",
  v17085 = "17086",
  v17086 = "17087",
  v17087 = "17201",
  v17088 = "17089",
  v17089 = "17090",
  v17090 = "17091",
  v17091 = "17137",
  v17092 = "17093",
  v17093 = "17149",
  v17094 = "17088",
  v17095 = "17134",
  v17096 = "17131",
  v17097 = "17096",
  v17098 = "17078",
  v17099 = "17100",
  v17100 = "17101",
  v17101 = "17102",
  v17102 = "17103",
  v17103 = "17104",
  v17104 = "17105",
  v17105 = "17151",
  v17106 = "17107",
  v17107 = "17097",
  v17108 = "17115",
  v17109 = "17108",
  v17110 = "17109",
  v17111 = "17144",
  v17112 = "17111",
  v17113 = "17112",
  v17114 = "17113",
  v17115 = "17114",
  v17117 = "17122",
  v17118 = "17123",
  v17119 = "17120",
  v17120 = "17118",
  v17121 = "17119",
  v17122 = "17121",
  v17123 = "17296",
  v17124 = "17074",
  v17125 = "17127",
  v17126 = "17073",
  v17127 = "17126",
  v17128 = "17130",
  v17129 = "17099",
  v17130 = "17129",
  v17131 = "17132",
  v17132 = "17133",
  v17133 = "17095",
  v17134 = "17135",
  v17135 = "17136",
  v17136 = "17094",
  v17137 = "17092",
  v17138 = "17140",
  v17139 = "17141",
  v17140 = "17139",
  v17141 = "17143",
  v17142 = "17061",
  v17143 = "17142",
  v17144 = "17145",
  v17145 = "17162",
  v17146 = "17069",
  v17147 = "17146",
  v17148 = "17085",
  v17149 = "17110",
  v17150 = "17106",
  v17151 = "17150",
  v17152 = "17200",
  v17153 = "17152",
  v17154 = "17153",
  v17155 = "17154",
  v17156 = "17155",
  v17157 = "17156",
  v17158 = "17157",
  v17159 = "17158",
  v17160 = "17159",
  v17161 = "17160",
  v17162 = "17161",
  v17163 = "17204",
  v17164 = "17163",
  v17165 = "17164",
  v17166 = "17165",
  v17167 = "17166",
  v17168 = "17167",
  v17169 = "17168",
  v17170 = "17169",
  v17171 = "17170",
  v17172 = "17171",
  v17173 = "17172",
  v17174 = "17173",
  v17175 = "17174",
  v17176 = "17175",
  v17177 = "17176",
  v17178 = "17177",
  v17179 = "17178",
  v17180 = "17179",
  v17181 = "17180",
  v17182 = "17181",
  v17183 = "17182",
  v17184 = "17183",
  v17185 = "17184",
  v17186 = "17185",
  v17187 = "17186",
  v17188 = "17187",
  v17189 = "17188",
  v17190 = "17189",
  v17191 = "17190",
  v17192 = "17191",
  v17193 = "17192",
  v17194 = "17193",
  v17195 = "17194",
  v17196 = "17195",
  v17197 = "17196",
  v17198 = "17197",
  v17199 = "17198",
  v17200 = "17199",
  v17201 = "17202",
  v17202 = "17203",
  v17203 = "17084",
  v17204 = "17205",
  v17205 = "17206",
  v17206 = "17207",
  v17207 = "17208",
  v17208 = "17209",
  v17209 = "17210",
  v17210 = "17211",
  v17211 = "17212",
  v17212 = "17213",
  v17213 = "17214",
  v17214 = "17215",
  v17215 = "17216",
  v17216 = "17217",
  v17217 = "17220",
  v17218 = "17219",
  v17219 = "17229",
  v17220 = "17221",
  v17221 = "17222",
  v17222 = "17224",
  v17223 = "17227",
  v17224 = "17223",
  v17225 = "17226",
  v17226 = "17218",
  v17227 = "17228",
  v17228 = "17225",
  v17229 = "17230",
  v17230 = "17231",
  v17231 = "17232",
  v17232 = "17233",
  v17233 = "17234",
  v17234 = "17235",
  v17235 = "17236",
  v17236 = "17237",
  v17237 = "17238",
  v17238 = "17239",
  v17239 = "17240",
  v17240 = "17244",
  v17242 = "17243",
  v17243 = "17117",
  v17244 = "17242",
  v17296 = "17297",
  v17297 = "17298",
  v17298 = "17299",
  v17299 = "17300",
  v17300 = "17301",
  v17301 = "17303",
  v17303 = "17309",
  v17309 = "17310",
  v17310 = "17314",
  v17311 = "17312",
  v17312 = "ptcity",
  v17313 = "17311",
  v17314 = "17313"
},
  ["the Ruins of Masilia"] = {
    v20421 = "20423",
    v20422 = "20424",
    v20423 = "ptcity",
    v20424 = "20425",
    v20425 = "20427",
    v20426 = "20421",
    v20427 = "20426",
    v20428 = "20422",
    v20445 = "20488",
    v20446 = "20448",
    v20447 = "20449",
    v20448 = "20428",
    v20449 = "20445",
    v20450 = "20451",
    v20451 = "20452",
    v20452 = "20474",
    v20453 = "20454",
    v20454 = "20455",
    v20455 = "20456",
    v20456 = "20457",
    v20457 = "20458",
    v20458 = "20485",
    v20460 = "20461",
    v20461 = "20462",
    v20462 = "20463",
    v20463 = "20480",
    v20464 = "20465",
    v20465 = "20466",
    v20466 = "20467",
    v20467 = "20496",
    v20470 = "20473",
    v20473 = "20453",
    v20474 = "20470",
    v20477 = "20460",
    v20478 = "20482",
    v20479 = "20478",
    v20480 = "20479",
    v20481 = "20477",
    v20482 = "20483",
    v20483 = "20484",
    v20484 = "20446",
    v20485 = "20489",
    v20486 = "20481",
    v20487 = "20486",
    v20488 = "20487",
    v20489 = "20493",
    v20490 = "20491",
    v20491 = "20492",
    v20492 = "20447",
    v20493 = "20464",
    v20494 = "20490",
    v20495 = "20494",
    v20496 = "20495"
  },
  ["the Salma Settlement"] = {
    v19602 = "19603",
    v19603 = "19608",
    v19608 = "19609",
    v19609 = "19610",
    v19610 = "19611",
    v19611 = "19612",
    v19612 = "19615",
    v19613 = "19681",
    v19614 = "19661",
    v19615 = "19636",
    v19628 = "19614",
    v19629 = "19630",
    v19630 = "19633",
    v19631 = "19629",
    v19632 = "19664",
    v19633 = "19632",
    v19634 = "19628",
    v19635 = "19634",
    v19636 = "19637",
    v19637 = "19638",
    v19638 = "19639",
    v19639 = "19640",
    v19640 = "19642",
    v19641 = "19646",
    v19642 = "19643",
    v19643 = "19644",
    v19644 = "19645",
    v19645 = "19641",
    v19646 = "19647",
    v19647 = "19648",
    v19648 = "19649",
    v19649 = "19650",
    v19650 = "19652",
    v19651 = "19654",
    v19652 = "19651",
    v19653 = "19655",
    v19654 = "19653",
    v19655 = "19656",
    v19656 = "19659",
    v19657 = "19658",
    v19658 = "19660",
    v19659 = "19657",
    v19660 = "19635",
    v19661 = "19662",
    v19662 = "19663",
    v19663 = "19631",
    v19664 = "19665",
    v19665 = "19666",
    v19666 = "19667",
    v19667 = "19668",
    v19668 = "19669",
    v19669 = "19688",
    v19670 = "19673",
    v19671 = "19670",
    v19672 = "19613",
    v19673 = "19674",
    v19674 = "19675",
    v19675 = "19677",
    v19677 = "19678",
    v19678 = "19680",
    v19679 = "19672",
    v19680 = "19679",
    v19681 = "19682",
    v19682 = "19683",
    v19683 = "19684",
    v19684 = "19685",
    v19685 = "19686",
    v19686 = "19687",
    v19687 = "ptcity",
    v19688 = "19689",
    v19689 = "19690",
    v19690 = "19671"
  },
  ["the Shastaan Warrens"] = {
    v45483 = "45484",
    v45484 = "45485",
    v45485 = "45486",
    v45486 = "45487",
    v45487 = "45488",
    v45488 = "45489",
    v45489 = "45491",
    v45491 = "45497",
    v45493 = "45496",
    v45494 = "45495",
    v45495 = "45500",
    v45496 = "45499",
    v45497 = "45498",
    v45498 = "45493",
    v45499 = "45494",
    v45500 = "45501",
    v45501 = "45502",
    v45502 = "45503",
    v45503 = "45504",
    v45504 = "45505",
    v45505 = "45546",
    v45507 = "45515",
    v45508 = "45509",
    v45509 = "45511",
    v45511 = "45512",
    v45512 = "ptcity",
    v45514 = "45508",
    v45515 = "45516",
    v45516 = "45517",
    v45517 = "45514",
    v45546 = "45548",
    v45548 = "45549",
    v45549 = "45507"
  },
  ["the Shattered Vortex"] = {
    v36079 = "36087",
    v36080 = "36079",
    v36081 = "36080",
    v36082 = "36081",
    v36083 = "36082",
    v36084 = "36083",
    v36085 = "36084",
    v36086 = "36085",
    v36087 = "36091",
    v36088 = "36086",
    v36089 = "36295",
    v36090 = "36088",
    v36091 = "36096",
    v36092 = "36089",
    v36093 = "36092",
    v36094 = "36090",
    v36095 = "36094",
    v36096 = "36093",
    v36097 = "36095",
    v36098 = "36104",
    v36099 = "36098",
    v36100 = "36099",
    v36101 = "36100",
    v36102 = "36101",
    v36103 = "36102",
    v36104 = "36105",
    v36105 = "36106",
    v36106 = "36107",
    v36107 = "36272",
    v36272 = "36273",
    v36273 = "36278",
    v36276 = "36282",
    v36277 = "36276",
    v36278 = "36281",
    v36279 = "36277",
    v36280 = "36279",
    v36281 = "36280",
    v36282 = "36283",
    v36283 = "36284",
    v36284 = "36285",
    v36285 = "36286",
    v36286 = "36287",
    v36287 = "36288",
    v36288 = "36289",
    v36289 = "36290",
    v36290 = "36291",
    v36291 = "36292",
    v36292 = "36294",
    v36293 = "36315",
    v36294 = "36336",
    v36295 = "36335",
    v36296 = "36103",
    v36297 = "36296",
    v36298 = "36300",
    v36299 = "36297",
    v36300 = "36301",
    v36301 = "36308",
    v36302 = "36299",
    v36303 = "36302",
    v36304 = "36305",
    v36305 = "36303",
    v36306 = "36298",
    v36307 = "36304",
    v36308 = "36307",
    v36309 = "36306",
    v36310 = "36309",
    v36311 = "36310",
    v36312 = "36311",
    v36313 = "36312",
    v36314 = "36313",
    v36315 = "36329",
    v36316 = "36328",
    v36317 = "36314",
    v36318 = "36317",
    v36319 = "36318",
    v36320 = "36319",
    v36321 = "36320",
    v36322 = "36321",
    v36323 = "36325",
    v36324 = "36293",
    v36325 = "36324",
    v36326 = "36323",
    v36327 = "36322",
    v36328 = "36333",
    v36329 = "36334",
    v36330 = "36326",
    v36331 = "36327",
    v36332 = "36331",
    v36333 = "36332",
    v36334 = "36316",
    v36335 = "36330",
    v36336 = "36339",
    v36337 = "36338",
    v36338 = "36341",
    v36339 = "36340",
    v36340 = "36337",
    v36341 = "36343",
    v36342 = "36351",
    v36343 = "36342",
    v36344 = "36345",
    v36345 = "36346",
    v36346 = "36347",
    v36347 = "36097",
    v36349 = "36354",
    v36350 = "36344",
    v36351 = "36349",
    v36352 = "36350",
    v36353 = "36368",
    v36354 = "36357",
    v36355 = "36352",
    v36356 = "36446",
    v36357 = "36358",
    v36358 = "36360",
    v36359 = "36419",
    v36360 = "36361",
    v36361 = "36362",
    v36362 = "36363",
    v36363 = "36364",
    v36364 = "36365",
    v36365 = "36455",
    v36366 = "36367",
    v36367 = "36379",
    v36368 = "36369",
    v36369 = "36462",
    v36370 = "36371",
    v36371 = "36464",
    v36372 = "36373",
    v36373 = "36466",
    v36374 = "36375",
    v36375 = "36468",
    v36376 = "36377",
    v36377 = "36378",
    v36378 = "36380",
    v36379 = "36401",
    v36380 = "36470",
    v36381 = "36382",
    v36382 = "36472",
    v36383 = "36384",
    v36384 = "36385",
    v36385 = "36386",
    v36386 = "36474",
    v36387 = "36388",
    v36388 = "36479",
    v36389 = "36390",
    v36390 = "36481",
    v36391 = "36392",
    v36392 = "36483",
    v36393 = "36394",
    v36394 = "36454",
    v36395 = "36396",
    v36396 = "36445",
    v36397 = "36441",
    v36398 = "36437",
    v36399 = "36420",
    v36400 = "36353",
    v36401 = "36432",
    v36402 = "36403",
    v36403 = "36430",
    v36404 = "36405",
    v36405 = "36428",
    v36406 = "36407",
    v36407 = "36408",
    v36408 = "36409",
    v36409 = "36410",
    v36410 = "36411",
    v36411 = "36412",
    v36412 = "36413",
    v36413 = "36414",
    v36414 = "36415",
    v36415 = "36508",
    v36416 = "36399",
    v36417 = "36438",
    v36418 = "36417",
    v36419 = "36418",
    v36420 = "36421",
    v36421 = "36422",
    v36422 = "36423",
    v36423 = "36424",
    v36424 = "36425",
    v36425 = "36426",
    v36426 = "36427",
    v36427 = "36433",
    v36428 = "36406",
    v36429 = "36404",
    v36430 = "36429",
    v36431 = "36402",
    v36432 = "36431",
    v36433 = "36434",
    v36434 = "36435",
    v36435 = "36436",
    v36436 = "36366",
    v36437 = "36416",
    v36438 = "36439",
    v36439 = "36440",
    v36440 = "36356",
    v36441 = "36442",
    v36442 = "36443",
    v36443 = "36444",
    v36444 = "36355",
    v36445 = "36398",
    v36446 = "36450",
    v36447 = "36448",
    v36448 = "36452",
    v36449 = "36395",
    v36450 = "36451",
    v36451 = "36447",
    v36452 = "36453",
    v36453 = "36400",
    v36454 = "36449",
    v36455 = "36456",
    v36456 = "36457",
    v36457 = "36458",
    v36458 = "36459",
    v36459 = "36460",
    v36460 = "36461",
    v36461 = "36359",
    v36462 = "36463",
    v36463 = "36370",
    v36464 = "36465",
    v36465 = "36372",
    v36466 = "36467",
    v36467 = "36374",
    v36468 = "36376",
    v36469 = "36475",
    v36470 = "36469",
    v36471 = "36381",
    v36472 = "36476",
    v36473 = "36383",
    v36474 = "36478",
    v36475 = "36471",
    v36476 = "36477",
    v36477 = "36473",
    v36478 = "36387",
    v36479 = "36480",
    v36480 = "36389",
    v36481 = "36482",
    v36482 = "36391",
    v36483 = "36484",
    v36484 = "36393",
    v36508 = "36510",
    v36509 = "36397",
    v36510 = "36511",
    v36511 = "36513",
    v36512 = "36509",
    v36513 = "36514",
    v36514 = "36522",
    v36515 = "36516",
    v36516 = "36524",
    v36517 = "36529",
    v36518 = "36512",
    v36519 = "36518",
    v36520 = "36519",
    v36521 = "36520",
    v36522 = "36523",
    v36523 = "36515",
    v36524 = "36525",
    v36525 = "36517",
    v36526 = "36521",
    v36527 = "36526",
    v36528 = "36527",
    v36529 = "36533",
    v36530 = "36528",
    v36531 = "36541",
    v36532 = "36531",
    v36533 = "36532",
    v36534 = "36530",
    v36535 = "36534",
    v36536 = "36535",
    v36537 = "36540",
    v36538 = "36536",
    v36539 = "36538",
    v36540 = "36539",
    v36541 = "36537"
  },
  ["the Siroccian Mountains"] = {
    v16436 = "16437",
    v16437 = "3020",
    v18528 = "2998",
    v2977 = "2991",
    v2979 = "2980",
    v2980 = "2981",
    v2981 = "2983",
    v2982 = "35208",
    v2983 = "2982",
    v2984 = "2985",
    v2985 = "2986",
    v2986 = "2987",
    v2987 = "2988",
    v2988 = "2989",
    v2989 = "3005",
    v2990 = "2977",
    v2991 = "2992",
    v2992 = "2993",
    v2993 = "2994",
    v2994 = "2995",
    v2995 = "2996",
    v2996 = "ptcity",
    v2997 = "2990",
    v2998 = "2997",
    v2999 = "3000",
    v3000 = "3001",
    v3001 = "18528",
    v3002 = "3021",
    v3003 = "3010",
    v3004 = "3006",
    v3005 = "3004",
    v3006 = "3007",
    v3007 = "3008",
    v3008 = "3009",
    v3009 = "3003",
    v3010 = "3022",
    v3011 = "3002",
    v3012 = "4533",
    v3013 = "3012",
    v3014 = "2999",
    v3015 = "3013",
    v3016 = "3015",
    v3017 = "3018",
    v3018 = "3016",
    v3019 = "3391",
    v3020 = "3019",
    v3021 = "16436",
    v3022 = "3011",
    v3389 = "3017",
    v3390 = "3389",
    v3391 = "3390",
    v3420 = "3421",
    v3421 = "3422",
    v3422 = "3423",
    v3423 = "3424",
    v3424 = "3425",
    v3425 = "3426",
    v3426 = "3427",
    v3427 = "3428",
    v3428 = "3429",
    v3429 = "2984",
    v35208 = "35209",
    v35209 = "35210",
    v35210 = "35211",
    v35211 = "35212",
    v35212 = "35213",
    v35213 = "35214",
    v35214 = "35215",
    v35215 = "35216",
    v35216 = "3420",
    v4354 = "2979",
    v4533 = "3014"
  },
  ["the Siroccian Tunnels"] = {
    v26820 = "26821",
    v26821 = "26822",
    v26822 = "26823",
    v26823 = "26824",
    v26824 = "26825",
    v26825 = "26828",
    v26826 = "26829",
    v26828 = "26826",
    v26829 = "26838",
    v26838 = "26839",
    v26839 = "26840",
    v26840 = "26841",
    v26841 = "26842",
    v26842 = "26843",
    v26843 = "26846",
    v26846 = "26847",
    v26847 = "26848",
    v26848 = "26882",
    v26854 = "26856",
    v26856 = "26865",
    v26865 = "26866",
    v26866 = "26867",
    v26867 = "26868",
    v26868 = "26869",
    v26869 = "26870",
    v26870 = "26873",
    v26872 = "26874",
    v26873 = "26872",
    v26874 = "ptcity",
    v26875 = "26854",
    v26876 = "26875",
    v26877 = "26876",
    v26882 = "26877"
  },
  ["the Sparklight Rift"] = {
    v60844 = "60855",
    v60845 = "60846",
    v60846 = "60847",
    v60847 = "60848",
    v60848 = "60844",
    v60849 = "60851",
    v60850 = "60853",
    v60851 = "60850",
    v60852 = "60856",
    v60853 = "60852",
    v60854 = "60849",
    v60855 = "60854",
    v60856 = "60857",
    v60857 = "60858",
    v60858 = "60909",
    v60859 = "60860",
    v60860 = "60904",
    v60904 = "60905",
    v60905 = "60906",
    v60906 = "60908",
    v60907 = "60915",
    v60908 = "60907",
    v60909 = "60910",
    v60910 = "60911",
    v60911 = "60912",
    v60912 = "60913",
    v60913 = "60914",
    v60914 = "60859",
    v60915 = "60916",
    v60916 = "60920",
    v60920 = "60921",
    v60921 = "60922",
    v60922 = "60923",
    v60923 = "60924",
    v60924 = "60925",
    v60925 = "60926",
    v60926 = "60927",
    v60927 = "60928",
    v60928 = "60929",
    v60929 = "ptcity"
  },
  ["the Squal"] = {
    v14926 = "54732",
    v54705 = "54725",
    v54706 = "55086",
    v54707 = "54729",
    v54710 = "55083",
    v54711 = "54712",
    v54712 = "54723",
    v54723 = "64803",
    v54724 = "54706",
    v54725 = "54724",
    v54726 = "54727",
    v54727 = "54728",
    v54728 = "54705",
    v54729 = "54730",
    v54730 = "54731",
    v54731 = "54738",
    v54732 = "54726",
    v54733 = "68153",
    v54734 = "54737",
    v54735 = "68159",
    v54736 = "54735",
    v54737 = "54736",
    v54738 = "54739",
    v54739 = "54740",
    v54740 = "54758",
    v54757 = "54759",
    v54758 = "54757",
    v54759 = "54760",
    v54760 = "54761",
    v54761 = "54762",
    v54762 = "54763",
    v54763 = "54764",
    v54764 = "54765",
    v54765 = "54710",
    v55083 = "55084",
    v55084 = "55085",
    v55085 = "54711",
    v55086 = "55087",
    v55087 = "54733",
    v64803 = "65154",
    v65154 = "65243",
    v65243 = "65579",
    v65579 = "68140",
    v65879 = "66794",
    v66115 = "66775",
    v66775 = "66791",
    v66791 = "68141",
    v66794 = "66115",
    v67695 = "67699",
    v67696 = "68150",
    v67697 = "67824",
    v67698 = "67697",
    v67699 = "67698",
    v67712 = "67713",
    v67713 = "67846",
    v67824 = "67712",
    v67846 = "67848",
    v67848 = "68388",
    v68140 = "65879",
    v68141 = "68145",
    v68145 = "68147",
    v68147 = "67696",
    v68150 = "67695",
    v68153 = "68365",
    v68159 = "68160",
    v68160 = "68162",
    v68162 = "68164",
    v68163 = "54707",
    v68164 = "68163",
    v68365 = "68366",
    v68366 = "68367",
    v68367 = "68370",
    v68368 = "54734",
    v68369 = "68372",
    v68370 = "68369",
    v68372 = "68368",
    v68388 = "68389",
    v68389 = "68391",
    v68391 = "68392",
    v68392 = "68393",
    v68393 = "ptcity"
  },
  ["the Tarean Caverns"] = {
    v22305 = "22306",
    v22306 = "22307",
    v22307 = "22308",
    v22308 = "22309",
    v22309 = "22310",
    v22310 = "22311",
    v22311 = "22312",
    v22312 = "22314",
    v22313 = "22315",
    v22314 = "22313",
    v22315 = "22316",
    v22316 = "22317",
    v22317 = "22318",
    v22318 = "22319",
    v22319 = "22321",
    v22321 = "22322",
    v22322 = "22323",
    v22323 = "22324",
    v22324 = "22325",
    v22325 = "22326",
    v22326 = "22327",
    v22327 = "22328",
    v22328 = "22329",
    v22329 = "22330",
    v22330 = "22331",
    v22331 = "22332",
    v22332 = "22333",
    v22333 = "22334",
    v22334 = "22335",
    v22335 = "22336",
    v22336 = "22337",
    v22337 = "22338",
    v22338 = "22347",
    v22339 = "22340",
    v22340 = "22341",
    v22341 = "22342",
    v22342 = "22344",
    v22343 = "22345",
    v22344 = "22346",
    v22345 = "ptcity",
    v22346 = "22343",
    v22347 = "22348",
    v22348 = "22349",
    v22349 = "22339"
  },
  ["the Tarean Ice Caverns"] = {
    v22567 = "22568",
    v22568 = "22569",
    v22569 = "22570",
    v22570 = "22571",
    v22571 = "22572",
    v22572 = "22573",
    v22573 = "22574",
    v22574 = "22575",
    v22575 = "22576",
    v22576 = "22584",
    v22577 = "22589",
    v22578 = "22577",
    v22579 = "22578",
    v22580 = "22579",
    v22581 = "22580",
    v22582 = "22581",
    v22583 = "22582",
    v22584 = "22583",
    v22586 = "22622",
    v22587 = "22586",
    v22588 = "22587",
    v22589 = "22590",
    v22590 = "22591",
    v22591 = "22592",
    v22592 = "22593",
    v22593 = "22594",
    v22594 = "22599",
    v22595 = "22588",
    v22596 = "22595",
    v22597 = "22596",
    v22598 = "22603",
    v22599 = "22601",
    v22600 = "22607",
    v22601 = "22600",
    v22602 = "22598",
    v22603 = "22606",
    v22604 = "22597",
    v22605 = "22608",
    v22606 = "22605",
    v22607 = "22602",
    v22608 = "22604",
    v22609 = "ptcity",
    v22610 = "22609",
    v22611 = "22610",
    v22612 = "22613",
    v22613 = "22611",
    v22614 = "22612",
    v22615 = "22614",
    v22616 = "22615",
    v22617 = "22616",
    v22618 = "22617",
    v22619 = "22618",
    v22620 = "22623",
    v22621 = "22620",
    v22622 = "22621",
    v22623 = "22624",
    v22624 = "22625",
    v22625 = "22626",
    v22626 = "22619"
  },
  ["the Temple of Sonn"] = {
    v16706 = "16715",
    v16707 = "16708",
    v16708 = "16709",
    v16709 = "16710",
    v16710 = "16711",
    v16711 = "16712",
    v16712 = "16713",
    v16713 = "16714",
    v16714 = "16717",
    v16715 = "16716",
    v16716 = "16707",
    v16717 = "16718",
    v16718 = "16719",
    v16719 = "16720",
    v16720 = "16721",
    v16721 = "16724",
    v16722 = "16723",
    v16723 = "16746",
    v16724 = "16725",
    v16725 = "16726",
    v16726 = "16727",
    v16727 = "16728",
    v16728 = "16729",
    v16729 = "16730",
    v16730 = "16731",
    v16731 = "16732",
    v16732 = "16733",
    v16733 = "16734",
    v16734 = "16735",
    v16735 = "16736",
    v16736 = "16722",
    v16740 = "16741",
    v16741 = "16742",
    v16742 = "16745",
    v16743 = "16747",
    v16744 = "16743",
    v16745 = "16744",
    v16746 = "16740",
    v16747 = "16748",
    v16748 = "16749",
    v16749 = "16750",
    v16750 = "16751",
    v16751 = "16752",
    v16752 = "16753",
    v16753 = "16754",
    v16754 = "16755",
    v16755 = "16756",
    v16756 = "16757",
    v16757 = "16758",
    v16758 = "16939",
    v16939 = "16940",
    v16940 = "16941",
    v16941 = "16942",
    v16942 = "16943",
    v16943 = "16949",
    v16944 = "16945",
    v16945 = "16948",
    v16946 = "16947",
    v16947 = "ptcity",
    v16948 = "16946",
    v16949 = "16956",
    v16950 = "16951",
    v16951 = "16952",
    v16952 = "16953",
    v16953 = "16954",
    v16954 = "16955",
    v16955 = "16944",
    v16956 = "16958",
    v16957 = "16950",
    v16958 = "16959",
    v16959 = "16957"
  },
  ["the Teshen Caldera"] = {
    v53178 = "53179",
    v53179 = "53181",
    v53180 = "54205",
    v53181 = "53241",
    v53241 = "53180",
    v53883 = "55356",
    v54203 = "53883",
    v54204 = "54203",
    v54205 = "54206",
    v54206 = "54204",
    v54207 = "54209",
    v54209 = "54242",
    v54242 = "54243",
    v54243 = "54256",
    v54244 = "54262",
    v54249 = "54271",
    v54250 = "54253",
    v54251 = "54394",
    v54252 = "54251",
    v54253 = "54252",
    v54256 = "54257",
    v54257 = "54259",
    v54259 = "54260",
    v54260 = "54261",
    v54261 = "54244",
    v54262 = "54270",
    v54270 = "54249",
    v54271 = "54250",
    v54394 = "54395",
    v54395 = "54396",
    v54396 = "54397",
    v54397 = "54398",
    v54398 = "54399",
    v54399 = "54400",
    v54400 = "ptcity",
    v55276 = "55277",
    v55277 = "55287",
    v55278 = "55279",
    v55279 = "55280",
    v55280 = "55292",
    v55281 = "55285",
    v55285 = "55286",
    v55286 = "55278",
    v55287 = "55289",
    v55288 = "55281",
    v55289 = "55290",
    v55290 = "55291",
    v55291 = "55288",
    v55292 = "55294",
    v55293 = "55327",
    v55294 = "55316",
    v55315 = "55317",
    v55316 = "55315",
    v55317 = "55318",
    v55318 = "55319",
    v55319 = "55326",
    v55320 = "55321",
    v55321 = "55322",
    v55322 = "55323",
    v55323 = "55324",
    v55324 = "55325",
    v55325 = "55293",
    v55326 = "55320",
    v55327 = "55334",
    v55328 = "55336",
    v55329 = "55337",
    v55330 = "55341",
    v55331 = "55332",
    v55332 = "55340",
    v55333 = "53178",
    v55334 = "55339",
    v55335 = "55338",
    v55336 = "55330",
    v55337 = "55328",
    v55338 = "55329",
    v55339 = "55335",
    v55340 = "55333",
    v55341 = "55342",
    v55342 = "55343",
    v55343 = "55344",
    v55344 = "55331",
    v55356 = "55357",
    v55357 = "55358",
    v55358 = "55359",
    v55359 = "55360",
    v55360 = "55361",
    v55361 = "55362",
    v55362 = "55363",
    v55363 = "55364",
    v55364 = "55365",
    v55365 = "55366",
    v55366 = "55367",
    v55367 = "55368",
    v55368 = "55369",
    v55369 = "55370",
    v55370 = "54207"
  },
  ["the Three Rock Outpost"] = {
    v20281 = "20282",
    v20282 = "20284",
    v20284 = "20285",
    v20285 = "20286",
    v20286 = "20287",
    v20287 = "20288",
    v20288 = "20289",
    v20289 = "20290",
    v20290 = "20291",
    v20291 = "20292",
    v20292 = "20293",
    v20293 = "20294",
    v20294 = "20295",
    v20295 = "20318",
    v20296 = "20297",
    v20297 = "20298",
    v20298 = "20299",
    v20299 = "20300",
    v20300 = "20301",
    v20301 = "20310",
    v20309 = "20311",
    v20310 = "20309",
    v20311 = "20312",
    v20312 = "20319",
    v20313 = "20296",
    v20314 = "20313",
    v20315 = "20314",
    v20316 = "20315",
    v20317 = "20316",
    v20318 = "20317",
    v20319 = "20320",
    v20320 = "20321",
    v20321 = "20322",
    v20322 = "20323",
    v20323 = "20337",
    v20324 = "20325",
    v20325 = "20327",
    v20327 = "20328",
    v20328 = "20353",
    v20329 = "20330",
    v20330 = "20331",
    v20331 = "20339",
    v20333 = "20352",
    v20334 = "20335",
    v20335 = "20333",
    v20336 = "20334",
    v20337 = "20336",
    v20339 = "20340",
    v20340 = "20342",
    v20342 = "20343",
    v20343 = "20344",
    v20344 = "20345",
    v20345 = "20346",
    v20346 = "20347",
    v20347 = "20348",
    v20348 = "20349",
    v20349 = "48414",
    v20352 = "20324",
    v20353 = "20329",
    v48413 = "48417",
    v48414 = "48415",
    v48415 = "48416",
    v48416 = "48413",
    v48417 = "48418",
    v48418 = "48419",
    v48419 = "ptcity"
  },
  ["the Torturers' Caverns"] = {
    v23202 = "23203",
    v23203 = "23204",
    v23204 = "23205",
    v23205 = "23206",
    v23206 = "23207",
    v23207 = "23208",
    v23208 = "23209",
    v23209 = "23210",
    v23210 = "23211",
    v23211 = "23212",
    v23212 = "23213",
    v23213 = "23214",
    v23214 = "23215",
    v23215 = "23216",
    v23216 = "23217",
    v23217 = "23218",
    v23218 = "23219",
    v23219 = "23220",
    v23220 = "23221",
    v23221 = "23222",
    v23222 = "23223",
    v23223 = "23224",
    v23224 = "23225",
    v23225 = "23265",
    v23226 = "23230",
    v23227 = "23226",
    v23228 = "23227",
    v23229 = "23228",
    v23230 = "23231",
    v23231 = "23232",
    v23232 = "23233",
    v23233 = "23234",
    v23234 = "23235",
    v23235 = "23238",
    v23236 = "ptcity",
    v23237 = "23236",
    v23238 = "23237",
    v23239 = "23240",
    v23240 = "23241",
    v23241 = "23242",
    v23242 = "23243",
    v23243 = "23244",
    v23244 = "23245",
    v23245 = "23249",
    v23246 = "23250",
    v23247 = "23246",
    v23248 = "23247",
    v23249 = "23248",
    v23250 = "23251",
    v23251 = "23252",
    v23252 = "23253",
    v23253 = "23254",
    v23254 = "23255",
    v23255 = "23256",
    v23256 = "23257",
    v23257 = "23229",
    v23265 = "23266",
    v23266 = "23267",
    v23267 = "23268",
    v23268 = "23269",
    v23269 = "23270",
    v23270 = "23271",
    v23271 = "23272",
    v23272 = "23284",
    v23273 = "23283",
    v23274 = "23281",
    v23275 = "23276",
    v23276 = "23277",
    v23277 = "23278",
    v23278 = "23285",
    v23279 = "23280",
    v23280 = "23273",
    v23281 = "23275",
    v23282 = "23274",
    v23283 = "23282",
    v23284 = "23279",
    v23285 = "23286",
    v23286 = "23287",
    v23287 = "23288",
    v23288 = "23289",
    v23289 = "23291",
    v23290 = "23292",
    v23291 = "23290",
    v23292 = "23293",
    v23293 = "23294",
    v23294 = "23295",
    v23295 = "23296",
    v23296 = "23297",
    v23297 = "23298",
    v23298 = "23300",
    v23300 = "23301",
    v23301 = "23302",
    v23302 = "23303",
    v23303 = "23304",
    v23304 = "23305",
    v23305 = "23306",
    v23306 = "23307",
    v23307 = "23310",
    v23308 = "23311",
    v23309 = "23308",
    v23310 = "23309",
    v23311 = "23312",
    v23312 = "23313",
    v23313 = "23314",
    v23314 = "23315",
    v23315 = "23319",
    v23316 = "23321",
    v23317 = "23316",
    v23318 = "23317",
    v23319 = "23322",
    v23321 = "23239",
    v23322 = "23318"
  },
  ["the Undercity of Djeir"] = {
    v11994 = "12053",
    v12053 = "12056",
    v12054 = "12057",
    v12055 = "12060",
    v12056 = "12054",
    v12057 = "12058",
    v12058 = "12059",
    v12059 = "12055",
    v12060 = "12066",
    v12061 = "12067",
    v12062 = "12061",
    v12063 = "12062",
    v12064 = "12063",
    v12065 = "12064",
    v12066 = "12065",
    v12067 = "12068",
    v12068 = "12069",
    v12069 = "12070",
    v12070 = "12071",
    v12071 = "12072",
    v12072 = "12074",
    v12073 = "12076",
    v12074 = "12075",
    v12075 = "12078",
    v12076 = "12080",
    v12077 = "12073",
    v12078 = "12079",
    v12079 = "12082",
    v12080 = "12084",
    v12081 = "12077",
    v12082 = "12083",
    v12083 = "12089",
    v12084 = "53622",
    v12085 = "12081",
    v12086 = "12090",
    v12087 = "12091",
    v12088 = "12092",
    v12089 = "12088",
    v12090 = "12085",
    v12091 = "12086",
    v12092 = "12094",
    v12093 = "12095",
    v12094 = "12093",
    v12095 = "12087",
    v12097 = "12103",
    v12099 = "12097",
    v12100 = "12102",
    v12101 = "12100",
    v12102 = "12111",
    v12103 = "12114",
    v12104 = "12106",
    v12105 = "12107",
    v12106 = "12105",
    v12107 = "12101",
    v12111 = "12112",
    v12112 = "12113",
    v12113 = "12117",
    v12114 = "12116",
    v12115 = "12104",
    v12116 = "12115",
    v12117 = "12226",
    v12118 = "12099",
    v12226 = "12227",
    v12227 = "12228",
    v12228 = "12229",
    v12229 = "12230",
    v12230 = "12231",
    v12231 = "12253",
    v12232 = "12233",
    v12233 = "12234",
    v12234 = "12235",
    v12235 = "12236",
    v12236 = "12237",
    v12237 = "12238",
    v12238 = "12239",
    v12239 = "12118",
    v12240 = "12241",
    v12241 = "12242",
    v12242 = "12243",
    v12243 = "12244",
    v12244 = "12245",
    v12245 = "12246",
    v12246 = "12247",
    v12247 = "12232",
    v12248 = "12240",
    v12249 = "12248",
    v12250 = "12249",
    v12251 = "12250",
    v12252 = "12251",
    v12253 = "12254",
    v12254 = "12255",
    v12255 = "ptcity",
    v12256 = "12307",
    v12289 = "12256",
    v12290 = "12291",
    v12291 = "12292",
    v12292 = "12337",
    v12293 = "12342",
    v12294 = "12363",
    v12297 = "12289",
    v12298 = "12297",
    v12299 = "12298",
    v12300 = "12299",
    v12301 = "12300",
    v12302 = "12252",
    v12303 = "12302",
    v12304 = "12303",
    v12305 = "12304",
    v12306 = "12305",
    v12307 = "12308",
    v12308 = "12327",
    v12309 = "12310",
    v12310 = "12311",
    v12311 = "12312",
    v12312 = "12313",
    v12313 = "12314",
    v12314 = "12319",
    v12315 = "12306",
    v12319 = "12320",
    v12320 = "12323",
    v12321 = "12322",
    v12322 = "12325",
    v12323 = "12324",
    v12324 = "12321",
    v12325 = "12326",
    v12326 = "12315",
    v12327 = "13126",
    v12328 = "12590",
    v12329 = "12330",
    v12330 = "12589",
    v12337 = "12338",
    v12338 = "12339",
    v12339 = "12341",
    v12340 = "12293",
    v12341 = "12340",
    v12342 = "12343",
    v12343 = "12344",
    v12344 = "12347",
    v12345 = "12346",
    v12346 = "12294",
    v12347 = "12345",
    v12348 = "12358",
    v12358 = "12359",
    v12359 = "12360",
    v12360 = "12361",
    v12361 = "12362",
    v12362 = "17677",
    v12363 = "12348",
    v12589 = "12290",
    v12590 = "12591",
    v12591 = "12329",
    v13126 = "12328",
    v17677 = "17911",
    v17903 = "17904",
    v17904 = "17905",
    v17905 = "17907",
    v17906 = "12309",
    v17907 = "17909",
    v17908 = "17906",
    v17909 = "17910",
    v17910 = "17908",
    v17911 = "17903",
    v53622 = "53623",
    v53623 = "53624",
    v53624 = "53625",
    v53625 = "53626",
    v53626 = "53627",
    v53627 = "53629",
    v53629 = "53630",
    v53630 = "53631",
    v53631 = "53632",
    v53632 = "12301"
  },
  ["the Valley of Kalebb"] = {
    v5340 = "6720",
    v5341 = "5340",
    v6162 = "6165",
    v6165 = "8756",
    v6718 = "8758",
    v6719 = "8746",
    v6720 = "9090",
    v8694 = "8700",
    v8700 = "8701",
    v8701 = "8702",
    v8702 = "8703",
    v8703 = "8704",
    v8704 = "8713",
    v8705 = "8706",
    v8706 = "8707",
    v8707 = "8711",
    v8709 = "8710",
    v8710 = "8715",
    v8711 = "8709",
    v8712 = "8705",
    v8713 = "8731",
    v8714 = "8712",
    v8715 = "8727",
    v8726 = "8729",
    v8727 = "8728",
    v8728 = "8743",
    v8729 = "8730",
    v8730 = "8753",
    v8731 = "8734",
    v8732 = "8735",
    v8733 = "8714",
    v8734 = "8740",
    v8735 = "8741",
    v8736 = "8742",
    v8737 = "8738",
    v8738 = "8739",
    v8739 = "8732",
    v8740 = "8737",
    v8741 = "8736",
    v8742 = "8733",
    v8743 = "8726",
    v8744 = "ptcity",
    v8745 = "8749",
    v8746 = "8757",
    v8747 = "5341",
    v8748 = "8745",
    v8749 = "6162",
    v8750 = "8747",
    v8751 = "8748",
    v8753 = "8754",
    v8754 = "8755",
    v8755 = "8751",
    v8756 = "6719",
    v8757 = "6718",
    v8758 = "8750",
    v9090 = "9091",
    v9091 = "9092",
    v9092 = "9093",
    v9093 = "8744"
  },
  ["the Valley of Lodi"] = {
    v3883 = "3884",
    v3884 = "4178",
    v3901 = "3966",
    v3966 = "3967",
    v3967 = "3968",
    v3968 = "7606",
    v3971 = "3972",
    v3972 = "3973",
    v3973 = "3975",
    v3974 = "3983",
    v3975 = "3976",
    v3976 = "3978",
    v3977 = "3980",
    v3978 = "3979",
    v3979 = "3977",
    v3980 = "3981",
    v3981 = "3982",
    v3982 = "3974",
    v3983 = "3984",
    v3984 = "3985",
    v3985 = "3986",
    v3986 = "4092",
    v4092 = "4093",
    v4093 = "4094",
    v4094 = "4095",
    v4095 = "4096",
    v4096 = "4097",
    v4097 = "4098",
    v4098 = "4099",
    v4099 = "ptcity",
    v4178 = "3901",
    v7606 = "3971"
  },
  ["the Vilimo Fields"] = {
    v21365 = "21366",
    v21366 = "21368",
    v21367 = "24630",
    v21368 = "21367",
    v21372 = "21373",
    v21373 = "21376",
    v21374 = "21375",
    v21375 = "21389",
    v21376 = "21377",
    v21377 = "21374",
    v21378 = "21409",
    v21384 = "21385",
    v21385 = "21386",
    v21386 = "21387",
    v21387 = "21388",
    v21388 = "ptcity",
    v21389 = "21390",
    v21390 = "21392",
    v21391 = "21395",
    v21392 = "21393",
    v21393 = "21391",
    v21394 = "21399",
    v21395 = "21396",
    v21396 = "21398",
    v21397 = "21384",
    v21398 = "21397",
    v21399 = "21401",
    v21400 = "21372",
    v21401 = "21402",
    v21402 = "21403",
    v21403 = "21400",
    v21404 = "21405",
    v21405 = "21406",
    v21406 = "21420",
    v21407 = "21378",
    v21408 = "21407",
    v21409 = "21410",
    v21410 = "21411",
    v21411 = "21539",
    v21412 = "21394",
    v21413 = "21423",
    v21414 = "21413",
    v21415 = "21416",
    v21416 = "21417",
    v21417 = "21414",
    v21418 = "21415",
    v21419 = "21418",
    v21420 = "21419",
    v21421 = "21408",
    v21422 = "21421",
    v21423 = "21422",
    v21535 = "21536",
    v21536 = "21537",
    v21537 = "21538",
    v21538 = "21412",
    v21539 = "21535",
    v24628 = "24629",
    v24629 = "21365",
    v24630 = "21404"
  },
  ["the Village of Kornar"] = {
    v21286 = "21291",
    v21287 = "21297",
    v21288 = "21300",
    v21289 = "21357",
    v21290 = "21431",
    v21291 = "21292",
    v21292 = "21293",
    v21293 = "21295",
    v21294 = "21287",
    v21295 = "21296",
    v21296 = "21294",
    v21297 = "21299",
    v21298 = "21288",
    v21299 = "21298",
    v21300 = "21301",
    v21301 = "21302",
    v21302 = "21289",
    v21357 = "21358",
    v21358 = "21359",
    v21359 = "21361",
    v21360 = "21430",
    v21361 = "21362",
    v21362 = "21363",
    v21363 = "21364",
    v21364 = "21360",
    v21425 = "21427",
    v21426 = "21436",
    v21427 = "21426",
    v21428 = "21425",
    v21430 = "21290",
    v21431 = "21433",
    v21432 = "21434",
    v21433 = "21432",
    v21434 = "21435",
    v21435 = "21428",
    v21436 = "21437",
    v21437 = "21438",
    v21438 = "21439",
    v21439 = "21440",
    v21440 = "24640",
    v21442 = "21443",
    v21443 = "21444",
    v21444 = "21445",
    v21445 = "21447",
    v21446 = "21448",
    v21447 = "21446",
    v21448 = "21449",
    v21449 = "21450",
    v21450 = "21457",
    v21451 = "21452",
    v21452 = "21453",
    v21453 = "21459",
    v21454 = "21451",
    v21455 = "21454",
    v21456 = "21455",
    v21457 = "21458",
    v21458 = "21456",
    v21459 = "21460",
    v21460 = "21461",
    v21461 = "21462",
    v21462 = "21463",
    v21463 = "21464",
    v21464 = "21465",
    v21465 = "ptcity",
    v24640 = "21442"
  },
  ["the village of Torston"] = {
    v17428 = "17600",
    v17429 = "17428",
    v17430 = "17432",
    v17431 = "17430",
    v17432 = "17549",
    v17526 = "17431",
    v17527 = "17528",
    v17528 = "17529",
    v17529 = "17530",
    v17530 = "17531",
    v17531 = "17535",
    v17532 = "17533",
    v17533 = "20278",
    v17534 = "17532",
    v17535 = "17534",
    v17536 = "17527",
    v17537 = "17632",
    v17538 = "17539",
    v17539 = "17540",
    v17540 = "17541",
    v17541 = "17543",
    v17542 = "17547",
    v17543 = "17542",
    v17544 = "17545",
    v17545 = "17546",
    v17546 = "17537",
    v17547 = "17544",
    v17548 = "17429",
    v17549 = "17615",
    v17551 = "17552",
    v17552 = "ptcity",
    v17553 = "17551",
    v17554 = "17553",
    v17555 = "17556",
    v17556 = "17554",
    v17594 = "17596",
    v17595 = "17597",
    v17596 = "17555",
    v17597 = "17599",
    v17598 = "17595",
    v17599 = "17594",
    v17600 = "17598",
    v17612 = "17613",
    v17613 = "17616",
    v17614 = "17548",
    v17615 = "17614",
    v17616 = "17538",
    v17626 = "17536",
    v17628 = "17629",
    v17629 = "17626",
    v17630 = "17628",
    v17632 = "17630",
    v20278 = "17526"
  },
  ["the Western Itzatl Rainforest"] = {
    v10279 = "10280",
    v10280 = "9870",
    v10949 = "10959",
    v10950 = "10949",
    v10951 = "10950",
    v10952 = "10951",
    v10953 = "10954",
    v10954 = "10952",
    v10955 = "10953",
    v10956 = "10955",
    v10957 = "10956",
    v10958 = "11118",
    v10959 = "10958",
    v11118 = "11119",
    v11119 = "11128",
    v11120 = "11123",
    v11121 = "11120",
    v11122 = "11121",
    v11123 = "11124",
    v11124 = "11125",
    v11125 = "11126",
    v11126 = "11127",
    v11127 = "11201",
    v11128 = "11129",
    v11129 = "17912",
    v11130 = "11132",
    v11131 = "11130",
    v11132 = "11133",
    v11133 = "11135",
    v11134 = "11161",
    v11135 = "11134",
    v11136 = "11137",
    v11137 = "11138",
    v11138 = "11139",
    v11139 = "11140",
    v11140 = "11141",
    v11141 = "11142",
    v11142 = "11143",
    v11143 = "11122",
    v11144 = "11145",
    v11145 = "11146",
    v11146 = "11147",
    v11147 = "11148",
    v11148 = "11149",
    v11149 = "11150",
    v11150 = "11151",
    v11151 = "11152",
    v11152 = "11153",
    v11153 = "11202",
    v11154 = "11136",
    v11155 = "11164",
    v11156 = "11163",
    v11157 = "11156",
    v11158 = "11159",
    v11159 = "11157",
    v11160 = "11158",
    v11161 = "11160",
    v11162 = "11155",
    v11163 = "11162",
    v11164 = "11165",
    v11165 = "11166",
    v11166 = "11154",
    v11167 = "11144",
    v11170 = "11167",
    v11171 = "11170",
    v11172 = "11171",
    v11175 = "11172",
    v11176 = "11175",
    v11177 = "11178",
    v11178 = "11179",
    v11179 = "11180",
    v11180 = "11181",
    v11181 = "11183",
    v11183 = "11184",
    v11184 = "11185",
    v11185 = "11186",
    v11186 = "11187",
    v11187 = "11188",
    v11188 = "11189",
    v11189 = "11190",
    v11190 = "11191",
    v11191 = "11192",
    v11192 = "11176",
    v11193 = "11194",
    v11194 = "11195",
    v11195 = "11196",
    v11196 = "11197",
    v11197 = "11198",
    v11198 = "11177",
    v11199 = "11193",
    v11200 = "11199",
    v11201 = "11200",
    v11202 = "11203",
    v11203 = "11204",
    v11204 = "11206",
    v11205 = "11207",
    v11206 = "11205",
    v11207 = "11208",
    v11208 = "11209",
    v11209 = "11213",
    v11210 = "11211",
    v11211 = "11214",
    v11213 = "11210",
    v11214 = "11215",
    v11215 = "11216",
    v11216 = "11217",
    v11217 = "11218",
    v11218 = "11219",
    v11219 = "11220",
    v11220 = "11221",
    v11221 = "11223",
    v11223 = "11230",
    v11224 = "11225",
    v11225 = "9878",
    v11226 = "11224",
    v11227 = "11226",
    v11228 = "11227",
    v11229 = "11228",
    v11230 = "11229",
    v17912 = "11131",
    v9853 = "9887",
    v9854 = "9857",
    v9855 = "9854",
    v9856 = "9855",
    v9857 = "9858",
    v9858 = "9859",
    v9859 = "9860",
    v9860 = "9861",
    v9861 = "9862",
    v9862 = "9898",
    v9863 = "9897",
    v9864 = "9863",
    v9866 = "9871",
    v9867 = "9866",
    v9868 = "9867",
    v9869 = "9868",
    v9870 = "9869",
    v9871 = "9872",
    v9872 = "9873",
    v9873 = "9874",
    v9874 = "9875",
    v9875 = "9876",
    v9876 = "9877",
    v9877 = "10957",
    v9878 = "9879",
    v9879 = "9880",
    v9880 = "9881",
    v9881 = "9882",
    v9882 = "9883",
    v9883 = "9884",
    v9884 = "9885",
    v9885 = "ptcity",
    v9887 = "9888",
    v9888 = "9889",
    v9889 = "9890",
    v9890 = "9856",
    v9891 = "9892",
    v9892 = "9902",
    v9893 = "9891",
    v9894 = "9893",
    v9895 = "9894",
    v9896 = "9895",
    v9897 = "9896",
    v9898 = "9899",
    v9899 = "9900",
    v9900 = "9901",
    v9901 = "9864",
    v9902 = "9903",
    v9903 = "10279"
  },
  ["the Western Tundra"] = {
    v18082 = "18083",
    v18083 = "18128",
    v18084 = "18085",
    v18085 = "18089",
    v18086 = "18090",
    v18087 = "18084",
    v18088 = "18086",
    v18089 = "18088",
    v18090 = "18091",
    v18091 = "18092",
    v18092 = "18094",
    v18093 = "18095",
    v18094 = "18093",
    v18095 = "18096",
    v18096 = "18097",
    v18097 = "18098",
    v18098 = "18101",
    v18100 = "18087",
    v18101 = "18104",
    v18102 = "18127",
    v18103 = "18102",
    v18104 = "18105",
    v18105 = "18106",
    v18106 = "18107",
    v18107 = "18108",
    v18108 = "18109",
    v18109 = "18111",
    v18111 = "18114",
    v18112 = "18113",
    v18113 = "18121",
    v18114 = "18115",
    v18115 = "18116",
    v18116 = "18118",
    v18117 = "18112",
    v18118 = "18119",
    v18119 = "18117",
    v18120 = "18103",
    v18121 = "18122",
    v18122 = "18123",
    v18123 = "18120",
    v18124 = "18125",
    v18125 = "18132",
    v18126 = "18124",
    v18127 = "18126",
    v18128 = "18100",
    v18129 = "ptcity",
    v18130 = "18136",
    v18132 = "67759",
    v18133 = "18169",
    v18134 = "18135",
    v18135 = "18130",
    v18136 = "18143",
    v18138 = "18129",
    v18140 = "18142",
    v18141 = "18179",
    v18142 = "18141",
    v18143 = "18144",
    v18144 = "18150",
    v18145 = "18163",
    v18146 = "18147",
    v18147 = "18134",
    v18148 = "18146",
    v18149 = "18145",
    v18150 = "18149",
    v18151 = "18140",
    v18152 = "18151",
    v18153 = "18152",
    v18155 = "18156",
    v18156 = "18153",
    v18157 = "18155",
    v18160 = "18157",
    v18161 = "18162",
    v18162 = "18160",
    v18163 = "18164",
    v18164 = "18166",
    v18165 = "18161",
    v18166 = "18165",
    v18167 = "18170",
    v18168 = "18167",
    v18169 = "18168",
    v18170 = "18171",
    v18171 = "18148",
    v18172 = "18138",
    v18173 = "18174",
    v18174 = "18172",
    v18175 = "18173",
    v18176 = "18175",
    v18177 = "18176",
    v18178 = "18180",
    v18179 = "18178",
    v18180 = "18181",
    v18181 = "18182",
    v18182 = "18187",
    v18183 = "18184",
    v18184 = "18177",
    v18185 = "18186",
    v18186 = "18183",
    v18187 = "18189",
    v18188 = "18185",
    v18189 = "18188",
    v67759 = "18133"
  },
  ["the beaches of Liris"] = {
    v19814 = "19815",
    v19815 = "19816",
    v19816 = "19817",
    v19817 = "19818",
    v19818 = "19819",
    v19819 = "19820",
    v19820 = "19821",
    v19821 = "19822",
    v19822 = "19823",
    v19823 = "19824",
    v19824 = "19825",
    v19825 = "19827",
    v19827 = "19828",
    v19828 = "19829",
    v19829 = "19830",
    v19830 = "19831",
    v19831 = "19832",
    v19832 = "19833",
    v19833 = "19834",
    v19834 = "19835",
    v19835 = "19841",
    v19836 = "19837",
    v19837 = "19842",
    v19838 = "19836",
    v19839 = "19838",
    v19840 = "19839",
    v19841 = "19840",
    v19842 = "19843",
    v19843 = "19844",
    v19844 = "19845",
    v19845 = "ptcity"
  },
  ["the forgotten depths of Mount Helba"] = {
    v57086 = "57087",
    v57087 = "57088",
    v57088 = "57089",
    v57089 = "57090",
    v57090 = "57091",
    v57091 = "57092",
    v57092 = "57093",
    v57093 = "57094",
    v57094 = "57095",
    v57095 = "57096",
    v57096 = "57097",
    v57097 = "57098",
    v57098 = "57099",
    v57099 = "57100",
    v57100 = "57101",
    v57101 = "57102",
    v57102 = "57103",
    v57103 = "57105",
    v57104 = "57106",
    v57105 = "57104",
    v57106 = "57107",
    v57107 = "57108",
    v57108 = "57109",
    v57109 = "57110",
    v57110 = "57111",
    v57111 = "57112",
    v57112 = "57113",
    v57113 = "57114",
    v57114 = "57115",
    v57115 = "57116",
    v57116 = "57117",
    v57117 = "57118",
    v57118 = "57119",
    v57119 = "ptcity"
  },
  ["the lost city of Iviofiyiedu"] = {
    v55190 = "55747",
    v55653 = "55654",
    v55654 = "55656",
    v55655 = "55676",
    v55656 = "55657",
    v55657 = "55659",
    v55658 = "55660",
    v55659 = "55658",
    v55660 = "55661",
    v55661 = "55662",
    v55662 = "55664",
    v55663 = "55665",
    v55664 = "55671",
    v55665 = "55666",
    v55666 = "55667",
    v55667 = "55668",
    v55668 = "55669",
    v55669 = "55670",
    v55670 = "55689",
    v55671 = "55672",
    v55672 = "55673",
    v55673 = "55674",
    v55674 = "55675",
    v55675 = "55663",
    v55676 = "55677",
    v55677 = "55678",
    v55678 = "55679",
    v55679 = "55680",
    v55680 = "55681",
    v55681 = "55682",
    v55682 = "55684",
    v55683 = "55685",
    v55684 = "55683",
    v55685 = "55688",
    v55686 = "55852",
    v55687 = "55686",
    v55688 = "55687",
    v55689 = "55690",
    v55690 = "55691",
    v55691 = "55692",
    v55692 = "55693",
    v55693 = "55695",
    v55694 = "55844",
    v55695 = "55694",
    v55696 = "55848",
    v55747 = "55748",
    v55748 = "55889",
    v55844 = "55845",
    v55845 = "55846",
    v55846 = "55847",
    v55847 = "55696",
    v55848 = "55851",
    v55849 = "55850",
    v55850 = "55655",
    v55851 = "55849",
    v55852 = "56570",
    v55889 = "56433",
    v56138 = "56139",
    v56139 = "56140",
    v56140 = "56141",
    v56141 = "56142",
    v56142 = "56519",
    v56153 = "56155",
    v56154 = "55653",
    v56155 = "56156",
    v56156 = "56157",
    v56157 = "56158",
    v56158 = "56160",
    v56159 = "56161",
    v56160 = "56159",
    v56161 = "56162",
    v56162 = "56163",
    v56163 = "56164",
    v56164 = "56166",
    v56165 = "56154",
    v56166 = "56165",
    v56278 = "56357",
    v56357 = "56153",
    v56433 = "56434",
    v56434 = "56435",
    v56435 = "56512",
    v56512 = "56513",
    v56513 = "56138",
    v56519 = "56520",
    v56520 = "56278",
    v56550 = "56551",
    v56551 = "56553",
    v56552 = "56550",
    v56553 = "56554",
    v56554 = "56556",
    v56555 = "56557",
    v56556 = "56559",
    v56557 = "56558",
    v56558 = "ptcity",
    v56559 = "56555",
    v56564 = "56552",
    v56565 = "56566",
    v56566 = "56568",
    v56567 = "56565",
    v56568 = "56564",
    v56569 = "56567",
    v56570 = "56569"
  },
  ["the mines of Mount Helba"] = {
    v23358 = "23359",
    v23359 = "23360",
    v23360 = "23361",
    v23361 = "23362",
    v23362 = "23363",
    v23363 = "23364",
    v23364 = "23365",
    v23365 = "23366",
    v23366 = "23367",
    v23367 = "23368",
    v23368 = "23369",
    v23369 = "23370",
    v23370 = "23371",
    v23371 = "23372",
    v23372 = "23373",
    v23373 = "52356",
    v51824 = "51825",
    v51825 = "51827",
    v51827 = "51828",
    v51828 = "58025",
    v52356 = "52357",
    v52357 = "52358",
    v52358 = "52359",
    v52359 = "52360",
    v52360 = "52612",
    v52612 = "52613",
    v52613 = "52615",
    v52614 = "52616",
    v52615 = "52614",
    v52616 = "51824",
    v58021 = "58022",
    v58022 = "58023",
    v58023 = "58024",
    v58024 = "58029",
    v58025 = "58027",
    v58026 = "58030",
    v58027 = "58028",
    v58028 = "58021",
    v58029 = "58032",
    v58030 = "58042",
    v58031 = "58033",
    v58032 = "58038",
    v58033 = "58034",
    v58034 = "58035",
    v58035 = "58036",
    v58036 = "58037",
    v58037 = "ptcity",
    v58038 = "58039",
    v58039 = "58040",
    v58040 = "58041",
    v58041 = "58026",
    v58042 = "58043",
    v58043 = "58044",
    v58044 = "58045",
    v58045 = "58031"
  },
  ["the village of Bihrkaen"] = {
    v3846 = "56892",
    v56647 = "56648",
    v56648 = "56649",
    v56649 = "56775",
    v56774 = "56781",
    v56775 = "56783",
    v56781 = "56782",
    v56782 = "ptcity",
    v56783 = "56784",
    v56784 = "56835",
    v56835 = "56839",
    v56839 = "56848",
    v56848 = "56872",
    v56851 = "56856",
    v56856 = "56774",
    v56871 = "56874",
    v56872 = "56894",
    v56873 = "56871",
    v56874 = "56875",
    v56875 = "56876",
    v56876 = "56891",
    v56891 = "3846",
    v56892 = "56893",
    v56893 = "56851",
    v56894 = "57260",
    v56897 = "56898",
    v56898 = "56873",
    v56899 = "56897",
    v56930 = "56981",
    v56931 = "56930",
    v56932 = "56933",
    v56933 = "56934",
    v56934 = "56899",
    v56935 = "56984",
    v56936 = "58065",
    v56943 = "57033",
    v56944 = "56943",
    v56945 = "56944",
    v56946 = "56976",
    v56976 = "56936",
    v56978 = "57030",
    v56979 = "56980",
    v56980 = "56978",
    v56981 = "56932",
    v56982 = "56979",
    v56983 = "57034",
    v56984 = "56983",
    v57030 = "57031",
    v57031 = "58055",
    v57032 = "56946",
    v57033 = "56931",
    v57034 = "56982",
    v57259 = "56935",
    v57260 = "57930",
    v57930 = "57259",
    v58055 = "57032",
    v58065 = "58318",
    v58318 = "58319",
    v58319 = "58323",
    v58320 = "58324",
    v58321 = "58327",
    v58322 = "58325",
    v58323 = "58326",
    v58324 = "56945",
    v58325 = "58321",
    v58326 = "58322",
    v58327 = "58320"
  },
  ["the village of Gorshire"] = {
    v12702 = "2930",
    v12740 = "12741",
    v12741 = "12744",
    v12742 = "12745",
    v12744 = "12747",
    v12745 = "12746",
    v12746 = "12702",
    v12747 = "12742",
    v2930 = "66326",
    v6182 = "7661",
    v6206 = "65856",
    v6214 = "ptcity",
    v6215 = "6214",
    v6216 = "6215",
    v65851 = "65852",
    v65852 = "65853",
    v65853 = "65854",
    v65854 = "65855",
    v65855 = "6206",
    v65856 = "65926",
    v65858 = "65903",
    v65896 = "66003",
    v65899 = "66108",
    v65900 = "65899",
    v65901 = "65900",
    v65902 = "65901",
    v65903 = "65896",
    v65904 = "65953",
    v65926 = "65927",
    v65927 = "66107",
    v65953 = "66059",
    v66003 = "66007",
    v66007 = "66008",
    v66008 = "66341",
    v66009 = "65904",
    v66059 = "66142",
    v66076 = "66077",
    v66077 = "65851",
    v66078 = "66076",
    v66095 = "66009",
    v66101 = "65902",
    v66106 = "65858",
    v66107 = "66106",
    v66108 = "66109",
    v66109 = "66110",
    v66110 = "66111",
    v66111 = "66112",
    v66112 = "66117",
    v66117 = "12740",
    v66142 = "66101",
    v66228 = "66095",
    v66326 = "66327",
    v66327 = "66328",
    v66328 = "66329",
    v66329 = "66406",
    v66341 = "66228",
    v66406 = "66407",
    v66407 = "6182",
    v7661 = "7662",
    v7662 = "7663",
    v7663 = "7664",
    v7664 = "6216"
  },
  ["the village of Rahveir"] = {
    v18968 = "18969",
    v18969 = "18970",
    v18970 = "18971",
    v18971 = "18973",
    v18972 = "18974",
    v18973 = "19015",
    v18974 = "19006",
    v18975 = "18976",
    v18976 = "18977",
    v18977 = "18978",
    v18978 = "18979",
    v18979 = "19020",
    v19005 = "19008",
    v19006 = "19005",
    v19007 = "19009",
    v19008 = "19010",
    v19009 = "18975",
    v19010 = "19013",
    v19011 = "19012",
    v19012 = "19428",
    v19013 = "19014",
    v19014 = "19011",
    v19015 = "19016",
    v19016 = "19017",
    v19017 = "18972",
    v19020 = "19021",
    v19021 = "19022",
    v19022 = "19024",
    v19023 = "19025",
    v19024 = "19023",
    v19025 = "19027",
    v19026 = "19028",
    v19027 = "19026",
    v19028 = "19029",
    v19029 = "19030",
    v19030 = "19031",
    v19031 = "19036",
    v19032 = "19033",
    v19033 = "19034",
    v19034 = "19035",
    v19035 = "ptcity",
    v19036 = "19032",
    v19428 = "19007"
  },
   ["the Village of Craneskull"] = {
    v33243 = "ptcity",
    v3491 = "3492",
    v3492 = "3494",
    v3493 = "3496",
    v3494 = "3493",
    v3496 = "3502",
    v3497 = "3498",
    v3498 = "3499",
    v3499 = "3515",
    v3501 = "3497",
    v3502 = "3503",
    v3503 = "3504",
    v3504 = "3505",
    v3505 = "3514",
    v3506 = "3501",
    v3507 = "3508",
    v3508 = "3506",
    v3513 = "3507",
    v3514 = "3513",
    v3515 = "3518",
    v3516 = "3680",
    v3517 = "3698",
    v3518 = "3519",
    v3519 = "3520",
    v3520 = "3516",
    v3521 = "3681",
    v3553 = "3554",
    v3554 = "3555",
    v3555 = "3556",
    v3556 = "3662",
    v3662 = "3663",
    v3663 = "3664",
    v3664 = "3665",
    v3665 = "3666",
    v3666 = "3667",
    v3667 = "3668",
    v3668 = "3673",
    v3669 = "3670",
    v3670 = "3674",
    v3671 = "3669",
    v3672 = "33243",
    v3673 = "3675",
    v3674 = "3676",
    v3675 = "3671",
    v3676 = "3678",
    v3677 = "3491",
    v3678 = "3677",
    v3679 = "3521",
    v3680 = "3679",
    v3681 = "3682",
    v3682 = "3517",
    v3698 = "3699",
    v3699 = "3700",
    v3700 = "3701",
    v3701 = "3702",
    v3702 = "3703",
    v3703 = "3704",
    v3704 = "3705",
    v3705 = "3706",
    v3706 = "3672",
    v4733 = "4735",
  },
  ["a volcanic island"] = {
    v75426 = "75627",
    v75427 = "75565",
    v75494 = "75819",
    v75495 = "75558",
    v75520 = "75494",
    v75534 = "75760",
    v75558 = "75520",
    v75565 = "75534",
    v75601 = "75426",
    v75626 = "75657",
    v75627 = "76545",
    v75656 = "76204",
    v75657 = "76210",
    v75739 = "75740",
    v75740 = "75769",
    v75756 = "77201",
    v75760 = "75601",
    v75761 = "76620",
    v75763 = "76212",
    v75764 = "76510",
    v75769 = "76469",
    v75770 = "75427",
    v75776 = "76484",
    v75778 = "76567",
    v75806 = "75764",
    v75808 = "76470",
    v75809 = "75778",
    v75819 = "75770",
    v76036 = "76602",
    v76037 = "76568",
    v76038 = "76037",
    v76044 = "76601",
    v76047 = "77284",
    v76048 = "76047",
    v76051 = "76048",
    v76053 = "76854",
    v76198 = "75776",
    v76199 = "76044",
    v76200 = "76199",
    v76203 = "76209",
    v76204 = "76504",
    v76209 = "76690",
    v76210 = "75656",
    v76212 = "76486",
    v76213 = "76572",
    v76214 = "75806",
    v76218 = "75739",
    v76219 = "75809",
    v76220 = "76213",
    v76469 = "76503",
    v76470 = "76218",
    v76474 = "76220",
    v76476 = "76474",
    v76477 = "76219",
    v76478 = "76658",
    v76479 = "76478",
    v76480 = "76481",
    v76481 = "76645",
    v76484 = "75763",
    v76486 = "76214",
    v76498 = "76198",
    v76502 = "76506",
    v76503 = "76509",
    v76504 = "76502",
    v76506 = "76507",
    v76507 = "76847",
    v76509 = "75626",
    v76510 = "75761",
    v76545 = "76477",
    v76547 = "76200",
    v76559 = "76564",
    v76560 = "76561",
    v76561 = "76479",
    v76563 = "76036",
    v76564 = "76565",
    v76565 = "76560",
    v76566 = "76038",
    v76567 = "76498",
    v76568 = "76603",
    v76569 = "76566",
    v76571 = "76573",
    v76572 = "76547",
    v76573 = "76625",
    v76598 = "76571",
    v76600 = "76563",
    v76601 = "76203",
    v76602 = "75495",
    v76603 = "76600",
    v76620 = "77200",
    v76625 = "76636",
    v76636 = "76480",
    v76645 = "76646",
    v76646 = "76559",
    v76658 = "76476",
    v76690 = "76569",
    v76845 = "76053",
    v76847 = "76845",
    v76854 = "76855",
    v76855 = "76051",
    v76856 = "77041",
    v77036 = "77037",
    v77037 = "77038",
    v77038 = "ptcity",
    v77041 = "77082",
    v77082 = "77036",
    v77200 = "75756",
    v77201 = "75808",
    v77284 = "76856"
  },
["the Maestral Shoals"] = {
  v48770 = "48771",
  v48771 = "48772",
  v48772 = "48775",
  v48773 = "48776",
  v48774 = "48773",
  v48775 = "48780",
  v48776 = "48779",
  v48777 = "48774",
  v48778 = "48783",
  v48779 = "48778",
  v48780 = "48794",
  v48781 = "48777",
  v48782 = "48781",
  v48783 = "48787",
  v48784 = "48785",
  v48785 = "48782",
  v48786 = "48790",
  v48787 = "49003",
  v48789 = "50862",
  v48790 = "49434",
  v48791 = "48796",
  v48792 = "48791",
  v48793 = "48792",
  v48794 = "48795",
  v48795 = "48793",
  v48796 = "48797",
  v48797 = "50861",
  v49003 = "48786",
  v49434 = "48789",
  v49436 = "48784",
  v49437 = "49479",
  v49479 = "49436",
  v49480 = "49437",
  v49481 = "49480",
  v49482 = "49481",
  v49483 = "49482",
  v49484 = "49921",
  v49485 = "49556",
  v49487 = "49488",
  v49488 = "49557",
  v49556 = "49484",
  v49557 = "49558",
  v49558 = "49656",
  v49656 = "49901",
  v49657 = "49487",
  v49737 = "49657",
  v49901 = "49902",
  v49902 = "49905",
  v49903 = "50848",
  v49905 = "49908",
  v49906 = "49737",
  v49907 = "49906",
  v49908 = "49987",
  v49919 = "49988",
  v49920 = "49986",
  v49921 = "49483",
  v49922 = "49903",
  v49923 = "50847",
  v49985 = "49922",
  v49986 = "49985",
  v49987 = "49923",
  v49988 = "49907",
  v50449 = "50450",
  v50450 = "50552",
  v50552 = "50553",
  v50553 = "50554",
  v50554 = "50557",
  v50555 = "50556",
  v50556 = "50558",
  v50557 = "50555",
  v50558 = "ptcity",
  v50559 = "50449",
  v50840 = "49920",
  v50841 = "50840",
  v50842 = "50841",
  v50843 = "50842",
  v50844 = "49919",
  v50846 = "50843",
  v50847 = "50846",
  v50848 = "50849",
  v50849 = "50850",
  v50850 = "50853",
  v50852 = "49485",
  v50853 = "50852",
  v50854 = "50844",
  v50855 = "50858",
  v50856 = "50854",
  v50857 = "50855",
  v50858 = "50856",
  v50859 = "50857",
  v50861 = "50859",
  v50862 = "50864",
  v50863 = "50865",
  v50864 = "50863",
  v50865 = "50866",
  v50866 = "50868",
  v50868 = "50559"
  },
["Maestral's Barrier Reef"] = {
  v29384 = "29385",
  v29385 = "29387",
  v29386 = "29384",
  v29387 = "29390",
  v29388 = "29386",
  v29389 = "29388",
  v29390 = "29393",
  v29391 = "29389",
  v29392 = "29391",
  v29393 = "ptcity",
  v29394 = "29397",
  v29396 = "29394",
  v29397 = "29392",
  v29398 = "29396",
  v29399 = "29402",
  v29400 = "29399",
  v29401 = "29400",
  v29402 = "29398",
  v29403 = "29401",
  v29405 = "29403",
  v29406 = "29408",
  v29407 = "29406",
  v29408 = "29405",
  v29409 = "29410",
  v29410 = "29412",
  v29411 = "29409",
  v29412 = "29418",
  v29413 = "29411",
  v29414 = "29413",
  v29415 = "29414",
  v29416 = "29415",
  v29417 = "29416",
  v29418 = "29407",
  v29419 = "29417",
  v29420 = "29419",
  v29428 = "29420",
  v29429 = "29428",
  v29430 = "29429",
  v29431 = "29430",
  v29432 = "29431",
  v35528 = "29432",
  v35529 = "35528",
  v35530 = "35529",
  v35531 = "35530",
  v35532 = "35531",
  v35533 = "35532",
  v35534 = "35536",
  v35535 = "35534",
  v35536 = "35537",
  v35537 = "35533",
  v35539 = "35535",
  v35540 = "35539",
  v35541 = "35540"
  },
["Upper Tiyen"] = {
  v38894 = "38896",
  v38896 = "38897",
  v38897 = "38898",
  v38898 = "38899",
  v38899 = "38900",
  v38900 = "38901",
  v38901 = "38902",
  v38902 = "38903",
  v38903 = "38904",
  v38904 = "38905",
  v38905 = "38906",
  v38906 = "38907",
  v38907 = "38908",
  v38908 = "38909",
  v38909 = "38915",
  v38915 = "38912",
  v38912 = "38911",
  v38911 = "38910",
  v38910 = "38913",
  v38913 = "38914",
  v38914 = "38916",
  v38916 = "38918",
  v38918 = "38926",
  v38926 = "38921",
  v38921 = "38927",
  v38927 = "38922",
  v38922 = "38928",
  v38928 = "38930",
  v38930 = "38936",
  v38936 = "38935",
  v38935 = "38937",
  v38937 = "38944",
  v38944 = "38943",
  v38943 = "38941",
  v38941 = "38946",
  v38946 = "38945",
  v38945 = "38958",
  v38958 = "38948",
  v38948 = "38947",
  v38947 = "38950",
  v38950 = "38949",
  v38949 = "38951",
  v38951 = "38954",
  v38954 = "38952",
  v38952 = "38956",
  v38956 = "38957",
  v38957 = "38959",
  v38959 = "38960",
  v38960 = "38961",
  v38961 = "38962",
  v38962 = "38963",
  v38963 = "38964",
  v38964 = "38994",
  v38994 = "38966",
  v38966 = "38965",
  v38965 = "38993",
  v38993 = "38967",
  v38967 = "38999",
  v38999 = "39000",
  v39000 = "39001",
  v39001 = "38995",
  v38995 = "38996",
  v38996 = "38997",
  v38997 = "38998",
  v38998 = "39002",
  v39002 = "39004",
  v39004 = "39003",
  v39003 = "39005",
  v39005 = "39007",
  v39007 = "39006",
  v39006 = "39008",
  v39008 = "39010",
  v39010 = "39009",
  v39009 = "39011",
  v39011 = "39014",
  v39014 = "39015",
  v39015 = "39016",
  v39016 = "39017",
  v39017 = "39019",
  v39019 = "39020",
  v39020 = "38919",
  v38919 = "38917",
  v38917 = "38920",
  v38920 = "38924",
  v38924 = "38925",
  v38925 = "38923",
  v38923 = "39021",
  v39021 = "39022",
  v39022 = "39023",
  v39023 = "39024",
  v39024 = "39025",
  v39025 = "38888",
  v38888 = "38892",
  v38892 = "38893",
  v38893 = "39037",
  v39037 = "39039",
  v39039 = "39043",
  v39043 = "39041",
  v39041 = "39042",
  v39042 = "39044",
  v39044 = "39040",
  v39040 = "39038",
  v39038 = "39026",
  v39026 = "39027",
  v39027 = "38826",
  v38826 = "38827",
  v38827 = "38828",
  v38828 = "38829",
  v38829 = "38835",
  v38835 = "38830",
  v38830 = "39031",
  v39031 = "39033",
  v39033 = "39034",
  v39034 = "38833",
  v38833 = "39029",
  v39029 = "39030",
  v39030 = "38817",
  v38817 = "38818",
  v38818 = "38819",
  v38819 = "38820",
  v38820 = "38832",
  v38832 = "38821",
  v38821 = "38822",
  v38822 = "38823",
  v38823 = "38824",
  v38824 = "38825",
  v38825 = "38836",
  v38836 = "38837",
  v38837 = "38838",
  v38838 = "38840",
  v38840 = "38839",
  v38839 = "38867",
  v38867 = "38870",
  v38870 = "38873",
  v38873 = "38877",
  v38877 = "38841",
  v38841 = "38842",
  v38842 = "38843",
  v38843 = "38844",
  v38844 = "38847",
  v38847 = "38849",
  v38849 = "38851",
  v38851 = "38855",
  v38855 = "38857",
  v38857 = "38861",
  v38861 = "38863",
  v38863 = "38864",
  v38864 = "38866",
  v38866 = "38868",
  v38868 = "38871",
  v38871 = "38879",
  v38879 = "38880",
  v38880 = "38886",
  v38886 = "38887",
  v38887 = "38845",
  v38845 = "38846",
  v38846 = "38848",
  v38848 = "38850",
  v38850 = "38852",
  v38852 = "38856",
  v38856 = "38858",
  v38858 = "38862",
  v38862 = "38865",
  v38865 = "39045",
  v39045 = "39065",
  v39065 = "39064",
  v39064 = "39063",
  v39063 = "39062",
  v39062 = "39048",
  v39048 = "39047",
  v39047 = "39046",
  v39046 = "39066",
  v39066 = "39067",
  v39067 = "39068",
  v39068 = "39069",
  v39069 = "ptcity",
  },
["Lower Tiyen"] = {
  v39070 = "39071",
  v39071 = "39072",
  v39072 = "39073",
  v39073 = "39076",
  v39076 = "39075",
  v39075 = "39074",
  v39074 = "39077",
  v39077 = "39078",
  v39078 = "39079",
  v39079 = "39080",
  v39080 = "39101",
  v39101 = "39081",
  v39081 = "39098",
  v39098 = "39096",
  v39096 = "39083",
  v39083 = "39082",
  v39082 = "39084",
  v39084 = "39085",
  v39085 = "39097",
  v39097 = "39099",
  v39099 = "39102",
  v39102 = "39929",
  v39929 = "39931",
  v39931 = "39934",
  v39934 = "39935",
  v39935 = "39938",
  v39938 = "39937",
  v39937 = "39936",
  v39936 = "39932",
  v39932 = "39933",
  v39933 = "39930",
  v39930 = "39928",
  v39928 = "39100",
  v39100 = "39927",
  v39927 = "39967",
  v39967 = "39969",
  v39969 = "39971",
  v39971 = "39975",
  v39975 = "39979",
  v39979 = "39982",
  v39982 = "39985",
  v39985 = "39989",
  v39989 = "39991",
  v39991 = "39990",
  v39990 = "39988",
  v39988 = "39984",
  v39984 = "39981",
  v39981 = "39978",
  v39978 = "39974",
  v39974 = "39970",
  v39970 = "39968",
  v39968 = "39973",
  v39973 = "39977",
  v39977 = "39980",
  v39980 = "39983",
  v39983 = "39987",
  v39987 = "39986",
  v39986 = "39976",
  v39976 = "39972",
  v39972 = "39940",
  v39940 = "39939",
  v39939 = "39942",
  v39942 = "39941",
  v39941 = "39943",
  v39943 = "39951",
  v39951 = "39949",
  v39949 = "39947",
  v39947 = "39945",
  v39945 = "39944",
  v39944 = "39946",
  v39946 = "39948",
  v39948 = "39950",
  v39950 = "39953",
  v39953 = "39956",
  v39956 = "39958",
  v39958 = "39955",
  v39955 = "39952",
  v39952 = "39954",
  v39954 = "39957",
  v39957 = "39959",
  v39959 = "39962",
  v39962 = "39960",
  v39960 = "ptcity",
  },
["Mejev Nider Nesve wo Ti, Matati wo Eja sota Aran wo Aransa"] = {
  v73321 = "74269",
  v73345 = "73353",
  v73353 = "73357",
  v73357 = "73358",
  v73358 = "73369",
  v73369 = "74414",
  v73372 = "73321",
  v73374 = "73372",
  v73417 = "73374",
  v73482 = "73417",
  v73518 = "74366",
  v73838 = "73938",
  v73839 = "73935",
  v73935 = "73838",
  v73936 = "74520",
  v73938 = "73936",
  v74164 = "74165",
  v74165 = "74167",
  v74167 = "74168",
  v74168 = "74177",
  v74177 = "74272",
  v74188 = "74859",
  v74189 = "74188",
  v74192 = "74189",
  v74193 = "74192",
  v74269 = "74193",
  v74272 = "73518",
  v74343 = "74345",
  v74345 = "74356",
  v74346 = "73482",
  v74356 = "74527",
  v74361 = "74393",
  v74363 = "74367",
  v74366 = "74363",
  v74367 = "74674",
  v74368 = "74462",
  v74369 = "74389",
  v74389 = "74391",
  v74391 = "74392",
  v74392 = "73345",
  v74393 = "74464",
  v74394 = "74466",
  v74397 = "74394",
  v74414 = "74164",
  v74462 = "74397",
  v74463 = "74368",
  v74464 = "74463",
  v74466 = "74467",
  v74467 = "74472",
  v74470 = "74369",
  v74471 = "74564",
  v74472 = "74678",
  v74477 = "74478",
  v74478 = "74479",
  v74479 = "74480",
  v74480 = "74471",
  v74519 = "74522",
  v74520 = "74525",
  v74521 = "74343",
  v74522 = "74521",
  v74525 = "74519",
  v74527 = "74346",
  v74564 = "74618",
  v74618 = "74669",
  v74669 = "73839",
  v74674 = "74361",
  v74678 = "74679",
  v74679 = "74680",
  v74680 = "74477",
  v74856 = "75023",
  v74857 = "74856",
  v74858 = "74857",
  v74859 = "74858",
  v75023 = "ptcity"
  },
["a dimly lit subterranean river"] = {
  v76514 = "76515",
  v76515 = "76516",
  v76516 = "76517",
  v76517 = "76518",
  v76518 = "76519",
  v76519 = "76535",
  v76535 = "76648",
  v76536 = "76537",
  v76537 = "76538",
  v76538 = "76539",
  v76539 = "76540",
  v76540 = "76541",
  v76541 = "76542",
  v76542 = "76543",
  v76543 = "76574",
  v76574 = "76575",
  v76575 = "76576",
  v76576 = "76577",
  v76577 = "76652",
  v76578 = "76585",
  v76585 = "76586",
  v76586 = "76587",
  v76587 = "76588",
  v76588 = "76589",
  v76589 = "76722",
  v76591 = "76593",
  v76592 = "76591",
  v76593 = "76594",
  v76594 = "76595",
  v76595 = "76596",
  v76596 = "76608",
  v76597 = "76604",
  v76604 = "76605",
  v76605 = "76606",
  v76606 = "76607",
  v76607 = "ptcity",
  v76608 = "76609",
  v76609 = "76724",
  v76611 = "76612",
  v76612 = "76650",
  v76613 = "76614",
  v76614 = "76634",
  v76615 = "76617",
  v76617 = "76619",
  v76618 = "76621",
  v76619 = "76597",
  v76621 = "76633",
  v76622 = "76578",
  v76628 = "76536",
  v76631 = "76622",
  v76632 = "76631",
  v76633 = "76628",
  v76634 = "76666",
  v76637 = "76632",
  v76639 = "76642",
  v76640 = "76637",
  v76641 = "76640",
  v76642 = "76615",
  v76648 = "76649",
  v76649 = "76613",
  v76650 = "76639",
  v76652 = "76641",
  v76654 = "76655",
  v76655 = "76764",
  v76666 = "76618",
  v76722 = "76828",
  v76724 = "76725",
  v76725 = "76726",
  v76726 = "76611",
  v76764 = "76592",
  v76828 = "76829",
  v76829 = "76830",
  v76830 = "76654"
},
["the Offspring"] = {
  v76288 = "78253",
  v76289 = "76884",
  v76290 = "76948",
  v76291 = "76906",
  v76292 = "76832",
  v76293 = "76907",
  v76300 = "76780",
  v76303 = "77843",
  v76356 = "76957",
  v76734 = "76300",
  v76780 = "78469",
  v76823 = "76864",
  v76824 = "76833",
  v76825 = "76826",
  v76826 = "76292",
  v76831 = "76824",
  v76832 = "76823",
  v76833 = "76840",
  v76834 = "76835",
  v76835 = "76958",
  v76836 = "76837",
  v76837 = "77232",
  v76838 = "76839",
  v76839 = "76844",
  v76840 = "76841",
  v76841 = "76842",
  v76842 = "76879",
  v76844 = "76857",
  v76857 = "76868",
  v76858 = "76866",
  v76859 = "77158",
  v76862 = "76863",
  v76863 = "77270",
  v76864 = "76834",
  v76865 = "77025",
  v76866 = "76872",
  v76868 = "76869",
  v76869 = "76870",
  v76870 = "76876",
  v76872 = "76874",
  v76873 = "76831",
  v76874 = "76888",
  v76876 = "76878",
  v76877 = "76836",
  v76878 = "76858",
  v76879 = "76885",
  v76882 = "76947",
  v76883 = "77130",
  v76884 = "76288",
  v76885 = "76887",
  v76887 = "76877",
  v76888 = "77072",
  v76889 = "76859",
  v76890 = "76891",
  v76891 = "76892",
  v76892 = "76894",
  v76893 = "78328",
  v76894 = "76910",
  v76895 = "76904",
  v76904 = "76905",
  v76905 = "76882",
  v76906 = "76289",
  v76907 = "76963",
  v76909 = "77141",
  v76910 = "76965",
  v76911 = "76293",
  v76912 = "76911",
  v76914 = "76916",
  v76916 = "76895",
  v76917 = "76912",
  v76926 = "76917",
  v76935 = "76926",
  v76946 = "76935",
  v76947 = "76946",
  v76948 = "76291",
  v76957 = "76290",
  v76958 = "77146",
  v76960 = "76356",
  v76963 = "76960",
  v76965 = "76966",
  v76966 = "77021",
  v77021 = "77148",
  v77022 = "77023",
  v77023 = "77024",
  v77024 = "77026",
  v77025 = "76889",
  v77026 = "77069",
  v77069 = "77070",
  v77070 = "77071",
  v77071 = "76873",
  v77072 = "77073",
  v77073 = "77074",
  v77074 = "77076",
  v77076 = "77077",
  v77077 = "77078",
  v77078 = "77152",
  v77130 = "77022",
  v77131 = "76825",
  v77134 = "76883",
  v77135 = "77134",
  v77141 = "77135",
  v77143 = "76909",
  v77144 = "77143",
  v77146 = "77144",
  v77148 = "77131",
  v77152 = "77153",
  v77153 = "77154",
  v77154 = "77155",
  v77155 = "77157",
  v77157 = "77323",
  v77158 = "77159",
  v77159 = "77160",
  v77160 = "77161",
  v77161 = "77162",
  v77162 = "77163",
  v77163 = "ptcity",
  v77174 = "77175",
  v77175 = "76838",
  v77232 = "77174",
  v77270 = "76865",
  v77271 = "76862",
  v77319 = "77271",
  v77320 = "77319",
  v77321 = "77320",
  v77322 = "77321",
  v77323 = "77322",
  v77437 = "77495",
  v77495 = "77842",
  v77842 = "78130",
  v77843 = "77844",
  v77844 = "77845",
  v77845 = "77846",
  v77846 = "77847",
  v77847 = "77848",
  v77848 = "77849",
  v77849 = "78151",
  v78130 = "78131",
  v78131 = "78132",
  v78132 = "78144",
  v78140 = "76303",
  v78144 = "81176",
  v78151 = "78252",
  v78252 = "76893",
  v78253 = "78254",
  v78254 = "78255",
  v78255 = "76890",
  v78328 = "78604",
  v78469 = "78140",
  v78604 = "78605",
  v78605 = "76914",
  v81176 = "76734"
},
}

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Apothecary targets</name>
					<packageName></packageName>
					<script>snd.apoAreas = {
{area = "the Itzatl Morass", level = "apothecary", targets = {"an oversized fly", "an oversized earthworm", "a poisonous water moccasin", "a silent reed cat","a green slime toad", "a long-toothed beaver", "Match:a family of %a+ beavers",}},
{area = "the Isle of Ollin", level = "apothecary", targets = {"a dark-furred, rabid boar", "Match:a sounder of %a+ boars", "a wild boar"}},
{area = "the Morgun Forest", level = "apothecary", targets = {"a dark-furred, rabid boar", "Match:a sounder of %a+ boars", "a wild boar"}},
{area = "the Aureliana Forest", level = "apothecary", targets ={"a dark-furred, rabid boar", "Match:a sounder of %a+ boars", "a wild boar"}},
{area = "the village of Torston", level = "apothecary", targets = {"a venomous water snake", "a fierce crocodile", "Match:a bask of %a+ crocodiles", "a greyish green crocodile"}},
{area = "the Barony of Dun Valley", level = "apothecary", targets = {"a muscular mountain lion", "Match:a bask of %a+ crocodiles", "a greyish green crocodile"}},
{area = "the Central Wilderness", level = "apothecary", targets = {"a gnat", "a mottled green bullfrog", "a dragonfly", "Match:a swarm of %a+ dragonflies"}},
{area = "Scidve", level = "apothecary", targets = {"a large gray and black dugger", "a dark black snake", "a slender mud adder"}},
{area = "the Pash valley", level = "apothecary", targets = {"a bald eagle"}},
{area = "the Shamtota Hills", level = "apothecary", targets = {"a bald eagle"}},
{area = "the Fractal Bloom", level = "apothecary", targets = {"a squat crystalline entity", "a slender crystalline entity", "a radiant crystalline entity", "a faceted crystalline entity", "a fractured crystalline entity", "a towering crystalline entity"}},
{area = "Khauskin Mines", level = "apothecary", targets = {"a grotesque fangtooth", "a large, deepwater salmon", "a school of fish", "a powerful-looking swordfish", "a mantaglow fish", "a large blackfish", "a huge beluga sturgeon", "a plated ixthean", "an angler fish"}},
{area = "Eastern Ithmia", level = "apothecary", targets = {"a great white stag"}},
{area = "the Dolbodi Campsite", level = "apothecary", targets = {"a great white stag", "Match:a herd of %a+ white stags"}},
{area = "the Fengard Keep", level = "apothecary", targets = {"a massive argobole", "a fiery phenkyre", "a vicious horned garwhol", "an ogre berserker", "Match:a horde of %a+ rats", "a large rat"}},
{area = "Huanazedha", level = "apothecary", targets = {"Match:a horde of %a+ rats", "a large rat"}},
{area = "the Southern Tundra", level = "apothecary", targets = {"Match:a bachelor herd of %a+ young bull mugyiks", "a white mugyik calf", "a dusky mugyik", "a bull mugyik"}},
{area = "the Western Tundra", level = "apothecary", targets = {"Match:a bachelor herd of %a+ young bull mugyiks", "a white mugyik calf", "a dusky mugyik", "a bull mugyik"}},
{area = "the Northern Tundra", level = "apothecary", targets = {"Match:a bachelor herd of %a+ young bull mugyiks", "a white mugyik calf", "a dusky mugyik", "a bull mugyik"}},
{area = "the Western Itzatl Rainforest", level = "apothecary", targets = {"an iridescent tizapez", "an orange, black-striped tiger", "an enormous anaconda", "Match:a flock of %a+ mesias", "a silver-eared mesia",}},
{area = "the Mamashi Grasslands", level = "apothecary", targets = {"a swiftly moving dragonfly", "Match:a swarm of %a+ dragonflies", "a Mamashi lioness", "a Mamashi lion", "a Mamashi lion cub", "Match:a pride of %a+ lions", }},
{area = "a snake pit", level = "50-60", targets = {"a venenigol snake", "an andragil snake", "a tiny hatchling", "a large sertag snake", "a grassel snake","a muselon snake", "Nandqua, mate of Namaqua", "Namaqua, Queen of Serpents"}},
{area = "the Centipede Cave", level = "25-35", targets = {"a large centipede", "a skittering centipede", "a chitinous centipede", "a venomous centipede", "a juvenile centipede", "a massive centipede queen"}},
{area = "Luzith's Lair", level = "95+", targets = {"a mass of deadly trap spiders", "a deadly trap spider", "a monstrous arachnid", "a vicious little spider", "a large, crystalline spider", "a flying spider", "a sentinel spider", "a slender, female arachnoid"}},
{area = "the Nal'jin Depths", level = "95+", targets = {"an enormous spinelash fish"}},
{area = "the Hlugnic Labyrinth", level = "70+", targets = {"an enormous spinelash fish"}},
{area = "Perilaus", level = "25-35", targets = {"a school of spinebacks", "a striped sea krait", "a water viper"}},
{area = "the Undercity of Djeir", level = "30-50", targets = {"a mutated crawler fish", "an elusive black fish", "a striped siriskal fish", "a striped sea krait"}},
{area = "the Festering Wastes", level = "30-50", targets = {"a darkly patterned sand viper", "a small yellow rattlesnake", "a tiny black scorpion",}},
{area = "the Mhojave desert", level = "30+", targets = {"a sidewinder", "a rattlesnake",}},
{area = "the Vashnar mountains", level = "45+", targets = {"a muscular mountain lion", "a grey mountain snake"}},
{area = "the Den of Shadows", level = "99+", targets = {"a tan sidewinder", "a black boa", "a grey krait", "a tan python", "a brown adder", "a white sidewinder", "a black python", "a white krait", "a brown cobra", "a black adder", "a white boa", "a grey adder", "a brown krait", "a white python", "a brown sidewinder", "a tan adder", "a tan boa", "a grey sidewinder", "a tan cobra", "a tan krait", "a brown python", "a grey cobra", "a black sidewinder", "a grey boa", "a white adder", "a brown boa", "a black krait", "a black python", "a grey python", "a black cobra"}},
}</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>load targets</name>
					<packageName></packageName>
					<script>
function snd.load_targets(area)	
 snd.my.area = area
 snd.area_found = false
 snd.possible_targets = {}
 snd.possible_items = {}
 local areas = snd.apothecaryEnabled and snd.apoAreas or snd.areas
 if snd.apothecaryEnabled then
    cecho("\n&lt;orange&gt;Apothecary mode")
 end
 for i in ipairs(areas) do
  if areas[i].area == area then
   snd.area_found = true
   snd.bashing.target_type = "long"
   snd.possible_targets = areas[i].targets
   echo("\n Level Range: "..areas[i].level)
   cecho("\n&lt;green&gt;Possible Targets:")
   for h in ipairs(snd.possible_targets) do
    echo("\n "..snd.possible_targets[h])
   end
   if areas[i].items then
    snd.possible_items = areas[i].items
    cecho("\n&lt;green&gt;Gathering Items:")
    for k in ipairs(snd.possible_items) do
     echo("\n "..snd.possible_items[k])
    end
   end
  end
 end
 if not snd.area_found then
  cecho("\n&lt;green&gt;Unknown Area.")
 end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>looting</name>
					<packageName></packageName>
					<script>
function snd.do_loot()
 if #snd.gathering &gt; 0 or #snd.corpses &gt; 0 then
  if snd.can_cast() and not snd.waiting.loot then
   snd.loot_it()
  end
 end
end

function snd.loot_it()
 for i in ipairs(snd.corpses) do
  snd.send("get "..snd.corpses[i])
 end
 for h in ipairs(snd.gathering) do
  snd.send("get "..snd.gathering[h])
 end
 snd.corpses = {}
 snd.gathering = {}
 snd.have_items = false
 snd.need_loot = false
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>global items</name>
					<packageName></packageName>
					<script>
snd.global_items = {
-- "a sample of fur and hide",
-- "a dirt sample",
-- "a delicate flora sample",
}

snd.global_targets = {
--elds
"Match:a coalition of %a+ Dramlai Defenders",
"a billowing dust eld",
"an oozing magma eld",
"a shifting sand eld",
"a silvery pink salmon",
"a pulsating amber eld",
"a shimmering azure eld",
"a whirling violet eld",
"a shadow-laden grey eld",
"a sinuous eld of rust",
"a vicious crimson eld",
"a vibrating black eld",
"a shimmering azure eld",
"a stalwart iron eld",
"a towering translucent eld",
"a spherical armored eld",
"a dominating frostbound eld",
"a tenebrous ash eld",
"a massive flame-covered eld",
"a jagged citrine eld",
"a crackling lightning eld",
"a crystalline opal eld",
"a crudely formed silver eld",
"an amorphous red eld",
"an immature jade eld",
"a meager golden eld",
"a shattered eld monstrosity",
"a fiery crimson fragmented eld",
"a skittering verdant eld",

--survivor
"a living puppet",
"a sorcerous puppetmaster",
"a fearsome bone dragon",
"a deep purple hydra",
"a monstrous sandman",
"a fearsome wyvern",
"a silver being of flame",
"a towering treant",
"an unctuous creepling",
"a blood-drenched succubus",
"an ethereal construct",
"a black hell-hound",
"a goblin soldier",
"a ravenous, shadowy ghast",
"a warlock apprentice",
"a large, venomous tarantula",
"a massive elemental",
"a muscular mountain lion",
"a skeletal soldier",
"a Troll sentry",
"a mind flayer",
 "a foul-smelling orc",
 "a dwarf guard",
"a horrendous abomination",
"an enormous black scorpion",
"a Mhun warrior",
"a black cobra",
"a white imp",
"a large reindeer",
"an evil snowman",
"a dark nightmare",

--quests
"a menacing Caentoi cutthroat",
"a grimy bandit",
"a wounded bandit",
"a cutthroat pirate",
"a cutthroat pirate captain",
"a pirate lookout",

--Bloodloch patrols Quest
"a belligerent rebel",
"a freedom fighter",
"an escaped slave",
"a deserter",

--resistance event
"a lithe Utari bladedancer",
"a Tarpen demolitionist",
"an Ursal crossbowman",
"a Praexi skirmisher",
"a towering Golban linebreaker",
"a grim Caentoi pikeman",
}</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>run basher</name>
					<packageName></packageName>
					<script>local function getTarget(tab)
  for _, targ in pairs(table.n_union(snd.possible_targets, snd.global_targets)) do
    if targ:sub(1,6) == "Match:" then
      local pattern = targ:sub(7)
      for name, ids in pairs(tab) do
        if name:find(pattern) and tab[name][1] then
          return tab[name][1], name
        end
      end
    elseif tab[targ] and tab[targ][1] then
      return tab[targ][1], targ
    end
  end
end


function snd.runBasher()
  snd.gathering = {}
  snd.corpses = {}
  snd.bashing.targeted = false
  snd.bashing.target_priority = 10000
  snd.bashing.target = "none"
  for item in pairs(snd.items) do
    if item == "some gold sovereigns" and #snd.items[item] &gt;= 1 then
      table.insert(snd.gathering, "sovereigns")
    elseif table.contains(snd.possible_items, item) or table.contains(snd.global_items, item) then
      for id in pairs(snd.items[item]) do
        table.insert(snd.gathering, snd.items[item][id])
      end
    elseif
      (item:find("the corpse of") or item:find("the discarded remains of") or item:find("the withered husk of"))
      and not item:find("staked")
    then
      for id in pairs(snd.items[item]) do
        table.insert(snd.corpses, snd.items[item][id])
      end
    end
  end
  local targetID, targetName = getTarget(snd.agros)
  if not targetID then
    targetID, targetName = getTarget(snd.items)
  end
  if not targetID then
    if snd.bashing_cleanup() then return end
    --if snd.toggles.bashing then snd.toggle("bashing") end
    snd.toggles.bashing = false
    if bot.going then
      expandAlias("move", false)
      --  tempTimer(1.5, [[expandAlias("move")]])
    end
    snd.core()
    return
  end
    
  --target acquired!
  snd.bashing.targeted = true
  if snd.toggles.generics then
    --generic logic
    snd.bashing.target = generic_bashing_name(targetName)
    if snd.bashing.target ~= snd.bashing.old_target then
      --if snd.toggles.calling then snd.send("wt target: "..snd.bashing.target) end --comment this out to keep from calling web targets
      snd.bashing.old_target = snd.bashing.target
    end
  else
    --non generic logic
    snd.bashing.target = targetID
  end
  --if #snd.gathering &gt;= 1 then
  -- snd.loot_it()
  --end
  snd.counterattack_active = false
  snd.probed = false
  snd.punisher = false
  if
    snd.toggles.calling and
    snd.bashing.old_target ~= snd.bashing.target and
    snd.bashing.target ~= "none"
  then
    --snd.send("wt target: " .. snd.bashing.target)  -- comment this out to keep from calling web targets
  end
  snd.core()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>class bashing functions</name>
					<packageName></packageName>
					<script>snd.class_list = {
{class = "Akkari", func = function(current) snd.akkari_bash() end},
{class = "Alchemist", func = function(current) snd.alchemist_bash() end},
{class = "Archivist", func = function(current) snd.archivist_bash() end}, 
{class = "Ascendril", func = function(current) snd.ascendril_bash() end},
{class = "Bard", func = function(current) snd.bard_bash() end},
{class = "Bloodborn", func = function(current) snd.bloodborn_bash() end}, 
{class = "Carnifex", func = function(current) snd.carnifex_bash() end},
{class = "Earthcaller", func = function(current) snd.earthcaller_bash() end},
{class = "Indorani", func = function(current) snd.indorani_bash() end}, 
{class = "Luminary", func = function(current) snd.luminary_bash() end}, 
{class = "Monk", func = function(current) snd.monk_bash() end}, 
{class = "Oneiromancer", func = function(current) snd.oneiromancer_bash() end},
{class = "Praenomen", func = function(current) snd.praenomen_bash() end}, 
{class = "Ravager", func = function(current) snd.ravager_bash() end},
{class = "Revenant", func = function(current) snd.revenant_bash() end},
{class = "Runecarver", func = function(current) snd.runecarver_bash() end},
{class = "Sciomancer", func = function(current) snd.sciomancer_bash() end}, 
{class = "Sentinel", func = function(current) snd.sentinel_bash() end}, 
{class = "Shaman", func = function(current) snd.shaman_bash() end}, 
{class = "Shapeshifter", func = function(current) snd.shapeshifter_bash() end}, 
{class = "Syssin", func = function(current) snd.syssin_bash() end}, 
{class = "Templar", func = function(current) snd.templar_bash() end},
{class = "Teradrim", func = function(current) snd.teradrim_bash() end},
{class = "Tidesage", func = function(current) snd.tidesage_bash() end}, 
{class = "Warden", func = function(current) snd.warden_bash() end},
{class = "Wayfarer", func = function(current) snd.wayfarer_bash() end},
{class = "Zealot", func = function(current) snd.zealot_bash() end},
{class = "None", func = function(current) snd.none_bash() end}, --200
}

function snd.shield_check()
  if snd.defenses.def_shield_tattoo.state ~= "deffed" then
    return true
  end
end

function snd.bashing_function()
	if not snd.room_clear then
		return
	end
	
  if not snd.waiting.queue then
    if not snd.bashing.targeted then
      snd.runBasher()
    else
			battack = "none" -- set attack to none
      if not snd.counterattack_active then -- if the npc isn't counter attacking (tcanna/drakkum/torturer), then check class skills
				for k,v in pairs(snd.class_list) do
					if snd.class_list[k].class == snd.class then -- check current class to class bash list above
            battack = "" -- set attack from 'none' to "" so it can be set in the class basher, will provide error if it can't get a class ability
						if snd[v.class:lower().."_bash_override"] then
              snd[v.class:lower().."_bash_override"]()
            else
              v.func() -- set attack from class basher
            end 
						if snd.have_aff("shock") and hasSkill("Overdrive") then -- let's use overdrive if we have shock, adds to new class bashing attack line
							battack = "overdrive"..snd.sep..battack..snd.sep.."recoup"..snd.sep
						elseif snd.pushattack then  -- if they are a pushable npc (tcanna/drakuum/torturer) and we know we can shove, do it first
							battack = "push "..snd.bashing.target..snd.sep.."recoup"..snd.sep
							snd.pushattack = false
						end
					end
				end
      else -- if they're counter attacking, let's not do anything
        battack = ""
			end
        
			-- if snd.probed then -- If a npc is probed, move along
			-- else -- else, in three areas that have advanced bashing, probe the npc to see if they are a punisher
				-- if gmcp.Room.Info.area == "Tcanna Island" or gmcp.Room.Info.area == "Drakuum"  or gmcp.Room.Info.area == "the Torturers' Caverns" then   
					-- battack = "probe "..snd.bashing.target..snd.sep..battack..snd.sep -- we're probing here and then attacking from above
				-- end -- note, this is just to make sure you don't get owned by shielding on punisher type npcs
			-- end
      -- if tonumber(gmcp.Char.Vitals.bleeding) &gt; 500 and hasSkill("Clotting") then -- if you are bleeding a lot and can clot, clot with your attack
        -- mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
        -- if mp &gt;= 50 then
          -- battack = "clot 500"..snd.sep..battack..snd.sep
        -- end  
      -- end 
        
			if tonumber(snd.toggles.gauntlet_level) &gt;= 2 then battack = battack..snd.sep.."absorb ylem" end -- if you have a level 2 gauntlet, auto-absorb
      
      if battack == "" and (snd.counterattack_active or not snd.defenses.def_reflection.state == "deffed") then -- if the basher couldn't change battack to something from your class, it will give an error
        echo("\nTried to bash, no class ability set.")
      elseif battack ~= snd.last_attack and not snd.ylem_check then -- if your battack isn't the same as your last attempted attack, and you aren't trying to capture ylem
        snd.last_attack = battack -- ATTACK
        if battack ~= "none" then -- if for some reason it's none as your attack, stand
          snd.send("qeb stand"..snd.sep..snd.last_attack)
        end
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
      
    end
  end
end

function snd.akkari_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  bp = tonumber(gmcp.Char.Vitals.blood)
  
	if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then -- if they will kill you for having a shield, don't do it
    else
      battack = "touch shield" -- otherwise, shield
    end
  elseif hp &lt;= 45 and bp &gt;= 30 and snd.balance.mend and hasSkill("Vivify") then
    battack = "vivify"
  elseif bp &gt;= 50 and hp &lt;= 30 and hasSkill("Unbroken") then
    if snd.balance.unbroken and snd.defenses.def_unbroken.state == "down" then
      battack = "spirit unbroken"..snd.sep.."denounce "..snd.bashing.target
    else
      battack = "denounce "..snd.bashing.target
    end
  elseif bp &lt;= 25 then
    battack = "deliver corpse"
  else
    battack = "denounce "..snd.bashing.target
  end
end

function snd.alchemist_bash()

  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  
  if snd.familiar and snd.balance.morph and hasSkill("Reconfiguration") then
    if snd.shamanpet == "tumefactive" then
      battack = "order experiment passive"..snd.sep.."experiment reconfigure toxic"..snd.sep
    elseif snd.shamanpet == "toxic" then
      battack = "order experiment passive"..snd.sep.."experiment reconfigure tumefactive"..snd.sep
    else
      battack = "order experiment passive"..snd.sep.."experiment reconfigure tumefactive"..snd.sep
    end
  else
    battack = "experiment recall"..snd.sep.."order experiment passive"..snd.sep.."order experiment follow me"..snd.sep
  end
  
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  else
    if wp&gt;=45 and tonumber(gmcp.Char.Vitals.volatility) &gt; 3 then
      battack = battack.."alchemy catalyse"..snd.sep.."alchemy static "..snd.bashing.target
    else
      battack = battack.."alchemy static "..snd.bashing.target
    end 
	end
  
end

function snd.archivist_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  bioessence = tonumber(gmcp.Char.Vitals.bio) or 0
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  
    if hp &lt;= 70 and not snd.knit and bioessence &gt; 0 and hasSkill("Knitting") then
        battack = "bio knitting"
    elseif hp &lt;= 60 and bioessence &gt; 1 and not snd.balance.ethereal and hasSkill("Ethereal") then
        battack = "bio ethereal"
    elseif hp &lt;=40 and snd.shield_check() then
      if snd.punisher then
      else
        battack = "touch shield"
      end
    else
      if bioessence &gt; 1 and hasSkill("Stimulant") then
        battack = "incite crux "..snd.bashing.target..snd.sep.."bio stimulant"
      else
        battack = "incite crux " ..snd.bashing.target
      end
    end
end

function snd.ascendril_bash()

  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  
	if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif snd.defenses.def_reflection.state == "deffed" and hp &lt;= 60 then
  -- let the reflection do its job
  elseif hp &lt;= 60 then
    if snd.reflection_charge &gt; 0 then
      battack = "cast reflection"
    else
      if snd.shield_check() and not snd.punisher then 
        battack = "touch shield"
      end
    end
  elseif hasSkill("Quickcast") then
    if not snd.fulcrum_exists then
      battack = "fulcrum construct"
    elseif snd.fulcrum_call then
      battack = "fulcrum recall"
    else
      if snd.toggles.enrich and snd.balance.enrich and wp &gt;= 40 then
        if (gmcp.Char.Vitals.resonance == "fire" or gmcp.Char.Vitals.resonance == "air") then
          battack = "fulcrum enrich water"..snd.sep
        end
      end
      if snd.toggles.prism then
        if gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "air" then
          battack = battack.."cast prism firelash "..snd.bashing.target
        elseif gmcp.Char.Vitals.resonance == "air" then
          battack = "cast prism frostblade "..snd.bashing.target
        elseif gmcp.Char.Vitals.resonance == "fire" then
          battack = "cast prism windlance "..snd.bashing.target
        end
      else
        if gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "air"  then
          battack = "cast frostblade "..snd.bashing.target
        elseif gmcp.Char.Vitals.resonance == "water" then
          battack = "cast firelash "..snd.bashing.target
        elseif gmcp.Char.Vitals.resonance == "fire" then
          battack = "cast windlance "..snd.bashing.target
        end
      end
    end
  else
    battack = "cast firelash "..snd.bashing.target
  end
end

function snd.bard_bash()

  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  else
    if tonumber(gmcp.Char.Vitals.dithering) &gt; 0 then
      battack = "tempo "..snd.bashing.target
    else
      battack = "weave tearing "..snd.bashing.target
    end
  end
end

function snd.bloodborn_bash()

  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif snd.defenses.def_reflection.state == "deffed" and hp &lt;= 60 then
  -- let the reflection do its job
  elseif hp &lt;= 60 and snd.reflection_charge &gt; 0 then
    battack = "unleash geminate"
  elseif hasSkill("Primacy") then    
    if not snd.fulcrum_exists then
      battack = "well draw"
    elseif snd.fulcrum_call then
      battack = "well recall"
    else
      if snd.toggles.enrich and snd.balance.enrich and wp &gt;= 40 then
        if (gmcp.Char.Vitals.aspect == "yellow" or gmcp.Char.Vitals.aspect == "black") then
          battack = "well contaminate phlegm"..snd.sep
        end
      end
      if snd.toggles.prism then
        if gmcp.Char.Vitals.aspect == "" or gmcp.Char.Vitals.aspect == "black" then
          battack = battack.."unleash triplicate disgorge "..snd.bashing.target
        elseif gmcp.Char.Vitals.aspect == "black" then
          battack = "unleash triplicate flense "..snd.bashing.target
        elseif gmcp.Char.Vitals.aspect == "yellow" then
          battack = "unleash triplicate befoul "..snd.bashing.target
        end
      else
        if gmcp.Char.Vitals.aspect == "" or gmcp.Char.Vitals.aspect == "black"  then
          battack = "humour flense "..snd.bashing.target
        elseif gmcp.Char.Vitals.aspect == "phlegm" then
          battack = battack.."humour disgorge "..snd.bashing.target
        elseif gmcp.Char.Vitals.aspect == "yellow" then
          battack = "humour befoul "..snd.bashing.target
        end
      end
    end
  else
    battack = "humour disgorge "..snd.bashing.target
  end
end

function snd.carnifex_bash()

  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif hp &lt;= 60 and snd.soul &gt;= 60 then
    battack = "soul consume for health"
	else
    battack = "pole spinslash "..snd.bashing.target
	end
end

function snd.earthcaller_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "osso ribcage me"
    end
	elseif snd.toggles.lightning then
  	battack = "tectonic ashfall "..snd.bashing.target
 	else
  	battack = "quash "..snd.bashing.target.." secret"
 	end
end

function snd.indorani_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif hp &lt;= 55 and hasSkill("Priestess") then
    battack = "fling priestess at me"
  else
    if snd.wielded.left.name =="bonedagger" or snd.wielded.right.name == "bonedagger" then
       battack = "flick bonedagger at "..snd.bashing.target
    else
       battack = "decay "..snd.bashing.target
    end
  end
end

function snd.luminary_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "angel aura me"
    end
	elseif snd.toggles.lightning then
  	battack = "evoke lightning "..snd.bashing.target
 	else
  	battack = "smite "..snd.bashing.target..snd.sep.."angel power"
 	end
end

function snd.monk_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  --ensure battack is cleared going into this.
  battack = ""
  
  if mp &gt;= 30 and hp &lt;= 75 and snd.transmutation and hasSkill("Transmute") then
    battack = battack.."transmute mana 1000"..snd.sep
    tempTimer(2,[[snd.transmutation = true]])
  end
  
  if not snd.balance.numbness and hasSkill("Numbness") then
    if hp &lt;= 70 then
        battack = battack.."numb"..snd.sep
    end
  end
  
  if (hp &lt;=40 or snd.have_aff("blackout")) and snd.shield_check() then
    if snd.punisher then
    else
      battack = battack..snd.sep.."touch shield"
    end
	elseif snd.toggles.cobra and hasSkill("Cobra") then
  	if snd.stance ~= "cobra" then
      battack = battack.."cbs"
    else
      battack = battack.."combo "..snd.bashing.target.." sdk sdk"
    end
  else 
    battack = battack.."combo "..snd.bashing.target.." sdk ucp ucp"
	end
end

function snd.oneiromancer_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)

  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif hp &lt;= 55 and hasSkill("Flower") then
    battack = "unfurl flower at me"
  elseif snd.toggles.newbie then
    battack = "starlight "..snd.bashing.target
  else
    if snd.wielded.left.name == "athame" or snd.wielded.right.name == "athame" then
       battack = "impel athame at "..snd.bashing.target
    else
       battack = "starlight "..snd.bashing.target
    end
  end
end

function snd.praenomen_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  bp = tonumber(gmcp.Char.Vitals.blood)
 
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif hp &lt;= 45 and bp &gt;= 30 and snd.balance.mend and hasSkill("Mending") then
    battack = "mend"
  elseif bp &gt;= 50 and hp &lt;= 30 and hasSkill("Deluge") then
    if snd.balance.unbroken and snd.defenses.def_deluge.state == "down" then
      battack = "blood deluge"..snd.sep.."frenzy "..snd.bashing.target
    else
      battack = "frenzy "..snd.bashing.target
    end
  elseif bp &lt;= 25 then
    battack = "feed corpse"
  else
    battack = "frenzy "..snd.bashing.target
  end
end

function snd.ravager_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  battack = ""
  
  if tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 and snd.cauterize and mp &gt;= 15 and hasSkill("Prolong") then
    battack = "enact prolong me"..snd.sep
    snd.cauterize = false
    tempTimer(2,[[snd.cauterize = true]])
  end

  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
      if hasSkill("Seethe") then
        battack = battack.."seethe"
      end
    else
      battack = battack.."touch shield"
    end
  elseif not snd.can_arms() and hasSkill("Concussion") then
    battack = battack.."concuss "..snd.bashing.target
	else
		battack = battack.."onslaught "..snd.bashing.target.." bully bully"
	end

end

function snd.revenant_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  endur = 100*(gmcp.Char.Vitals.ep/gmcp.Char.Vitals.maxep)

	if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif snd.toggles.newbie then
		battack = "rivebash "..snd.bashing.target
  elseif (snd.wielded.left.name:find("warhammer") or snd.wielded.left.name:find("bastard") or snd.wielded.left.name:find("bardiche")) and hasSkill("Fell") then
    battack = "fell "..snd.bashing.target
  else
  	battack = "dpl "..snd.bashing.target
	end
	if (hp &gt;= 61 and wp &gt;= 50 and hasSkill("Duskosa")) and not snd.toggles.newbie then 
    battack = battack.. " duskosa duskosa"
  elseif not snd.toggles.newbie and hasSkill("Annul") then
    battack = "annul left"..snd.sep.."annul right"..snd.sep..battack
  end
end

function snd.runecarver_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
    
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and snd.defenses.def_reflection.state ~= "deffed" then
        battack = "runecarve branch"
      end
    else
      battack = "touch shield"
    end 
  elseif snd.defenses.def_reflection.state == "deffed" and hp &lt;= 60 then
  -- let the reflection do its job
  elseif hp &lt;= 60 and snd.reflection_charge &gt; 0 then
    battack = "runecarve branch"
	elseif snd.toggles.newbie then
  	  battack = "hex enervate "..snd.bashing.target
  else
    if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 2 and hasSkill("Spiritpact") then
      battack = "spiritpact despair " ..snd.bashing.target..snd.sep.."hex malady "..snd.bashing.target
    else
      battack = "hex malady " ..snd.bashing.target
    end
  end
end

function snd.sciomancer_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
    
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
      if snd.reflection_charge &gt; 0 and snd.defenses.def_reflection.state ~= "deffed" then
        battack = "cast reflection"
      end
    else
      battack = "touch shield"
    end 
  elseif snd.defenses.def_reflection.state == "deffed" and hp &lt;= 60 then
  -- let the reflection do its job
  elseif hp &lt;= 60 and snd.reflection_charge &gt; 0 then
    battack = "cast reflection"
	elseif snd.toggles.newbie then
  	  battack = battack..snd.sep.."cast ruin "..snd.bashing.target
  else
    if hasSkill("Shadowprice") and tonumber(gmcp.Char.Vitals.shadowprice) &lt; 2  then
      battack = "shadowprice gloom " ..snd.bashing.target..snd.sep.."cast fever "..snd.bashing.target
    else
      battack = "cast fever " ..snd.bashing.target
    end
  end
end
 
function snd.sentinel_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif snd.toggles.newbie then
  	battack = "dhuriv combo "..snd.bashing.target.." slash stab"
 	else
  	battack = "dhuriv combo "..snd.bashing.target.." crosscut thrust"
 	end
end

function snd.shaman_bash()

  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp) 
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  battack = ""
  if snd.familiar and snd.balance.morph and hasSkill("Morph") then
    if snd.shamanpet == "bear" then
      battack = "order spirit passive"..snd.sep.."familiar morph spider"
    elseif snd.shamanpet == "spider" then
      battack = "order spirit passive"..snd.sep.."familiar morph bear"
    else
      battack = "order spirit passive"..snd.sep.."familiar morph bear"
    end
  else
    battack = "familiar recall"..snd.sep.."order spirit passive"..snd.sep.."order spirit follow me"
  end

  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
	else
    if wp&gt;=45 and tonumber(gmcp.Char.Vitals.energy) &gt; 3 then
      battack = battack..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.bashing.target
    else
      battack = battack..snd.sep.."commune lightning "..snd.bashing.target
    end 
	end
end

function snd.shapeshifter_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
	else
    battack = "combo "..snd.bashing.target.." slash slash"
	end
end

function snd.syssin_bash()
  local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  local endur = 100*(gmcp.Char.Vitals.ep/gmcp.Char.Vitals.maxep)
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif snd.balance.backstab and hasSkill("Backstab") and endur &gt; 75 then
    if snd.wielding("dirk") then
      battack = "backstab "..snd.bashing.target
	 	else
      if hasSkill("Quickwield") then
        battack = "quickwield left dirk"..snd.sep.."backstab "..snd.bashing.target
      else
        battack = "wield dirk"
      end
	 	end
	elseif snd.toggles.newbie then
    if snd.wielding("whip") then
      battack = "garrote "..snd.bashing.target
    else
      if hasSkill("Quickwield") then
        battack = "quickwield left whip"..snd.sep.."garrote "..snd.bashing.target
      else
        battack = "wield whip"
      end
    end
  else
    battack = "bite "..snd.bashing.target.." camus"
 	end
end

function snd.templar_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  endur = 100*(gmcp.Char.Vitals.ep/gmcp.Char.Vitals.maxep)

	if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif snd.toggles.newbie then
		battack = "strikebash "..snd.bashing.target
  elseif (snd.wielded.left.name:find("warhammer") or snd.wielded.left.name:find("bastard") or snd.wielded.left.name:find("glaive")) and hasSkill("Doubleswing") then
    battack = "dsw "..snd.bashing.target
  else
  	battack = "dsk "..snd.bashing.target
	end
	if (hp &gt;= 61 and wp &gt;= 50 and hasSkill("Sacrifice")) and not snd.toggles.newbie then 
    battack = battack.. " sacrifice sacrifice"
  elseif not snd.toggles.newbie and hasSkill("Cleanse") then
    battack = "cleanse left"..snd.sep.."cleanse right"..snd.sep..battack
  end
end

function snd.teradrim_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  endur = 100*(gmcp.Char.Vitals.ep/gmcp.Char.Vitals.maxep)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
	
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "sand shield me"
    end
  elseif snd.balance.momentum and hasSkill("Momentum") and endur&gt;=45 then
    battack = "earth momentum "..snd.sep.."earth batter "..snd.bashing.target..snd.sep.."golem recover"
  else
		battack = "earth batter "..snd.bashing.target..snd.sep.."golem recover"
	end
end

function snd.tidesage_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  endur = 100*(gmcp.Char.Vitals.ep/gmcp.Char.Vitals.maxep)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
	
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "fog harden me"
    end
  elseif snd.balance.momentum and hasSkill("Hightide") and endur&gt;=45 then
    battack = "tide hightide "..snd.sep.."tide clobber "..snd.bashing.target..snd.sep.."synth recuperate"
  else
		battack = "tide clobber "..snd.bashing.target..snd.sep.."synth recuperate"
	end
end

function snd.warden_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
  elseif hp &lt;= 60 and snd.soul &gt;= 60 then
    battack = "ancest suffuse health"
	else
    if gmcp.Char.Vitals.wield_left:find("scythe") or gmcp.Char.Vitals.wield_left:find("greatspear") then
      battack = "warden lacerate "..snd.bashing.target
    else
      battack = "warden maul "..snd.bashing.target
	 end
  end
end

function snd.wayfarer_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
      if hasSkill("Sustain") then
        battack = "fury sustain"
      end
    else
      battack = "touch shield"
    end
  elseif hp &lt;= 70 and hasSkill("Sustain") then
    battack = "fury sustain"..snd.sep.."axe chop "..snd.bashing.target
  else
    battack = "axe chop "..snd.bashing.target
  end
end

function snd.zealot_bash()
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)
  wp = 100*(gmcp.Char.Vitals.wp/gmcp.Char.Vitals.maxwp)
  battack = ""
  if tonumber(gmcp.Char.Vitals.bleeding) &gt; 1000 and snd.cauterize and hasSkill("Cauterize") and mp &gt;= 15 then
    battack = "enact cauterize me"..snd.sep
    snd.cauterize = false
    tempTimer(2,[[snd.cauterize = true]])
  end

  if hp &lt;=40 then
    if snd.shield_check() and not snd.punisher then
      battack = battack.."touch shield"
    else
      if hasSkill("Respiration") then
        battack = battack.."respiration"
      end
    end
  elseif not snd.can_arms() and hasSkill("Sunkick") then
    battack = battack.."sunkick "..snd.bashing.target
	else
		battack = battack.."flow "..snd.bashing.target.." pummel pummel"
	end
end

local ascendedAttacks = {
  malevolent = "adherent blossom",
  strife = "adherent shards",
  corruption = "adherent spiral",
  memory = "adherent shend",
  tyranny = "adherent oppress",
  instinct = "adherent embitter",
  
  seraph = "seraph admonish",
  aetherial = "aetherial spiral",
  titan = "titan fissure",
  glacian = "glacian frostbite",
  nocturn = "nocturn curse",
  sagani = "sagani quarrel",
  chaos = "chaos havoc",
  tiarna = "tiarna fulminate",
  astral = "astral evert",
  none = "kill",
}

function snd.none_bash() --super basic bashing function for 200's.
  hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
	
  if hp &lt;=40 and snd.shield_check() then
    if snd.punisher then
    else
      battack = "touch shield"
    end
	else
    battack = ascendedAttacks[snd.toggles.ascendedtype].." "..snd.target
	end
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Generic bashing targets</name>
					<packageName></packageName>
					<script>
function generic_bashing_name(mob)

  local area = gmcp.Room.Info.area
  local target = ""
  if snd.generic_bashing_table_by_area[area] then 
    target = snd.generic_bashing_table_by_area[area] 
  elseif snd.generic_bashing_table_specific_names[mob] then
    target = snd.generic_bashing_table_specific_names[mob]
  else
    for k, v in ipairs(snd.generic_bashing_table_duplicate_names) do
     if string.match(' '.. mob:lower() ..' ', '%A'.. v ..'%A') ~= nil then
      target = v
     end
    end
  end
  
  return target
end


snd.generic_bashing_table_by_area = {
  ["the Forgotten Dome"] = "kelki",
  ["Xaanhal"] = "xorani",
  ["Luzith's Lair"] = "spider",
  ["the Bloodwood"] = "spirit",
  ["the Fractal Bloom"] = "entity",
  ["the Ayhesa Cliffs"] = "spellshaper",
  ["the Caverns of Mor"] = "undead",
  ["the Sparklight Rift"] = "elemental",
  ["the Centipede Cave"] = "centipede",
  ["the Teshen Caldera"] = "teshen",
  ["a snake pit"] = "snake",
}


snd.generic_bashing_table_specific_names = {
  ["a monstrous Carnifex guard"] = "carnifex",
  ["a fluffy jambaali"] = "jambaali",
  ["a howler monkey"] = "monkey",
  ["a spunky white tamarin"] = "tamarin",
  ["a beautiful wild horse"] = "horse",
  ["a white-tailed deer"] = "deer",
  ["a tiny hatchling"] = "hatchling",
  ["a school of spinebacks"] = "spinebacks",
  ["a Masilidean physicalist"] = "physicalist",
  ["a bemused artist"] = "artist",
  ["a deputy constable"] = "constable",
  ["a stonescale mephit"] = "mephit",
  ["a soulless pixie"] = "pixie",
  ["a playful oniro"] = "oniro",
  ["a Dwarven craftsman"] = "craftsman",
  ["a petrified treant"] = "treant",
  ["a fanged lugore"] = "lugore",
  ["a white hen"] = "hen",
  ["a piece of an amalgamation"] = "piece",
  ["a ball of chitinous legs"] = "legs",
  ["a rabid plant"] = "plant",
  ["a pungent lichosphere"] = "lichosphere",
  ["Igrar, Captain of the Gral"] = "igrar",
  ["the impish outcast, Qezirath"] = "qezirath",
  ["a large, snowy fox"] = "fox",
  ["a scything skitterer"] = "skitterer",
  ["a stonescale ravager"] = "ravager",
  ["a shambling fungal abomination"] = "abomination",
  ["a stalwart templar"] = "templar",
  ["a horrid basilwyrm"] = "basilwyrm",
  ["a chittering chicken"] = "chicken",
  ["a Dwarven boy"] = "dwarf",
  ["a lanky, Trollish witch doctor"] = "troll",
  ["a massive orgyuk"] = "orgyuk",
  ["an energetic orangutan"] = "orangutan",
  ["a rot-infested swordfish"] = "swordfish",
  ["a vast ochre ooze"] = "ooze",
  ["an ogre berserker"] = "ogre",
  ["a giant squid"] = "squid",
  ["an amorphous black umbra"] = "umbra",
  ["a swarm of tsetse flies"] = "flies",
  ["a male gorilla"] = "gorilla",
  ["a naive neo-Ankyrean"] = "neo-ankyrean",
  ["a bald eagle"] = "eagle",
  ["a vicious horned garwhol"] = "garwhol",
  ["a Masilidean etherealist"] = "etherealist",
  ["a guard pig"] = "pig",
  ["an irritated crow"] = "crow",
  ["a black and white badger"] = "badger",
  ["a lithe cougar"] = "cougar",
  ["a serpentine couatl"] = "couatl",
  ["a barnacle-encrusted oyster"] = "oyster",
  ["a long-toothed beaver"] = "beaver",
  ["a tentacled morbol"] = "morbol",
  ["a frazzled-looking possum"] = "possum",
  ["a battle-worn Ascendril"] = "ascendril",
  ["a fetish-decorated shaman"] = "shaman",
  ["a burly, stone-fisted laborer"] = "laborer",
  ["Mellias, an elegant Tsol'aa consanguine"] = "consanguine",
  ["a boisterous Imp boy"] = "imp",
  ["a slender, female arachnoid"] = "arachnoid",
  ["a moth"] = "moth",
  ["a chaos storm"] = "storm",
  ["a large gray and black dugger"] = "dugger",
  ["a black-spotted cow"] = "cow",
  ["a black ram"] = "ram",
  ["a gnat"] = "gnat",
  ["a splintering earthrager"] = "earthrager",
  ["a willowy nest guardian"] = "guardian",
  ["Gwenil, the Dwarven blacksmith"] = "dwarf",
  ["a tree frog"] = "frog",
  ["a Masilidean mentalist"] = "mentalist",
  ["a spindly village alpha"] = "alpha",
  ["a corrupted hackle"] = "hackle",
  ["a poisonous purple lora"] = "lora",
  ["an iridescent tizapez"] = "tizapez",
  ["Sentinel Rozhirr"] = "rozhirr",
  ["a panther-like Rajamala"] = "rajamala",
  ["a chaos orb"] = "orb",
  ["Muiran, a trapper"] = "muiran",
  ["a handsom nayar"] = "nayar",
  ["a lava daemon"] = "daemon",
  ["a glowing lava daemon"] = "daemon",
  ["a long billed toucan"] = "toucan",
  ["a shadowy, mindless demon"] = "demon",
  ["a chimera"] = "chimera",
  ["an enchanting meayan"] = "meayan",
  ["a slimy aryeim"] = "aryeim",
  ["a malevolent spectre"] = "spectre",
  ["an enormous anaconda"] = "anaconda",
  ["a rebellious rancher"] = "rancher",
  ["a rabid blood-fiend"] = "blood-fiend",
  ["a strong pine"] = "pine",
  ["insubstantial whispers"] = "whispers",
  ["a Dwarven archeologist"] = "dwarf",
  ["Head Foreman Cadric"] = "cadric",
  ["an ethereal firelord"] = "firelord",
  ["Quartermaster Kuius"] = "kuius",
  ["a foul-smelling zombie"] = "zombie",
  ["a shrieking grimshrill"] = "grimshrill",
  ["a cloud of fungal spores"] = "spores",
  ["a spatial anomaly"] = "anomoly",
  ["a Troll cook"] = "cook",
  ["a swarm of black beetles"] = "beetles",
  ["an opossum"] = "opossum",
  ["Blacksmith Udhomentesh"] = "udhomentesh",
  ["a banded scrubland racer"] = "racer",
  ["a black rhinoceros"] = "rhinoceros",
  ["a ruffled grouse"] = "grouse",
  ["Tuera, the torturer"] = "tuera",
  ["a willow sappling"] = "willow",
  ["Tohrul, the Dwarven supervisor"] = "dwarf",
  ["a demonic screamer"] = "screamer",
  ["Edgar, the gardener"] = "edgar",
  ["a silent reed cat"] = "cat",
  ["a monstrous arachnid"] = "arachnid",
  ["a tower watchman"] = "watchman",
  ["Elenina, the astrologer"] = "elenina",
  ["a field hauler"] = "hauler",
  ["Morrid, a village elder"] = "morrid",
  ["a bloodleech"] = "bloodleech",
  ["a silver-feathered orel"] = "orel",
  ["a victimised intruder"] = "intruder",
  ["Foreman Grummosh"] = "grummosh",
  ["Deorkaan, the Hlugna smithy"] = "deorkaan",
  ["a warden of the Hlugnic clans"] = "warden",
  ["a blackened darkwalker"] = "darkwalker",
  ["a school of piranha"] = "piranha",
  Jehanne = "jehanne",
  ["an insignificant lime caterpillar"] = "caterpillar",
  ["a humbug"] = "humbug",
  ["a ravenous locust"] = "locust",
  ["a shadowdrop"] = "shadowdrop",
  ["a mire pup"] = "pup",
  ["Commander Marakhi"] = "marakhi",
  ["Foreman Dugan"] = "dugan",
  ["a monstrous coelacanth"] = "coelacanth",
  ["a brown rockling"] = "rockling",
  ["a magpie"] = "magpie",
  ["a severed male head"] = "head",
  ["Lassorn, a village cooper"] = "lassorn",
  ["a large buck"] = "buck",
  ["a soft-shelled klikkin"] = "klikkin",
  ["a green slime"] = "slime",
  ["a lake trout"] = "trout",
  ["a blackbird"] = "blackbird",
  ["a Hlugnic runeguard"] = "runeguard",
  ["a crazed blood-fiend"] = "blood-fiend",
  ["a mutated blood-fiend"] = "blood-fiend",
  ["a Mamashi lioness"] = "lioness",
  ["a large bhfaol"] = "bhfaol",
  ["a spotted jaguar"] = "jaguar",
  ["a winged fungal horror"] = "horror",
  ["a burrowing owl"] = "owl",
  ["a squat penguin"] = "penguin",
  ["an agile Sentaari monk"] = "monk",
  ["a grotesque fangtooth"] = "fangtooth",
  ["a dark green alligator"] = "alligator",
  ["a colorful toucan"] = "toucan",
  ["a Bloodloch soldier"] = "soldier",
  ["a djeirani ghost"] = "ghost",
  ["a striped tzatica"] = "tzatica",
  ["a cave-dwelling avisme"] = "avisme",
  ["a pious invoker"] = "invoker",
  ["a brawny glaive knight"] = "knight",
  ["a vile inquisitor"] = "inquisitor",
  ["a student of the lich"] = "student",
  ["a fragment of living glass"] = "fragment",
  ["the Dwarven alemaster"] = "alemaster",
  ["a bubonis"] = "bubonis",
  ["a dull brown lamprey"] = "lamprey",
  ["a burly lumberjack"] = "lumberjack",
  ["a fiery phenkyre"] = "phenkyre",
  ["a large, juicy cavehopper"] = "cavehopper",
  ["Nolid, the Dwarven fisherman"] = "fisherman",
  ["a voracious blind-fish"] = "blind-fish",
  ["a disembodied soul"] = "soul",
  ["a lithe weasel"] = "weasel",
  ["a lurking shadow"] = "shadow",
  ["a dwarven boy"] = "boy",
  ["a mottled green bullfrog"] = "bullfrog",
  ["a tenacious tough"] = "tough",
  ["a glossy black silk-spinner"] = "silk-spinner",
  ["a gigantic fungal strider"] = "strider",
  ["a Masilidean focus"] = "focus",
  ["a five-tentacled octopus of jade"] = "octopus",
  ["a Dwarven excavator"] = "excavator",
  ["a zombie cleric"] = "cleric",
  ["a draconic zogura"] = "zogura",
  ["Head Archeologist, Dolus"] = "dolus",
  ["Lieutenant Chiakhi"] = "chiakhi",
  ["an immense Trollish chieftain"] = "chieftain",
  ["a sering Sycophant"] = "sycophant",
  ["a field monitor"] = "monitor",
  ["a white-coated chinchilla"] = "chinchilla",
  ["a pathfinder"] = "pathfinder",
  ["a brown and tan python"] = "python",
  ["an unctuous creepling"] = "creepling",
  ["Moritsio, Owner of the Pub"] = "moritsio",
  ["Baruin, the Dwarven mason"] = "baruin",
  ["Maeron, the Quartermaster"] = "maeron",
  ["a decaying donkey"] = "donkey",
  ["a field harvester"] = "harvester",
  ["a gamey goat"] = "goat",
  ["Lesiv, the Torstonite chieftain"] = "lesiv",
  ["a malevolent poltergeist"] = "poltergeist",
  ["a short-horned chamois"] = "chamois",
  ["Laoghaire, the monitor"] = "laoghaire",
  ["Lieutenant Gharvoi"] = "gharvoi",
  ["a rock devil"] = "devil",
  ["the Dwarven miller"] = "miller",
  ["a tall chempala"] = "chempala",
  ["Administrator Kamakshi"] = "kamakshi",
  ["a carefree Grook boy"] = "boy",
  ["an oversized efreeti"] = "efreeti",
  ["a gargantuan cicada"] = "cicada",
  ["a large, deepwater salmon"] = "salmon",
  ["Midolo Raim"] = "midolo",
  ["General Abeshentesh"] = "abeshentesh",
  ["a mutilated creature"] = "creature",
  ["a corrupted cultist"] = "cultist",
  ["a diminutive necromancer"] = "necromancer",
  ["a choke creeper"] = "creeper",
  ["a wealthy sailor"] = "sailor",
  ["a savage mutant pumpkin"] = "pumpkin",
  ["a white-collared lemming"] = "lemming",
  ["Hassik, the village elder"] = "elder",
  Firthar = "firthar",
  ["Mala, the Artisan"] = "mala",
  ["a darkened soul"] = "soul",
  ["a mass of deadly trap spiders"] = "spider",
  ["a darkling"] = "darkling",
  ["Broondac, the vampire strategist"] = "broondac",
  ["a radiant lumore"] = "lumore",
  ["an irritable, rabid zebra"] = "zebra",
  ["a snowy armadilleon"] = "armadilleon",
  ["a lithe buckawn"] = "buckawn",
  ["a furry coatimundi"] = "coatimundi",
  ["Gunder, a retired sailor"] = "gunder",
  ["Fermian, excavation foreman"] = "fermian",
  ["a poisonous water moccasin"] = "moccasin",
  ["a serpentine blademistress"] = "blademistress",
  ["a shadow ray"] = "ray",
  ["a rotund, white ptarmigan"] = "ptarmigan",
  ["a mutilated humanoid"] = "humanoid",
  ["a grizzly foreman"] = "foreman",
  ["a razor nahuac"] = "nahuac",
  ["a young foal"] = "foal",
  ["a school of shadowy minnows"] = "minnows",
  ["a striped sea krait"] = "krait",
  ["a tiny aurivv bug"] = "bug",
  ["a shivering jackrabbit"] = "jackrabbit",
  ["a soulmaster"] = "soulmaster",
  ["a vampiric overseer"] = "vampire",
  ["a carnivorous weed"] = "weed",
  ["a scarlet macaw"] = "macaw",
  ["a great white stag"] = "stag",
  ["a lithe black panther"] = "panther",
  ["an orange-and-yellow stripped starfish"] = "starfish",
  ["an oversized tortoise"] = "tortoise",
  ["a bound shade"] = "shade",
  ["a small ocelot"] = "ocelot",
  ["a suspicious Xorani patrol"] = "xorani",
  ["a slime-encrusted spitter"] = "spitter",
  ["an ecru axolotl"] = "axolotl",
  ["a serpentine jawsnapper"] = "jawsnapper",
  ["a foul spiderling"] = "spiderling",
  ["a slender synicant"] = "synicant",
  ["a giant mosquito"] = "mosquito",
  ["a katydid"] = "katydid",
  ["a malformed beast"] = "beast",
  ["a nightmare shadow"] = "shadow",
  ["a white gyrfalcon"] = "gyrfalcon",
  ["a dervish"] = "dervish",
  ["Tirahl the Necromancer"] = "tirahl",
  ["a savage shade"] = "shade",
  ["a scheming terramancer"] = "terramancer",
  ["a plump duck"] = "duck",
  ["a nimble sentinel"] = "sentinel",
  ["a battle-worn Ascendril"] = "ascendril",
  ["a massive argobole"] = "argobole",
  ["Shanea, a village elder"] = "shanea",
  ["a withered crone"] = "crone",
  ["an elderly Dwarven gardener"] = "gardener",
  ["a slender mud adder"] = "adder",
  ["a white tailed doe"] = "doe",
  ["a disgustingly warped missionary"] = "missionary",
  ["a speckled tinyok"] = "tinyok",
  ["a misty apparition"] = "apparition",
  ["a wild-eyed scientist"] = "scientist",
  ["a slender forager"] = "forager",
  ["a green slime toad"] = "toad",
  ["a small, ruddy turnstone"] = "turnstone",
  ["a shadow"] = "shadow",
  ["Mayor Thurgil Redstein"] = "thurgil",
  ["an oversized earthworm"] = "earthworm",
  ["a warden of the Hlugnic clans"] = "warden",
  ["an enormous Troll bandit"] = "bandit",
  ["Nysaac"] = "nysaac",
  ["a cave basilisk"] = "basilisk",
  ["an Ursal elite guard"] = "ursal",
  ["a blindfolded Utari"] = "utari",
  ["an agitated basilisk"] = "basilisk",
  ["an Utari warrior"] = "utari",
  ["an Ursal swordsman"] = "swordsman",
  ["a Caentoi rogue"] = "rogue",
  ["a Tarpen bombardier"] = "bombardier", 
  ["a Golba brute"] = "brute",
  ["a skulking Golban scout"] = "scout",
  ["a fleet-footed Caentoi scout"] = "scout", 
  ["an oversized, grey basilisk"] = "basilisk", 
  ["an armored, brown basilisk"] = "basilisk", 
  ["a spiked basilisk"] = "basilisk", 
  ["a grey and brown basilisk"] = "basilisk", 
  ["a blinded basilisk"] = "basilisk", 
  ["a juvenile basilisk"] = "basilisk", 
  ["a basilisk hatchling"] = "basilisk", 
  ["a spine-necked arrex"] = "arrex", 
  ["a sabre-toothed abosvi"] = "abosvi",
  ["a prowling barbed abosvi"] = "abosvi", 
  ["a gaunt Aslinn guard"] = "aslinn",
  ["an Aslinn slave catcher"] = "aslinn",
  ["a snarling vakmut warhound"] = "vakmut",
  ["a ravenous vakmut warhound"] = "vakmut", 
  ["a lithe Aslinn houndmaster"] = "aslinn",
  ["a wary Aslinn slaver"] = "aslinn", 
  ["a wretched Aslinn slaver"] = "aslinn",
  ["a cruel Aslinn guard"] = "aslinn",
  ["a menacing Aslinn gladiator"] = "aslinn",
  ["a scarred Aslinn gladiator"] = "aslinn",
  ["a gaunt Aslinn slaver"] = "slaver",
  ["a scarred Aslinn slaver"] = "slaver",
  ["a sinewy Aslinn slaver"] = "slaver",
  ["a haughty Caentoi slaver"] = "slaver",
  ["a hulking Ursal brute"] = "brute",
  ["a grim Aslinn slaver"] = "slaver",
  ["a large earth elemental"] = "elemental", 
  ["a large smoke elemental"] = "elemental", 
  ["a large fire elemental"] = "elemental",
  ["a mottled brown frog"] = "frog",
  ["a monstrous pike"] = "pike",
  ["a vibrantly pink flamingo"] = "flamingo", 
  ["a large sea turtle"] = "turtle", 
  ["a steel-grey barracuda"] = "barracuda", 
  ["a sleek hammerhead shark"] = "shark",
  ["a vicious, mutated shark"] = "shark",
  ["a hundred-strings jellyfish"] = "jellyfish",
  ["a horrifically deformed woodpecker"] = "woodpecker",
  ["a warped squirrel"] = "squirrel",
  ["a mutated deer"] = "deer",
  ["a rabid Hokkali drone"] = "drone",
  ["a feral Hokkali soldier"] = "soldier",
  ["a twisted Hokkali hunter"] = "hunter",
  ["a hideous Hokkali Queensguard"] = "guard",
  ["a freshly spawned Hokkali ambusher"] = "ambusher",
  ["a bulbous direant bomber"] = "bomber",
  ["a sleek direant scout"] = "scout",
  ["a chitinous direant soldier"] = "soldier",
  ["an agile direant worker"] = "worker",
  ["a grimy bandit"] = "bandit",
  ["a bandit leader"] = "leader",
  ["a dark-haired mole"] = "mole",
  ["a stalagmite rat"] = "rat",
  ["a massive, tunneling cave worm"] = "worm",
  ["a many-eyed marionette slime"] = "slime",
  ["a behemoth pit beast"] = "beast",
  ["a floating cave manta"] = "manta",
  ["a spotted cave salamander"] = "salamander",
  ["a fuzzy brown bat"] = "bat", 
  ["a rime-covered bear"] = "bear", 
  ["a long-jawed cave spider"] = "spider",
  ["an incorporeal townsmen"] = "townsmen",
  ["a spectral merchant"] = "merchant", 
  ["an ethereal guardsman"] = "guardsman", 
  ["a spectral Balaton shark"] = "shark",
  ["a fragmented, spectral memory"] = "memory", 
  ["a phantasmal mystic"] = "mystic", 
  ["a disembodied soldier"] = "soldier",
  ["a ghostly seagull"] = "seagull", 
  ["a ghastly beggar"] = "beggar", 
  ["an eidolic, Seam-bound pilgrim"] = "pilgrim",
  ["an otherworldly-shaped, gliding devourer"] = "devourer", 
  ["a hungering voidwalker"] = "voidwalker", 
  ["a singularly-focused defiler"] = "defiler",
  ["a writhing mass of voidspawn"] = "voidspawn",
  ["a many-legged, skittering aberration"] = "aberration"
}

snd.generic_bashing_table_duplicate_names = {
  "ghost", 
  "keeper",
  "eld",
  "snake",
  "bandit",
  "syll",
  "coyote",
  "kobold",
  "xorani",
  "gnome",
  "angel",
  "wildcat",
  "entity",
  "lion",
  "cragling",
  "woman",
  "centipede",
  "leper",
  "dwarf",
  "snail",
  "sheep",
  "dog",
  "sapling",
  "ghast",
  "priest",
  "priestess",
  "leopard",
  "blob",
  "slaver",
  "hound",
  "viper",
  "hunter",
  "scholar",
  "indorani",
  "experiment",
  "gremlin",
  "sycophant",
  "teshen",
  "wolf",
  "direwolf",
  "girl",
  "tiger",
  "hound",
  "bloodhound",
  "child",
  "officer",
  "spirit",
  "spellshaper",
  "warrior",
  "miner",
  "mhun",
  "kelki",
  "villager",
  "worm",
  "nazetu",
  "lich",
  "goblin",
  "fly",
  "dragonfly",
  "guard",
  "boru",
  "skeleton",
  "scorpion",
  "sentry",
  "capybara",
  "elemental",
  "snatcher",
  "tree",
  "eel",
  "boar",
  "shark",
  "bear",
  "buffalo", 
  "raccoon",
  "fish",
  "ghoul",
  "jellyfish",
  "lizard",
  "spider",
  "rattlesnake",
  "wolverine",
  "chiav",
  "squirrel",
  "trog",
  "catfish",
  "golem",
  "hare",
  "grub",
  "mit'olk",
  "harpy",
  "bat",
  "nalas",
  "mage",
  "mugyik",

  "troll",
  "rat",
  "bush",
  "farmer",
  "oak",
  "serpent",
  "minion",
  "crocodile",
  "bobcat",
  "servant",
  "blood-fiend",
  "elephant",
  "rojalli",
  "aberration",
  "goose",
  "turtle",
  "crab",
  "icewyrm",
  "man",
  "rabbit",
  "wraith",
  "elk",
  }</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Bashing cleanup</name>
					<packageName></packageName>
					<script>--This stuff will be run once a room is cleared before moving on.
function snd.bashing_cleanup()
  cleanupAction = ""
  if snd[snd.class:lower() .. "_cleanup"] then
    snd[snd.class:lower() .. "_cleanup"]()
  end
  if cleanupAction ~= "" and cleanupAction ~= snd.last_attack then
    snd.send("qeb stand" .. snd.sep .. cleanupAction)
    snd.last_attack = cleanupAction
    snd.waiting.queue = true
    tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    return true
  end
end

-- Sample cleanup function. needs to be lowercase snd.classname_cleanup() for it to work.
-- function snd.templar_cleanup()
  -- local bleed = tonumber(gmcp.Char.Vitals.bleeding)
  -- local hp = 100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)
  -- local mp = 100 * (gmcp.Char.Vitals.mp / gmcp.Char.Vitals.maxmp)
  -- if hp &lt; 75 then
    -- cleanupAction = "touch worrystone"
  -- elseif mp &lt; 75 then
    -- cleanupAction = "touch worrystone"
  -- end
-- end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Healing</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Methods</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>balance</name>
						<packageName></packageName>
						<script>

function snd.do_special(current)
 if snd.afflictions[current] ~= nil then
  if snd.afflictions[current].state == "afflicted" then
   snd.send(snd.afflictions[current].cures.special)
   echo("("..snd.afflictions[current].cures.special..")")
   snd.last_type = "special"
   snd.last_item = snd.afflictions[current].cures.special
   snd.afflictions[current].state = "waiting"
   startStopWatch(snd.afflictions[current].timer)
  end
 elseif snd.defenses[current] ~= nil then
  if current == "def_fangbarrier" and snd.have_aff("slickness") then
	 return
	else
   if snd.defenses[current].state == "down" then
    if current == "def_fangbarrier" then snd.send("outc paste"); snd.send(snd.defenses[current].balance.special) 
    else snd.send(snd.defenses[current].balance.special) end
    echo("("..snd.defenses[current].balance.special..")")
    snd.last_type = "special"
    snd.last_item = snd.defenses[current].balance.special
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
	 end
  end
 end
end

function snd.do_balance_need(current)
 if gmcp.Char.Vitals.balance == "1" and not snd.waiting.balance and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.balanceneed)
  echo("("..snd.defenses[current].balance.balanceneed..")")
  snd.last_type = "balanceneed"
  snd.last_item = snd.defenses[current].balance.balanceneed
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
 end
end

function snd.do_equilibrium_need(current)
 if gmcp.Char.Vitals.equilibrium == "1" and not snd.waiting.equilibrium and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.equilibriumneed)
  echo("("..snd.defenses[current].balance.equilibriumneed..")")
  snd.last_type = "equilibriumneed"
  snd.last_item = snd.defenses[current].balance.equilibriumneed
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
 end
end

function snd.do_balance_equilibrium_need(current)
 if snd.can_cast() then
  if snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    if current:find("chameleon") then
      local cham_check = snd.toggles.chameleonPeople[math.random(#snd.toggles.chameleonPeople)]
      if hasSkill("Chameleon","raceskills") then
        snd.send("chameleon "..cham_check)
      else
        snd.send(snd.defenses[current].balance.balanceequilibrium..cham_check)
      end
    else
      snd.send(snd.defenses[current].balance.balanceequilibrium)
    end
    echo("("..snd.defenses[current].balance.balanceequilibrium..")")
    snd.last_type = "balanceequilibrium"
    snd.last_item = snd.defenses[current].balance.balanceequilibrium
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  elseif snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send(snd.afflictions[current].cures.balanceequilibrium)
    echo("("..snd.afflictions[current].cures.balanceequilibrium..")")
    snd.last_type = "balanceequilibrium"
    snd.last_item = snd.afflictions[current].cures.balanceequilibrium
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  end
 end
end

function snd.do_balance_take(current)
 if gmcp.Char.Vitals.balance == "1" and not snd.waiting.balance and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.balancetake)
  echo("("..snd.defenses[current].balance.balancetake..")")
  snd.last_type = "balancetake"
  snd.last_item = snd.defenses[current].balance.balancetake
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end

function snd.do_equilibrium_take(current)
 if gmcp.Char.Vitals.equilibrium == "1" and not snd.waiting.equilibrium and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.equilibriumtake)
  echo("("..snd.defenses[current].balance.equilibriumtake..")")
  snd.last_type = "equilibriumtake"
  snd.last_item = snd.defenses[current].balance.equilibriumtake
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.equilibrium = true
  tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
 end
end

function snd.do_needy_balance_take(current)
  if snd.can_cast() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.send(snd.defenses[current].balance.needybalancetake)
    echo("("..snd.defenses[current].balance.needybalancetake..")")
    snd.last_type = "needybalancetake"
    snd.last_item = snd.defenses[current].balance.needybalancetake
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
    snd.waiting.balance = true
    tempTimer(snd.delay(), [[snd.waiting.balance = false]])
  end
end

function snd.do_needy_equilibrium_take(current)
 if snd.can_cast() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send(snd.defenses[current].balance.needyequilibriumtake)
  echo("("..snd.defenses[current].balance.needyequilibriumtake..")")
  snd.last_type = "needyequilibriumtake"
  snd.last_item = snd.defenses[current].balance.needyequilibriumtake
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.equilibrium = true
  tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
 end
end

function snd.do_balance_equilibrium_take(current)
  if snd.can_cast() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
    
    if snd.class == "Teradrim" and current:find("swelter") then
      if not table.isMember(gmcp.Room.Info.details, "sandy") then
        snd.send("sand flood")
        snd.waiting.balance = true
        tempTimer(snd.delay(), [[snd.waiting.balance = false]])
        snd.waiting.equilibrium = true
        tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
      end
    end

    if snd.class == "Tidesage" and current:find("sirensong") then
      if not table.isMember(gmcp.Room.Info.details, "fogged") then
        snd.send("fog inundate")
        snd.waiting.balance = true
        tempTimer(snd.delay(), [[snd.waiting.balance = false]])
        snd.waiting.equilibrium = true
        tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
      end
    end
        
    snd.send(snd.defenses[current].balance.balanceequilibriumtake)
    echo("("..snd.defenses[current].balance.balanceequilibriumtake..")")
    snd.last_type = "balanceequilibriumtake"
    snd.last_item = snd.defenses[current].balance.balanceequilibriumtake
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
    snd.waiting.balance = true
    tempTimer(snd.delay(), [[snd.waiting.balance = false]])
    snd.waiting.equilibrium = true
    tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>tattoo</name>
						<packageName></packageName>
						<script>
function snd.do_tattoo(current)
 if snd.can_cast() and snd.can_tattoo() and snd.defenses[current].state == "down" and snd.defenses[current].needit then
  snd.send("touch "..snd.defenses[current].balance.tattoo.." tattoo")
  echo("(touch "..snd.defenses[current].balance.tattoo.." tattoo)")
  snd.last_type = "tattoo"
  snd.last_item = snd.defenses[current].balance.tattoo
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
  snd.waiting.equilibrium = true
  tempTimer(snd.delay(), [[snd.waiting.equilibrium = false]])
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>eat</name>
						<packageName></packageName>
						<script>-- 
-- function snd.do_eat(current)
 -- if snd.defenses[current] ~= nil then
  -- if snd.defenses[current].state == "down" and snd.defenses[current].needit and snd.can_eat() then
   -- snd.cur.herb = snd.defenses[current].balance.eat
   -- if snd.have_slow() then
    -- if snd.outred[snd.cur.herb] &gt;= 1 then
     -- snd.eat(current)
     -- return
    -- elseif snd.not_entangled() then
     -- snd.send("outr "..snd.cur.herb)
     -- return
    -- else
     -- return
    -- end
   -- elseif snd.not_entangled() then
    -- if snd.defenses[current] ~= nil then
     -- snd.send("outr "..snd.cur.herb)
     -- snd.eat(current)
    -- end
   -- else
    -- if snd.defenses[current] ~= nil then
     -- if snd.outred[snd.cur.herb] &gt;= 1 then
      -- snd.eat(current)
     -- end
    -- end
   -- end
  -- end
 -- end
-- end


function snd.do_eat(current)
 if snd.defenses[current] ~= nil then
  if snd.defenses[current].state == "down" and snd.defenses[current].needit and snd.can_eat() then
   snd.cur.herb = snd.defenses[current].balance.eat
   if snd.not_entangled() then
    snd.eat(current)
   end
  end
 end
end

function snd.eat(current)
 snd.send("eat "..snd.cur.herb)
 echo("(eat "..snd.cur.herb..")")
 snd.defenses[current].state = "waiting"
 startStopWatch(snd.defenses[current].timer)
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>drink</name>
						<packageName></packageName>
						<script>
function snd.do_drink(current)
 if snd.can_eat() then
  if snd.afflictions[current] ~= nil then
   snd.cur.drink = snd.afflictions[current].cures.drink
  else
   snd.cur.drink = snd.defenses[current].balance.drink
  end
  if snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.send("drink "..snd.cur.drink)
    echo(" (drink "..snd.cur.drink..")")
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  elseif snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send("drink "..snd.cur.drink)
    echo(" (drink "..snd.cur.drink..")")
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  end
 end
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>herb</name>
						<packageName></packageName>
						<script>-- 
-- function snd.do_herb(current)
 -- if gmcp.Char.Vitals.herb == "1" and not snd.waiting.herb and snd.can_eat() then
  -- if snd.afflictions[current] ~= nil then
    -- if snd.afflictions[current].state == "afflicted" then
      -- snd.cur.herb = snd.afflictions[current].cures.herb
    -- else
      -- return
    -- end
  -- else
    -- if snd.defenses[current].state == "down" and snd.defenses[current].needit then
      -- snd.cur.herb = snd.defenses[current].balance.herb
    -- else
      -- return
    -- end
  -- end
  -- if snd.have_slow() then
    -- if snd.afflictions[current] ~= nil then
      -- if snd.outred[snd.cur.herb] &gt;= 1 then
        -- snd.herb(current)
        -- return
      -- elseif snd.not_entangled() then
        -- snd.send("outr "..snd.cur.herb)
        -- return
      -- else
        -- return
      -- end
    -- elseif snd.defenses[current] ~= nil then
      -- if snd.outred[snd.cur.herb] &gt;= 1 then
        -- snd.herb(current)
        -- return
      -- elseif snd.not_entangled() then
        -- snd.send("outr "..snd.cur.herb)
        -- return
      -- else
        -- return
        -- end
      -- end
    -- elseif snd.not_entangled() then
      -- if snd.afflictions[current] ~= nil then
        -- snd.send("outr "..snd.cur.herb)
        -- snd.herb(current)
      -- elseif snd.defenses[current] ~= nil then
        -- snd.send("outr "..snd.cur.herb)
        -- snd.herb(current)
      -- end
    -- else
      -- if snd.afflictions[current] ~= nil then
        -- if snd.outred[snd.cur.herb] &gt;= 1 then
          -- snd.herb(current)
        -- end
      -- elseif snd.defenses[current] ~= nil then
        -- if snd.outred[snd.cur.herb] &gt;= 1 then
          -- snd.herb(current)
        -- end
      -- end
    -- end
  -- end
-- end

function snd.do_herb(current)
  if gmcp.Char.Vitals.herb == "1" and not snd.waiting.herb and snd.can_eat() then
    if snd.afflictions[current] ~= nil then
      if snd.afflictions[current].state == "afflicted" then
        snd.cur.herb = snd.afflictions[current].cures.herb
      else
        return
      end
    else
      if snd.defenses[current].state == "down" and snd.defenses[current].needit then
        snd.cur.herb = snd.defenses[current].balance.herb
      else
        return
      end
    end
    if snd.not_entangled() then
      if snd.afflictions[current] ~= nil or snd.defenses[current]~= nil then
        snd.herb(current)
      end
    end
  end
end

function snd.herb(current)
 if snd.afflictions[current] ~= nil then
  snd.cur.herb = snd.afflictions[current].cures.herb
 else
  snd.cur.herb = snd.defenses[current].balance.herb
 end
 if snd.afflictions[current] ~= nil then
  snd.send("eat "..snd.cur.herb)
  echo("(eat "..snd.cur.herb..")")
  snd.last_type = "herb"
  snd.last_item = snd.cur.herb
  snd.waiting.herb = true
  tempTimer(snd.delay(), [[snd.waiting.herb = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 elseif snd.defenses[current] ~= nil then
  snd.send("eat "..snd.cur.herb)
  echo("(eat "..snd.cur.herb..")")
  snd.last_type = "herb"
  snd.last_item = snd.cur.herb
  snd.waiting.herb = true
  tempTimer(snd.delay(), [[snd.waiting.herb = false]])
  snd.defenses[current].state = "waiting"
  startStopWatch(snd.defenses[current].timer)
 end
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>vial</name>
						<packageName></packageName>
						<script>
function snd.do_vial(current)
 if gmcp.Char.Vitals.elixir == "1" and not snd.waiting.vial and snd.can_eat() then
  if snd.afflictions[current] ~= nil then
   snd.cur.vial = snd.afflictions[current].cures.vial
  else
   snd.cur.vial = snd.defenses[current].balance.vial
  end
  if snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" and snd.defenses[current].needit then
    snd.send("drink "..snd.cur.vial)
    echo(" (drink "..snd.cur.vial..")")
    snd.waiting.vial = true
    tempTimer(snd.delay(), [[snd.waiting.vial = false]])
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  elseif snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send("drink "..snd.cur.vial)
    echo(" (drink "..snd.cur.vial..")")
    snd.waiting.vial = true
    tempTimer(snd.delay(), [[snd.waiting.vial = false]])
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  end
 end
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>salve</name>
						<packageName></packageName>
						<script>
function snd.do_salve(current)
 if gmcp.Char.Vitals.salve == "1" and not snd.waiting.salve and snd.can_apply() then
  if snd.afflictions[current] ~= nil then
   snd.cur.salve = snd.afflictions[current].cures.salve
  else
   snd.cur.salve = snd.defenses[current].balance.salve
  end
  if snd.afflictions[current] ~= nil then
   if snd.afflictions[current].state == "afflicted" then
    snd.send("apply "..snd.cur.salve)
    echo("(apply "..snd.cur.salve..")")
    snd.last_type = "salve"
    snd.last_item = snd.cur.salve
    snd.waiting.salve = true
    tempTimer(snd.delay(), [[snd.waiting.salve = false]])
    snd.afflictions[current].state = "waiting"
    startStopWatch(snd.afflictions[current].timer)
   end
  elseif snd.defenses[current] ~= nil then
   if snd.defenses[current].state == "down" then
    snd.send("apply "..snd.cur.salve.." to body")
    echo("(apply "..snd.cur.salve.." to body)")
    snd.last_type = "salve"
    snd.last_item = snd.cur.salve
    snd.waiting.salve = true
    tempTimer(snd.delay(), [[snd.waiting.salve = false]])
    snd.defenses[current].state = "waiting"
    startStopWatch(snd.defenses[current].timer)
   end
  end
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>elixir</name>
						<packageName></packageName>
						<script>
function snd.do_elixir(current)
 if gmcp.Char.Vitals.elixir == "1" and not snd.waiting.elixir and snd.can_eat() then
  snd.send("sip "..snd.afflictions[current].cures.elixir)
  snd.waiting.elixir = true
  tempTimer(snd.delay(), [[snd.waiting.elixir = false]] )
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>moss</name>
						<packageName></packageName>
						<script>
function snd.do_moss(current)
 if gmcp.Char.Vitals.moss == "1" and not snd.waiting.moss and snd.can_eat() then
  snd.cur.herb = "moss"
  if snd.have_slow() then
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.send("eat "..snd.cur.herb)
     return
    elseif snd.not_entangled() then
     snd.send("outr "..snd.cur.herb)
     return
    else
     return
    end
   end
  elseif snd.not_entangled() then
   if snd.afflictions[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.send("eat "..snd.cur.herb)
   elseif snd.defenses[current] ~= nil then
    snd.send("outr "..snd.cur.herb)
    snd.send("eat "..snd.cur.herb)
   end
  else
   if snd.afflictions[current] ~= nil then
    if snd.outred[snd.cur.herb] &gt;= 1 then
     snd.send("eat "..snd.cur.herb)
    end
   end
  end
  snd.waiting.moss = true
  tempTimer(snd.delay(), [[snd.waiting.moss = false]] )
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>writhe</name>
						<packageName></packageName>
						<script>
function snd.do_writhe(current)
 if snd.afflictions[current].state == "afflicted" and gmcp.Char.Vitals.writhing == "0" and (not snd.waiting.writhe) and (not string.find(current, "impale") or snd.full_balance()) then
  snd.send("writhe")
  echo("(writhe)")
  snd.last_type = "writhe"
  snd.last_item = "send"
  snd.waiting.writhe = true
  tempTimer(snd.delay(), [[snd.waiting.writhe = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>concentrate</name>
						<packageName></packageName>
						<script>
function snd.do_concentrate(current)
 if snd.afflictions[current].state == "afflicted" and not snd.waiting.concentrate then
  snd.send("concentrate")
  echo("(concentrate)")
  snd.last_type = "concentrate"
  snd.last_item = "send"
  snd.waiting.concentrate = true
  tempTimer(snd.delay(), [[snd.waiting.concentrate = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>other</name>
						<packageName></packageName>
						<script>
function snd.do_tree(current)
 limb = false
 if string.find(current, "_crippled") then
  x = string.gsub(current, "_crippled", "_broken")
  y = string.gsub(current, "_crippled", "_mangled")
  if snd.have_aff(x) or snd.have_aff(y) then
   limb = true
  end
 end
 if not limb and snd.afflictions[current].state == "afflicted" and gmcp.Char.Vitals.tree == "1" and not snd.waiting.tree and snd.can_tattoo() then
  snd.send("touch tree tattoo")
  echo("(touch tree tattoo)")
  snd.last_type = "tree"
  snd.last_item = "send"
  snd.waiting.tree = true
  tempTimer(snd.delay(), [[snd.waiting.tree = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end

function snd.do_focus(current)
 if snd.afflictions[current].state == "afflicted" and gmcp.Char.Vitals.focus == "1" and not snd.waiting.focus and snd.can_focus() then
  snd.send("focus")
  echo("(focus)")
  snd.last_type = "focus"
  snd.last_item = "send"
  snd.waiting.focus = true
  tempTimer(snd.delay(), [[snd.waiting.focus = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end

function snd.do_clot(current)
 if snd.afflictions[current].state == "afflicted" and not snd.waiting.clot and snd.toggles.clotting then
  mp = gmcp.Char.Vitals.mp
  mid = math.floor((gmcp.Char.Vitals.maxmp/100)*60)
  max = math.floor((mp-mid)/80)
  needed = math.floor(tonumber(gmcp.Char.Vitals.bleeding)/20)
  if max &lt; needed then
   x = max
  else
   x = needed
  end
  if x &gt; 0 then
   snd.send("clot "..x)
   echo("(clot*"..x..")")
   snd.last_type = "clot"
   snd.last_item = "send"
   snd.waiting.focus = true
   tempTimer(snd.delay(), [[snd.waiting.clot = false]])
   snd.afflictions[current].state = "waiting"
   startStopWatch(snd.afflictions[current].timer)
  end
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>smoke</name>
						<packageName></packageName>
						<script>
function snd.do_smoke(current)
 if snd.can_smoke() then
  if snd.pipes_lit or (not snd.toggles.lighting) then
   snd.smoke(current)
  elseif snd.have_slow() then
   if snd.afflictions[current] ~= nil then
    snd.send("light pipes")
   elseif snd.defenses[current] ~= nil then
    snd.send("light pipes")
    return
   end
  else
   snd.light_up()
   snd.smoke(current)
  end
 end
end

function snd.smoke(current)
 if snd.afflictions[current] ~= nil then
  snd.cur.pipe = snd.afflictions[current].cures.smoke
 else
  snd.cur.pipe = snd.defenses[current].balance.smoke
 end
 if snd.afflictions[current] ~= nil then
  if snd.afflictions[current].state == "afflicted" then
   snd.send("smoke "..snd.cur.pipe)
   echo("(smoke "..snd.cur.pipe..")")
   snd.last_type = "smoke"
   snd.last_item = snd.cur.pipe
   snd.afflictions[current].state = "waiting"
   startStopWatch(snd.afflictions[current].timer)
  end
 elseif snd.defenses[current] ~= nil then
  if snd.defenses[current].state == "down" and snd.defenses[current].needit then
   snd.send("smoke "..snd.cur.pipe)
   echo("(smoke "..snd.cur.pipe..")")
   snd.last_type = "smoke"
   snd.last_item = snd.cur.pipe
   snd.defenses[current].state = "waiting"
   startStopWatch(snd.defenses[current].timer)
  end
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>stand</name>
						<packageName></packageName>
						<script>
function snd.do_stand(current)
 if snd.afflictions[current].state == "afflicted" and snd.toggles.standing and (not snd.waiting.stand) and snd.full_balance() and snd.can_legs() then
  snd.send("stand")
  echo("(stand)")
  snd.last_type = "stand"
  snd.last_item = "send"
  snd.waiting.stand = true
  tempTimer(snd.delay(), [[snd.waiting.stand = false]])
  snd.afflictions[current].state = "waiting"
  startStopWatch(snd.afflictions[current].timer)
 end
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>fitness</name>
						<packageName></packageName>
						<script>
function snd.do_fitness()
 if snd.can_fitness() and snd.need_fitness and snd.full_balance() then
  snd.send("fitness")
  echo("(fitness)")
  snd.last_type = "fitness"
  snd.last_item = "fitness"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>purge / annul</name>
						<packageName></packageName>
						<script>purge_threshold = 2

function snd.purge_check()
-- Attempt to purge if don't have paralysis and have at least 2 curable physical affs.
  if snd.balance.purge and not snd.waiting.purge and not snd.have_aff("paralysis") then
    local purgable = {}
    
    for _, aff in pairs(snd.physical_affs) do
      if snd.have_aff(aff) and aff ~= "paralysis" then
        local i, _ = string.find(aff, "_crippled")
        if i then
          local s = string.sub(aff, 0, i - 1)
          if snd.afflictions["aff_"..s.."_broken"].state == "healed" then
            table.insert(purgable, aff)
          end
        else
          table.insert(purgable, aff)
        end
      end
    end
    
    if #purgable &gt;= purge_threshold then
      return true
    else
      return false
    end
  end
end

function snd.do_purge()
  
      if snd.class == "Carnifex" then
        snd.send("soul purge")
        echo("(soul purge)")
      else
        snd.send("ancest annul")
        echo("(ancest annul)")
      end
      
      snd.last_type = "purge"
      snd.last_item = "purge"
      snd.waiting.purge = true
      tempTimer(snd.delay(), [[snd.waiting.purge = false]])
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>shrugging</name>
						<packageName></packageName>
						<script>
function snd.do_shrug()
 if snd.full_balance() and snd.can_shrug() then
  snd.send("shrug venom")
  echo("(shrug venom)")
  snd.last_type = "shrug"
  snd.last_item = "shrug"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>dome</name>
						<packageName></packageName>
						<script>
function snd.do_dome()
 if snd.full_balance() then
  snd.send("manipulate pylon for dome")
  snd.last_type = "dome"
  snd.last_item = "dome"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>rage</name>
						<packageName></packageName>
						<script>
function snd.do_rage()
 if snd.rage_check() and snd.can_rage() and snd.balance.rage then
  snd.send("rage")
  echo("(rage)")
  snd.last_type = "rage"
  snd.last_item = "rage"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end

function snd.rage_check()

  if not snd.balance.rage then return false end
  
  if not gmcp then return false end
  if hp ~= nil then
    if hp &lt;= 1 then return false end
  end

  local rage_affs = {
    "aff_hubris",
  "aff_pacifism",
  "aff_peace",
  "aff_agony",
  "aff_accursed",
  "aff_limp_veins",
  "aff_lovers_effect",
  "aff_laxity",
  "aff_superstition",
  "aff_generosity",
  "aff_justice",
  "aff_magnanimity",}
  
  for _, v in pairs(rage_affs) do
    if snd.have_aff(v) then
      return true
    end
  end
  return false
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>purify / succour</name>
						<packageName></packageName>
						<script>purify_threshold = 2

function snd.purify_check()
-- Attempt to purge if don't have paralysis and have at least 2 curable physical affs.
  if snd.balance.purify and not snd.waiting.purify and not snd.have_aff("paralysis") then
    local purifiable = {}
    
    for _, aff in pairs(snd.physical_affs) do
      if snd.have_aff(aff) and aff ~= "paralysis" then
        local i, _ = string.find(aff, "_crippled")
        if i then
          local s = string.sub(aff, 0, i - 1)
          if snd.afflictions["aff_"..s.."_broken"].state == "healed" then
            table.insert(purifiable, aff)
          end
        else
          table.insert(purifiable, aff)
        end
      end
    end
    
    if #purifiable &gt;= purify_threshold then
      return true
    else
      return false
    end
  end
end

function snd.do_purify()

     if snd.class == "Praenomen" then
        snd.send("purify blood")
        echo("(purify)")
      else
        snd.send("succour")
        echo("(succour)")
      end
      
    snd.last_type = "purify"
    snd.last_item = "purify"
	snd.waiting.purify = true
  tempTimer(snd.delay(), [[snd.waiting.purify = false]])
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>panacea / subvert</name>
						<packageName></packageName>
						<script>function snd.panacea_check()
  if snd.balance.panacea and not snd.waiting.panacea and not (snd.have_aff("paresis") or snd.have_aff("paralysis")) then
    if snd.panacea_override then
      return snd.panacea_override()
    end
    if snd.checksomeSelfAffs({"asthma","slickness","anorexia","impatience"},2) then
      return true
    end
    if snd.have_aff("impatience") and snd.checksomeSelfAffs(snd.mental_affs, 3) then
      return true
    end
  end
  return false
end

function snd.do_panacea()
  
      if snd.class == "Shaman" then
        snd.send("nature panacea")
        echo("(nature panacea)")
      else
        snd.send("botany subvert")
        echo("(botany subvert)")        
      end
      
      snd.last_type = "panacea"
      snd.last_item = "panacea"
      snd.waiting.panacea = true
      tempTimer(snd.delay(), [[snd.waiting.panacea = false]])
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Diagnose</name>
						<packageName></packageName>
						<script>
function snd.do_diagnose()
 if snd.full_balance() then
  snd.send("diagnose")
  snd.last_type = "diagnose"
  snd.last_item = "send"
  snd.waiting.balance = true
  tempTimer(snd.delay(), [[snd.waiting.balance = false]])
 end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Barbed arrows</name>
						<packageName></packageName>
						<script>function snd.pull_arrow()
  if not snd.waiting.queue then
    snd.send("qeb pull arrow from body")
    snd.waiting.queue = true
    tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<Script isActive="yes" isFolder="no">
					<name>load defenses</name>
					<packageName></packageName>
					<script>snd.defenses_loaded = true

function snd.load_def(option)
  if snd.def_options[option] ~= nil then
    snd.message("Loading defense options for: &lt;green&gt;" .. option .. "&lt;white&gt;.", "echo")
    send(" ")
    snd.less_defs = {}
--    if snd.class~="None" then --200 check
    if gmcp.Char.Status.race:sub(1,6) == "Azudim" then
      snd.def_options[option]["def_miasma"] = "on"
    elseif gmcp.Char.Status.race:sub(1,6) == "Yeleni" then
      snd.def_options[option]["def_warmth"] = "on"
    elseif gmcp.Char.Status.race:sub(1,6) == "Idreth" then
      snd.def_options[option]["def_safeguard"] = "on"
    end
--    end
    local my_def_choice_and_generic_defenses = {}
    if option ~= "none" then
      my_def_choice_and_generic_defenses =
        table.union(snd.def_options.general_defs, snd.def_options[option])
    else
      my_def_choice_and_generic_defenses = {}
    end
    for i in pairs(snd.defenses) do
      snd.defenses[i].needit = false
    end
    for h in pairs(my_def_choice_and_generic_defenses) do
      if not snd.defenses[h] then
        snd.message("Oops! Looks like you have the defense \""..h.."\" in your defense options, and it's not properly defined.")
      elseif
        my_def_choice_and_generic_defenses[h] == "once" and
        (hasSkill(snd.defenses[h].skill, snd.defenses[h].tree) or snd.assumed_class ~= nil)
      then
        if snd.defenses[h].state ~= "deffed" then
          snd.defenses[h].needit = true
          table.insert(snd.less_defs, h)
        end
      elseif
        my_def_choice_and_generic_defenses[h] == "on" and (hasSkill(snd.defenses[h].skill, snd.defenses[h].tree) or snd.assumed_class ~= nil)
      then
        if h == "def_vitality" then
          if snd.balance.vitality then
            snd.defenses[h].needit = true
          end
        else
          snd.defenses[h].needit = true
        end
      end
      --add chameleon if you have the toggle for it
      snd.defenses.def_chameleon.needit = snd.toggles.chameleon

    end
  else
    snd.message("No such defense option as &lt;red&gt;" .. option .. "&lt;white&gt;!", "echo")
    send(" ")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>defense options</name>
					<packageName></packageName>
					<script>snd.def_options = {

none = {

},

general_defs = {
def_thirdeye = "on",
def_mindseye_tattoo = "on",
def_cloak_tattoo = "on",
def_kola = "on",
def_deathsight = "on",
def_insomnia = "on",
def_frost = "on",
def_venom = "on",
def_levitation = "on",
def_speed = "on",
def_caloric = "on",
def_dodge_melee = "on",
def_nightsight = "on",
def_clarity = "once",
},

akkari = {
def_ardour_constitution = "once",
def_relentless = "on",
def_resolved = "on",
def_celerity = "on",
def_acuity = "on",
def_stalking = "once",
def_suppressed = "once",
def_retaliation = "once",
def_ascetic = "on"
},


alchemist = {
def_interposition = "on",
def_obfuscation = "on",
def_cognisance = "once",
def_resuscitation = "on",
def_conduit_crutch = "on",

},

archivist = {
def_gripping = "on",
def_spheres =  "once",
def_linked = "once",
def_oneness = "once",
def_sublimation = "once",
def_ameliorate = "once",
def_catabolism = "once",
},

ascendril = {
def_countercurrent = "on",
def_empowered_moon = "on",
def_arcaneskin = "on",
def_missiles = "once",
},

bard = {
def_sheath = "once",
def_charisma = "on",
def_euphonia = "once",
def_aurora = "once",
},

bear = {
def_weathering = "on",
def_bodyheat = "once",
def_metabolism = "once",
def_endurance = "once",
def_thickhide = "once",
def_bracing = "once",
def_harden = "once",
},

bloodborn = {
def_victimise = "once",
def_empowered_moon = "on",
def_panoply = "on",
def_forestall = "on",
},

carnifex = {
def_fearless = "on",
def_reveling = "once",
def_recklessness = "once",
def_soulharvest = "on",
def_soulthirst = "on",
def_soul_fortify = "on",
def_soul_fracture = "on",
def_soul_body = "once",
def_gripping = "on",
def_herculeanrage = "once",
def_cruelty = "on",
},

earthcaller = {
def_heatshield = "once",
def_battlehymn_constitution = "once",
def_smothering = "once",
def_constitution = "once",
},

indorani = {
def_gripping = "on",
def_deathaura = "once",
def_lifevision = "on",
def_soulmask = "on",
def_gravechill = "on",
def_vengeance = "on",
def_soulcage = "on",
def_shroud = "on",
def_hierophant = "once",
def_chariot = "on",
def_eclipse = "on",
def_devilpact = "on",
def_soulcage = "on",
},

luminary = {
def_lightshield = "once",
def_inspiration_constitution = "once",
def_fireblock = "once",
def_constitution = "once",
},

monk = {
def_weathering = "on",
def_toughness = "on",
def_vitality = "on",
def_kaido_regeneration = "on",
def_resistance = "on",
def_constitution = "on",
def_split_mind = "on",
def_kaido_immunity = "on",
def_boosted_regen = "on",
},

oneiromancer = {
def_gripping = "on",
def_intoxication = "once",
def_lifevision = "on",
def_redoubt = "on",
def_glaciation = "on",
def_defiance = "on",
def_remembrance = "on",
def_shroud = "on",
def_fan = "once",
def_crane = "on",
def_cloud = "on",
def_faerie = "on",
},

praenomen = {
def_potence_constitution = "once",
def_fortify = "on",
def_corpus_warding = "on",
def_celerity = "once",
def_lifescent = "once",
def_lifevision = "once",
-- def_veil = "on",
def_stalking = "once",
def_concentrate = "on",
def_shadowblow = "on",
def_blurred = "once",
def_elusion = "once",
-- def_deathlink = "on",
},

ravager = {
def_vinculum = "on",  
def_ruthlessness = "on", 
def_impenetrable = "on", 
def_criticality = "on", 
def_unfinished = "on", 
def_exhilarate = "on", 
def_reflexes = "on",
def_contempt = "once",
def_velocity = "on", 
def_untouchable = "on", 
def_inflated = "on", 
},

revenant = {
def_gripping = "on",
def_maingauche = "once",
},

runecarver = {        
def_prowess = "once",        
def_hex_stalk  = "once",        
def_hex_preservation = "once",        
def_ironbark= "once",        
def_empowered_moon = "once",
def_rot_carpet = "once",
},

sciomancer = {						
def_rigor = "on",		
def_shadow_engulf  = "once",		
def_shadow_mantle = "on",		
def_blurring = "on",		
def_empowered_moon = "on",
def_featherstep = "once",
},

sentinel = {
def_gripping = "on",
def_lifesap = "on",
def_barkskin = "on",
def_hardiness = "on",
def_conceal = "once",
def_maskedscent = "once",
def_vitality = "on",
def_flexibility = "once",
def_foreststride = "once",
},

shaman = {
def_lifevision = "on",
def_spiritbond = "on",
def_protection = "on",
def_shaman_spiritsight = "once",
def_lifebloom = "on",
def_shaman_warding = "on",
},

shapeshifter = {
def_weathering = "on",
def_bodyheat = "once",
def_metabolize = "once",
def_endurance = "once",
def_thickhide = "once",
def_corner = "once",
--def_harden = "once",
},

syssin = {
def_warding = "once",
def_finesse = "once",
def_shadowsight = "once",
def_ghost = "on",
def_shroud = "on",
def_lipreading = "on",
},

templar = {
def_gripping = "on",
def_maingauche = "once",
},

teradrim = {
def_earthenform = "on",
def_entwine = "on",
def_ricochet = "on",
def_twinsoul = "on",
def_earth_resonance = "on",
def_stonebind = "on",
def_imbue_stonefury = "on",
--def_sand_swelter = "once",
},

tidesage = {
def_permafrost  = "on",
def_wavebreaking  = "on",
def_tideflux = "on",
def_lifebond  = "on",
def_shore_leave  = "on",
def_encrusted  = "on",
def_expose_rime  = "on",
--def_sirensong  = "once",
},

warden = {
def_fearless = "on",
def_initiative = "once",
def_battleflow = "once",
def_ancest_victory = "on",
def_displacement  = "on",
def_ancestral_bolster = "on",
def_invocation  = "on",
def_gripping = "on",
def_roaring  = "once",
def_intervention = "once",
def_shroud = "once",
def_homage = "on",
},

wayfarer = {
def_ironskin = "on",
--def_blindsense = "on",
--def_greenheart = "on",
--def_endure = "once",
--def_mountaineer = "on",
--def_dustcoat = "on",
--def_resilience = "on",
--def_desolation = "on",
--def_circulation = "on",
},

wolf = {
def_weathering = "on",
def_bodyheat = "once",
def_metabolism = "once",
def_endurance = "once",
def_thickhide = "once",
def_corner = "once",
def_harden = "once",
--def_stealth = "once",
def_cloak_tattoo = "on",
},

zealot = {
def_focalmark = "on",
def_tempered_body = "on",
def_haste = "on",
def_swagger = "once",
def_litheness = "on",
def_bending = "on",
def_disunion = "on",
def_clarity = "on",
def_resurgence = "on",
def_discharge = "on",
def_deflection = "on",
def_mindspark = "on",

},
--200s
malevolent = {
  def_adherent_barrier = "on",
  def_adherent_presence = "on",
  def_adherent_synchroneity = "on",
  def_adherent_mortalfire_stored = "once",
  def_adherent_malevolence = "on",
},
strife = {
  def_adherent_barrier = "on",
  def_adherent_presence = "on",
  def_adherent_synchroneity = "on",
  def_adherent_mortalfire_stored = "once",
  def_adherent_turmoil = "on",
},
corruption = {
  def_adherent_barrier = "on",
  def_adherent_presence = "on",
  def_adherent_synchroneity = "on",
  def_adherent_mortalfire_stored = "once",
  def_adherent_acid = "on",
},
memory = {
  def_adherent_barrier = "on",
  def_adherent_presence = "on",
  def_adherent_synchroneity = "on",
  def_adherent_mortalfire_stored = "once",
  def_adherent_ruination = "on",
},
tyranny = {
  def_adherent_barrier = "on",
  def_adherent_presence = "on",
  def_adherent_synchroneity = "on",
  def_adherent_mortalfire_stored = "once",
  def_adherent_indomitable = "on",
},
instinct = {
  def_adherent_barrier = "on",
  def_adherent_presence = "on",
  def_adherent_synchroneity = "on",
  def_adherent_mortalfire_stored = "once",
  def_adherent_avengement = "on",
},

tiarna = {
  def_tiarna_bulwark = "on",
  def_tiarna_cultivation = "on",
  def_tiarna_presence = "on",
  def_tiarna_shelter_stored = "once",
  def_tiarna_unleash = "on",
},
glacian = {
  def_glacian_penumbra = "on",
  def_glacian_presence = "on",
  def_glacian_silhouette = "on",
  def_glacian_twilight = "on",
  def_glacian_adumbration_stored = "once",
},
aetherial = {
  def_aetherial_bastion = "on",
  def_aetherial_presence = "on",
  def_aetherial_torment = "on",
  def_aetherial_agility = "on",
  def_aetherial_band_stored = "once",
},
seraph = {
  def_seraph_radiate = "on",
  def_seraph_presence = "on",
  def_seraph_corona_stored = "once",
  def_seraph_parhelion = "on",
  def_seraph_halo = "on",
},
titan = {
  def_titan_disruption = "on",
  def_titan_irradiance = "on",
  def_titan_multicore = "on",
  def_titan_presence = "on",
  def_titan_remnant_stored = "once",
},
astral = {
  def_astral_chaosspores = "on",
  def_astral_dreamtide_store = "once",
  def_astral_presence = "on",
  def_astral_recursion = "on",
  def_astral_refulgence = "on"
},
nocturn = {
  def_nocturn_haze = "on",
  def_nocturn_double = "on",
  def_nocturn_presence = "on",
  def_nocturn_bloodcoat = "on",
  def_nocturn_shadow_stored = "once",
},
sagani = {
  def_sagani_epicentre = "on",
  def_sagani_helix_stored = "once",
  def_sagani_presence = "on",
  def_sagani_similitude = "on",
  def_sagani_wall = "on",
},
chaos = {
  def_chaos_entropy = "on",
  def_chaos_figment_stored = "once",
  def_chaos_fork = "on",
  def_chaos_presence = "on",
  def_chaos_shroud = "on",
}

}</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>parrying</name>
					<packageName></packageName>
					<script>
function snd.parry()
	local highest = 0
	snd.toparry = "none"
	if snd.cureset == "knight" then
		snd.toparry = "left leg"
	elseif snd.cureset == "ascendril" then
		snd.toparry = "torso"
	elseif snd.cureset == "shifter" and snd.my_limb_damage["head"] &gt;= 33.33 then
		snd.toparry = "head"
	else
		for limb in pairs(snd.my_limb_damage) do
			if string.find(limb, " ") then
				x = string.gsub(limb, " ", "_")
				aff = "pre_restore_"..x
			else
				aff = "pre_restore_"..limb
			end
			if snd.my_limb_damage[limb] &gt; highest and snd.my_limb_damage[limb] &lt; 33.33 then
				highest = snd.my_limb_damage[limb]
				snd.toparry = limb
			end
			if snd.my_limb_damage[limb] &gt; 25 then
				snd.aff_have(aff)
			else
				snd.aff_remove(aff)
			end
		end
	end
	if snd.toparry ~= "none" and snd.toparry ~= snd.parrying and snd.full_balance() and not snd.waiting.parry then
		if snd.class == "Zealot" and hasSkill("Fending") then
			snd.send("fend "..snd.toparry)
		elseif snd.class == "Monk" and hasSkill("Guarding") then
			snd.send("guard "..snd.toparry)
		elseif hasSkill("Parrying") then
			snd.send("parry "..snd.toparry)
		end
		snd.waiting.parry = true
		tempTimer(snd.delay(), [[snd.waiting.parry = false]])
	end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Offense</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>PvP variables</name>
					<packageName></packageName>
					<script>
snd.offense_loaded = true
snd.hitting = "none"

snd.using_both_hands = 0

--Templar / Revenant
snd.templar_weapon_one = "shortsword344140" -- used for Templar offenses
snd.templar_weapon_two = "shortsword344388" -- used for Templar offenses
snd.templar_last_limb = ""

snd.current_offense = ""

-- General
snd.loyalsattacking = false
snd.theytumbling = false
snd.theyrandir = "none"
snd.theyran = false
snd.pushattack = false

-- Shapeshifter
snd.neckdragdir = "none"

--Sciomancer / Runecarver
snd.gravity = 0
snd.repay = 0
snd.reflection_charge = 3
snd.shadeling = false

--Sentinel
snd.my_raloth = ""

--Akkari / Praenomen
snd.runeused = false

--Archivist
snd.my_token = ""
snd.empowerready = false
snd.geoinvert = false
snd.geotrace = false
snd.empowerready = false
snd.empowertype = ""
snd.my_mutagen = false
snd.their_mutagen = false
snd.my_impress = ""
snd.knit = false
snd.conjoin = false

--Shaman / Alchemist
snd.shamanpet = ""
snd.stormcloud = false
snd.incomingomen = false
snd.familiar = false
snd.thorncount = 0
snd.fetishattuned = false
snd.my_dread = false
snd.their_dread = false

--Wayfarer
snd.highjumped = false
snd.enraged = false

--Indorani/Oneiromancer
snd.adder_attached = false
snd.adder_ready = false
snd.target_has_aura = true
snd.need_leech_aura = true
snd.need_deform = true
snd.adderafflict = "none"

--Monk
snd.target_numbed = false
snd.mindlocked = false
snd.mindclamped = false
snd.hardenBonesProc = false
snd.kaistrikelimb = ""
snd.mindAffliction = snd.mindAffliction or "paralyse"
snd.stance = ""
snd.transmutation = true
snd.locking = false

--Ascendril / Bloodborn
snd.flamewreathed = {limb = "", resonance = ""}
snd.glimpse = "none"
snd.gorged = ""
snd.glimpsing = false
snd.reflection_charge = 3
snd.stalled_skill = ""
snd.fulcrum_call = true
snd.fulcrum_ready = true
snd.fulcrum_exists = false

--Teradrim / Tidesage
snd.lev_gone = false
snd.runemarkMajor = "none"
snd.runemarkMinor = "none"

--Zealot/Ravager
snd.zenith = false
snd.zenith_coming = false
snd.firefist = false
snd.firefist_cooldown = true
snd.swagger = 0
snd.welt_ready = "none"
snd.flamestack = 0
snd.cauterize = true
snd.immolation_ready = false
snd.rebuke = false
snd.blitz = false
snd.pyromania = false
snd.swaggered = false
snd.rebuke_limb = "none"
snd.hackles = true
snd.recover = true
snd.wrath = true

snd.callers = {}
snd.defended = false
snd.last_attack = "none"
snd.last_affs = {}
snd.last_cure = ""
snd.last_cured = ""
snd.mana_percent = 100
snd.health_percent = 100
snd.jawlocked = false
snd.soul = 100
snd.implant = "none"
snd.active_hound = "none"
snd.hypno = "none"
snd.last_hypno = 0
snd.hyp = 0
snd.sleight = "void"
snd.battle_aff = "none"
snd.chasten_aff = "none"
snd.flayingfang = false
snd.class_hitting = "none"
snd.person_hitting = "none"
snd.people_hitting_me = {}
snd.players_here = {}
snd.maybe_affs = {}
snd.cureset = "none"
snd.alert_tick = 0
snd.alerts = {}
snd.oldalerts = {}
snd.panic = false
snd.alertness = {}
snd.alertnessDir = "none"
snd.enemy_used_regenerate = false
snd.who_called_affs = ""

snd.disperse = "none" -- Can be set to none, callers or all.

snd.limbs = {}
snd.parried_limb = "none"
snd.last_hit_limb = "none"
snd.last_limb_dmg = 0
snd.resto_limb = "none"
snd.current_restoration_aff = ""
snd.limb_targeting = {
left = "none",
right = "none"
}
snd.limb_dmg = {
head = 0,
torso = 0,
["left arm"] = 0,
["right arm"] = 0,
["left leg"] = 0,
["right leg"] = 0,
total = 0,
}
snd.limb_status = {
head = "healed",
torso = "healed",
["left arm"] = "healed",
["right arm"] = "healed",
["left leg"] = "healed",
["right leg"] = "healed"
}
snd.limb_bruising = {
skin = 0,
head = 0,
torso = 0,
["left arm"] = 0,
["right arm"] = 0,
["left leg"] = 0,
["right leg"] = 0
}


snd.use_hourglass_on_prismatic = false
snd.giving = {}
snd.hound_queue = {}
snd.target_has = {}
snd.rebounded = false
snd.target_impaled = false -- do we specifically have our target imapled


snd.effects = {
--venoms
sight = "oculus",
blurry_vision = "oculus",
hearing = "prefarar",
asthma = "kalmia", 
paresis = "curare", 
clumsiness = "xentio", 
sensitivity = "prefarar", 
vomiting = "euphorbia",
allergies = "darkshade", 
colocasia = "colocasia", 
haemophilia = "hepafarin", 
peace = "ouabain",
deadening = "vardrax",

stupidity = "aconite", 
weariness = "vernalius", 
recklessness = "eurypteria", 
dizziness = "larkspur", 
shyness = "digitalis", 

anorexia = "slike",
belonephobia = "araceae",
slickness = "gecko",

stuttering = "jalk",

voyria = "voyria", --immunity

squelched = "selarnia",
disfigurement = "monkshood",

thin_blood = "scytherus",
left_leg_crippled = "epseth",
right_leg_crippled = "epseth",
left_arm_crippled = "epteth",
right_arm_crippled = "epteth",

conviction = "conviction",
mental_disruption = "disrupt",
physical_disruption = "disrupt",
crippled = "cripple",
crippled_body = "cripple",
hemorrhage = "hemorrhage",

rend = "rend",
}

snd.venoms = {
    "sumac",
    "xentio",
    "oleander",
    "eurypteria",
    "kalmia",
    "digitalis",
    "darkshade",
    "curare",
    "epteth",
    "prefarar",
    "monkshood",
    "euphorbia",
    "colocasia",
    "oculus",
    "hepafarin",
    "camus",
    "vernalius",
    "epseth",
    "larkspur",
    "slike",
    "voyria",
    "delphinium",
    "vardrax",
    "loki",
    "aconite",
    "selarnia",
    "gecko",
    "scytherus",
    "ouabain",
  }

function snd.rev_empower(aff)

   local revenant = {
        ["conviction"] = "bimre",
        ["disrupt"] = "dirne",
        ["cripple"] = "azu",
        ["hemorrhage"] = "wilave",
                    }
    if revenant[aff] == nil then return aff
    else return revenant[aff]
    end
end

snd.spirituality_attacks = {
paresis = "shield strike",
sight = "shield brilliance",
misery = "shield facesmash",
weariness = "shield punch",
asthma = "shield slam",
haemophilia = "shield slam",
confusion = "perform dazzle",
writhe_transfix = "evoke transfixion",
}

snd.subjugation_attacks = {
paresis = "shield strike",
sight = "shield horrify",
misery = "shield facesmash",
weariness = "shield punch",
asthma = "shield slam",
haemophilia = "shield slam",
confusion = "dirge hysteria",
writhe_transfix = "tectonic transfixion",
}

snd.hound_attacks = {
  ["Carnifex"] = {
    recklessness = "growl",
    dizziness = "growl",
    berserking = "stare",
    impairment = "stare",
    weariness = "acidspit",
    crippled = "acidspit",
    epilepsy = "shock",
    hallucinations = "shock",
    blisters = "poisonclaw",
    limp_veins = "poisonclaw",
    frozen = "tundralhowl",
    shivering = "tundralhowl",
    no_caloric = "tundralhowl",
    blurry_vision = "ululate",
    mark = "mark",
              },
  ["Warden"] = {
    recklessness = "chant",
    dizziness = "chant",
    berserking = "incite",
    impairment = "incite",
    weariness = "harry",
    crippled = "harry",
    epilepsy = "shock",
    hallucinations = "shock",
    blisters = "poison",
    limp_veins = "poison",
    frozen = "freeze",
    shivering = "freeze",
    no_caloric = "freeze",
    blurry_vision = "dirge",
    mark = "mark",
  }
}

snd.cures = {

amaurosis = {
"sight",
},

ototoxin = {
"hearing",
},

panacea = {
"stormtouched",
"patterns",
"rot_body",
"rot_wither",
"rot_heat",
"rot_spirit",
"rot_benign",
},

anabiotic = {
"plodding",
"idiocy",
},

opiate = {
"paralysis",
"paresis",
"mirroring",
"crippled_body",
"crippled",
"blisters",
"slickness",
"heartflutter",
"slough",
},

steroid = {
"hubris",
"pacifism",
"peace",
"accursed",
"agony",
"limp_veins",
"lovers_effect",
"laxity",
"superstition",
"generosity",
"justice",
"magnanimity",
},

coagulation = {
"body_odor",
"lethargy",
"allergies",
"mental_disruption",
"physical_disruption",
"vomiting",
"exhausted",
"thin_blood",
"rend",
"haemophilia",
},

depressant = {
"commitment_fear",
"merciful",
"recklessness",
"egocentric",
"masochism",
"agoraphobia",
"loneliness",
"berserking",
"vertigo",
"claustrophobia",
"nyctophobia",
},

decongestant = {
"baldness",
"clumsiness",
"hypochondria",
"weariness",
"asthma",
"sensitivity",
"ringing_ears",
"impairment",
"blood_poison",
},

euphoriant = {
"self_pity",
"stupidity",
"dizziness",
"faintness",
"shyness",
"epilepsy",
"impatience",
"dissonance",
"infested",
},

antipsychotic = {
"sadness",
"confusion",
"dementia",
"hallucinations",
"paranoia",
"hatred",
"addiction",
"hypersomnia",
"blood_curse",
"blighted",
},

eucrasia = {
"worrywart",
"misery",
"hollow",
"narcolepsy",
"perplexed",
"self_loathing"
},

willow = {
"aeon",
"hellsight",
"deadening"
},

yarrow = {
"slickness",
"withering",
"disfigurement",
"migraine",
"squelched"
},

epidermal_torso = {
"anorexia",
"gorged",
--"effused_blood",
},

epidermal_head = {
"indifference",
"stuttering",
"blurry_vision",
"burnt_eyes",
"blindness",
"gloom",
"deafness"
},

epidermal = {
"anorexia",
"gorged",
--"effused_blood",
"indifference",
"stuttering",
"blurry_vision",
"blindness",
"deafness"
},

caloric = {
"hypothermia",
"frozen",
"shivering",
"no_caloric"
},

focus = {
"muddled",
"egocentric",
"stupidity",
"anorexia",
"epilepsy",
"mirroring",
"mental_disruption",
"peace",
"paranoia",
"hallucinations",
"dizziness",
"indifference",
"berserking",
"pacifism",
"lovers_effect",
"laxity",
"hatred",
"generosity",
"claustrophobia",
"vertigo",
"faintness",
"loneliness",
"agoraphobia",
"masochism",
"recklessness",
"weariness",
"impatience",
"confusion",
"dementia",
"nyctophobia",
"dread"
}

}

snd.entangleaffs = {
  "writhe_transfix",
	"writhe_impaled",
	"writhe_web",
	"writhe_thighlock",
	"writhe_armpitlock",
	"writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
  "writhe_grappled",
 }



snd.cureset_skills = {
ascendril = {"Elemancy", "Arcanism", "Thaumaturgy", "Humourism", "Hematurgy", "Esoterica"},
sciomancer = {"Sciomancy", "Sorcery", "Gravitation", "Malediction", "Runecarving", "Sporulation"},
indorani = {"Necromancy", "Tarot", "Domination","Hyalincuru", "Contracts", "Oneiromancy"},
praenomen = {"Corpus", "Mentis", "Sanguis", "Ascendance", "Dictum", "Discipline"},
archivist = {"Geometrics", "Numerology", "Bioessence"},
teradrim = {"Terramancy", "Animation", "Desiccation", "Wavebreaking", "Inundation", "Synthesis"},
luminary = {"Spirituality", "Devotion", "Illumination","Tectonics", "Apocalyptia", "Subjugation"},
sentinel = {"Dhuriv", "Woodlore", "Tracking"},
shaman = {"Primality", "Shamanism", "Naturalism", "Experimentation", "Alchemy", "Botany"},
monk = {"Tekura", "Kaido", "Telepathy"},
zealot = {"Zeal", "Purification", "Psionics", "Brutality", "Ravaging", "Egotism"},
syssin = {"Assassination", "Subterfuge", "Hypnosis"},
shifter = {"Ferality", "Shapeshifting", "Vocalizing"},
wayfarer = {"Tenacity", "Wayfaring", "Fury"},
templar = {"Battlefury", "Righteousness", "Bladefire", "Chirography", "Riving", "Manifestation"},
carnifex = {"Savagery", "Deathlore", "Warhounds", "Warding", "Ancestry", "Communion"},
bard = {"Songcalling", "Performance", "Weaving"},
}</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>tracking functions</name>
					<packageName></packageName>
					<script>snd.shadow_targets = {}
snd.spirit_targets = {}
snd.are_we_checking_ql = false

function snd.get_new_target()
  if snd.toggles.calling then
    local new_target = "nil"
    if #snd.players_here ~= 0 and (not table.contains(snd.players_here, snd.target:title()) or snd.targeting.skip) then
    	for _, tar in ipairs(snd.targeting.list) do
    		if table.contains(snd.players_here, tar) and snd.target:title() ~= tar then
          new_target = tar
          snd.target_gone = false
    			expandAlias("t " .. tar)
    			break
        end
    	end
      --[[if new_target == "nil" then
           if sndNDB.players[gmcp.Char.Status.name].tether == "Shadow" then check = snd.spirit_targets else check = snd.shadow_targets end
            for _, tar in ipairs(check) do
      		    if table.contains(snd.players_here, tar) then
                new_target = tar
                snd.target_gone = false
          			expandAlias("t " .. tar)
          			break
              end
            end
        	end]]
      end
  end
   if snd.targeting.skip then snd.targeting.skip = false end
end

function snd.took_limb_dmg(limb, amount)
  if limb and amount then
  
    if snd.checkAff("armor_tattoo") and amount &gt; 0 then
      amount = amount/2
      snd.last_limb_dmg = amount
    end
   
    snd.limb_dmg[limb] = snd.limb_dmg[limb] + amount
    if snd.limb_dmg[limb] &lt; 0 then
      snd.limb_dmg[limb] = 0
    end
    
    if snd.limb_dmg[limb] &gt; 99.99 then
      snd.limb_dmg[limb] = 99.99
    end
    
    if amount &gt; 0 then 
      cecho("&lt;green&gt; " .. limb .. ": " .. snd.limb_dmg[limb])
    else
      cecho("&lt;red&gt; " .. limb .. ": " .. snd.limb_dmg[limb])
    end

    if limb == snd.resto_limb and (amount == -30 or amount == -40) then
      snd.resto_limb = "none"
      if snd.limb_dmg[limb] &lt; 33.33 then
        if snd.limb_status[limb] == "mangled" then
          snd.limb_status[limb] = "broken"
          snd.target_cured(limb:gsub(" ","_").."_mangled")
        else
          snd.target_cured(limb:gsub(" ","_").."_broken")
          snd.limb_status[limb] = "healed"
        end
      elseif snd.limb_dmg[limb] &lt; 66.66 then
        snd.target_cured(limb:gsub(" ","_").."_mangled")
        snd.limb_status[limb] = "broken"
      end
    elseif snd.skill_being_used == "Rekindle" or snd.skill_being_used == "Reconstruct" then
      if snd.limb_dmg[limb] &lt; 33.33 then
        snd.target_cured(limb:gsub(" ","_").."_broken")
        snd.limb_status[limb] = "healed"
      elseif snd.limb_dmg[limb] &lt; 66.66 then
        snd.target_cured(limb:gsub(" ","_").."_mangled")
        snd.limb_status[limb] = "broken"
      end
    end
    local totaldmg = 0
  	snd.limb_dmg.total = 0
    for k, v in pairs(snd.limb_dmg) do
  		if v ~= "total" then
  	    totaldmg = totaldmg + v
    	end
  	end
    snd.limb_dmg.total = totaldmg
    raiseEvent("sunder_enemy_limbs_updated")
  end
end

function snd.target_got(affliction)
  if snd.illusion_found then
    return
  end

  affliction = snd.affNameCheck(affliction)

  if snd.checkAff(affliction) and affliction ~= "a_crippled_leg" and affliction ~= "a_crippled_arm" then
    return
  end
  if affliction == "a_crippled_leg" and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"},2) then
    return
  end
  if affliction == "a_crippled_arm" and snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled"},2) then
    return
  end
  
  
  if snd.defended then
    return
  end
  
  if affliction == "cold" then
    if not snd.checkAff("no_caloric") then affliction = "no_caloric"
    elseif not snd.checkAff("shivering") then affliction = "shivering"
    elseif not snd.checkAff("frozen") then affliction = "frozen"
    elseif not snd.checkAff("ice_encased") and snd.checkAff("frostbrand") then affliction = "ice_encased"
    else return
    end
  end
  
  if affliction == "a_crippled_leg" and snd.checkAff("a_crippled_leg") then
    snd.target_cured("a_crippled_leg")
    affliction = "right_leg_crippled"
    snd.target_got("left_leg_crippled")
  end
  
  if affliction == "a_crippled_leg" and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"},1) then
    if snd.checkAff("right_leg_crippled") then
      affliction = "left_leg_crippled"
    else
      affliction = "right_leg_crippled"
    end
  end
  
  if affliction == "a_crippled_arm" and snd.checkAff("a_crippled_arm") then
    snd.target_cured("a_crippled_arm")
    affliction = "right_arm_crippled"
    snd.target_got("left_arm_crippled")
  end
  
  if affliction == "a_crippled_arm" and snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled"},1) then
    if snd.checkAff("right_arm_crippled") then
      affliction = "left_arm_crippled"
    else
      affliction = "right_arm_crippled"
    end
  end

  if affliction == "crippled_body" then
    snd.target_cured("crippled")
  end
  
  table.insert(snd.target_has, affliction)
  -- add affliction before displaying in pane, used to be below the gui update
  raiseEvent("sunder_enemy_affs_updated")
  raiseEvent("sunder_enemy_limbs_updated")
  
  cecho("&lt;green&gt; " .. affliction)
  snd.waiting.queue = false
end

function snd.target_cured(affliction)
  if snd.illusion_found then
    return
  end

  local target_aff_check = {}
  
  affliction = snd.affNameCheck(affliction)

  if affliction == "paralysis" then
    snd.target_cured("paresis")
  end
  --if affliction == "anorexia" then
  --  snd.target_cured("voyria")
  --end
  if affliction == "shivering" then
    snd.target_cured("frozen")
  end
  if affliction == "accursed" then
    snd.target_cured("agony")
  end
  
  if affliction == "cold" then
    if snd.checkAff("ice_encased") then snd.target_cured("ice_encased")
    elseif snd.checkAff("frozen") then snd.target_cured("frozen")
    elseif snd.checkAff("shivering") then snd.target_cured("shivering")
    elseif snd.checkAff("no_caloric") then snd.target_cured("no_caloric")
    end
  end 
  
	if snd.checkAff("a_crippled_arm") and (affliction == "right_arm_crippled" or affliction == "left_arm_crippled") and not snd.checkAff(affliction) then
		affliction = "a_crippled_arm"
	end
	if snd.checkAff("a_crippled_leg") and (affliction == "right_leg_crippled" or affliction == "left_leg_crippled") and not snd.checkAff(affliction) then
		affliction = "a_crippled_leg"
	end
  
  for i in pairs(snd.target_has) do
    if snd.target_has[i] == affliction then
      table.remove(snd.target_has, i)
      cecho("&lt;red&gt; " .. affliction)
      snd.last_cured = affliction
      if affliction == "gorged" then
        snd.gorged = ""
      end
    end
  end
  raiseEvent("sunder_enemy_affs_updated")
  raiseEvent("sunder_enemy_limbs_updated")
  if not snd.target_gone then
    snd.waiting.queue = false
  end
end

function snd.target_used(curative)
  if snd.cures[curative] ~= nil then
    aff_found = false
    for affliction in pairs(snd.cures[curative]) do
      for i in pairs(snd.target_has) do
        if snd.target_has[i] == snd.cures[curative][affliction] and not aff_found then
          if curative == "panacea" then
            if snd.cures[curative][affliction]:sub(1,4) == "rot_" and snd.checksomeAffs({"woe_curse","shadowsphere",}, 1) then
                --won't get cured here
            else
              snd.target_cured(snd.cures[curative][affliction])
              aff_found = true
            end
          elseif snd.target_has[i] == "blighted" or snd.target_has[i] == "infested" then
            if not snd.checkAff("dread") then
              snd.target_cured(snd.cures[curative][affliction])
              aff_found = true
            end
          elseif curative == "epidermal_head" then
            if snd.cures[curative][affliction] ~= "gloom" then
              snd.target_cured(snd.cures[curative][affliction])
            end
            aff_found = true
          elseif snd.cures[curative][affliction] == "no_caloric" and snd.checkAff("rot_heat") then
            --nothing happens
          else
            snd.target_cured(snd.cures[curative][affliction])
            aff_found = true
          end
        end
      end
    end
  end
  snd.last_cure = curative
end

function snd.vital_change(vital, amount)
  if vital == "health" then
    snd.health_percent = snd.health_percent + amount
    if snd.health_percent &gt; 100 then
      snd.health_percent = 100
    end
    if snd.health_percent &lt; 0 then
      snd.health_percent = 0
    end
  elseif vital == "mana" then
    snd.mana_percent = snd.mana_percent + amount
    if snd.mana_percent &gt; 100 then
      snd.mana_percent = 100
    end
    if snd.mana_percent &lt; 0 then
      snd.mana_percent = 0
    end
  end
end

function snd.alertnessHit(dir, name, type)
  if not sndNDB_Exists(gmcp.Char.Status.name) or not sndNDB_Exists(name) then return end
  if snd.alertnessDir ~= "none" and snd.alertnessDir ~= dir then
    snd.alertness = {}
  end
  if sndNDB.players[gmcp.Char.Status.name].city ~= nil and sndNDB.players[name].city ~= nil then
    if sndNDB.players[gmcp.Char.Status.name].city ~= sndNDB.players[name].city then
      table.insert(snd.alertness, name)
      snd.alertnessDir = dir
      snd.alertType = type
    end
  end
end

function Reverse(arr)
  local i, j = 1, #arr
  while i &lt; j do
    arr[i], arr[j] = arr[j], arr[i]
    i = i + 1
    j = j - 1
  end
end

function snd.onHit()
  if snd.toggles.atkecho and snd.toggles.gags then
    deleteLine()
    snd.message(snd.hitting .. " hit: " .. snd.getting_hit .. ".")
  end
  snd.last_affs = {}

  if #snd.maybe_affs &gt;= 1 and (snd.getting_hit == snd.target) then
    if snd.maybe_affs[1] == "blaze" or snd.maybe_affs[1] == "wasi" then
      snd.used.rebounding = false
      table.remove(snd.maybe_affs, 1)
    else
      local aff = ""
      aff = snd.venomEffect(snd.maybe_affs[1]) 
      
      if snd.maybe_affs[1] == "placeholder" then
        snd.last_aff = ""
        table.remove(snd.maybe_affs, 1)
      elseif snd.maybe_affs[1]:find("crippled") then
        snd.target_got(snd.maybe_affs[1])
        table.remove(snd.maybe_affs, 1)
        table.insert(snd.last_affs, aff)
      elseif aff ~= "" then
        snd.target_got(aff)
        table.remove(snd.maybe_affs, 1)
        table.insert(snd.last_affs, aff)
      end
    end
  end
end

function snd.onHit2(checks, conditional)
  snd.last_affs = {}
  local aff = ""
  if (#snd.maybe_affs &gt;= 1 or snd.last_limb_dmg ~= 0) then -- Make sure affs or limb damage are populated
    if snd.maybe_affs[1] == "blaze" then -- take care of rebounding
      snd.used.rebounding = false
    else 
      if #snd.maybe_affs &gt; 0 and not (snd.checkAff(snd.venomEffect(snd.maybe_affs[1])) or snd.checkAff(snd.maybe_affs[1])) then -- if its an aff and
        if snd.venomEffect(snd.maybe_affs[1]) == "" then                                                                        -- not an aff/venom already
          aff = snd.maybe_affs[1]                                                                                               -- on them, populate aff
        else
          aff = snd.venomEffect(snd.maybe_affs[1])
        end
        snd.target_got(aff)
        table.insert(snd.last_affs, aff)
      end
    end

     if aff == "" and snd.last_limb_dmg == 0 then 
      if #snd.maybe_affs &gt;0 then
        table.remove(snd.maybe_affs, 1) 
      end
      return  -- at this point, if aff is empty and there's no limb dmg just abort mission captain
     else -- otherwise, something is populated and we need to turn on dodging/rebounding/parrying
      if checks ~= {} then
        for _, v in pairs(checks) do
            enableTrigger("Sunder "..v)
        end
      end
     end 
      -- With the way it's set up to handle only 1 aff, there's no easy way to account for 2 affs in 1 attack.
      -- Might look into it more later, this'll work for now.
      if aff == "laxity" and conditional == "Sentinel Slam" and snd.maybe_affs[2] == "epilepsy" then
        snd.target_got("epilepsy")
        table.insert(snd.last_affs, "epilepsy")
        table.remove(snd.maybe_affs, 2) 
      end

      if aff == "stupidity" and conditional == "Zealot Sunkick" and snd.maybe_affs[2] == "dizziness" then
        snd.target_got("dizziness")
        table.insert(snd.last_affs, "dizziness")
        table.remove(snd.maybe_affs, 2) 
      end
      
      if aff == "asthma" and conditional == "Luminary Slam" and snd.maybe_affs[2] == "haemophilia" then
        snd.target_got("haemophilia")
        table.insert(snd.last_affs, "haemophilia")
        table.remove(snd.maybe_affs, 2) 
      end      
      
      if aff == "misery" and conditional == "Luminary Facesmash" and snd.maybe_affs[2] == "sight" then
        snd.target_got("sight")
        table.insert(snd.last_affs, "sight")
        table.remove(snd.maybe_affs, 2) 
      end

      if conditional == ("Teradrim Skullbash" or "Tidesage Gybe") and #snd.maybe_affs &gt; 1 then
        if snd.maybe_affs[3] ~= nil and not snd.checkAff(snd.maybe_affs[3]) then
          snd.target_got(snd.maybe_affs[3])
          table.insert(snd.last_affs, snd.maybe_affs[3])
        end
        if not snd.checkAff(snd.maybe_affs[2]) then
          snd.target_got(snd.maybe_affs[2])
          table.insert(snd.last_affs, snd.maybe_affs[2])
        end
      end
      
      if conditional == "Bard Hiltblow" and #snd.maybe_affs &lt; 1 then
        disableTrigger("Hiltblow Confirmation")
      end
      
      if conditional == "Bard Rhythm" and #snd.maybe_affs &lt; 1 then
        disableTrigger("Bard Rhythm Confirmation") 
      end
      
      if aff == "stiffness" and conditional == "Zealot Twinpress" and snd.maybe_affs[2] == "muscle_spasms" then
        snd.target_got("muscle_spasms")
        table.insert(snd.last_affs, "muscle_spasms")
        table.remove(snd.maybe_affs, 2) 
      end
      
      if aff == "stiffness" and conditional == "Ravager PressurePoint" and snd.maybe_affs[2] == "muscle_spasms" then
        snd.target_got("muscle_spasms")
        table.insert(snd.last_affs, "muscle_spasms")
        table.remove(snd.maybe_affs, 2) 
      end
      
      -- Need a way to handle 2handed attacks (Sentinel, Templar DSW, Carnifex, etc)
      
      if conditional == "Sentinel Slash" and #snd.maybe_affs == 2 then
          snd.using_both_hands = 1
      end
      
      if conditional == "Carnifex" or conditional == "Warden" then
        snd.using_both_hands = 1
      end
      
      if conditional == "Templar2h" then
        snd.using_both_hands = 1
      end
  end

  table.remove(snd.maybe_affs, 1) 

  if conditional == "Templar" and #snd.maybe_affs &lt; 1 then --also works for revenant since same messages
      disableTrigger("Weapon Hit Confirmation") 
  end
  if conditional == "Syssin" and #snd.maybe_affs &lt; 1 then
    disableTrigger("Syssin Hit Confirmation")
  end
end

function snd.checkAff(affliction)

  if affliction == "paresis" then
    if table.contains(snd.target_has, affliction) or table.contains(snd.target_has, "paralysis") then
      return true
    else
      return false
    end
  elseif affliction == "crippled" then
    if table.contains(snd.target_has, affliction) or table.contains(snd.target_has, "crippled_body") then
      return true
    else
      return false
    end
  elseif affliction == "anorexia" then
    if table.contains(snd.target_has, affliction) then
      return true
    else
      return false
    end
  else
    affliction = snd.affNameCheck(affliction)
    if table.contains(snd.target_has, affliction) then
      return true
    else
      return false
    end
  end
end

function snd.checksomeAffs(afflictions, number)
  if number == 0 then
    return true
  end
  if number == nil then
    number = 1
  end
  if type(afflictions) == "string" then
    return snd.checkAff(afflictions)
  elseif type(afflictions) == "table" then
    local count = 0
    for i, v in ipairs(afflictions) do
      if snd.checkAff(v) then
        count = count + 1
        if count &gt;= number then
          return true
        end
      end
    end
    -- if the count of how many returned true didn't meet or exceed the number given, return false
    return false
  end
end

function snd.checksomeSelfAffs(afflictions, number)
  if number == 0 then
    return true
  end
  if number == nil then
    number = 1
  end
  if type(afflictions) == "string" then
    return snd.have_aff(afflictions)
  elseif type(afflictions) == "table" then
    local count = 0
    for i, v in ipairs(afflictions) do
      if snd.have_aff(v) then
        count = count + 1
        if count &gt;= number then
          return true
        end
      end
    end
    -- if the count of how many returned true didn't meet or exceed the number given, return false
    return false
  end
end

function snd.pendulum(direction)
  local pendulum_table =
      {
        ["left arm"] = {["clockwise"] = "right arm", ["anti-clockwise"] = "left leg"},
        ["right arm"] = {["clockwise"] = "right leg", ["anti-clockwise"] = "left arm"},
        ["right leg"] = {["clockwise"] = "left leg", ["anti-clockwise"] = "right arm"},
        ["left leg"] = {["clockwise"] = "left arm", ["anti-clockwise"] = "right leg"},
      }
    local limb_damage_copy = mmp.deepcopy(snd.limb_dmg)
    local limb_status_copy = mmp.deepcopy(snd.limb_status)
    -- copy limb damage table so we can manipulate values while iterating current unchanged values
    for k, v in pairs(limb_damage_copy) do
      if k ~= "total" and k ~= "head" and k ~= "torso" and v &gt; 0 then
        -- only check appendages and ones with damage
        snd.took_limb_dmg(pendulum_table[k][direction], v)
        -- add limb damage to new limb
        snd.took_limb_dmg(k, -v)
        -- remove damage from current limb
        if snd.checkAff(k:gsub(" ", "_") .. "_crippled") then
          -- we need to check for level one breaks as well
          snd.target_got(pendulum_table[k][direction]:gsub(" ", "_") .. "_crippled")
          --add new limb break
          snd.target_cured(k:gsub(" ", "_") .. "_crippled")
          --remove old
        end
        if snd.checkAff(k:gsub(" ", "_") .. "_dislocated") then
          -- we need to check for dislocates as well
          snd.target_got(pendulum_table[k][direction]:gsub(" ", "_") .. "_dislocated")
          --add new dislocate
          snd.target_cured(k:gsub(" ", "_") .. "_dislocated")
          --remove old
        end
      end
    end
    if snd.checkAff("sore_wrist") and not snd.checkAff("sore_ankle") then
      snd.target_cured("sore_wrist")
      snd.target_got("sore_ankle")
    elseif not snd.checkAff("sore_wrist") and snd.checkAff("sore_ankles") then
      snd.target_cured("sore_ankle")
      snd.target_got("sore_wrist")
    end
    for part,status in pairs(limb_status_copy) do
      if part ~= "head" and part ~= "torso" then
        snd.limb_status[pendulum_table[part][direction]] = status
      end
    end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>mending tracking</name>
					<packageName></packageName>
					<script>local mendingCures =
  {
    ["head"] =
      {
        "head_bruised_critical",
        "destroyed_throat",
        "crippled_throat",
        "head_bruised_moderate",
        "head_bruised",
      },
    ["torso"] =
      {
        "torso_bruised_critical",
        "lightwound",
        "ablaze",
        "cracked_ribs",
        "torso_bruised_moderate",
        "torso_bruised",
      },
    ["left arm"] =
      {
        "left_arm_bruised_critical",
        "left_arm_crippled",
        "a_crippled_arm",
        "left_arm_bruised_moderate",
        "left_arm_bruised",
        "left_arm_dislocated",
      },
    ["right arm"] =
      {
        "right_arm_bruised_critical",
        "right_arm_crippled",
        "a_crippled_arm",
        "right_arm_bruised_moderate",
        "right_arm_bruised",
        "right_arm_dislocated",
      },
    ["left leg"] =
      {
        "left_leg_bruised_critical",
        "left_leg_crippled",
        "a_crippled_leg",
        "left_leg_bruised_moderate",
        "left_leg_bruised",
        "left_leg_dislocated",
      },
    ["right leg"] =
      {
        "right_leg_bruised_critical",
        "right_leg_crippled",
        "a_crippled_leg",
        "right_leg_bruised_moderate",
        "right_leg_bruised",
        "right_leg_dislocated",
      },
  }
local mendingMap =
  {
    legs = {"left leg", "right leg"},
    arms = {"left arm", "right arm"},
    skin = {"head", "torso", "left arm", "right arm", "left leg", "right leg"},
    ["left leg"] = {"left leg"},
    ["right leg"] = {"right leg"},
    ["left arm"] = {"left arm"},
    ["right arm"] = {"right arm"},
    ["torso"] = {"torso"},
    ["head"] = {"head"},
  }

local function mending(limb)
  for _, aff in ipairs(mendingCures[limb]) do
    if
      aff:find("bruised") and
      (
        (aff:find("critical") and snd.limb_bruising[limb] &gt;= 3) or
        (not aff:find("critical") and snd.limb_bruising[limb] &gt; 0)
      )
    then
      snd.limb_bruising[limb] = math.min(3, snd.limb_bruising[limb]) - 1
      table.insert(snd.last_affs, "bruising " .. limb)
      return true
    elseif snd.checkAff(aff) then
      if aff == "ablaze" then
        if not snd.checkAff("heatspear") then
          snd.target_cured("ablaze")
          snd.target_cured("crispy")
          table.insert(snd.last_affs, "ablaze")
          snd.flamestack = 0
          return true
        end
      else
        snd.target_cured(aff)
        table.insert(snd.last_affs, aff)
        return true
      end
    end
  end
  return false
end

function snd.mendingApply(location)
  if snd.checkAff("burnt_skin") then
    return
  end
  for _, limb in ipairs(mendingMap[location]) do
    if mending(limb) then
      return
    end
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>attack function</name>
					<packageName></packageName>
					<script>function snd.attack_function()
  echo("\nYou haven't set up an attack alias yet!")
end

function snd.attack(attack)
  local string = ""
  if snd.can_fitness() and snd.need_fitness then
    string = "fitness"
  else
    string = attack
  end
  string = "stand" .. snd.sep .. "g body" .. snd.sep .. "g husk" .. snd.sep .. string
  if snd.toggles.parrying and snd.toparry ~= "none" and snd.toparry ~= snd.parrying then
    string = "parry " .. snd.toparry .. snd.sep .. string
  end
  for pipe, isEmpty in pairs(snd.emptypipes) do
    if isEmpty then
        string ="outc " .. pipe ..snd.sep .."put " .. pipe .." in emptypipe"..snd.sep ..string
    end
  end

  if not snd.pipes_lit and snd.toggles.lighting then
    string = "light pipes" .. snd.sep .. string
  end
  if string:find("slaughter") then
    snd.send("qeb")
    snd.send("queue axes " .. string)
  else
    snd.send("queue axes")
    snd.send("qeb " .. string)
  end
end

function snd.starting_attack()
  snd.send("target nothing with left" .. snd.sep .. "target nothing with right")
  snd.send("leading off")
  if snd.toggles.attacking == false then
    snd.toggle("attacking")
  end
  snd.class_hitting = "none"
  snd.person_hitting = "none"
  snd.active_hound = "none"
  snd.implant = "none"
end

function snd.handle_hounds()
  if gmcp.Char.Vitals.ability_bal == "1" and not snd.waiting.hound and gmcp.Char.Vitals.balance == "0" then
    local class = {["Carnifex"] = "hound", ["Warden"] = "simulacrum"}
    local string = ""
    local hound_aff = "none"
    local mark_check = false
    if
      (snd.class == "Carnifex" and snd.defenses.def_houndmark.state == "deffed") or
      (snd.class == "Warden" and snd.defenses.def_tacticianmark.state == "deffed")
    then
      mark_check = true
    end
    for i in pairs(snd.hound_queue) do
      if not snd.checkAff(snd.hound_queue[i]) then
        if hound_aff == "none" then
          if snd.hound_queue[i] == "mark" then
            if not mark_check then
              hound_aff = snd.hound_attacks[snd.class][snd.hound_queue[i]]
            end
          else
            hound_aff = snd.hound_attacks[snd.class][snd.hound_queue[i]]
          end
        end
      end
    end
    if hound_aff == "none" then
      if snd.current_offense == "WardenLimbs" then
        if snd.simul_target ~= "head" then
          send("simul target head")
        else
          hound_aff = "assault"
        end
      else
        if snd.class == "Carnifex" then
          hound_aff = "contagion"
        else
          hound_aff = "sabotage"
        end
      end
    end
    if hound_aff ~= "none" then
      snd.send(class[snd.class] .. " " .. hound_aff .. " " .. snd.target)
      snd.waiting.hound = true
      tempTimer(snd.delay(), [[snd.waiting.hound = false]])
    end
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>alerts</name>
					<packageName></packageName>
					<script>function snd.run_alerts()
  local string = ""
  if snd.alert_tick &gt;= 5 then
    snd.alert_tick = 0
    snd.oldalerts = snd.alerts
    snd.alerts = {}
    snd.panic = false
    if snd.have_aff("sapped_stats") then
      table.insert(snd.alerts, "\n&lt;white&gt;         SAPPED STATS GTFO")
    end
    if snd.have_aff("hypertension") then
      table.insert(snd.alerts, "\n&lt;white&gt;         HYPERTENSION GTFO")
    end
    if snd.have_aff("soul_poison") then
      table.insert(snd.alerts, "\n&lt;white&gt;         SOUL POISON GTFO")
    end
    --if tonumber(gmcp.Char.Vitals.soul) &lt; 50 then
    -- table.insert(snd.alerts, "\n&lt;white&gt;        SOUL LOW, SOUL LOW")
    --end
    if snd.have_aff("anorexia") and snd.have_aff("asthma") and snd.have_aff("slickness") then
      table.insert(snd.alerts, "\n&lt;yellow&gt;        YOU ARE VENOM LOCKED")
    end
    if snd.aff_tally() &gt;= 8 then
      table.insert(snd.alerts, "\n&lt;blue&gt;       YOU HAVE TOO MANY AFFS")
    end
    if (100 * (gmcp.Char.Vitals.hp / gmcp.Char.Vitals.maxhp)) &lt;= 40 then
      table.insert(snd.alerts, "\n&lt;brown&gt;      YOUR HEALTH IS LOW")
    end
    if (100 * (gmcp.Char.Vitals.mp / gmcp.Char.Vitals.maxmp)) &lt;= 40 then
      table.insert(snd.alerts, "\n&lt;brown&gt;       YOUR MANA IS LOW")
    end
    if tonumber(gmcp.Char.Vitals.madness) &gt;= 60 then
      table.insert(snd.alerts, "\n&lt;red&gt;      THE MADNESS IS COMING, EAT UP")
    end
    if #snd.alerts &gt;= 1 then
      border = "\n&lt;red&gt;*************************************"
      string = ""
      for i in pairs(snd.alerts) do
        string = string .. snd.alerts[i]
        if
          table.contains(snd.oldalerts, snd.alerts[i]) and not string.find(snd.alerts[i], "MADNESS")
        then
          snd.panic = true
        end
      end
      string = border .. string .. border
      cecho(string)
      if snd.panic and snd.toggles.affcalling and not snd.waiting.melting then
        if snd.toggles.attacking or (snd.toggles.bashing and #snd.group &gt;= 1) then
          if snd.faction == "spirit" then
            snd.send("wt I'm melting! I'm melting!")
          elseif snd.faction == "shadow" then
            snd.send("wt I'm really close to death.")
          end
          snd.waiting.melting = true
          tempTimer(5, [[snd.waiting.melting = false]])
        end
      end
    end
  else
    snd.alert_tick = snd.alert_tick + 1
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>misc</name>
					<packageName></packageName>
					<script>function snd.reset_target()
 snd.target_has = {}
 for limb in pairs(snd.limb_dmg) do
  snd.limb_dmg[limb] = 0
 end
 for limb in pairs(snd.limb_status) do
  snd.limb_status[limb] = "healed"
 end
 for limb in pairs(snd.limb_bruising) do
  snd.limb_bruising[limb] = 0
 end
 local enemyTimers = {"fitness","focus","pill","rebounding","restoration","tree"}
 for _, timer in pairs(enemyTimers) do
  snd.timers[timer] = {}
 end
 snd.hypno = "none"
 snd.hyp = 0
 snd.last_hypno = 0
 if restoration_timer then killTimer(restoration_timer) end
 snd.current_restoration_aff = ""
 snd.resto_limb = "none"
 --snd.used.rebounding = false
 snd.used.shield = false
 snd.used.paste = true
 snd.target_impaled = false
 snd.jawlocked = false
 snd.last_attack = "none"
 snd.target_gone = false
 snd.implant = "none"
 snd.mana_percent = 100
 snd.health_percent = 100
 snd.target_numbed = false
 snd.mindlocked = false
 snd.mindclamped = false
 snd.hardenBonesProc = false
 snd.kaistrikelimb = ""
 snd.transmutation = true
 snd.locking = false
 snd.target_has_aura = true
 snd.need_leech_aura = true
 snd.flamewreathed = {limb = "", resonance = ""}
 snd.need_deform = true
 snd.swagger = 0
 snd.welt_ready = "none"
 snd.flamestack = 0
 snd.cauterize = true
 snd.immolation_ready = false
 snd.rebuke = false
 snd.rebuke_limb = "none"
 snd.blitz = false
 snd.pyromania = false
 snd.swaggered = false
 snd.gorged = ""
 snd.gravity = 0
 snd.loyalsattacking = false
 snd.lev_gone = false
 snd.thorncount = 0
 snd.fetishattuned = false
 snd.loyalsattacking = false
 snd.my_dread = false
 snd.their_dread = false
 
 raiseEvent("sunder_enemy_limbs_updated")
 raiseEvent("sunder_my_limbs_updated")

end

function snd.target_locked()
  if snd.checksomeAffs({"slickness", "burnt_skin"}, 1) and snd.checksomeAffs({"paresis", "asthma", "destroyed_throat"}, 3) then
    return true
  end

  if snd.checksomeAffs({"slickness", "burnt_skin"}, 1) and snd.checksomeAffs({"paresis", "asthma", "anorexia"}, 3) 
    and snd.checksomeAffs({"stupidity", "impatience", "muddled", "egocentric"}, 1) then
    return true
  end
  
  if snd.checkAff("slough") and snd.checkAff("paresis") and 
    ((snd.checkAff("anorexia", 1) and snd.checksomeAffs({"stupidity", "impatience", "muddled", "egocentric"}, 1)) or
      snd.checkAff("destroyed_throat"))
     then
    return true
  end
  
  if (snd.checksomeAffs({"paresis", "tree_seared", "faulted"}, 1) or snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled"},2)) and --can't tree
      (snd.checksomeAffs({"asthma", "slickness"}, 2) or snd.checkAff("slough")) and --can't apply, and can't smoke if can't apply is through slickness.
      ((snd.checkAff("anorexia") and snd.checksomeAffs({"stupidity", "impatience", "muddled", "egocentric"}, 1)) or
      snd.checkAff("destroyed_throat")) --can't eat, and if via anorexia, can't be focused off
      then
      return true
  end
      

	return false
end

function snd.missingAff(list, separator)
	local list = string.split(list, separator)
	local tab = {}
	for k, v in pairs(list) do
		if v == "stupidity" then
			if not snd.checkAff(v) and not snd.checkAff("impatience") then
				table.insert(tab, v)
			end
			elseif not snd.checkAff(v) then
				table.insert(tab, v)
			end
		end
	return tab
end

function snd.no_parry()
 local no_parry = false
 local noparryaffs = {
  "distortion",
  "frozen",
  --"punished_arms",
  --"paresis",
  "paralysis",
  "asleep",
	"writhe_transfix",
	"writhe_web",
  "writhe_impaled",
	"writhe_thighlock",
	"writhe_armpitlock",
	"writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
  "writhe_grappled",
 }
 if snd.class == "sentinel" then
  table.insert(noparryaffs, "paresis")
 end 
 if snd.checksomeAffs(noparryaffs, 1) then no_parry = true end
 
 if (snd.limb_dmg["left arm"] &gt;= 33.33) and (snd.limb_dmg["right arm"] &gt;= 33.33) then
  no_parry = true
 end
 return no_parry
end

function snd.proned()
 local prone = false
 local proneaffs = {
  "frozen",
  "indifference",
  "paralysis",
	"writhe_transfix",
	"writhe_web",
  "writhe_impaled",
	"writhe_thighlock",
	"writhe_armpitlock",
	"writhe_necklock",
  "writhe_ropes",
  "writhe_vines",
  "writhe_grappled",
  "fallen",
  "asleep",
 }
 if snd.checksomeAffs(proneaffs, 1) then prone = true end
 return prone
end

function snd.venomEffect(venom)
	local aff = ""
	if venom == "epseth" then
		if snd.checkAff("left_leg_crippled") then
			aff = "right_leg_crippled"
		else
			aff = "left_leg_crippled"
		end
	elseif venom == "epteth" then
		if snd.checkAff("left_arm_crippled") then
			aff = "right_arm_crippled"
		else
			aff = "left_arm_crippled"
		end
	elseif venom == "prefarar" then
		if snd.checkAff("hearing") then
			aff = "sensitivity"
		else
			aff = "hearing"
		end
	elseif venom == "oculus" then
		if snd.checkAff("sight") then
			aff = "blurry_vision"
		else
			aff = "sight"
		end
	elseif venom == "cripple" then
		if snd.checkAff("crippled") then
			aff = "crippled_body"
		else
			aff = "crippled"
		end
	elseif venom == "disrupt" then
		if snd.checkAff("physical_disruption") then
			aff = "mental_disruption"
		else
			aff = "physical_disruption"
		end
	else
		for i in pairs(snd.effects) do
			if snd.effects[i] == venom then
				aff = i
			end
		end
	end
	return aff
end

function snd.check_dome()

	local reserves = tonumber(gmcp.Char.Vitals.residual)
	
	if reserves &gt;= 60 then
		return true
	else
		return false
	end

end

function snd.affNameCheck(aff)

local affs_to_change = {
  ["heart flutter"] = "heartflutter",
  ["self-pity"] = "self_pity",
  ["lovers"] = "lovers_effect",
  ["crippled left leg"] = "left_leg_crippled",
  ["crippled right leg"] = "right_leg_crippled",
  ["crippled left arm"] = "left_arm_crippled",
  ["crippled right arm"] = "right_arm_crippled",
}
  
  if affs_to_change[aff] then
    return affs_to_change[aff]
  else
    aff = aff:gsub("a ", "")
    return aff:gsub(" ", "_")
  end

end

function snd.removeProneStates(all) -- Reset a target back to standing w/no writhes or other affs
  local writhe_table = {
  	"writhe_transfix",
    "writhe_web",
  	"writhe_impaled",
  	"writhe_thighlock",
  	"writhe_armpitlock",
  	"writhe_necklock",
    "writhe_ropes",
    "writhe_vines",
    "writhe_grappled",
   }
   
   local other_prones = {
    "frozen",
    "indifference",
    "asleep",
    "paralysis",
    }
    
    local removals = {}
    if all then removals = table.n_union(writhe_table, other_prones)
    else removals = writhe_table
    end
  for _, v in pairs(removals) do snd.target_cured(v) end
  
  snd.jawlocked = false
  snd.target_impaled = false
end

function snd.loban_no_more(text)

  local new_word = text
  local test_string = ""
  local letter_to_move_to_front = ""
  
  if text:find("way") then
    new_word = text:gsub("way", "")
  else
    test_string = text:sub(-2, -1)
    if test_string_one == "ay" then
      letter_to_move_to_front = text:sub(-3, -3)
      test_string = text:sub(1, string.len(text)-3)
      new_word = letter_to_move_to_front..test_string  
    end  
  end
  
  return new_word
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>All attacks</name>
					<packageName></packageName>
					<script>snd.all_class_attacks = {
  ["Enchantment"] = {
    Frostblast = function(target)
      snd.target_got("cold")
    end,
  },
--Luminary
  ["Spirituality"] = {
  
  Crush = function(target, limb)
            snd.last_hit_limb = limb
            enableTrigger("Crush Confirmation")
          end,
  Crash = function(target, failure)
            if not failure then
              snd.target_got("disrupted")
            end
          end,
  
  Smash = function(target, limb)
           	snd.last_hit_limb = limb
          	snd.last_limb_dmg = 25
          	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Parry", "Dodge"})
          end,
  
  Aura = function(target)
           snd.used.shield = true
           if snd.hitting == "You" then
              snd.defenses.def_shield_tattoo.state = "deffed"
           end
         end,
  
  Sear = function(target)
           snd.target_got("ablaze")
           snd.target_got("angel_seared")
           tempTimer(15, [[snd.target_cured("angel_seared")]])
         end,
  
  Strip = function(target, defense)
            snd.used.rebounding = false
          end,
          
  Raze = function(target, defense)
            if defense == "shield" then snd.used.shield = false
            elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
            end
          end,
          
  Chasten = function(target)
             if snd.battle_aff ~= "none" then
              snd.target_got(snd.battle_aff)
            	table.insert(snd.last_affs, snd.battle_aff)
             end
             if snd.chasten_aff ~= "none" then
              snd.target_got(snd.chasten_aff)
            	table.insert(snd.last_affs, snd.chasten_aff)
             end
            end,
  
  Strike = function(target)
            table.insert(snd.maybe_affs, "paresis")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Punch = function(target)
            table.insert(snd.maybe_affs, "weariness")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Facesmash = function(target)
                if not snd.checksomeAffs({"misery", "sight"}, 1) then
                  table.insert(snd.maybe_affs, 1, "misery")
                  table.insert(snd.maybe_affs, 2, "sight")
                elseif snd.checkAff("misery") then
                  table.insert(snd.maybe_affs, 1, "sight")
                else
                  table.insert(snd.maybe_affs, 1, "misery")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Facesmash")
              end,
  Slam = function(target)
                if not snd.checksomeAffs({"asthma", "haemophilia"}, 1) then
                  table.insert(snd.maybe_affs, 1, "asthma")
                  table.insert(snd.maybe_affs, 2, "haemophilia")
                elseif snd.checkAff("asthma") then
                  table.insert(snd.maybe_affs, 1, "haemophilia")
                else
                  table.insert(snd.maybe_affs, 1, "asthma")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Slam")
              end,
  Brilliance = function(target)
            table.insert(snd.maybe_affs, "sight")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  
  },
  
  ["Devotion"] = {
    Dazzle = function(target)
               snd.target_got("confusion")
               snd.target_got("dizziness")
             end,
    Peace = function(target)
               snd.target_got("peace")
             end,
    Hellsight = function(target)
                  snd.target_got("hellsight")
                end,

  },
  
  ["Illumination"] = {
    Lightning = function(target)
                 snd.target_got("allergies")
                end,
                
    Transfixion = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,
    Heatwave = function(target)
                snd.target_got("berserking")
                snd.target_got("hallucinations")
              end,
    Sear = function(target)
             snd.target_got("tree_seared")
             tempTimer(18.5, [[snd.target_cured("tree_seared")]])
           end,
    Fire = function(target)
             snd.target_got("ablaze")
             enableTrigger("Illumination Fire")
           end,
    Shadow = function(target)
                 snd.target_got("shadowed")
                end,
  },
  
--Zealot
  ["Zeal"] = {
    Swagger = function(target)
               snd.target_cured("paresis")
             end,
    Anklepin = function(target)
               snd.target_got("sore_ankle")
             end,
    Jawcrack = function(target)
               snd.target_got("stuttering")
             end,
    Descent = function(target)
               snd.target_got("backstrain")
             end,                          
    Wristlash = function(target)
               snd.target_got("sore_wrist")
             end,
    Uprise = function(target)
               snd.target_got("whiplash")
             end,
    Blitz = function(target, conditional)
              snd.blitz = true
              if conditional == "start" then
                enableTrigger("Blitz Affs")
              else
                disableTrigger("Blitz Affs")
              end
            end,
    Palmforce = function(target)
                  snd.target_got("fallen")
                end,       
    Dislocate = function(target, limb)
                  table.insert(snd.maybe_affs, 1, limb.."_dislocated")
                  snd.onHit2({"Dodge", "Parry"})
                end,
    Twinpress = function(target)
                	table.insert(snd.maybe_affs, "stiffness")
                	table.insert(snd.maybe_affs, "muscle_spasms")
                  snd.onHit2({"Dodge"}, "Zealot Twinpress")    
                end,
    Clawtwist = function(target)
                    snd.last_hit_limb = "torso"
                    snd.last_limb_dmg = 8.5
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Pummel = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9.5
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Wanekick = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Risekick = function(target)
                	snd.last_hit_limb = "torso"
                	snd.last_limb_dmg = 5
                	snd.took_limb_dmg("torso", snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Edgekick = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = 3.49
                	snd.took_limb_dmg("head", snd.last_limb_dmg)
                  table.insert(snd.maybe_affs, 1, "crippled_throat")
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Sunkick = function(target)
                snd.last_hit_limb = "head"
              	snd.last_limb_dmg = 6
              	snd.took_limb_dmg("head", snd.last_limb_dmg)
                if not snd.checksomeAffs({"stupidity", "dizziness"}, 1) then
                  table.insert(snd.maybe_affs, 1, "stupidity")
                  table.insert(snd.maybe_affs, 2, "dizziness")
                elseif snd.checkAff("stupidity") then
                  table.insert(snd.maybe_affs, 1, "dizziness")
                else
                  table.insert(snd.maybe_affs, 1, "stupidity")
                end
                snd.onHit2({"Dodge", "Parry"}, "Zealot Sunkick")    
              end,
    Direblow = function(target)
                enableTrigger("Direblow Hit Confirmation")
                end,
    Heelrush = function(target)
                 enableTrigger("Heelrush")
               end,
                
  },
  
  ["Purification"] = {
  
  Heatspear = function(target)
                snd.target_got("heatspear")
              end,

  Scorch = function(target)
             snd.target_got("ablaze")
           end,
  Rejection = function(target)
                snd.used.rebounding = true
              end,
  Quicken = function(target)
            snd.target_got("ablaze")
            snd.flamestack = snd.flamestack + 3
            if snd.class == "Zealot" then
              cecho("\n"..snd.target.." Now has &lt;light_goldenrod&gt;"..snd.flamestack.."&lt;dodger_blue&gt; stacks of intensity")
            end
            end,
  Pendulum = function(target, direction)
              snd.pendulum(direction)
            end,
  },
  
  ["Psionics"] = {
        Neutralise = function(target)
                       snd.target_got("no_speed")
                     end,
                    
        Deprival = function(target)
                    snd.target_got("merciful")
                    snd.target_got("dementia")
                    snd.target_got("paranoia")
                  end,
        Dull = function(target)
                       snd.target_got("indifference")
                     end,
        Dread = function(target)
                       snd.target_got("fear")
                     end,
  },
  
--Ravager
  ["Brutality"] = {
    Contempt = function(target)
               snd.target_cured("paresis")
             end,
    Hobble = function(target)
               snd.target_got("sore_ankle")
             end,
    Slug = function(target)
               snd.target_got("stuttering")
             end,
    Flog = function(target)
               snd.target_got("backstrain")
             end,                          
    Maim = function(target)
               snd.target_got("sore_wrist")
             end,
    Whiplash = function(target)
               snd.target_got("whiplash")
             end,

    Clobber = function(target)
                  snd.target_got("fallen")
                end,       
    Bustup = function(target, limb)
                  table.insert(snd.maybe_affs, 1, limb.."_dislocated")
                  snd.onHit2({"Dodge", "Parry"})
                end,
    PressurePoint = function(target)
                	table.insert(snd.maybe_affs, "stiffness")
                	table.insert(snd.maybe_affs, "muscle_spasms")
                  snd.onHit2({"Dodge"}, "Ravager PressurePoint") 
                end,
    Plexus = function(target)
                    snd.last_hit_limb = "torso"
                    snd.last_limb_dmg = 8.5
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Bully = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9.5
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Kneecap = function(target, limb)
                    snd.last_hit_limb = limb
                    snd.last_limb_dmg = 9
                    snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                    snd.onHit2({"Parry", "Dodge"})
                end,
    Rebound = function(target)
                	snd.last_hit_limb = "torso"
                	snd.last_limb_dmg = 5
                	snd.took_limb_dmg("torso", snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Windpipe = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = 3.49
                	snd.took_limb_dmg("head", snd.last_limb_dmg)
                  table.insert(snd.maybe_affs, 1, "crippled_throat")
                  snd.onHit2({"Parry", "Dodge"})
                end,
    Concussion = function(target)
                snd.last_hit_limb = "head"
              	snd.last_limb_dmg = 6
              	snd.took_limb_dmg("head", snd.last_limb_dmg)
                if not snd.checksomeAffs({"stupidity", "dizziness"}, 1) then
                  table.insert(snd.maybe_affs, 1, "stupidity")
                  table.insert(snd.maybe_affs, 2, "dizziness")
                elseif snd.checkAff("stupidity") then
                  table.insert(snd.maybe_affs, 1, "dizziness")
                else
                  table.insert(snd.maybe_affs, 1, "stupidity")
                end
                snd.onHit2({"Dodge", "Parry"}, "Zealot Sunkick")    
              end,
    Rampage = function(target, conditional)
              snd.blitz = true
              if conditional == "start" then
                enableTrigger("Rampage Affs")
              else
                disableTrigger("Rampage Affs")
              end
            end,
			
	  Haymaker = function(target)
                 enableTrigger("Haymaker Hit Confirmation")
                end,
    Overpower = function(target)
                 enableTrigger("Overpower")
               end,
                
  },

  ["Ravaging"] = {
  
  Lancing = function(target)
                snd.target_got("heatspear")
              end,

  Torment = function(target)
             snd.target_got("ablaze")
           end,
  Denial = function(target)
                snd.used.rebounding = true
              end,
  Intensify = function(target)
            --not used by base sunder but some may want it available 
            end,
  Bedevil = function(target, direction)
              snd.pendulum(direction)
            end,
  },
  
  ["Egotism"] = {
        Redress = function(target)
                       snd.target_got("no_speed")
                     end,
                    
        Boast = function(target)
                    snd.target_got("merciful")
                    snd.target_got("dementia")
                    snd.target_got("paranoia")
                  end,
  },
--Ascendril
  ["Elemancy"] = {
  
    Thunder = function(target)
                snd.target_got("dizziness")
                snd.target_got("stupidity")
  	          end,
    Direfrost = function(target, failed)
                  if not failed then
                    snd.target_got("direfrost")
                  else
                    snd.target_cured("no_caloric")
                  end
                end,
    Ignite = function(target, conditional)
               if conditional == "Normal" then
                 snd.target_got("ablaze")
               elseif conditional == "Water" then
                 snd.target_got("blisters")
               end
             end,
    Firelash = function(target, element, conditional)
                	snd.last_hit_limb = conditional
                	snd.last_limb_dmg = 12
                  if element == "Water" then snd.last_limb_dmg = 14 end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                	if snd.flamewreathed.limb == "" and element == "Fire" then
                		snd.flamewreathed.limb = conditional
                	end
                  snd.flamewreathed.resonance = element
                end,
    Scorch = function(target, element, conditional)
            	if element == "Water" then
            		snd.target_got("slickness")
            	elseif element == "Air" then
            		snd.target_got("asthma")
            	end
              if conditional:find("Arm") then
                if snd.checkAff("ablaze") or snd.checkAff("emberbrand") then
                  snd.target_got("left_arm_crippled")
                  snd.target_got("right_arm_crippled")
                else
                  snd.target_got("a_crippled_arm")
                end
              else
                if snd.checkAff("ablaze") or snd.checkAff("emberbrand") then
                  snd.target_got("left_leg_crippled")
                  snd.target_got("right_leg_crippled")
                else
                  snd.target_got("a_crippled_leg")
                end
              end
            end,
    Hailstorm = function(target, element)
                	if element == "Air" then
                  		snd.target_got("lethargy")
                      snd.target_got("cold")
                  		if snd.proned() then
                  			snd.target_got("confusion")
                  		end
                  	else
                  		snd.target_got("dizziness")
                  	end
                  end,
    Windlance = function(target, element)
                	snd.used.shield = false
                	if element == "Air" then
                		if snd.checkAff("clumsiness") then
                			snd.target_got("dizziness")
                		else
                	 		snd.target_got("clumsiness")
                		end
                	end
                end,
    Pressurize = function(target, element)
                	if snd.checkAff("vertigo") then
                		snd.target_got("confusion")
                	else
                 		snd.target_got("vertigo")
                	end
                	if element == "Water" then
                		snd.target_got("weariness")
                	elseif element == "Fire" then
                		snd.target_got("clumsiness")
                	end
                end,
      Coldsnap = function(target, element)
                   	snd.target_got("stupidity")
                  	if element == "Fire" then
                  		snd.target_got("recklessness")
                  	elseif element == "Air" then
                  		snd.target_got("masochism")
                  	end
                  end,
      Mistral = function(target, element)
                  snd.target_got("cold")
                	if element == "Water" then
                    snd.target_got("cold")
                	elseif element == "Fire" then
                		snd.target_got("sensitivity")
                	end
                end,
      Lightning = function(target, element)
                  	snd.target_got("paresis")
                  	if element == "Fire" then
                  		snd.target_got("vertigo")
                  	elseif element == "Water" then
                  		snd.target_got("epilepsy")
                  	end
                  end,
      Frostblade = function(target, element, venom)
                     local aff = snd.venomEffect(venom)
                     snd.target_got(aff)
                     table.insert(snd.last_affs, aff)
                     if element == "Water" then
                   	  snd.target_got("hypothermia")
                     end
                   end,
      Gorge = function(target, element, pill)
              	snd.target_got("gorged")
              	if element == "Fire" then
              		snd.target_got("anorexia")
              	elseif element == "Air" then
              		snd.target_got("indifference")
              	end
                if pill ~= nil then snd.gorged = pill end
              end,
      Icicle = function(target, failed)
                 if failed then
                   snd.removeProneStates(true)
                 else
                   snd.target_got("writhe_impaled")
                   snd.theytumbling = false
                   if snd.hitting == "You" then
                    snd.target_impaled = true
                   end
                end
              end,
    Conflagrate = function(target, failed)
                if not failed then
                  snd.target_got("emberbrand")
                  if snd.checksomeAffs({"right_arm_mangled","left_arm_mangled","right_leg_mangled","left_leg_mangled","head_mangled","torso_mangled",}, 1) then
                    tempTimer(120, [[ snd.target_cured("emberbrand") ]])
                  elseif snd.checksomeAffs({"right_arm_broken","left_arm_broken","right_leg_broken","left_leg_broken","head_broken","torso_broken",}, 1) then
                    tempTimer(90, [[ snd.target_cured("emberbrand") ]])
                  else
                    tempTimer(60, [[ snd.target_cured("emberbrand") ]])
                  end
                end
              end,
  },
  
  ["Arcanism"] = {
    Transfix = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,

  },
  
  ["Thaumaturgy"] = {
    Flare = function(target)
            if snd.glimpse == "air" then
              if snd.checkAff("vertigo") then
             		snd.target_got("muddled")
              else
             		snd.target_got("vertigo")
              end
            end
          
            if snd.glimpse == "water" then
              if snd.checkAff("hypothermia") then
                snd.target_got("cold")  
          		else
             	 snd.target_got("hypothermia")
              end
            end
          	
            if snd.glimpse == "fire" then
              snd.target_got("ablaze")
          	end
            snd.fulcrum_ready = false
          end,   

  },
  
--Bloodborn
  ["Humourism"] = {
  
    Stupor = function(target)
                snd.target_got("dizziness")
                snd.target_got("stupidity")
  	          end,
    Frostbite = function(target, failed)
                  if not failed then
                    snd.target_got("frostbite")
                  else
                    snd.target_cured("no_caloric")
                  end
                end,
    Boil = function(target, conditional)
               if conditional == "Normal" then
                 snd.target_got("ablaze")
               elseif conditional == "Phlegm" then
                 snd.target_got("blisters")
               end
             end,
    Disgorge = function(target, element, conditional)
                	snd.last_hit_limb = conditional
                	snd.last_limb_dmg = 12
                  if element == "Phlegm" then snd.last_limb_dmg = 14 end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Parry", "Dodge"})
                	if snd.flamewreathed.limb == "" and element == "Yellow" then
                		snd.flamewreathed.limb = conditional
                	end
                  snd.flamewreathed.resonance = element
                end,
    Broil = function(target, element, conditional)
            	if element == "Phlegm" then
            		snd.target_got("slickness")
            	elseif element == "Black" then
            		snd.target_got("asthma")
            	end
              if conditional:find("Arm") then
                if snd.checkAff("ablaze") or snd.checkAff("excess_choleric") then
                  snd.target_got("left_arm_crippled")
                  snd.target_got("right_arm_crippled")
                else
                  snd.target_got("a_crippled_arm")
                end
              else
                if snd.checkAff("ablaze") or snd.checkAff("excess_choleric") then
                  snd.target_got("left_leg_crippled")
                  snd.target_got("right_leg_crippled")
                else
                  snd.target_got("a_crippled_leg")
                end
              end
            end,
    Swathe = function(target, element)
                	if element == "Black" then
                  		snd.target_got("lethargy")
                      snd.target_got("cold")
                  		if snd.proned() then
                  			snd.target_got("confusion")
                  		end
                  	else
                  		snd.target_got("dizziness")
                  	end
                  end,
    Befoul = function(target, element)
                	snd.used.shield = false
                	if element == "Black" then
                		if snd.checkAff("clumsiness") then
                			snd.target_got("dizziness")
                		else
                	 		snd.target_got("clumsiness")
                		end
                	end
                end,
    Equilibrium = function(target, element)
                	if snd.checkAff("vertigo") then
                		snd.target_got("confusion")
                	else
                 		snd.target_got("vertigo")
                	end
                	if element == "Phlegm" then
                		snd.target_got("weariness")
                	elseif element == "Yellow" then
                		snd.target_got("clumsiness")
                	end
                end,
      Brainfreeze = function(target, element)
                   	snd.target_got("stupidity")
                  	if element == "Yellow" then
                  		snd.target_got("recklessness")
                  	elseif element == "Black" then
                  		snd.target_got("masochism")
                  	end
                  end,
      Plunge = function(target, element)
                  snd.target_got("cold")
                	if element == "Phlegm" then
                    snd.target_got("cold")
                	elseif element == "Yellow" then
                		snd.target_got("sensitivity")
                	end
                end,
      Synapse = function(target, element)
                  	snd.target_got("paresis")
                  	if element == "Yellow" then
                  		snd.target_got("vertigo")
                  	elseif element == "Phlegm" then
                  		snd.target_got("epilepsy")
                  	end
                  end,
      Flense = function(target, element, venom)
                     local aff = snd.venomEffect(venom)
                     snd.target_got(aff)
                     table.insert(snd.last_affs, aff)
                     if element == "Phlegm" then
                   	  snd.target_got("hypothermia")
                     end
                   end,
      Revulsion = function(target, element, pill)
              	snd.target_got("gorged")
              	if element == "Yellow" then
              		snd.target_got("anorexia")
              	elseif element == "Black" then
              		snd.target_got("indifference")
              	end
                if pill ~= nil then snd.gorged = pill end
              end,
      Perforate = function(target, failed)
                 if failed then
                   snd.removeProneStates(true)
                 else
                   snd.target_got("writhe_impaled")
                   snd.theytumbling = false
                   if snd.hitting == "You" then
                    snd.target_impaled = true
                   end
                end
              end,
    Smother = function(target, failed)
                if not failed then
                  snd.target_got("excess_choleric")
                  if snd.checksomeAffs({"right_arm_mangled","left_arm_mangled","right_leg_mangled","left_leg_mangled","head_mangled","torso_mangled",}, 1) then
                    tempTimer(120, [[ snd.target_cured("excess_choleric") ]])
                  elseif snd.checksomeAffs({"right_arm_broken","left_arm_broken","right_leg_broken","left_leg_broken","head_broken","torso_broken",}, 1) then
                    tempTimer(90, [[ snd.target_cured("excess_choleric") ]])
                  else
                    tempTimer(60, [[ snd.target_cured("excess_choleric") ]])
                  end
                end
              end,
  },
  
  ["Esoterica"] = {
    Enthrall = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,

  },
  
  ["Hematurgy"] = {
    Palpitate = function(target)
            if snd.glimpse == "black" then
              if snd.checkAff("vertigo") then
             		snd.target_got("muddled")
              else
             		snd.target_got("vertigo")
              end
            end
          
            if snd.glimpse == "phlegm" then
              if snd.checkAff("hypothermia") then
                snd.target_got("cold")  
          		else
             	 snd.target_got("hypothermia")
              end
            end
          	
            if snd.glimpse == "yellow" then
              snd.target_got("ablaze")
          	end
          end,       

  },
  
  
--Sentinel
  ["Dhuriv"] = {
    
  Impale = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               snd.theytumbling = false
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
   Throatcrush = function(target)
                    snd.last_hit_limb = "head"
                    table.insert(snd.maybe_affs, "destroyed_throat")
                    snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Sentinel")
                  end,
   Gouge = function(target)
              snd.last_hit_limb = "head"
              table.insert(snd.maybe_affs, 1, "impatience")
              snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Sentinel")
            end,
   Heartbreaker = function(target)
                    snd.last_hit_limb = "torso"
                    table.insert(snd.maybe_affs, "heartflutter")
                    snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Sentinel")
                  end,
   Twirl = function(target)
              table.insert(snd.maybe_affs, 1, "confusion")
              snd.onHit2({"Dodge",}, "Sentinel")
            end,
   Trip = function(target)
            table.insert(snd.maybe_affs, 1, "fallen")
            snd.onHit2({"Dodge"}, "Sentinel")
          end,
   Flourish = function(target)
                  snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
                end,
   Slash = function(target)
              snd.onHit2({"Dodge", "Rebounding"}, "Sentinel Slash")
            end,
   Stab = function(target)
            snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
          end,
   Weaken = function(target)
              enableTrigger("Weaken arms or legs")
              snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
            end,
   Crosscut = function(target)
                snd.last_hit_limb = "torso"
                if snd.checkAff("impairment") then
                  table.insert(snd.maybe_affs, 1, "addiction")
                else
                 table.insert(snd.maybe_affs, 1, "impairment")
                end
                  snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
                end,
   Reave = function(target, conditional)
          	if conditional == "shield" then
          		snd.used.shield = false
          	else
          		snd.used.shield = false
          		snd.used.rebounding = false
          	end
          end,           
   Slam = function(target)
            snd.last_hit_limb = "head"
            if not snd.checksomeAffs({"laxity", "epilepsy"}, 1) then
              table.insert(snd.maybe_affs, 1, "laxity")
              table.insert(snd.maybe_affs, 2, "epilepsy")
            elseif snd.checkAff("laxity") then
              table.insert(snd.maybe_affs, 1, "epilepsy")
            else
              table.insert(snd.maybe_affs, 1, "laxity")
            end
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel Slam")
          end,       
   Blind = function(target)
                if snd.checkAff("sight") then
                  table.insert(snd.maybe_affs, 1, "blurry_vision")
                else
                 table.insert(snd.maybe_affs, 1, "sight")
                end
                  snd.onHit2({"Dodge", "Rebounding"}, "Sentinel")
                end,            
   Slice = function(target)
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
          end,
   Thrust = function(target)
            snd.last_hit_limb = "torso"
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
          end, 
   Slit = function(target)
            snd.last_hit_limb = "head"
            table.insert(snd.maybe_affs, "crippled_throat")
            snd.onHit2({"Dodge", "Rebounding", "Parry"}, "Sentinel")
          end,
   Dualraze = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
              end,
  Pierce = function(target)
            enableTrigger("Dhuriv Pierce/Sever")
           end,
  Sever = function(target)
            enableTrigger("Dhuriv Pierce/Sever")
           end,
  },
  
  ["Woodlore"] = {
    Daunt = function(target, animal)
              local daunt_list = {
              	["direwolf"] = "claustrophobia",
              	["raloth"] = "agoraphobia",
              	["crocodile"] = "loneliness",
                ["cockatrice"] = "berserking",
              }
	           snd.target_got(daunt_list[animal])
    end,
    
    Icebreath = function(target)
                  snd.target_got("cold")
                end,
  },
  
  ["Tracking"] = {
        

  },
  
--Templar
  ["Battlefury"] = {
  
    Duality = function(target)
                    enableTrigger("Weapon Hit Confirmation")
                   end,
    Doubleswing = function(target)
                    enableTrigger("Weapon Hit Confirmation")
                  end,
                   
    Rend = function(target)
            if #snd.maybe_affs == 0 and snd.hitting ~= "You" then
              table.insert(snd.maybe_affs, "rend")
            end
            snd.onHit2({"Rebounding", "Dodge"})
           end,
    Rage = function(target)
             snd.handleRage()
           end,
    Fitness = function(target)
                snd.handleFitness()
              end,
    Impale = function(target, failed)
               if failed then
                 snd.removeProneStates(true)
               else
                 snd.target_got("writhe_impaled")
                 snd.theytumbling = false
                 if snd.hitting == "You" then
                  snd.target_impaled = true
                 end
              end
            end,
    Disembowel = function(target)
                   snd.target_impaled = false
                   snd.target_cured("writhe_impaled")
                 end,
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
   Razestrike = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                enableTrigger("Weapon Hit Confirmation")
              end,
    Lunge = function(target, what)
              if what == "impale" then
                snd.target_got("writhe_impaled")
                snd.theytumbling = false
              end
              snd.target_got("fallen")
            end,
    Charge = function(target)
               snd.target_got("fallen")
             end,
  },
  
  ["Righteousness"] = {
      Withering = function()
                    snd.target_got("withering")
                  end,
      Contort = function(target, aff)
                  snd.target_got(aff)
                end,

  },
  
  ["Bladefire"] = {
      Vorpal = function()
                 enableTrigger("vorpal confirmation")
               end,        
      Iceblast = function(target, modifier)
          snd.target_got("cold")
          if modifier == "two-hand" then
            snd.target_got("cold")
          end
      end,
  },
  
--Shaman
  ["Primality"] = {
  
    Slam = function(target, boosted)
             if not boosted then
               snd.target_got("fallen")
             end
           end,
             
    Infest = function(target, boosted)
             if not boosted then
               snd.target_got("infested")
             end
           end,
    Spines = function(target, boosted)
             if not boosted then
               snd.target_got("blighted")
             end
           end,
    Overload = function(target, boosted)
                snd.target_got("paresis")
                snd.target_got("stupidity")
              end,
    Vitiate = function(target, boosted)
             if boosted then
               snd.target_got("plodding")
             end
             snd.target_got("lifebane")
           end,
    Strangle = function(target, boosted)
                snd.target_got("writhe_vines")
              end,

    Vinelash = function(target, boosted)
                  if #snd.maybe_affs &gt;= 1 then
                    snd.onHit2({})
                  end
                end,
    Leafstorm  = function(target, boosted)
                  snd.used.shield = false
                end,
    Scourge = function(target, boosted)
             if boosted then
               snd.target_got("idiocy")
             end
             snd.target_got("vitalbane")
           end,  
    Stormbolt = function(target, boosted)
                  if boosted then
                    snd.target_got("stormbolt_cloud")
                  end
                end,
    Sporulation = function(target, boosted)
                snd.target_got("impatience")
                snd.target_got("confusion")
                  if boosted then
                    snd.target_got("hallucinations")
                  end
              end,
    Effusion = function(target)
                snd.target_got("sight")
                snd.target_got("hearing")
                snd.target_got("sensitivity")
              end,
    Equivalence = function(target, boosted)
    --This might be hidden from all except the Shaman, not sure
             if boosted then
               snd.target_got("justice")
             end
           end,  
  },
  
  ["Shamanism"] = {
    Premonition = function(target)
                    snd.target_got("dread")
                  end,
    Divulgence = function(target)
                  if #snd.maybe_affs &gt;= 1 then
                    snd.onHit2({})
                  end
                end,
    Omen = function(target)
             snd.incomingomen = true
             snd.message(matches[2].." has an omen incoming in 6 seconds!", "dendara")
          end,
  },
  
  ["Naturalism"] = {
        

  },  
  
--Indorani
  ["Necromancy"] = {
        Screech = function(target)
                    snd.target_got("hearing")
                  end,
        Belch = function(target)
        --not used by Sunder but some may want it
                 end,
        Leech = function(target)
                   snd.target_has_aura = true
                   snd.need_leech_aura = false
                end,                 
        Shrivel = function(target, where)
                    if where == "arms" then snd.target_got("a_crippled_arm")
                    elseif where == "legs" then snd.target_got("a_crippled_leg")
                    elseif where == "throat" then snd.target_got("crippled_throat")
                    else snd.target_got(where.." broken")
                    end
                  end, 
        Deform = function(target)
                    snd.need_deform = false
                   tempTimer(20,[[snd.need_deform = true]])
                 end,                
        Bonedagger = function(target)
                      if #snd.maybe_affs == 1 then
                        snd.onHit2({"Rebounding", "Dodge"})
                      end
                     end,
  },
  
  ["Tarot"] = {
        Sun = function(target, dodge)
                if #snd.maybe_affs &gt; 0 then
                  if not dodge then
                    local aff = snd.maybe_affs[1]
                    if snd.cardshapes.indorani[aff].card == "sun" then
                      snd.target_got(aff)
                    end
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Moon = function(target, dodge)
                if #snd.maybe_affs &gt; 0 then
                  if not dodge then
                    local aff = snd.maybe_affs[1]
                    if snd.cardshapes.indorani[aff].card == "moon" then
                      snd.target_got(aff)
                    end
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Hangedman = function(target, conditional)
                        if conditional ~= "prone" then
                          snd.target_got("writhe_ropes")
                        end
                        snd.target_got("fallen")
                    end,             
        Lovers = function(target)
                   snd.target_got("lovers_effect")  
                 end,

        Aeon = function(target)
                snd.target_got("no_speed") 
        end,
        
        Justice = function(target)
                   snd.target_got("justice") 
                 end,
                 
        Despair = function(target)
                   snd.target_got("despair")
                   tempTimer(15.75, [[snd.target_cured("despair")]])  
                 end,        
        Warrior = function(target, limb)
                     snd.last_hit_limb = limb
                     snd.last_limb_dmg = 12.49
                     snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                     enableTrigger("Sunder Parry")
                   end,
        Sandman = function(target)
                   --currently unused but if I want to add insomnia/sleep tracking it'll be here.
                 end,
        Adder = function(target)
            		  snd.target_got("haemophilia")
            	    if snd.hitting == "You" then
            	      snd.adder_attached = true
            		    snd.adder_ready = false
            	    end
                 end, 
  },
  
  ["Domination"] = {
    Slime = function(target)
              snd.balance.envelop = false
            end,        

  },
  
--Praenomen
  ["Corpus"] = {
  
    Deadbreath = function(target)
                snd.target_got("slickness")
                snd.used.paste = false
              end,
    Frenzy = function(target, sunder)
               if sunder then
                 snd.used.shield = false
               end
            end,
    Reconstruct = function(target, limb)
                    snd.took_limb_dmg(limb, 15)
                  end,
    Gash = function(target, lightly)
            enableTrigger("Weapon Hit Confirmation")
           end,
    
    Clawing = function(target)
                snd.target_got("rend")
              end,
  
  },
  
  ["Mentis"] = {
    Whisper = function(target)
                for _, aff in pairs(snd.maybe_affs) do
                  if not table.contains(snd.venoms, snd.maybe_affs[1]) then
                    snd.target_got(aff) 
                  end
                end
              end,
    Mesmerize = function(target, blindness)
                  snd.target_got("sight")
                  if not blindness then  
                   snd.target_got("writhe_transfix")
                  end
                end,
    Confusion = function(target)
                 snd.target_got("confusion")
                end,
    Impatience = function(target)
                 snd.target_got("impatience")
                end,
    Paranoia = function(target)
                 snd.target_got("paranoia")
                end,
    Stupidity = function(target)
                 snd.target_got("stupidity")
                end,
    Agoraphobia = function(target)
                 snd.target_got("agoraphobia")
                end,
    Masochism = function(target)
                 snd.target_got("masochism")
                end,
    Lovers = function(target)
                  snd.target_got("lovers_effect")
                end,
    Loneliness = function(target)
                 snd.target_got("loneliness")
                end,
    Epilepsy = function(target)
                 snd.target_got("epilepsy")
                end,
    Anorexia = function(target)
                 snd.target_got("anorexia")
                end,
    Peace = function(target)
                 snd.target_got("peace")
                end,
    Dementia = function(target)
                 snd.target_got("dementia")
                end,
    Berserking = function(target)
                 snd.target_got("berserking")
                end,
    Indifference = function(target)
                 snd.target_got("indifference")
                end,
    Vertigo = function(target)
                 snd.target_got("vertigo")
                end,
    Recklessness = function(target)
                 snd.target_got("recklessness")
                end,
    Seduction = function(target)
                 snd.target_got("seduction")
                end,
    Temptation = function(target)
                 snd.target_got("temptation")
                end,
    Disrupt = function(target, failure)
                if not failure then
                  snd.target_got("disrupted")
                end
              end,
  },
  
  ["Sanguis"] = {
  
  Curse = function(target)
            snd.target_got("blood_curse")
          end,

  Spew = function(target)
           snd.target_got("hearing")
           snd.target_got("sight")
         end,
         
  Feast = function(target, fail)
            if not fail then
              snd.target_got("feast")
      		    tempTimer(19.5, [[snd.target_cured("feast")]])
      	      snd.used.paste = false
              snd.target_got("no_paste")
            else
              snd.target_cured("feast")
              snd.target_cured("no_paste")
            end
          end,
          
  Poison = function(target)
             snd.target_got("blood_poison")
          end,
          
  Rune = function(target)            
            snd.target_got("blood_rune")
	          snd.runeused = true
        end,
    },
    
--Archivist
  ["Geometrics"] = {
    Pattern = function(target)
                snd.target_got("patterns")
              end,
              
    Lemniscate = function(target)
                   snd.target_got("lemniscate")
                 end,
    Matrix = function(target)
               snd.target_got("matrix")
               matrix_timer = tempTimer(20.0,[[snd.target_cured("matrix")]])
             end,

    Circle = function(target)
              local t = {"merciful", "masochism", "berserking", "recklessness"} -- initialize table with circle affs
              for _, v in pairs(t) do -- iterate circle affs
                if not snd.checkAff(v) then -- check if they have it
                  snd.target_got(v) -- if they don't have it, add it
                  break -- if we added an aff, break out of the loop
                end -- end if
              end -- end for
             end,
                      
    Triangle = function(target)
              local t = {"laxity", "lovers_effect", "peace", "magnanimity"} 
              for _, v in pairs(t) do
                if not snd.checkAff(v) then
                  snd.target_got(v)
                  break 
                end 
              end
             end,
                
    Square = function(target)
              local t = {"dizziness", "faintness", "epilepsy", "shyness"} 
              for _, v in pairs(t) do
                if not snd.checkAff(v) then
                  snd.target_got(v)
                  break 
                end 
              end
             end,
    Sealing = function(target, shape)
                snd.target_got(shape.."_sealed")
                if shape == "square" then
                  tempTimer(31, [[snd.target_cured("square_sealed")]])
                elseif shape == "circle" then
                  tempTimer(31, [[snd.target_cured("circle_sealed")]])
                elseif shape == "triangle" then
                  tempTimer(31, [[snd.target_cured("triangle_sealed")]])
                end
              end,
    Fork = function(target)
             snd.used.shield = false
           end,
  },
  
  ["Numerology"] = {
        
    Madness = function(target)
               snd.target_got("dementia")
               snd.target_got("paranoia")
               snd.target_got("hallucinations")
               if snd.hitting == "You" then snd.balance.madness = false end
              end,
    Affliction = function(target)
                   enableTrigger("Elicit Affliction")
                 end,

  },
  
  ["Bioessence"] = {
          Infection = function(target)
                        snd.target_got("mutagen")
                        if snd.hitting == "You" then
                          snd.my_mutagen = true
                          snd.their_mutagen = false
                        else
                          snd.my_mutagen = false
                          snd.their_mutagen = true
                        end
             end,
          Advance = function(target)
                        snd.target_got("mutagen")
                        if snd.hitting == "You" then
                          snd.my_mutagen = true
                          snd.their_mutagen = false
                        else
                          snd.my_mutagen = false
                          snd.their_mutagen = true
                        end
             end,
          Jolt = function(target)
                   snd.target_cured("no_speed")
                 end,
          Preserve = function(target, level)
                       if level == "severe" then
                        snd.target_got("cold")
                        snd.target_got("cold")
                       elseif level == "moderate" then
                        snd.target_got("cold")
                       end
                       snd.target_got("cold")
                      end,

  },
  
--Sciomancer
  ["Sciomancy"] = {
      Chill = function(target, shadowprice)
                snd.target_got("cold")
                if shadowprice ~= nil then
                  snd.target_got("cold")
                end
              end,
      Hew = function(target, fail)
              snd.used.shield = false
            end,
      Ruin = function(target, shadowprice)
              local afflist = {"clumsiness", "weariness", "lethargy", "paresis"}
              local affcount = 0
              for _, v in pairs(afflist) do if not snd.checkAff(v) then
                snd.target_got(v)
                affcount = affcount + 1
                if not shadowprice or affcount == 2 then break end
                end
              end
            end,
      Scourge = function(target, shadowprice)
                  if snd.checksomeAffs({"dizziness", "nyctophobia", "confusion", "dementia"}, 4) then
                    snd.target_got("faintness")
                  end
                end,
      Gloom = function(target)
                snd.target_got("gloom")
              end,
      Shaderot = function(target, shadowprice)
                   snd.target_got("rot_benign")
                   if shadowprice then snd.target_got("rot_spirit") end
                  end,         
      Voidgaze = function(target, shadowprice)
                   snd.target_got("voidgaze")
                   if shadowprice then snd.target_got("sight") end
                  end, 
      Fever = function(target, shadowprice)
                   snd.target_got("vomiting")
                   snd.target_got("haemophilia")
                   if snd.checkAff("dementia") then
                     snd.target_cured("dementia")
                     snd.target_got("hallucinations")
                   end
                  end,                   
      Shadowsphere = function(target, shadowprice)
                      if snd.hitting == "You" then snd.balance.shadowsphere = false end
                     	snd.target_got("shadowsphere")
                      if shadowprice then snd.target_got("nyctophobia")	end
                    end,                   
      Falter = function(target, shadowprice)
                	if snd.checkAff("dizziness") then snd.target_got("dementia") end
                  if snd.checkAff("weariness") then snd.target_got("exhausted") end
                end,
      Shadowbrand = function(target, conditional)
                  if conditional == "Shadowprice" or conditional == "end" then
                    snd.target_got("shadowbrand")
                  end
                end,
  },
  
  ["Sorcery"] = {
    Transfix = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                   snd.balance.sorcery_transfix = false
                  end,   

  },
  
  ["Gravitation"] = {
    Erupt = function(target, limb)
              snd.last_hit_limb = limb
              local dmg = { [0] = 4, [1] = 8, [2] = 13, [3] = 19, [4] = 25, [5] = 33}
              snd.took_limb_dmg(snd.last_hit_limb, dmg[snd.gravity])
              if snd.checkAff("shadowbrand") and snd.gravity &gt; 2 then
                snd.target_cured("shadowbrand")
              else
                snd.gravity = 0
              end
              if snd.class == "Sciomancer" then
              	snd.message("&lt;red&gt;Gravity Total: &lt;white&gt;"..snd.gravity)
              end
            end,
    Impede = function(target)
               snd.target_got("impede")
            end,
    Grip = function(target)
          	snd.target_got("paresis")
          	snd.target_got("fallen")
          	
          	if snd.hitting == "You" then
          		if snd.gravity &gt;= 0 then
          			snd.gravity = math.min(5, snd.gravity+1)
          		end
          	end

            if snd.class == "Sciomancer" then
            	snd.message("&lt;red&gt;Gravity Total: &lt;white&gt;"..snd.gravity)
            end
          end,
    Imbue = function(target)
               snd.target_got("imbued")
             end,
  },
  
--Teradrim
  ["Terramancy"] = {
    Gutsmash = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = snd.calcTeradrimLimbDamage("gutsmash")
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Facesmash = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = snd.calcTeradrimLimbDamage("facesmash")
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Overhand = function(target)
                 table.insert(snd.maybe_affs, "fallen")
                 snd.lev_gone = true
                 snd.onHit2({"Dodge"})
               end,
    Batter = function(target, where)
               snd.last_hit_limb = where
               snd.last_limb_dmg = snd.calcTeradrimLimbDamage("batter")
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               snd.onHit2({"Dodge", "Parry", "Rebounding"})
              end,
    Shockwave = function(target)
                  snd.target_got("fallen")
                  enableTrigger("Shockwave limb breaks")
                end,
    Furor = function(target, where)
             	snd.last_hit_limb = where
            	snd.last_limb_dmg = snd.calcTeradrimLimbDamage("furor")
            	snd.took_limb_dmg(where, snd.last_limb_dmg)
              snd.onHit2({"Dodge", "Parry", "Rebounding"})
            end,
    Stoneblast = function(target)
                  if snd.used.rebounding then
                    snd.used.rebounding = false
                  else
                    snd.used.shield = false
                  end
                end,
    Fracture = function(target, where)
                 table.insert(snd.maybe_affs, where.."_crippled")
                 	snd.last_hit_limb = where
                	snd.last_limb_dmg = snd.calcTeradrimLimbDamage("fracture")
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,  
    Skullbash = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = snd.calcTeradrimLimbDamage("skullbash")
                  local afflist = {"whiplash", "indifference", "smashed_throat"}
                  for k, v in pairs(afflist) do if snd.limb_bruising["head"] &gt;= k then
                    table.insert(snd.maybe_affs, v)
                    end
                  end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Teradrim Skullbash")
               end,
    Pulp = function(target)
               	snd.last_hit_limb = "torso"
                table.insert(snd.maybe_affs, "collapsed_lung")
              	snd.last_limb_dmg = snd.calcTeradrimLimbDamage("pulp")
              	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
             end, 
    Impale = function(target, failed)
               if failed then
                 snd.removeProneStates(true)
               else
                 snd.target_got("writhe_impaled")
                 snd.theytumbling = false
                 if snd.hitting == "You" then
                  snd.target_impaled = true
                 end
              end
            end,
    Stonevice = function(target)
                  snd.target_cured("writhe_impaled")
                  snd.target_got("lightwound")
                  snd.target_got("deepwound")
                  snd.last_hit_limb = "torso"
                  snd.last_limb_dmg = 10
                  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                end,
    Barrage = function(target)
                snd.barrageCounter = 0
                enableTrigger("Barrage hit confirmation")
              end,
              
    Slam = function(target, where)
                  snd.last_hit_limb = where
                	snd.last_limb_dmg = snd.calcTeradrimLimbDamage("slam")
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"})
              end,
  },
  
  ["Desiccation"] = {
    Shred = function(target, where)
                snd.last_hit_limb = where:gsub(" storm", "")
                snd.last_limb_dmg = 7
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Shield = function(target)
              snd.used.shield = true
             end,
    Curse = function(target)
              if not snd.checkAff("slough") then
                if snd.sloughTimer then killTimer(snd.sloughTimer) end
                snd.sloughTimer = tempTimer(16, function() snd.target_cured("slough") end)
              end
              snd.target_got("slough")
            end,
    Scourge = function(target, where)
                snd.target_got(where.."_crippled")
              end,
    
    Trap = function(target)
                snd.target_got("sand_trapped")
              end,
              
    Quicksand = function(target)
                snd.target_got("quicksand")
                snd.lev_gone = true
              end,

  },
  
  ["Animation"] = {
      Heartpunch = function(target)
                if snd.reboundingTimer then killTimer(snd.reboundingTimer) end
                snd.target_got("heartflutter")
              end,
      Rip = function(target, limb)
                if limb ~= "torso" then
                  local limb = string.gsub(limb, " ", "_")
                  snd.target_got(limb.."_crippled")
                end
              end,
      Wrack = function(target)
                snd.target_got("paresis")
                snd.target_got("heartflutter")
              end,
      Shout = function(target)
                snd.target_got("blurry_vision")
              end,
      Grapple = function(target)
                snd.target_got("writhe_grappled")
              end,
      Shatter = function(target)
                snd.used.shield = false
              end,
      Wrench = function(target, limb)
                table.insert(snd.maybe_affs, 1, limb.."_dislocated")
                snd.onHit2({"Dodge", "Parry"})
              end,  
  },

--Tidesage
 ["Wavebreaking"] = {
    Ram = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = snd.calcTeradrimLimbDamage("ram")
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Crest = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = snd.calcTeradrimLimbDamage("crest")
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Breach = function(target)
                 table.insert(snd.maybe_affs, "fallen")
                 snd.lev_gone = true
                 snd.onHit2({"Dodge"})
               end,
    Clobber = function(target, where)
               snd.last_hit_limb = where
               snd.last_limb_dmg = snd.calcTeradrimLimbDamage("clobber")
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               snd.onHit2({"Dodge", "Parry", "Rebounding"})
              end,
    Crack = function(target, where)
               snd.last_hit_limb = where
               snd.last_limb_dmg = snd.calcTeradrimLimbDamage("crack")
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               snd.onHit2({"Dodge", "Parry", "Rebounding"})
              end,
    Capsize = function(target)
                  snd.target_got("fallen")
                  enableTrigger("Shockwave limb breaks")
                end,
    Pitch = function(target, where)
             	snd.last_hit_limb = where
            	snd.last_limb_dmg = snd.calcTeradrimLimbDamage("pitch")
            	snd.took_limb_dmg(where, snd.last_limb_dmg)
              snd.onHit2({"Dodge", "Parry", "Rebounding"})
            end,
    Riptide = function(target)
                  if snd.used.rebounding then
                    snd.used.rebounding = false
                  else
                    snd.used.shield = false
                  end
                end,
    Buckle = function(target, where)                 
                 table.insert(snd.maybe_affs, where.."_crippled")
                 	snd.last_hit_limb = where
                  snd.last_limb_dmg = snd.calcTeradrimLimbDamage("buckle")
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,  
    Gybe = function(target)
                 	snd.last_hit_limb = "head"
                	snd.last_limb_dmg = snd.calcTeradrimLimbDamage("gybe")
                  local afflist = {"whiplash", "indifference", "smashed_throat"}
                  for k, v in pairs(afflist) do if snd.limb_bruising["head"] &gt;= k then
                    table.insert(snd.maybe_affs, v)
                    end
                  end
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"}, "Teradrim Skullbash")
               end,
    Wreck = function(target)
           	snd.last_hit_limb = "torso"
            table.insert(snd.maybe_affs, "collapsed_lung")
          	snd.last_limb_dmg = snd.calcTeradrimLimbDamage("wreck")
          	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Dodge", "Parry", "Rebounding"})
         end, 
    Harpoon = function(target, failed)
               if failed then
                 snd.removeProneStates(true)
               else
                 snd.target_got("writhe_impaled")
                 snd.theytumbling = false
                 if snd.hitting == "You" then
                  snd.target_impaled = true
                 end
              end
            end,
    Eviscerate = function(target)
                  snd.target_cured("writhe_impaled")
                  snd.target_got("lightwound")
                  snd.target_got("deepwound")
                  snd.last_hit_limb = "torso"
                  snd.last_limb_dmg = 10
                  snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                end,
    Broadside = function(target)
                snd.barrageCounter = 0
                enableTrigger("Barrage hit confirmation")
              end,
              
    Crack = function(target, where)
                  snd.last_hit_limb = where
                	snd.last_limb_dmg = snd.calcTeradrimLimbDamage("crack")
                	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                  snd.onHit2({"Dodge", "Parry", "Rebounding"})
          end,
  },
  
  ["Inundation"] = {
    Feelers = function(target, where)
                snd.last_hit_limb = where:gsub(" apparition", "")
                snd.last_limb_dmg = 6.99
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,
    Harden = function(target)
              snd.used.shield = true
             end,
    Terrors = function(target)
              if not snd.checkAff("slough") then
                if snd.sloughTimer then killTimer(snd.sloughTimer) end
                snd.sloughTimer = tempTimer(16, function() snd.target_cured("slough") end)
              end
              snd.target_got("slough")
            end,
    Unseen = function(target, where)
                snd.target_got(where.."_crippled")
              end,
    Undertow = function(target)
                snd.target_got("quicksand")
                snd.lev_gone = true
              end,
    Shred = function(target, where)
                snd.last_hit_limb = where
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry", "Rebounding"})
               end,

  },
  
  ["Synthesis"] = {
      Trammel = function(target)
                if snd.reboundingTimer then killTimer(snd.reboundingTimer) end
                snd.target_got("heartflutter")
              end,
      Squeeze = function(target, limb)
                if limb ~= "torso" then
                  local limb = string.gsub(limb, " ", "_")
                  snd.target_got(limb.."_crippled")
                end
              end,
      Chime = function(target)
                snd.target_got("paresis")
                snd.target_got("heartflutter")
              end,
      Concuss = function(target)
                snd.target_got("blurry_vision")
              end,
      Clutch = function(target)
                snd.target_got("writhe_grappled")
              end,
      Nullify = function(target)
                snd.used.shield = false
              end,
      Deconstruct = function(target, limb)
                table.insert(snd.maybe_affs, 1, limb.."_dislocated")
                snd.onHit2({"Dodge", "Parry"})
              end,  
  },
--Carnifex
  ["Savagery"] = {
  
  Skewer = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               snd.theytumbling = false
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
               snd.theytumbling = false
            end
          end,
    Fitness = function(target)
                snd.handleFitness()
              end,
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
    Crush = function(target, conditional)
              local aff = {["knees"] = "crushed_kneecaps", ["elbows"] = "crushed_elbows", ["chest"] = "cracked_ribs"}
              if conditional == "chest" and snd.checkAff("cracked_ribs") then
                table.insert(snd.maybe_affs, "crushed_chest")
              else
                table.insert(snd.maybe_affs, aff[conditional])
              end
              snd.onHit2({"Rebounding", "Dodge"}, "Carnifex")
              if conditional == "knees" then tempTimer(11.5, [[snd.target_cured("crushed_kneecaps")]]) end
              if conditional == "elbows" then tempTimer(7.5, [[snd.target_cured("crushed_elbows")]]) end
            end,
    Doublebash = function(target)
                   enableTrigger("Doublebash Hit Confirmation")
                 end,
    Batter = function(target)
               table.insert(snd.maybe_affs, "blurry_vision")
               snd.onHit2({"Rebounding", "Dodge"})
              end,
    Hook = function(target)
              snd.target_got("fallen")
            end,
   Razehack = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                snd.onHit2({"Dodge", "Rebounding"})
              end,
    Spinning = function(target)
                  enableTrigger("Spinslash 2nd half")
                  snd.onHit2({"Dodge", "Rebounding"}, "Carnifex")
                end,
  },
  
  ["Deathlore"] = {
        
    Shield = function(target)
               snd.used.shield = true
             end,
    Frailty = function(target)
                snd.target_got("glasslimb")
              end,
    Distortion = function(target)
                   snd.target_got("distortion")
                 end,   
    Wither = function(target)
               enableTrigger("Wither Limb Messages")
             end,
    Wraith = function(target)
               snd.target_got("soul_wraith")
             end,
    Poison = function(target)
               snd.target_got("soul_poison")
               if snd.hitting == "You" then
                 snd.balance.soulpoison = false
               end
             end,
    Disease = function(target)
                snd.target_got("soul_disease")
              end,
    Implant = function(target)
                enableTrigger("Soul Implant Give")
                snd.target_got("soul_implant")
              end,
    Erode = function(target)
              snd.used.shield = false
              snd.used.rebounding = false
              snd.target_cured("barrier")
              snd.target_cured("dome")
            end,
    
  },
  
  ["Warhounds"] = {
        
 Acidspit = function(target)
              if snd.checkAff("weariness") then
                snd.target_got("crippled")
              else
                snd.target_got("weariness")
              end
            end,

 Poisonclaw = function(target)
                if snd.checkAff("blisters") then
                  snd.target_got("limp_veins")
                else
                  snd.target_got("blisters")
                end
              end,

 Shock = function(target)
            if snd.checkAff("epilepsy") then
              snd.target_got("hallucinations")
            else
              snd.target_got("epilepsy")
            end
          end,
 Stare = function(target)
            if snd.checkAff("berserking") then
              snd.target_got("impairment")
            else
              snd.target_got("berserking")
            end
          end,

 Growl = function(target)
            if snd.checkAff("dizziness") then
              snd.target_got("recklessness")
            else
              snd.target_got("dizziness")
            end
          end,
  
  Shatter = function(target)
              snd.used.shield = false
            end,
  Bite = function(target, limb)
                 snd.last_hit_limb = limb
                 snd.last_limb_dmg = 2.49
                 snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                 enableTrigger("Sunder Parry")
               end,
  Contagion = function(target)
              --loki
              end,
  Tundralhowl = function(target)
                  snd.target_got("cold")
                end,
  Firebreath = function(target)
                 snd.target_got("ablaze")
               end,
  Ululate = function(target)
            if table.isMember(snd.players_here, snd.target) and snd.hitting ~= snd.target then
              snd.target_got("blurry_vision")
            end
          end,
  },
  
--Monk
  ["Tekura"] = {

    Kipup = function(target)
               snd.target_cured("fallen")
             end,
             
    Sidekick = function(target)
              	snd.last_limb_dmg = 9
                enableTrigger("Monk Hit Tracking")
              end,
    Snapkick = function(target)
              	snd.last_limb_dmg = 9
                enableTrigger("Monk Hit Tracking")
              end,
    Moonkick = function(target)
              	snd.last_limb_dmg = 9
                enableTrigger("Monk Hit Tracking")
              end,
    Whirlwind = function(target)
              	snd.last_limb_dmg = 9
                if snd.checkAff("fallen") then snd.last_limb_dmg = 12.5 end
                enableTrigger("Monk Hit Tracking")
              end,
    Axe = function(target)
              	snd.last_limb_dmg = 9
                enableTrigger("Monk Hit Tracking")
              end,
    Sweepkick = function(target)
              	snd.target_got("fallen")
                snd.target_got("sore_ankle")
              end,
    Scythekick = function(target)
              	snd.used.shield = false
              end,
    Cometkick = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Hook = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Uppercut = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Hammerfist = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Spear = function(target)
              	snd.last_limb_dmg = 5.5
                enableTrigger("Monk Hit Tracking")
              end,
    Palmstrike = function(target)
                snd.last_limb_dmg = 3
                table.insert(snd.maybe_affs, "blurry_vision")
                enableTrigger("Monk Hit Tracking")
              end,
    Jab = function(target)
              	snd.last_limb_dmg = 5
                enableTrigger("Monk Hit Tracking")
              end,
    Throatstrike = function(target)
                enableTrigger("Throatstrike confirmation hit")
              end,
    Bladehand = function(target)
                enableTrigger("Turmoil confirmation hit")
              end,
    Slam = function(target)
             snd.target_got("fallen") --Just incase
           end,
    Feint = function(target, limb)
             snd.parried_limb = limb
            end,
    Wrench = function(target)
               enableTrigger("Wrench confirmation hit")
             end,

  },
  
  ["Kaido"] = {
    Fitness = function(target)
                snd.handleFitness()
              end,
    Cripple = function(target)
               --
              end,
              
    Restoration = function(target)
                    snd.handleRestore()
                  end,

  },
  
  ["Telepathy"] = {
  
    Disrupt = function(target, fail)
                if not fail then
                  snd.target_got("disrupted")
                end
              end,
        

  },
  
--Syssin
  ["Assassination"] = {
    Bind = function(target)
             snd.target_got("writhe_bind")
           end,
    Doublestab = function(target)
                  enableTrigger("Syssin Hit Confirmation")
                 end,
    Flay = function(target, condition)
             enableTrigger("Syssin Hit Confirmation")
             snd.used.shield = false
             if condition:find("rebounding") then
                snd.used.rebounding = false
             end
             if condition:find("fangbarrier") then
                snd.used.rebounding = false
                snd.used.paste = false
             end
             if condition:find("speed") then
                snd.used.rebounding = false
                snd.used.paste = false
                snd.target_got("no_speed")
             end
            end,
    Slit = function(target)
                  enableTrigger("Syssin Hit Confirmation")
                 end,
                 
    Bite = function(target, venom)
            snd.used.paste = false
            if venom ~= "camus" then
             snd.target_got(snd.venomEffect(venom))
            end
          end,

  },
  
  ["Subterfuge"] = {
    -- Nothing currently necessary

  },
  
  ["Hypnosis"] = {
    Sleight = function(target, conditional)
                if conditional == "Void" then
                  snd.target_got("void")
                end
    end,     
    Marks = function(target, conditional)
                if conditional == "Numbness" then
                  snd.target_got("numbed_skin")
                  if not table.isMember(gmcp.Room.Info.details, "darkness") then
                    tempTimer(9.5, [[snd.target_cured("numbed_skin")]])
                  end
                end
    end,   
  },
  
--Shapeshifter
  ["Shapeshifting"] = {
    Swipe = function(target) 
              snd.target_got("hearing")
            end,
    Pounce = function(target, shield)
               if shield then
                snd.used.shield = false
               end
             end,
    Charge = function(target)
               snd.target_got("fallen")
             end,
    Rage = function(target)
             snd.handleRage()
           end,
    Shed = function(target)
             snd.target_cured("slickness")
           end,
  },
  
  ["Ferality"] = {
    Bite = function(target, limb)
            snd.last_hit_limb = limb
            snd.last_limb_dmg = 9
            snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Dodge", "Parry"})
          end,
    Gut = function(target)
            snd.target_got("torso_mangled")
          end,
    Lacerate = function(target)
                table.insert(snd.maybe_affs, "rend")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 11.4
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,        
    Facemaul = function(target)
                table.insert(snd.maybe_affs, "mauled_face")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 14
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Jugular = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Skullwhack = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Throatslice = function(target)
                table.insert(snd.maybe_affs, "crippled_throat")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Skullcrush = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 66.67-snd.limb_dmg["head"]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Parry"})
               end,
    Spinalcrack = function(target)
                table.insert(snd.maybe_affs, "paresis")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,      
    Slash = function(target, limb)
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Rend = function(target, limb)
                table.insert(snd.maybe_affs, limb:gsub(" ", "_").."_crippled")
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 5.81
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
    Hamstring = function(target, limb)
                table.insert(snd.maybe_affs, limb:gsub(" ", "_").."_crippled")
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 5.81
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
   Faceslash = function(target)
                table.insert(snd.maybe_affs, "blurry_vision")
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 7.5
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
   Bodypunch = function(target)
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 7
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
   Armpitlock = function(target)
                  snd.target_got("writhe_armpitlock")
                  if snd.hitting == "You" then
                    snd.jawlocked = true
                  end
                end,
   Thighlock = function(target)
                  snd.target_got("writhe_thighlock")
                  if snd.hitting == "You" then
                    snd.jawlocked = true
                  end
                end,
   Necklock = function(target)
                  snd.target_got("writhe_necklock")
                  if snd.hitting == "You" then
                    snd.jawlocked = true
                  end
                end,
   Spleenrip = function(target)
                snd.target_got("spleenrip")
                snd.jawlocked = false
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 15
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.target_cured("writhe_armpitlock")
                --snd.onHit2({"Dodge", "Parry"}) don't believe it can be missed
               end, 
   Groinrip = function(target)
                snd.target_got("groinrip")
                snd.jawlocked = false
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 15
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.target_cured("writhe_thighlock")
                --snd.onHit2({"Dodge", "Parry"}) don't believe it can be missed
               end, 
   Throatrip = function(target)
                snd.target_got("throatrip")
                snd.jawlocked = false
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 10
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.target_cured("writhe_necklock")
                --snd.onHit2({"Dodge", "Parry"}) don't believe it can be missed
               end,
   Mangle = function(target, limb)
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 66.67 - snd.limb_dmg[limb]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end,
   Destroy = function(target, limb)
                snd.last_hit_limb = limb
                snd.last_limb_dmg = 33.33 - snd.limb_dmg[limb]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
   Leapslash = function(target, limb)
                snd.target_got("fallen")
               end,
   Deathroll = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,
   Rupture = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,
   Buffet = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,
   Gore = function(target)
                snd.target_cured("writhe_armpitlock")
                snd.target_cured("writhe_thighlock")
                snd.target_cured("writhe_necklock")
               end,                
   Spinalrip = function(target)
                table.insert(snd.maybe_affs, "spinal_rip")
                snd.last_hit_limb = "torso"
                snd.last_limb_dmg = 13.75
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
   Headdrop = function(target)
                snd.last_hit_limb = "head"
                snd.last_limb_dmg = 33.34 - snd.limb_dmg["head"]
                snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                snd.onHit2({"Dodge", "Parry"})
               end, 
  },
  
  ["Vocalizing"] = {
    Baying = function(target, conditional)
              
              local howl_conversion =
              {
                ["piercing"] = "hearing",
                ["paralyzing"] = "paresis",
                ["baleful"] = "impairment",
                ["rousing"] = "recklessness",
                ["distasteful"] = "anorexia",
                ["forceful"] = "fallen",
                ["mind-numbing"] = "stupidity",
                ["stomach-turning"] = "vomiting",
                ["claustrophobic"] = "claustrophobia",
                ["muddling"] = "peace",
                ["hypnotic"] = "hypersomnia",
                ["deranged"] = "hallucinations",
                ["lethargic"] = "lethargy",
                ["ringing"] = "ringing_ears",
                ["blurring"] = "blurry_vision",
                ["debilitating"] = "weariness",
                ["berserking"] = "berserking",
                ["angry"] = "hatred",
                ["disturbing"] = "disrupted",
                ["befuddling"] = "confusion",
                ["deep"] = "plodding",
                ["dumbing"] = "idiocy",
              }
              if howl_conversion[conditional] == nil then return end

                snd.target_got(howl_conversion[conditional])
              end,
  },
  
--Wayfarer
  ["Tenacity"] = {
    Sweep = function(target)
              snd.target_got("fallen")
            end,
    Obstruct = function(target)
                 snd.target_got("fallen")
               end,
    Devastate = function(target)
                  enableTrigger("Tenacity Devastate")
                  --Has specific lines for all cases, safer to use those than presume tracking is 100% right always
                end,
    Lob = function(target)
            snd.onHit2({"Dodge"}, "Wayfarer")
          end,
    Bash = function(target)
            if snd.checkAff("hearing") then
               table.insert(snd.maybe_affs, "dizziness")
          	else
               table.insert(snd.maybe_affs, "hearing")
          	end
            snd.last_hit_limb = "head"
            snd.last_limb_dmg = 9
            if snd.checkAff("assault_damage_head") then
              snd.last_limb_dmg = 12
              snd.target_cured("assault_damage_head") 
            end
            snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Rebounding", "Dodge", "Parry"})
          end,
    Slaughter = function(target)
                table.insert(snd.maybe_affs, 1, snd.maybe_affs[2])
                  snd.onHit2({"Dodge"})
                  snd.onHit2({"Dodge"})
                end,
    Carve = function(target)
            if snd.checkAff("vomiting") then
               snd.target_got("fallen")
          	end
           table.insert(snd.maybe_affs, "vomiting")

            snd.last_hit_limb = "torso"
            snd.last_limb_dmg = 14
            if snd.checkAff("assault_damage_torso") then
              snd.last_limb_dmg = 17
              snd.target_cured("assault_damage_torso") 
            end
            snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Parry", "Rebounding", "Dodge"})
          end,
    Lacerate = function(target)
                 table.insert(snd.maybe_affs, "haemophilia")
                 snd.onHit2({"Rebounding", "Dodge", "Parry"})
                end,
    Chop = function(target)
            enableTrigger("Tenacity Chop")
            snd.last_limb_dmg = 8
             snd.onHit2({"Parry", "Rebounding", "Dodge"})
          end,
    Cripple = function(target)
            enableTrigger("Tenacity Cripple")
            snd.last_limb_dmg = 2
            snd.onHit2({"Parry", "Dodge"})
          end,
    Assault = function(target)
            enableTrigger("Tenacity Assault")
            snd.last_limb_dmg = 4
            snd.onHit2({"Parry", "Dodge"})
          end,
    Punish = function(target)
                  enableTrigger("Tenacity Punish")
                  --If only tenacity lines had targetting like others in the combat message
                end,
  },
  ["Wayfaring"] = {
        

  },
  
  ["Fury"] = {
    Warcry = function(target, boosted)
                snd.target_got("hearing")
                if boosted then snd.target_got("ringing ears") end
             end,

    Threaten = function(target, boosted)
                snd.target_got("hatred")
                if boosted then 
                  snd.target_got("masochism") 
                  snd.used.rebounding = false  
                end
             end,

    Shake = function(target, boosted)
                snd.target_got("weariness")
             end,

    Halt = function(target, boosted)
                snd.target_got("lethargy")
             end,

    Exhaust = function(target, boosted)
                snd.target_got("exhausted")
             end,
             
    Expunge = function(target, boosted)
                --snd.handleExpunge()
                if boosted then
                  snd.target_cured("stupidity")
                end
              end,
    Shatter = function(target, boosted)
             enableTrigger("Fury Shatter Second Aff")
             if boosted then
               snd.target_got("muddled")
               tempTimer(4.9, [[if snd.checkAff("muddled") then snd.target_cured("muddled") end]])
             end
           end,
    Distract = function(target, boosted)
                 snd.parried_limb = "none"
              end,
  },
  
--Revenant
  ["Riving"] = {
    Rage = function(target)  
             snd.handleRage()
           end,
    Duplicity = function(target)
                    enableTrigger("Weapon Hit Confirmation")
                   end,
    Fell = function(target)
                    enableTrigger("Weapon Hit Confirmation")
                  end,
    Gouge = function(target)
            if #snd.maybe_affs == 0 and snd.hitting ~= "You" then
              table.insert(snd.maybe_affs, "rend")
            end
            snd.onHit2({"Rebounding", "Dodge"})
           end,
    Fitness = function(target)
                snd.handleFitness()
              end,       
    Transpierce = function(target, failed)
               if failed then
                 snd.removeProneStates(true)
               else
                 snd.target_got("writhe_impaled")
                 snd.theytumbling = false
                 if snd.hitting == "You" then
                  snd.target_impaled = true
                 end
              end
            end,      
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
   Deceive = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                enableTrigger("Weapon Hit Confirmation")
              end,
    Extirpate = function(target)
                   snd.target_impaled = false
                   snd.target_cured("writhe_impaled")
                 end,
    Jumpcut = function(target, what)
              if what == "impale" then
                snd.target_got("writhe_impaled")
                snd.theytumbling = false
              end
              snd.target_got("fallen")
            end,
    Initiate = function(target)
               snd.target_got("fallen")
             end,    
  },
  
  ["Manifestation"] = {
      Parasite = function()
                    snd.target_got("withering")
                  end,
      Discord = function(target, aff)
                  snd.target_got(aff)
                end,

  },
  
  ["Chirography"] = {
      Atdum = function()
           enableTrigger("atdum confirmation")
         end,      
      Telvi = function(target, modifier)
          snd.target_got("cold")
          if modifier == "two-hand" then
            snd.target_got("cold")
          end
      end,
  },
--Warden
  ["Warding"] = {
    Lacerate = function(target)
                  enableTrigger("Spinslash 2nd half")
                  snd.onHit2({"Dodge", "Rebounding"}, "Warden")
                end,
   Bypass = function(target, defense)
                if defense == "shield" then snd.used.shield = false end
                if defense == "rebounding" then snd.used.rebounding = false end
                if defense == "speed" then snd.target_got("no_speed") end
                if defense == "failure" then snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false end
                snd.onHit2({"Dodge", "Rebounding"})
              end,
    Terrorize = function(target)
              snd.target_got("fallen")
            end,
    Maim = function(target)
               table.insert(snd.maybe_affs, "blurry_vision")
               snd.onHit2({"Rebounding", "Dodge"})
              end,
    Pummel = function(target, conditional)
              local aff = {["knees"] = "crushed_kneecaps", ["elbows"] = "crushed_elbows", ["chest"] = "cracked_ribs"}
              if conditional == "chest" and snd.checkAff("cracked_ribs") then
                table.insert(snd.maybe_affs, "crushed_chest")
              else
                table.insert(snd.maybe_affs, aff[conditional])
              end
              snd.onHit2({"Rebounding", "Dodge"}, "Warden")
              if conditional == "knees" then tempTimer(11.5, [[snd.target_cured("crushed_kneecaps")]]) end
              if conditional == "elbows" then tempTimer(7.5, [[snd.target_cured("crushed_elbows")]]) end
            end,          
    Raze = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,   
    Fitness = function(target)
                snd.handleFitness()
              end,        
  Constrict = function(target, failed)
             if failed then
               snd.removeProneStates(true)
             else
               snd.target_got("writhe_impaled")
               snd.theytumbling = false
               if snd.hitting == "You" then
                snd.target_impaled = true
               end
            end
          end,
    Maul = function(target)
                   enableTrigger("Maul Hit Confirmation")
                 end,
     
  },
  
  ["Ancestry"] = {
    Inhibit = function(target)
               snd.target_got("inhibited")
             end,    
    Spear = function(target)
               enableTrigger("Spear Limb Messages")
             end,
    Intercept = function(target)
               snd.used.shield = true
             end,
    Ambush = function(target)
               snd.target_got("ancestral_ambush")
               if snd.hitting == "You" then
                 snd.balance.soulpoison = false
               end
             end,
    Portent = function(target)
                snd.target_got("ancestral_portent")
              end,
    Debilitate = function(target)
                snd.target_got("debilitated")
              end,
    Attune = function(target)
                enableTrigger("Ancestor Attune give")
                snd.target_got("ancestor_implant")
              end,
    Elude = function(target)
                   snd.target_got("eluded")
                 end,
    Carve = function(target)
              snd.used.shield = false
              snd.used.rebounding = false
              snd.target_cured("barrier")
              snd.target_cured("dome")
            end,
              
  },
  
  ["Communion"] = {
  Advance = function(target)
              snd.used.shield = false
            end,
  Saboteur = function(target)
              --loki
              end,
  Stormwarden = function(target)
            if snd.checkAff("epilepsy") then
              snd.target_got("hallucinations")
            else
              snd.target_got("epilepsy")
            end
          end,
  Snowdancer = function(target)
                  snd.target_got("cold")
                end,
  Firekeeper = function(target)
                 snd.target_got("ablaze")
               end,    
  Harrier = function(target)
              if snd.checkAff("weariness") then
                snd.target_got("crippled")
              else
                snd.target_got("weariness")
              end
            end,
  Chanter = function(target)
            if snd.checkAff("dizziness") then
              snd.target_got("recklessness")
            else
              snd.target_got("dizziness")
            end
          end,
  Inciter = function(target)
            if snd.checkAff("berserking") then
              snd.target_got("impairment")
            else
              snd.target_got("berserking")
            end
          end,  
  Toxicologist = function(target)
                if snd.checkAff("blisters") then
                  snd.target_got("limp_veins")
                else
                  snd.target_got("blisters")
                end
              end,         
  Assault = function(target, limb)
              if limb ~= nil then
               snd.last_hit_limb = limb
               snd.last_limb_dmg = 2.49
               snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
               enableTrigger("Sunder Parry")
              end
            end,
  Dirge = function(target)
            if table.isMember(snd.players_here, snd.target) and snd.hitting ~= snd.target then
              snd.target_got("blurry_vision")
            end
          end,

  },
  
--Earthcaller
  ["Subjugation"] = {
  
  Crush = function(target, limb)
            snd.last_hit_limb = limb
            enableTrigger("Crush Confirmation")
          end,
  Crash = function(target, failure)
            if not failure then
              snd.target_got("disrupted")
            end
          end,
  Obliterate = function(target, limb)
           	snd.last_hit_limb = limb
          	snd.last_limb_dmg = 25
          	snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
            snd.onHit2({"Parry", "Dodge"})
          end,
  
  Ribcage = function(target)
           snd.used.shield = true
           if snd.hitting == "You" then
              snd.defenses.def_shield_tattoo.state = "deffed"
           end
         end,
  
  Dust = function(target)
           snd.target_got("ablaze")
           snd.target_got("angel_seared") -- needs new aff LUMINARY
           tempTimer(15, [[snd.target_cured("angel_seared")]])
         end,
  
  Incisor = function(target, defense)
            snd.used.rebounding = false
          end,
          
  Raze = function(target, defense)
            if defense == "shield" then snd.used.shield = false
            elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
            end
          end,
          
  Subdue = function(target)
             if snd.battle_aff ~= "none" then
              snd.target_got(snd.battle_aff)
            	table.insert(snd.last_affs, snd.battle_aff)
             end
             if snd.chasten_aff ~= "none" then
              snd.target_got(snd.chasten_aff)
            	table.insert(snd.last_affs, snd.chasten_aff)
             end
            end,
  
  Strike = function(target)
            table.insert(snd.maybe_affs, "paresis")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Punch = function(target)
            table.insert(snd.maybe_affs, "weariness")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  Facesmash = function(target)
                if not snd.checksomeAffs({"misery", "sight"}, 1) then
                  table.insert(snd.maybe_affs, 1, "misery")
                  table.insert(snd.maybe_affs, 2, "sight")
                elseif snd.checkAff("misery") then
                  table.insert(snd.maybe_affs, 1, "sight")
                else
                  table.insert(snd.maybe_affs, 1, "misery")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Facesmash")
              end,
  Slam = function(target)
                if not snd.checksomeAffs({"asthma", "haemophilia"}, 1) then
                  table.insert(snd.maybe_affs, 1, "asthma")
                  table.insert(snd.maybe_affs, 2, "haemophilia")
                elseif snd.checkAff("asthma") then
                  table.insert(snd.maybe_affs, 1, "haemophilia")
                else
                  table.insert(snd.maybe_affs, 1, "asthma")
                end
                snd.onHit2({"Dodge", "Rebounding"}, "Luminary Slam")
              end,
  Horrification = function(target)
            table.insert(snd.maybe_affs, "sight")
            snd.onHit2({"Dodge", "Rebounding"})
          end,
  
  },
  
  ["Apocalyptia"] = {
    Hysteria = function(target)
               snd.target_got("confusion")
               snd.target_got("dizziness")
             end,
    Lull = function(target)
               snd.target_got("peace")
             end,
    Reckoning = function(target)
                  snd.target_got("hellsight")
                end,

  },
  
  ["Tectonics"] = {
    Ashfall = function(target)
                 snd.target_got("allergies")
                end,
                
    Transfixion = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                  end,
    Vent = function(target)
                snd.target_got("berserking")
                snd.target_got("hallucinations")
              end,
    Fault = function(target)
             snd.target_got("faulted")
             tempTimer(18.5, [[snd.target_cured("faulted")]])
           end,
    Spew = function(target)
             snd.target_got("ablaze")
             enableTrigger("Fervour Spew")
           end,
    Aftershock = function(target)
             snd.target_got("aftershock")
           end,
  },
  
--Oneiromancer
  ["Oneiromancy"] = {
        Bells = function(target)
                    snd.target_got("hearing")
                  end,
        Fumes = function(target)
        --not used by Sunder but some may want it
                 end,
        Unspool = function(target)
                   snd.target_has_aura = true
                   snd.need_leech_aura = false
                end,                 
        Misfortune = function(target, where)
                    if where == "arms" then snd.target_got("a_crippled_arm")
                    elseif where == "legs" then snd.target_got("a_crippled_leg")
                    elseif where == "throat" then snd.target_got("crippled_throat")
                    else snd.target_got(where.." broken")
                    end
                  end, 
        Disjunct = function(target)
                    snd.need_deform = false
                   tempTimer(20,[[snd.need_deform = true]])
                 end,                
        Athame = function(target)
                      if #snd.maybe_affs == 1 then
                        snd.onHit2({"Rebounding", "Dodge"})
                      end
                     end,
  },
  
  ["Hyalincuru"] = {
        Sphere = function(target, dodge)
                if #snd.maybe_affs &gt; 0 then
                  if not dodge then
                    local aff = snd.maybe_affs[1]
                    if snd.cardshapes.oneiromancer[aff].card == "sphere" then
                      if aff == "sensitivity" and not snd.have_aff("hearing") then
                        aff = "hearing"
                      end
                      snd.target_got(aff)
                    end
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Hypercube = function(target, dodge)
                if #snd.maybe_affs &gt; 0 then
                  if not dodge then
                    local aff = snd.maybe_affs[1]
                    if snd.cardshapes.oneiromancer[aff].card == "hypercube" then
                      snd.target_got(aff)
                    end
                  end
                  table.remove(snd.maybe_affs, 1)
                end
              end,
        Wreath = function(target, conditional)
                        if conditional ~= "prone" then
                          snd.target_got("writhe_ropes")
                        end
                        snd.target_got("fallen")
                    end,             
        Heart = function(target)
                   snd.target_got("lovers_effect")  
                 end,

        Hourglass = function(target)
                   snd.target_got("no_speed")
                 end,
        
        Knight = function(target)
                   snd.target_got("justice") 
                 end,
                 
        Phantasmagoria = function(target)
                   snd.target_got("despair")
                   tempTimer(15.75, [[snd.target_cured("despair")]])  
                 end,        
        Hammer = function(target, limb)
                     snd.last_hit_limb = limb
                     snd.last_limb_dmg = 12.50
                     snd.took_limb_dmg(snd.last_hit_limb, snd.last_limb_dmg)
                     enableTrigger("Sunder Parry")
                   end,
        Poppy = function(target)
                   --currently unused but if I want to add insomnia/sleep tracking it'll be here.
                 end,
        Diamond = function(target)
            		  snd.target_got("haemophilia")
            	    if snd.hitting == "You" then
            	      snd.adder_attached = true
            		    snd.adder_ready = false
            	    end
                 end, 
  },
  
  ["Contracts"] = {
    Blob = function(target)
              snd.balance.envelop = false
            end,
    Quetzal = function(target, attack)
              if attack == "Croon" then
                snd.target_got("hearing")
              end
            end,          

  },
  
-- Bard
  ["Performance"] = {
  
  Pierce = function(target, defense)
              if defense == "shield" then snd.used.shield = false
              elseif defense == "rebounding" then snd.used.rebounding = false; snd.used.shield = false
              else snd.target_got("no_speed"); snd.used.rebounding = false; snd.used.shield = false 
              end
            end,
  
  Tempo = function(target)
          enableTrigger("Bard Hit Confirmation")
          end,
          
  
  Rhythm = function(target, conditional)
            local rhythm_table = {
            ["one"] = "paresis",
            ["two"] = "shyness",
            ["three"] = "besilence",}
            snd.target_got(rhythm_table[conditional])
            enableTrigger("Bard Rhythm Confirmation")
           end,
           
  Needle = function(target, venom)
            if not venom then
              if snd.maybe_affs[1] then
                snd.needle = snd.venomEffect(snd.maybe_affs[1])
              else
                snd.needle = "none"
              end
            elseif venom ~= "dodge" then
              if snd.needle == "none" then
                snd.needle = snd.venomEffect(venom)
                end
              end
            end,    
  
  
  
  Ridicule = function(target)
             snd.target_got("self_loathing")
             end,
  
  -- Seduce does nothing w/o happiness induce or scantily-clad, and the lovers_effect has a confirmation line for that. Not sure we need below.
--  Seduce = function(target)
--            snd.target_got("lovers_effect")
--            end,
  
  Quip = function(target)
          snd.target_got("hatred")
          end,
        
  Sock = function(target)
          if snd.checkAff("dizziness") then
             table.insert(snd.maybe_affs, "dazed")
          else
             table.insert(snd.maybe_affs, "dizziness")
          end
          snd.onHit2({"Dodge"}) 
        end,
  
  
  Crackshot = function(target)
          snd.target_got("dizziness")
          snd.target_got("perplexed")
          end,
  
  Hiltblow = function(target)    
              snd.onHit2({"Dodge", "Rebounding"}, "Bard Hiltblow")
          end, 

},

  ["Weaving"] = { 
  
  
    Anelace = function(target, stab)
            if stab then
               enableTrigger("Anelace Stab Handling")
             end
            end,
             
    Headstitch = function(target)
               snd.target_got("deadening")
               snd.target_got("besilence")
               snd.target_got(snd.globe_affs[snd.globecount])
               snd.globecount = snd.globecount-1
               if snd.globecount == 0 then
                snd.target_cured("globes")
                end
             end,

                  
    Barbs = function(target)
                  snd.target_got("manabarbs")
                  snd.target_got(snd.globe_affs[snd.globecount])
                  snd.globecount = snd.globecount-1
                  if snd.globecount == 0 then
                    snd.target_cured("globes")
                    end
                  end,
           
                  
    Runeband = function(target)
              snd.target_got("runeband")
              snd.runebandcount = 1
              snd.bandclockwise = true
              end,                            
                
    Bladestorm = function(target)
              snd.target_got("bladestorm")
              end,
              
    Ironcollar = function(target)
             enableTrigger("Ironcollar Handling")
             tempTimer(3, [[disableTrigger("Ironcollar Handling")]])
             end, 
                
    Globes = function(target)            
              snd.globecount = 3
              snd.target_got("globes")
              end,
  },
  
  ["Alchemy"] = {
  
    Currents = function(target, boosted) --0 virtuoso

          end,
  
    Upset = function(target, boosted) --0 adept
             if not boosted then
               snd.target_got("fallen")
             end
           end,
             
    Infiltrative = function(target, boosted) --0 fabled
             if not boosted then
               snd.target_got("infested")
             end
           end,
    Pathogen = function(target, boosted) --66 fabled
             if not boosted then
               snd.target_got("blighted")
             end
           end,
    Electroshock = function(target, boosted) --66 adept
                snd.target_got("paresis")
                snd.target_got("stupidity")
              end,
    Intrusive = function(target, boosted) -- 33 adept
             if boosted then
               snd.target_got("plodding")
             end
             snd.target_got("lifebane")
           end,
    Asphyxiant = function(target, boosted) -- 0 mythical
                snd.target_got("writhe_vines")
              end,

    Virulent = function(target, boosted) --50 capable
                  if #snd.maybe_affs &gt;= 1 then
                    snd.onHit2({})
                  end                
                end,
    Corrosive  = function(target, boosted) --0 capable
                  snd.used.shield = false
                end,
    Malignant = function(target, boosted) --50 skilled
             if boosted then
               snd.target_got("idiocy")
             end
             snd.target_got("vitalbane")
           end,  
    Fulmination = function(target, boosted) --50 gifted
                if boosted then
                  snd.target_got("stormbolt_cloud")
                end
              end,
    Neurotic = function(target, boosted)
                snd.target_got("impatience")
                snd.target_got("confusion")
                  if boosted then
                    snd.target_got("hallucinations")
                  end
              end,
    Rousing = function(target) --33 fabled
                snd.target_got("sight")
                snd.target_got("hearing")
                snd.target_got("sensitivity")
              end,
    Parity = function(target, boosted) --66 virtuoso
    --This might be hidden from all except the Shaman, not sure
             if boosted then
               snd.target_got("justice")
             end
           end,  
  },
  
  ["Experimentation"] = {
    Prognosis = function(target)
                    snd.target_got("dread")
                  end,
    Hallucinogen = function(target)
                  if #snd.maybe_affs &gt;= 1 then
                    snd.onHit2({})
                  end
                end,
  },
  
  ["Botany"] = {
        

  },
  
--Akkari
  ["Ascendance"] = {
    Ague = function(target)
                snd.target_got("cold")
              end,
    Penitence = function(target)
                snd.target_got("slickness")
                snd.used.paste = false
                snd.target_got("no_paste")
              end,
    Denounce = function(target, quell)
               if quell then
                 snd.used.shield = false
               end
            end,
    Rekindle = function(target, limb)
                    snd.took_limb_dmg(limb, -15)
                  end,
    Censure = function(target, lenient)
                    enableTrigger("Weapon Hit Confirmation")
                  end,
    
    Bloodlet = function(target)
                snd.target_got("rend")
              end,
    Exorcism = function(target, fail)
            if not fail then
              snd.target_got("feast")
      		    tempTimer(19.5, [[snd.target_cured("feast")]])
      	      snd.used.paste = false
              snd.target_got("no_paste")
            else
              snd.target_cured("feast")
              snd.target_cured("no_paste")
            end
          end,
  },
  
  ["Dictum"] = {
    Dictate = function(target)
                for _, aff in pairs(snd.maybe_affs) do
                  if not table.contains(snd.venoms, snd.maybe_affs[1]) then
                    snd.target_got(aff) 
                  end
                end
              end,
    Exhort = function(target, blindness)
                  snd.target_got("sight")
                  if not blindness then  
                   snd.target_got("writhe_transfix")
                 end
                end,
    Confusion = function(target)
                 snd.target_got("confusion")
                end,
    Impatience = function(target)
                 snd.target_got("impatience")
                end,
    Paranoia = function(target)
                 snd.target_got("paranoia")
                end,
    Stupidity = function(target)
                 snd.target_got("stupidity")
                end,
    Agoraphobia = function(target)
                 snd.target_got("agoraphobia")
                end,
    Masochism = function(target)
                 snd.target_got("masochism")
                end,
    Loneliness = function(target)
                 snd.target_got("loneliness")
                end,
    Lovers = function(target)
                  snd.target_got("lovers_effect")
                end,
    Epilepsy = function(target)
                 snd.target_got("epilepsy")
                end,
    Anorexia = function(target)
                 snd.target_got("anorexia")
                end,
    Peace = function(target)
                 snd.target_got("peace")
                end,
    Dementia = function(target)
                 snd.target_got("dementia")
                end,
    Berserking = function(target)
                 snd.target_got("berserking")
                end,
    Indifference = function(target)
                 snd.target_got("indifference")
                end,
    Vertigo = function(target)
                 snd.target_got("vertigo")
                end,
    Recklessness = function(target)
                 snd.target_got("recklessness")
                end,
    Remorse = function(target)
                 snd.target_got("remorse")
                end,
    Contrition = function(target)
                 snd.target_got("contrition")
                end,
    Disrupt = function(target, failure)
                if not failure then
                  snd.target_got("disrupted")
                end
              end,
  },
  
 ["Discipline"] = {
  
  Provoke = function(target)
            if target == snd.target then
              snd.used.rebounding = false
              snd.used.shield = false
            end
          end,
  
  Anathema = function(target)
            snd.target_got("blood_curse")
          end,

  Attend = function(target)
           snd.target_got("hearing")
           snd.target_got("sight")
         end,
         
  Exorcism = function(target, fail)
          if not fail then
      		  snd.target_got("feast")
      		  tempTimer(19.5, [[snd.target_cured("feast")]])
      	    snd.used.paste = false
            snd.target_got("no_paste")
          else
            snd.target_cured("writhe_transfix")
          end
        end,
  
  Bane = function(target)
             snd.target_got("blood_poison")
          end,
  Pariah = function(target)
            snd.target_got("blood_rune")
	          snd.runeused = true
        end,
  Exsanguinate = function(target)
          snd.target_got("effused_blood")
        end,
    },

--Random stuff

  ["Hunting"] = {
    Fitness = function(target)
                snd.track_fitness(snd.target)
                snd.handleFitness()
              end,
  
  },
  
  ["Artifact"] = {
    Strum = function(target)
              snd.target_got("barrier")
            end,
  },
  ["Manipulation"] = {
    Dome = function(target)
              snd.target_got("dome")
            end,
  },
  
  ["Tattoos"] = {
    Shield = function(target)
               snd.used.shield = true
             end,
    Starburst = function(target)
                snd.reset_target()
            end,
    Feather = function(target)
               snd.target_cured("fallen")   
             end,
    Armour = function(target)
               snd.target_got("armor_tattoo")
               tempTimer(10, function() snd.target_cured("armor_tattoo") end)
             end,
  
  },
  
  ["Research"] = {
    Disperse = function(target)
                snd.removeProneStates()
              end  
  
  },
  ["Survival"] = {
    Restoration = function(target)
                    snd.handleRestore()
                  end  
  },
    ["Raloth"] = {
      Trample = function(target)
                enableTrigger("Raloth Trample")
              end,
  },
    ["Relic"] = {

      Entangle = function(target, cond)
                  if cond == "evasion" then
                  else
                    snd.target_got("writhe_web")
                  end
                end,
      Webspray = function(target, cond)
                  if cond == "evasion" then
                  else
                    snd.target_got("writhe_web")
                  end
                end,
      Tailstrike = function(target)
                snd.onHit2({"Dodge"})
              end,
  },
  
  ["Astral"] = {
    Huntresses = function(target)
      snd.huntresses_used = true
      tempTimer(90, [[snd.huntresses_used = false]])
    end,
    Contaminate = function(target)
      enableTrigger("Astral Contaminate")
      enableTrigger("Sunder Parry")
      if #snd.maybe_affs &gt;= 1 then
        snd.onHit2({"Parry",})
      end
    end,
    Hamartia = function(target, shield)
      snd.hamartia_used = true
      if shield then
        snd.used.shield = false
      end
      if #snd.maybe_affs &gt;= 1 then
        snd.onHit2({})
      end
    end,    
    Unmask = function(target)
      if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
        snd.target_got("slickness")
        snd.target_got("disfigurement")
        snd.unmasked = true
        tempTimer(25, [[snd.unmasked = false]])
        snd.glory = snd.glory - 1
      else
        snd.target_got("magic_weakness")
        snd.target_got("fire_weakness")
        tempTimer(30, [[snd.target_cured("magic_weakness")]])
        tempTimer(30, [[snd.target_cured("fire_weakness")]])
        snd.glory = snd.glory - 1
      end
    end,    
    Devour = function(target)
      snd.glory = snd.glory - 2
      snd.hamartia_used = false
    end,  
    Crescent = function(target)
      snd.glory = snd.glory - 3
    end,
    
   }, 
   
["Aetherial"] = {
 Beam = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
 Volley = function(target)
          enableTrigger("Aetherial Volley")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Omission = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },
   
  ["Tiarna"] = {
  Inculcate = function(target)
            if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
              snd.target_got("slickness")
              snd.target_got("disfigurement")
            else
              snd.target_got("magic_weakness")
              snd.target_got("fire_weakness")
              tempTimer(30, [[snd.target_cured("magic_weakness")]])
              tempTimer(30, [[snd.target_cured("fire_weakness")]])
           end
         end,
         
 Shear = function(target)
          enableTrigger("Tiarna Shear")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Hive = function(target, shield)
        if shield then
          snd.used.shield = false
        end
        if #snd.maybe_affs &gt;= 1 then
          snd.onHit2({})
        end
       end,
   },
["Titan"] = {
 Staredown = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
 Spear = function(target)
          enableTrigger("Titan Spear")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Corrode = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },

["Adherent"] = {
 Wither = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
 Avatar = function(target)
          enableTrigger("Adherent Avatar")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Tentacle = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },


["Sagani"] = {
 Flux = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
 Carbonise = function(target)
          enableTrigger("Sagani Carbonise")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Erode = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },


["Chaos"] = {
 Warp = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
  Claw = function(target)
          enableTrigger("Chaos Claw")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Shock = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },


["Nocturn"] = {
 Corrupt = function(target)
          if snd.checkAff("magic_weakness") and snd.checkAff("fire_weakness") then
            snd.target_got("slickness")
            snd.target_got("disfigurement")
          else
            snd.target_got("magic_weakness")
            snd.target_got("fire_weakness")
            tempTimer(30, [[snd.target_cured("magic_weakness")]])
            tempTimer(30, [[snd.target_cured("fire_weakness")]])
         end
       end,
 Lash = function(target)
          enableTrigger("Nocturn Lash")
          enableTrigger("Sunder Parry")
          if #snd.maybe_affs &gt;= 1 then
            snd.onHit2({"Parry",})
          end
         end,
 Haemoplague = function(target, shield)
              if shield then
                snd.used.shield = false
              end
              if #snd.maybe_affs &gt;= 1 then
                snd.onHit2({})
              end
            end,
   },

--Runecarver
  ["Malediction"] = {
      Numb = function(target, spiritpact)
                snd.target_got("cold")
                if spiritpact ~= nil then
                  snd.target_got("cold")
                end
              end,
      Imperil = function(target, fail)
              snd.used.shield = false
            end,
      Enervate = function(target, spiritpact)
              local afflist = {"clumsiness", "weariness", "lethargy", "paresis"}
              local affcount = 0
              for _, v in pairs(afflist) do if not snd.checkAff(v) then
                snd.target_got(v)
                affcount = affcount + 1
                if not spiritpact or affcount == 2 then break end
                end
              end
            end,
      Jinx = function(target, spiritpact)
                  if snd.checksomeAffs({"dizziness", "nyctophobia", "confusion", "dementia"}, 4) then
                    snd.target_got("faintness")
                  end
                end,
      Despair = function(target)
                snd.target_got("gloom")
              	if table.contains(gmcp.Room.Info.details, "darkness") then
              		snd.target_got("nyctophobia")
                end  
              end,
      Revile = function(target, spiritpact)
                   snd.target_got("rot_benign")
                   if spiritpact then snd.target_got("rot_spirit") end
                  end,         
      Mystify = function(target, spiritpact)
                   snd.target_got("voidgaze")
                   if spiritpact then snd.target_got("sight") end
                  end, 
      Malady = function(target, spiritpact)
                   snd.target_got("vomiting")
                   snd.target_got("haemophilia")
                   if snd.checkAff("dementia") then
                     snd.target_cured("dementia")
                     snd.target_got("hallucinations")
                   end
                  end,                   
      Woe = function(target, spiritpact)
                      if snd.hitting == "You" then snd.balance.shadowsphere = false end
                     	snd.target_got("woe_curse")
                      if spiritpact then snd.target_got("nyctophobia")	end
                    end,                   
      Anathemise = function(target, spiritpact)
                	if snd.checkAff("dizziness") then snd.target_got("dementia") end
                  if snd.checkAff("weariness") then snd.target_got("exhausted") end
                end,
      Preymark = function(target, conditional)
                  if conditional == "Spiritpack" or conditional == "end" then
                    snd.target_got("preymark")
                  end
                end,
  },
  
  ["Runecarving"] = {
    Bewitch = function(target, blindness)
                    snd.target_got("sight")
                    if not blindness then  
                     snd.target_got("writhe_transfix")
                   end
                   snd.balance.sorcery_transfix = false
                  end,   

  },
  
  ["Sporulation"] = {
    Degrade = function(target, limb)
              snd.last_hit_limb = limb
              local dmg = { [0] = 4, [1] = 8, [2] = 13, [3] = 19, [4] = 25, [5] = 33}
              snd.took_limb_dmg(snd.last_hit_limb, dmg[snd.gravity])
              if snd.checkAff("preymark") and snd.gravity &gt; 2 then
                snd.target_cured("preymark")
              else
                snd.gravity = 0
              end
              if snd.class == "Runecarver" then
              	snd.message("&lt;red&gt;Fungal Total: &lt;white&gt;"..snd.gravity)
              end
            end,
    Infect = function(target)
               snd.target_got("fungal_invasion")
            end,
    Ensnare = function(target)
          	snd.target_got("paresis")
          	snd.target_got("fallen")
          	
          	if snd.hitting == "You" then
          		if snd.gravity &gt;= 0 then
          			snd.gravity = math.min(5, snd.gravity+1)
          		end
          	end

            if snd.class == "Runecarver" then
            	snd.message("&lt;red&gt;Fungal Total: &lt;white&gt;"..snd.gravity)
            end
          end,
    Inoculation = function(target)
               snd.target_got("inoculated") -- imbued
             end,
  },
  ["Weaponry"] = {
    Attack = function(target)
      enableTrigger("Weapon Hit Confirmation")
    end,
  },

}</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Class specific stuff</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Archivist aff picking</name>
						<packageName></packageName>
						<script>snd.shape_affs = {
		"merciful",
		"masochism",
		"berserking",
		"recklessness",
		"laxity",
		"lovers_effect",
		"peace",
		"magnanimity",
		"dizziness",
		"faintness",
		"epilepsy",
		"shyness",
}

snd.shape_attacks = {
		merciful = "circle",
		masochism = "circle",
		berserking = "circle",
		recklessness = "circle",
		laxity = "triangle",
		lovers_effect = "triangle",
		peace = "triangle",
		magnanimity = "triangle",
		dizziness = "square",
		faintness = "square",
		epilepsy = "square",
		shyness = "square",
}
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Sentinel Scripts and Tables</name>
						<packageName></packageName>
						<script>snd.dhuriv_affs =
  {
    "impatience",
    "destroyed_throat",
    "heartflutter",
    "confusion",
    "lethargy",
    "fallen",
    "impairment",
    "reave",
    "claustrophobia",
    "agoraphobia",
    "loneliness",
    "berserking",
    "frozen",
    "shivering",
    "ambush",
    "epilepsy",
    "laxity",
  }
snd.dhuriv_first =
  {
    "reave",
    "slash",
    "twirl",
    "weaken",
    "trip",
    "slam",
    "crosscut",
    "throatcrush",
    "daunt",
    "icewyrm",
    "ambush",
  }
snd.dhuriv_second = {"stab", "heartbreaker", "gouge", "thrust", "flourish"}
snd.dhuriv_attacks =
  {
    reave = "reave",
    impatience = "gouge",
    destroyed_throat = "throatcrush",
    heartflutter = "heartbreaker",
    confusion = "twirl",
    lethargy = "weaken left leg",
    fallen = "trip",
    epilepsy = "slam",
    laxity = "slam",
    impairment = "crosscut",
    claustrophobia = "daunt",
    agoraphobia = "daunt",
    loneliness = "daunt",
    berserking = "daunt",
    frozen = "icewyrm",
    shivering = "icewyrm",
    ambush = "ambush",
  }
snd.daunt_animals =
  {
    ["claustrophobia"] = "order direwolf daunt ",
    ["agoraphobia"] = "order raloth daunt ",
    ["loneliness"] = "order crocodile daunt ",
    ["berserking"] = "order cockatrice daunt ",
    ["frozen"] = "order icewyrm icebreath ",
    ["shivering"] = "order icewyrm icebreath ",
  }

function Sentinel_Attack_Choice(giving, left, right)
  -- requires to be sent a list of affs and 2 variables for
  -- it to fill and send back with choices.
  if snd.parried_limb == "left leg" then
    snd.dhuriv_attacks["lethargy"] = "weaken right leg"
  end

  local right_venom_only = false
  -- used for when we choose a daunt aff
  ----------An example of how you might change your aff list. If current offense mode is mental affs, we want to make sure
  ----------they have impatience, so check if they have impatience and paresis. If no to both, add paresis to top of stack.
  if not snd.checksomeAffs({"paresis", "impatience"}, 1) and snd.current_offense == "SentMental" then
    table.insert(giving, 1, "paresis")
  end
  if snd.current_offense == "SentVLock" then
    local missing = snd.missingAff("asthma/slickness", "/")
    if #missing == 0 and snd.no_parry() and snd.checksomeAffs({"weariness", "clumsiness", "hypochondria"}, 1) then
      table.insert(giving, 1, "destroyed_throat")
    end
    if not snd.checkAff("destroyed_throat") and snd.checkAff("anorexia") then
      table.insert(giving, 1, "impatience")
      table.insert(giving, 1, "stupidity")
    end
  end
  if snd.current_offense == "SentImpale" or snd.current_offense == "SentSalve" then
    if snd.timer_check("restoration", .5) and snd.no_parry() then
      table.insert(giving, 1, "destroyed_throat")
    end
  end
  if snd.current_offense == "SentLumiSupport" then
    if not snd.checkAff("destroyed_throat") and snd.checkAff("anorexia") then
      table.insert(giving, 1, "impatience")
      table.insert(giving, 1, "stupidity")
    end
  end
  ----------Below here the function picks affs for you based on your aff list sent over and any changes made by checks above.
  for i, v in pairs(giving) do
    if not table.contains(snd.target_has, giving[i]) then
      if left == "none" then
        if snd.used.shield or snd.used.rebounding then
          left = "reave"
        elseif table.contains(snd.dhuriv_first, snd.dhuriv_attacks[v]) then
          left = v
          if left == "destroyed_throat" then
            right = nil
          end
          if (snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm") then
            right_venom_only = true
          end
        elseif table.contains(snd.dhuriv_second, snd.dhuriv_attacks[v]) and right == "none" then
          right = v
        elseif table.contains(snd.effects, i) and not snd.checkAff(giving[i]) then
          if left == "none" and right ~= giving[i] then
            left = giving[i]
          end
        elseif
          not snd.checkAff(giving[i]) and
          not table.contains(snd.dhuriv_second, snd.dhuriv_attacks[v])
        then
          left = v
        end
      end
      
      if right == "none" then
        if not right_venom_only and table.contains(snd.dhuriv_first, snd.dhuriv_attacks[v]) 
        and table.contains(snd.effects, left) and left ~= "paresis" and v ~= "destroyed_throat" then
          right = left
          left = v
        elseif not right_venom_only and table.contains(snd.dhuriv_second, snd.dhuriv_attacks[v]) then
          right = v
        elseif table.contains(snd.effects, v) and not snd.checkAff(giving[i]) then
          if left ~= giving[i] then
            right = giving[i]
          end
        end
      end
    end
  end
  return left, right
  ---- Return our attack choices back to the main alias.
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Indorani/Oneiromancer card table</name>
						<packageName></packageName>
						<script>--Nested tables incase someone wants to add a devil y/n field to cards and change picking based on it, though so few use it that it may not come to fruition.
snd.cardshapes =
  {
    indorani =
      {
        stupidity = {card = "moon"},
        confusion = {card = "moon"},
        epilepsy = {card = "moon"},
        anorexia = {card = "moon"},
        berserking = {card = "moon"},
        weariness = {card = "moon"},
        impatience = {card = "moon"},
        recklessness = {card = "moon"},
        perplexed = {card = "sun"},
        asthma = {card = "sun"},
        clumsiness = {card = "sun"},
        vomiting = {card = "sun"},
        lethargy = {card = "sun"},
        sensitivity = {card = "sun"},
        hearing = {card = "sun"},
        hypersomnia = {card = "sun"},
        superstition = {card = "sun"},
        prone = {card = "hangedman"},
        writhe_ropes = {card = "hangedman"},
        justice = {card = "justice"},
        lovers_effect = {card = "lovers"},
        wheel = {card = "wheel"},
        slickness = {card = "adder"},
        haemophilia = {card = "adder"},
        aeon = {card = "aeon"},
      },
    oneiromancer =
      {
        stupidity = {card = "hypercube"},
        confusion = {card = "hypercube"},
        epilepsy = {card = "hypercube"},
        anorexia = {card = "hypercube"},
        berserking = {card = "hypercube"},
        weariness = {card = "hypercube"},
        impatience = {card = "hypercube"},
        recklessness = {card = "hypercube"},
        perplexed = {card = "sphere"},
        asthma = {card = "sphere"},
        clumsiness = {card = "sphere"},
        vomiting = {card = "sphere"},
        lethargy = {card = "sphere"},
        sensitivity = {card = "sphere"},
        hearing = {card = "sphere"},
        hypersomnia = {card = "sphere"},
        superstition = {card = "sphere"},
        prone = {card = "wreath"},
        writhe_ropes = {card = "wreath"},
        justice = {card = "knight"},
        lovers_effect = {card = "heart"},
        wheel = {card = "cardinal"},
        slickness = {card = "diamond"},
        haemophilia = {card = "diamond"},
        aeon = {card = "hourglass"},
        despair = {card = "phantasmagoria"},
      },
  }</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Bard attack stuff</name>
						<packageName></packageName>
						<script>snd.globecount = 0
snd.singing = false
snd.playing = false
snd.song = "none"
snd.song_instrument = "none"
snd.halfbeat = false
snd.target_induced = "neutral"
snd.audience = "none"
snd.needle = "none"
snd.rhythm = false
snd.impetus = false
snd.runebandcount = 1
snd.bandclockwise = true

snd.emotional_dmg = {
sadness = 0,
happiness = 0,
surprise = 0,
anger = 0,
stress = 0,
fear = 0,
disgust = 0,
}




snd.venom_affs =

{
"sight",
"hearing",
"asthma",
"paresis",
"clumsiness",
"sensitivity",
"vomiting",
"allergies", 
"colocasia",
"haemophilia",
"peace",
"stupidity",
"weariness",
"recklessness",
"dizziness",
"shyness",
"anorexia",
"slickness",
"voyria",
"squelched",
"disfigurement",
"stuttering",
"deadening",
"thin_blood",
"left_leg_crippled",
"right_leg_crippled",
"left_arm_crippled",
"right_arm_crippled",
}


snd.performance_affs = {
"perplexed",
"dazed",
"berserking",
"hatred",
"lovers_effect",
"misery",
"self_loathing",
"fallen",
"magnanimity",
}


snd.performance_attacks = {
		pierce = "pierce",
    perplexed = "crackshot",
		dazed = "sock",
--		dizziness = "crackshot",
		berserking = "quip",
		hatred = "quip",
		lovers_effect = "seduce",
		fallen = "tackle",
		self_loathing = "ridicule",
    magnanimity = "ridicule",
		misery = "hiltblow",
-- nausea = "hiltblow",    
    harry = "harry",
}


snd.weaving_affs = {
"narcolepsy",
"hollow",
"besilence",
"deadening",
"migraine",
"squelched",
"ringing_ears",
"globes",
"runeband",
"bladestorm",
"ironcollar",
}

snd.weaving_attacks = {
		narcolepsy = "anelace",
    hollow = "anelace",
		besilence = "headstitch",
		deadening = "headstitch",
    ironcollar = "ironcollar",
    bladestorm = "bladestorm",
    globes = "globes",
    runeband = "runeband",
    migraine = "mindbreak",
    squelched = "mindbreak",
    ringing_ears = "soundblast",
    
}

snd.globe_affs = {

[1] = "perplexed",
[2] = "confusion",
[3] = "dizziness",

}

snd.runeband_affs = {

[1] = "stupidity",
[2] = "paranoia",
[3] = "ringing_ears",
[4] = "loneliness",
[5] = "exhausted",
[6] = "laxity",
[7] = "clumsiness",

}

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Akkari Attack Stuff</name>
						<packageName></packageName>
						<script>snd.primary_aff = {}

snd.can_attend = true
snd.can_proclaim = true
snd.can_crusade = true
snd.passion_active = false
snd.can_inquisition = true
snd.remorseful = false
snd.contrite = false
snd.doctrine = "none"

snd.secondary_aff = {}


snd.censure_affs = {
"sight",
"hearing",
"asthma",
"paresis",
"clumsiness",
"sensitivity",
"vomiting",
"allergies", 
"colocasia",
"haemophilia",
"peace",
"stupidity",
"weariness",
"recklessness",
"dizziness",
"shyness",
"anorexia",
--"slickness",
"voyria",
"squelched",
"disfigurement",
"stuttering",
"deadening",
"thin_blood",
"left_leg_crippled",
"right_leg_crippled",
"left_arm_crippled",
"right_arm_crippled",
}

snd.secondary_affs = {
"confusion",
"fear",
"impatience",
"paranoia",
"stupidity",
"agoraphobia",
"masochism",
"lovers",
"contrition",
"epilepsy",
"anorexia",
"amnesia",
"peace",
"dementia",
"berserking",
"indifference",
"vertigo",
"remorse",
"recklessness",
"sight",
"hearing",
"blood_poison",
}

snd.akkari_eq_affs = {
	"disrupted",
	--"sight",
	"writhe_transfix",
	"blood_curse",
--	"blood_rune",
	"feast",
}

snd.akkari_eq_attacks = {
	disrupted = "disrupt",
--	sight = "exhort",
	writhe_transfix = "exhort",
	blood_curse = "spirit anathema",
	feast = "spirit exorcise",
}

snd.akkari_bal_affs = {
	"effused_blood",
	"black_bile",
	"blood_rune",
  "no_caloric",
  "shivering",
  "frozen",
  "slickness",
  "no_paste",
  "rend",  

}

snd.akkari_bal_attacks = {
	effused_blood = "spirit exsanguinate",
	black_bile = "denounce "..snd.target.." corruption",
 	blood_rune = "spirit pariah",
  no_caloric = "ague",
	shivering = "ague",
	frozen = "ague",
	slickness = "penitence",
  no_paste = "penitence",
	rend = "bloodlet",
}

function snd.akkari_host()
  if gmcp.Char.Status.spec == "Dosan" or gmcp.Char.Status.spec == "Phreneses" then
    if table.isMember(snd.primary_aff, "blood_curse") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_curse"))
    end
    if table.isMember(snd.primary_aff, "blood_poison") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_poison"))
    end 
    if table.isMember(snd.primary_aff, "blood_rune") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_rune"))
    end 
  elseif gmcp.Char.Status.spec == "Il'ahji" or gmcp.Char.Status.spec == "Insidiae" then
    if table.isMember(snd.primary_aff, "feast") then
          table.remove(snd.primary_aff, table.index_of(table, "feast"))
    end  
    if table.isMember(snd.primary_aff, "blood_curse") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_curse"))
    end
    if table.isMember(snd.primary_aff, "blood_rune") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_rune"))
    end 
  elseif gmcp.Char.Status.spec == "Naarak" or gmcp.Char.Status.spec == "Rituos" then
    if table.isMember(snd.primary_aff, "feast") then
          table.remove(snd.primary_aff, table.index_of(table, "feast"))
    end  
    if table.isMember(snd.primary_aff, "blood_poison") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_poison"))
    end    
  else
    if table.isMember(snd.primary_aff, "feast") then
          table.remove(snd.primary_aff, table.index_of(table, "feast"))
    end 
    if table.isMember(snd.primary_aff, "blood_poison") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_poison"))
    end 
    if table.isMember(snd.primary_aff, "blood_curse") then
        table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "blood_curse"))
    end  
  end
end

function snd.akkari_attend()
  if (gmcp.Char.Status.spec == "Dosan" or gmcp.Char.Status.spec == "Phreneses") and snd.can_attend == true then
    if table.contains(snd.primary_aff, "sight") then
      table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "sight"))
    end
 else
    if table.contains(snd.secondary_aff, "hearing") then
      table.remove(snd.secondary_aff, table.index_of(snd.secondary_aff, "hearing"))
    end
    if table.contains(snd.secondary_aff, "sight") then
      table.remove(snd.secondary_aff, table.index_of(snd.secondary_aff, "sight"))
    end
  end
end

function snd.can_deliver()
  if ((snd.aff_count_physical() &gt;= 1 or snd.proned()) or snd.checkAff("feast")) and not snd.used.paste
  then
    return true
  else
    return false
  end
end

function snd.akkari_doctrine()
  if snd.doctrine == "battlerage" then
    if table.contains(snd.primary_aff, "haemophilia") then
      table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "haemophilia"))
    end 
  end
end

function snd.akkari_lovers(tab)
  if table.contains(tab,"lovers") and snd.checkAff("lovers_effect") then
    table.remove(tab, table.index_of(tab, "lovers"))
  end
end

function snd.akkari_peace()
  if snd.cureset == "carnifex" or snd.cureset == "zealot" or snd.cureset == "monk" or snd.cureset == "syssin" or snd.cureset == "wayfarer" then
    if table.contains(snd.secondary_aff, "peace") then
      table.remove(snd.secondary_aff, table.index_of(snd.secondary_aff, "peace"))
    end
  end
end

function snd.akkari_disfigure()
  if table.contains(snd.primary_aff, "disfigurement") then
    if snd.cureset == "luminary" or snd.cureset == "templar" or snd.cureset == "syssin" 
    or snd.cureset == "bard" or snd.cureset == "shifter" or snd.cureset == "wayfarer" 
    or snd.cureset == "monk" then
      table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "disfigurement"))
    end
  end
end

function snd.akkari_curse()
  if snd.checkAff("impatience") and snd.checksomeAffs({"sadness", "confusion",}, 2) 
  and (gmcp.Char.Status.spec == "Naarak" or gmcp.Char.Status.spec == "Rituos")
  and not snd.checkAff("blood_curse") 
  and not table.contains(snd.secondary_aff, "blood_curse") then
    table.insert(snd.secondary_aff, 1, "blood_curse")
  end
 end

function snd.akkari_behead()
  if snd.checksomeAffs({"disrupted", "slickness", "paresis", "asthma", "impatience", "anorexia", "confusion"}, 7)
  then 
    return true
  else 
    return false
  end
end

function snd.akkari_repent()
  if table.contains(snd.primary_aff, "sapped_dexterity") then
    if not snd.checksomeAffs({"self_pity", "stupidity", "dizziness", "faintness", "shyness", "epilepsy", "impatience", "dissonace", "infested",}, 3) then
    table.remove(snd.primary_aff, table.index_of(snd.primary_aff, "sapped_dexterity"))
    end
  end  
end

function snd.akkari_checks()
  snd.akkari_host()
  snd.akkari_doctrine()
  snd.akkari_attend()
  snd.akkari_repent()
  snd.akkari_peace()
  snd.akkari_curse()
  snd.akkari_disfigure()
  snd.akkari_lovers()
end

function snd.akkari_evil() --depressant count for mana drain
  local aff_count = 0
  for aff in pairs(snd.cures.depressant) do
    if snd.target_has[snd.cures.depressant[aff]] then
      aff_count = aff_count + 1
    end
  end
  if aff_count &gt;= 3 then
  return true
  else
  return false
  end
end


function snd.akkari_strife() --antipsychotic count for squire attack
  local aff_count = 0
  for aff in pairs(snd.cures.antipsychotic) do
    if snd.target_has[snd.cures.antipsychotic[aff]] then
      aff_count = aff_count + 1
    end
  end
  if aff_count &gt;= 3 then
  return true
  else
  return false
  end
end

function snd.akkari_darkness() --euphoriant count for dexterity sap
  local aff_count = 0
  for aff in pairs(snd.cures.euphoriant) do
    if snd.target_has[snd.cures.euphoriant[aff]] then
      aff_count = aff_count + 1
    end
  end
  if aff_count &gt;= 3 then
  return true
  else
  return false
  end
end

function snd.akkari_inquisition()
  local seizeMana = 10.98 + snd.aff_count_mental()*4
  if snd.checkAff("blood_curse") then
    return (seizeMana+4)*1.15
  end
  return seizeMana
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Scourge Affs (Sciomancer and Runecarver)</name>
						<packageName></packageName>
						<script>snd.scourge_affs = {
		"dizziness",
		"nyctophobia",
		"confusion",
		"dementia",
		"faintness",
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Monk Stuff</name>
						<packageName></packageName>
						<script>function cantBeParried()
  if (snd.checkAff("a broken right arm") and snd.checkAff("a broken left arm")) or snd.checkAff("numb_arms") or snd.checkAff("paresis") or snd.checkAff("paralysis") then
		return true
		else
		return false
	end 
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Teradrim/Tidesage stuff</name>
						<packageName></packageName>
						<script>local mirrors = {
    ram = "gutsmash",
    crest = "facesmash",
    clobber = "batter",  
    pitch = "furor",
    buckle = "fracture",
    gybe = "skullbash",
    wreck = "pulp",
    crack = "slam",
  }
local attackDamage = {
  gutsmash = 11.99,
  facesmash = 12.99,
  batter = 13.74,
  furor = 7.79,
  fracture = 12,
  skullbash = 16,
  pulp = 9.41,
  slam = 10,
  barrage1 = 4,
  barrage2 = 3.5,
  barrage3 = 3.06
}

function snd.calcTeradrimLimbDamage(skill)
  local attack = mirrors[skill] or skill
  local damage = attackDamage[attack]
  if attack == "fracture" then
    damage = damage + 4 * math.min(3, snd.limb_bruising[snd.last_hit_limb])
  end
  if snd.hitting == "You" then
    if snd.toggles.targetrune then
      damage = damage *1.05
    end
    if snd.runemarkMajor == "red" then
      damage = damage * 1.25
    elseif snd.runemarkMajor == "blue" then
      damage = damage * 0.75
    end
    if snd.runeMarkMinor == "red" and attack == "fracture" then
      damage = damage * 1.08
    end
  end
  return round(damage,2)
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Target calling</name>
					<packageName></packageName>
					<script>
snd.targeting = {
	auto = false,
	list = {},
  burst = false,
  skip = false
}

snd.e = {
	echo	= function (str, lnb, lna)
		if lnb then echo("\n") end
		cecho(string.format("%s", "&lt;aquamarine&gt;Target Update: &lt;grey&gt;") .. str:title())
		if lna then echo("\n") end
	end,

	warn	= function (str, lnb, lna)
		if lnb then echo("\n") end
		cecho(string.format("%s", "&lt;orange_red&gt;Warning:&lt;navajo_white&gt; ") .. str:title())
		if lna then echo("\n") end
	end,
	}</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Functions for calling</name>
						<packageName></packageName>
						<script>function snd.removeTarget(tar)

	local who = tar:title()

	for k, v in pairs(snd.targeting.list) do
		if v == who then
			table.remove(snd.targeting.list, k)
			snd.e.echo("Removed " .. who .. " from targeting list!", true, true)
			break
		end
	end

end


function snd.addTargetList(str)

	local targets = string.split(str, ", ")
	
	for _, v in ipairs(targets) do
		if table.contains(snd.targeting.list, v) then
		else
			v = v:title()
			table.insert(snd.targeting.list, v)
		end
	end

	snd.displayTargetList()

end


function snd.addSingleTarget(tar, pos)

	if not pos then pos = 1 end
	
	tar = tar:title()
	
	if table.contains(snd.targeting.list, tar) then --! just tidying so we don't end up with the same name in a bunch of places
		for k, v in pairs(snd.targeting.list) do
			if v == tar then
				table.remove(snd.targeting.list, k)
				break
			end
		end
	end
	table.insert(snd.targeting.list, pos, tar)

	snd.displayTargetList()

end


function snd.displayTargetList()

	local string = ""
	
	if #snd.targeting.list == 0 then
		string = "Targeting list is empty!"
	else
		for k,v in ipairs(snd.targeting.list) do
			if k &lt; #snd.targeting.list then
				string = string .. v .. ", "
			elseif #snd.targeting.list == 1 then
				string = string .. v .. "."
			else
				string = string .. v .. "."
			end
		end
	end

	snd.e.echo(string, true, true)

end


function snd.callTargetList()

	if not snd.toggles.calling then return end 
                                          
	local string = "Target list: "
	
	if #snd.targeting.list == 0 then
		string = "Out of targets!"
	else
		for k,v in ipairs(snd.targeting.list) do
			if k &lt; #snd.targeting.list then
				string = string .. v .. ", "
			elseif #snd.targeting.list == 1 then
				string = string .. v .. "."
			else
				string = string .. v .. "."
			end
		end
	end
	
	send("wt " .. string)

end


function snd.clearTargetList()

	snd.targeting.list = {}
	snd.e.echo("Target list cleared!", true, true)
	
	if snd.toggles.calling then 
		send("wt Target list cleared.")
	end

end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Special Cures</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Expunge</name>
						<packageName></packageName>
						<script>function snd.handleExpunge()
  for aff in pairs(snd.physical_affs) do
    if snd.checkAff(snd.physical_affs[aff]) then
      if string.find(snd.physical_affs[aff], "_crippled") then
        local string = string.gsub(snd.physical_affs[aff], "_crippled", "")
        string = string:gsub("_", " ")
        if snd.limb_status[string] == "healed" then
          snd.target_cured(snd.physical_affs[aff])
          break
        end
      else
        snd.target_cured(snd.physical_affs[aff])
        break
      end
    end
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Rage</name>
						<packageName></packageName>
						<script>function snd.handleRage()
  for _,aff in pairs(snd.cures.steroid) do
    if snd.checkAff(aff) then
      snd.target_cured(aff)
      break
    end
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Fitness</name>
						<packageName></packageName>
						<script>function snd.handleFitness()
 snd.target_cured("asthma")
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Restore</name>
						<packageName></packageName>
						<script>function snd.handleRestore()
  local limbs = {"right arm", "left arm", "left leg", "right leg"}
 
  for _, v in pairs(limbs) do

    if snd.checkAff(v:gsub(" ", "_").."_crippled") and snd.limb_status[v] == "healed" then
		  snd.target_cured(v:gsub(" ", "_").."_crippled")
    end
  end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Timers</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>setup + query function</name>
						<packageName></packageName>
						<script>
snd.timers = snd.timers or {}
snd.timers.pill = snd.timers.pill or {}
snd.timers.focus = snd.timers.focus or {}
snd.timers.tree = snd.timers.tree or {}
snd.timers.fitness = snd.timers.fitness or {}
snd.timers.restoration = snd.timers.restoration or {}
snd.timers.rebounding = snd.timers.rebounding or {}
snd.timers.induce = snd.timers.induce or {}
snd.timers.eqbal = snd.timers.eqbal or {}


for k, _ in pairs(snd.timers) do
  snd.timers[k] = {["start"] = nil, ["limit"] = nil}
end

function snd.timer_check(which, time_left, mode)
  if mode == nil then
    mode = "more than"
  end
  if
    snd.timers[which] ~= nil and
    snd.timers[which]["start"] ~= nil and
    snd.timers[which]["limit"] ~= nil
  then
    local now = os.clock()
    local endtime = snd.timers[which]["start"] + snd.timers[which]["limit"]
    if mode == "more than" then
      if endtime - now &gt; time_left then
        return true
      else
        return false
      end
    elseif mode == "less than" then
      if endtime - now &lt; time_left and (balance ~= "rebounding" or endtime - now &gt; 0) then
        return true
      else
        return false
      end
    end
  else
    if mode == "less than" and balance ~= "rebounding" then
      return true
    else
      return false
    end
  end
end

function snd.timer_get_time(which)
  if
    snd.timers[which] ~= nil and
    snd.timers[which]["start"] ~= nil and
    snd.timers[which]["limit"] ~= nil
  then
    local time = (snd.timers[which]["start"] + snd.timers[which]["limit"]) - os.clock()
    return time &gt; 0 and time or 0
  else
    return 0
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>method specific timer functions</name>
						<packageName></packageName>
						<script>function snd.track_pill(target)
  if target:lower() == snd.target:lower() then
    snd.timers.pill.start = os.clock()
    local limit = 1.9
    snd.timers.pill.limit = limit
  end
end

function snd.track_focus(target)
  if target:lower() == snd.target:lower() then
    snd.timers.focus.start = os.clock()
    local limit = 5
    if snd.checkAff("mental_disruption") then
      limit = 10
    elseif snd.checkAff("mental_fatigue") then
      limit = 7
    end
    snd.timers.focus.limit = limit
  end
end

function snd.track_rebounding(target)
  if target:lower() == snd.target:lower() then
    snd.timers.rebounding.start = os.clock()
    local limit = 6.5
    snd.timers.rebounding.limit = limit
  end
end

function snd.track_rebounding_up(target)
  if target:lower() == snd.target:lower() then
    snd.timers.rebounding.limit = os.clock()
  end
end

function snd.track_restoration(target)
  if target:lower() == snd.target:lower() then
    snd.timers.restoration.start = os.clock()
    local limit = 4.15
    if snd.checkAff("rot_body") then
      limit = limit+4.3
    end
    snd.timers.restoration.limit = limit
  end
end

function snd.track_tree(target)
  if target:lower() == snd.target:lower() then
    snd.timers.tree.start = os.clock()
    local limit = 10
    snd.timers.tree.limit = limit
  end
end

function snd.track_induce(target)
  if target:lower() == snd.target:lower() then
    snd.timers.induce.start = os.clock()
    local limit = 11
    snd.timers.induce.limit = limit
  end
end

function snd.track_fitness(target)
  if target:lower() == snd.target:lower() then
    snd.timers.fitness.start = os.clock()
    snd.timers.fitness.limit = 20
  end
end

function snd.track_eqbal(time)
  if not snd.timer_check("eqbal", time) then
    snd.timers.eqbal.start = os.clock()
    snd.timers.eqbal.limit = time
  end
end

function snd.eqbal_timer_check(timer, time, mode)
    if mode == nil then
      mode = "more than"
    end
    local eqbal_time = snd.timer_get_time("eqbal")
    local timer_time = snd.timer_get_time(timer)
    local adjusted_time = math.max(0, timer_time - eqbal_time)
    return (mode == "more than") == (adjusted_time &gt; time)
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Ylem</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>ylem variables</name>
					<packageName></packageName>
					<script>
snd.ylem_loaded = true

ylm = ylm or {}

ylm.active = false
ylm.next_zone = "none"
ylm.foci = 0
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>path</name>
					<packageName></packageName>
					<script>
ylm.path = {
 
v1680 = "20389",
v20389 = "13253",
v13253 = "60762",
v60762 = "26690",
v26690 = "26668",
v26668 = "10041",
v10041 = "35117",
v35117 = "62223",
v62223 = "26920",
v26920 = "35217",
v35217 = "60845",
v60845 = "46341",
v46341 = "32704",
v32704 = "45483",
v45483 = "14729",
v14729 = "1644",
v1644 = "56942",
v56942 = "1602",
v1602 = "19344",
v19344 = "62798",
v62798 = "1433",
v1433 = "36677",
v36677 = "3018",
v3018 = "16438",
v16438 = "36865",
v36865 = "6",
v6 = "32237",
v32237 = "26841",
v26841 = "38090",
v38090 = "26994",
v26994 = "11326",
v11326 = "11311",
v11311 = "77437",
v77437 = "25738",
v25738 = "19602",
v19602 = "53444",
v53444 = "3430",
v3430 = "5598",
v5598 = "32908",
v32908 = "23899",
v23899 = "5692",
v5692 = "21001",
v21001 = "59979",
v59979 = "19323",
v19323 = "42831",
v42831 = "768",
v768 = "973",
v973 = "71926",
v71926 = "19810",
v19810 = "71554",
v71554 = "31552",
v31552 = "19987",
v19987 = "9510",
v9510 = "19576",
v19576 = "64288",
v64288 = "55101",
v55101 = "17034",
v17034 = "18462",
v18462 = "62996",
v62996 = "73508",
v73508 = "4163",
v4163 = "3276",
v3276 = "63351",
v63351 = "20932",
v20932 = "20281",
v20281 = "71815",
v71815 = "15820",
v15820 = "70916",
v70916 = "21908",
v21908 = "51157",
v51157 = "62383",
v62383 = "18082",
v18082 = "49875",
v49875 = "25969",
v25969 = "44816",
v44816 = "18601",
v18601 = "22477",
v22477 = "4078",
v4078 = "8854",
v8854 = "18467",
v18467 = "63763",
v63763 = "14439",
v14439 = "63730",
v63730 = "20855",
v20855 = "8795",
v8795 = "61323",
v61323 = "58675",
v58675 = "54699",
v54699 = "13425",
v13425 = "59187",
v59187 = "22824",
v22824 = "23791",
v23791 = "23140",
v23140 = "22702",
v22702 = "16282",
v16282 = "72008",
v72008 = "47147",
v47147 = "1288",
v1288 = "63306",
v63306 = "56648",
v56648 = "4740",
v4740 = "61928",
v61928 = "4808",
v4808 = "65189",
v65189 = "49749",
v49749 = "64608",
v64608 = "64478",
v64478 = "64396",
v64396 = "11794",
v11794 = "60181",
v60181 = "11860",
v11860 = "74377",
v74377 = "36271",
v36271 = "1012",
v1012 = "3496",
v3496 = "71074",
v71074 = "58789",
v58789 = "17612",
v17612 = "62102",
v62102 = "276",
v276 = "16426",
v16426 = "10812",
v10812 = "34760",
v34760 = "72513",
v72513 = "1000",
v1000 = "1774",
v1774 = "3106",
v3106 = "11634",
v11634 = "11988",
v11988 = "11994",
v11994 = "56435",
v56435 = "25408",
v25408 = "59862",
v59862 = "18434",
v18434 = "11412",
v11412 = "19854",
v19854 = "31576",
v31576 = "55276",
v55276 = "58912",
v58912 = "20835",
v20835 = "21286",
v21286 = "23202",
v23202 = "77434",
v77434 = "57559",
v57559 = "4964",
v4964 = "2036",
v2036 = "38894",
v38894 = "16274",
v16274 = "18415",
v18415 = "19320",
v19320 = "24548",
v24548 = "5028",
v5028 = "3887",
v3887 = "57334",
v57334 = "9853",
v9853 = "59609",
v59609 = "53230",
v53230 = "10086",
v10086 = "16584",
v16584 = "16706",
v16706 = "17069",
v17069 = "60726",
v60726 = "15344",
v15344 = "city"
 
}</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Questing</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>quest variables</name>
					<packageName></packageName>
					<script>
snd.questing_loaded = true

snd.quest_items = {
["Three Widows"] = {"a handful of hay", "a packet of seeds", "a simple net", "a simple pickaxe", "a small grey rock"},
["Mount Humgurd"] = {"a chunk of mixed ore"},
["the Siroccian Mountains"] = {"a lump of flaking coal", "a rock of silver ore", "a hematite ore of iron", "a gold nugget"},
}</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>run quests</name>
					<packageName></packageName>
					<script>
function snd.runQuests()
  if snd.toggles.questing then
   if snd.quest_items[snd.my.area] then
    local need_items = {}
    for item in pairs(snd.items) do
  	 if table.contains(snd.quest_items[snd.my.area], item) then
  	  for id in pairs(snd.items[item]) do
  		 table.insert(need_items, snd.items[item][id])
  		end
  	 end
  	end
  	if #need_items &gt;= 1 and not snd.waiting.quest_get then
  	 snd.send("qeb get "..table.concat(need_items, snd.sep.."get "))
  	 snd.waiting.quest_get = true
  	 tempTimer(snd.delay(), [[snd.waiting.quest_get = false]])
  	end
   end
   if snd.my.area == "the mines of Mount Helba" then
    if snd.items["a rich vein of iron ore"] or snd.items["a vein of iron ore"] then
      snd.send("qeb mine vein")
  	--elseif snd.items["a pile of rubble"] then
      --snd.send("dig rubble")
    end
   end
 end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Fishing</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>GetFishingHoles</name>
					<packageName></packageName>
					<script>function get_fishing_holes(search_string, display_results, display_full_results)

	if not fishing_holes then
		load_fishing_db()
	end

	search_string = search_string:lower()
	local results = {}
	local result_strings = {}

	for k,v in pairs(fishing_holes) do 

		v.fish = v.fish or {}
		local matched_room = false
		-- Look for typetext.
		if v.type:lower():find(search_string) then
			table.insert(results, v) 
			result_strings[v.name] = v.type
			matched_room = true
		end

		-- Look for nametext.
		if not matched_room and k:lower():find(search_string) then
			table.insert(results, v) 
			result_strings[v.name] = k
			matched_room = true
		end
	
		-- Look for fish.
		if not matched_room then
			for _, fishtype in pairs(v.fish) do
				if fishtype:lower():find(search_string) then
					local found = false
					for _, j in pairs(results) do
						if j.name == v.name and j.fish == fishtype then 
							found = true
							break
						end
					end
					if not found then 
						table.insert(results, v) 
						result_strings[v.name] = fishtype
					end
				end
			end
		end
	end

	if display_results then
		if #results == 0 then
			hecho("|cccccccNo results for '" .. search_string .. "'.\n")
		else
	
			for k,v in pairs(result_strings) do
				local startstr, endstr = result_strings[k]:lower():find(search_string)
				result_strings[k] = result_strings[k]:sub(1, startstr-1) .. "|cff0000" .. result_strings[k]:sub(startstr, endstr) .. "|ccccccc" .. result_strings[k]:sub(endstr+1)
			end

			hecho("|cccccccResults for '" .. search_string .. "':\n")
			for k,v in pairs(results) do
				if display_full_results then
					hecho("   " .. v.name:title() .. string.rep(" ", 30 - v.name:len()) .. "(" .. result_strings[v.name] .. ")\n")
					hecho("     " .. v.type:title() .. ", " .. #v.fish .. " type(s) of fish, fishing vnum v" .. v.rooms[1] .. ".\n\n")
				else
					hecho("   " .. v.name:title() .. string.rep(" ", 30 - v.name:len()) .. "(" .. result_strings[v.name] .. ")\n")
				end
			end
			echo("\n")
		end
	end

	return results
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>SaveLoad</name>
					<packageName></packageName>
					<script>function load_fishing_db()
	local path = getMudletHomeDir().."/aetoliaFishingDB.sav"
	fishing_holes = {}
	if io.exists(path) then
		table.load(path,fishing_holes)
	end
end

function save_fishing_db()
  if not fishing_holes then return false end
  table.save(getMudletHomeDir().."/aetoliaFishingDB.sav", fishing_holes)
end

function load_fishinginfo_db()
	local getfishinfo = getMudletHomeDir().."/aetoliaFishingInfoDB.sav"
	snd.fishinginfo = snd.fishinginfo or {}
	if io.exists(getfishinfo) then
		table.load(getfishinfo,snd.fishinginfo)
	end
end

function save_fishinginfo_db()
  if not snd.fishinginfo then return false end
  table.save(getMudletHomeDir().."/aetoliaFishingInfoDB.sav", snd.fishinginfo)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Fishing function</name>
					<packageName></packageName>
					<script>function Fishingfunction() 

  if Reeling == "cut" then
    send("qeb fishing cut", false)
    currently_fishing = false
  elseif Reeling == "recast" then
		send("qeb fishing cast", false)
	elseif Fishingcaught then
		if Reeling == "reel" then
			send("qeb fishing reel", false)
		elseif Reeling == "lead" then
		  send("qeb fishing lead", false)
		end
  end
end

snd.fishinginfo = snd.fishinginfo or 
{
  bucket_capacity =  100,
  currentfish =  0,
}</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Fish Message</name>
					<packageName></packageName>
					<script>function snd.fishmsg(string)
  cecho("\n&lt;white&gt;[&lt;LightSeaGreen&gt;FISHING&lt;white&gt;] "..string)
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>Sunder</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>0</keyModifier>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Movement</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>north</name>
					<packageName></packageName>
					<script>expandAlias("n", false)
</script>
					<command></command>
					<keyCode>56</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>south</name>
					<packageName></packageName>
					<script>expandAlias("s", false)</script>
					<command></command>
					<keyCode>16777220</keyCode>
					<keyModifier>0</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>south</name>
					<packageName></packageName>
					<script>expandAlias("s", false)</script>
					<command></command>
					<keyCode>50</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>east</name>
					<packageName></packageName>
					<script>expandAlias("e", false)</script>
					<command></command>
					<keyCode>54</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>west</name>
					<packageName></packageName>
					<script>expandAlias("w", false)</script>
					<command></command>
					<keyCode>52</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>northeast</name>
					<packageName></packageName>
					<script>expandAlias("ne", false)</script>
					<command></command>
					<keyCode>57</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>northwest</name>
					<packageName></packageName>
					<script>expandAlias("nw", false)</script>
					<command></command>
					<keyCode>55</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>southeast</name>
					<packageName></packageName>
					<script>expandAlias("se", false)</script>
					<command></command>
					<keyCode>51</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>southwest</name>
					<packageName></packageName>
					<script>expandAlias("sw", false)</script>
					<command></command>
					<keyCode>49</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>look</name>
					<packageName></packageName>
					<script>send("look")</script>
					<command></command>
					<keyCode>53</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>up</name>
					<packageName></packageName>
					<script>expandAlias("up", false)</script>
					<command></command>
					<keyCode>45</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>down</name>
					<packageName></packageName>
					<script>expandAlias("d", false)</script>
					<command></command>
					<keyCode>43</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>in</name>
					<packageName></packageName>
					<script>expandAlias("in", false)</script>
					<command></command>
					<keyCode>47</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>out</name>
					<packageName></packageName>
					<script>expandAlias("out", false)</script>
					<command></command>
					<keyCode>42</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
			</KeyGroup>
		</KeyGroup>
	</KeyPackage>
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
